define("discourse/plugins/chat/discourse/adapters/chat-message", ["exports", "discourse/adapters/rest"], function (_exports, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class ChatMessage extends _rest.default {
    pathFor(store, type, findArgs) {
      if (findArgs.targetMessageId) {
        return `/chat/lookup/${findArgs.targetMessageId}.json?chat_channel_id=${findArgs.channelId}`;
      }
      let path = `/chat/${findArgs.channelId}/messages.json?page_size=${findArgs.pageSize}`;
      if (findArgs.messageId) {
        path += `&message_id=${findArgs.messageId}`;
      }
      if (findArgs.direction) {
        path += `&direction=${findArgs.direction}`;
      }
      return path;
    }
    apiNameFor() {
      return "chat-message";
    }
  }
  _exports.default = ChatMessage;
});
define("discourse/plugins/chat/discourse/admin-chat-route-map", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    resource: "admin.adminPlugins",
    path: "/plugins",
    map() {
      this.route("chat");
    }
  };
});
define("discourse/plugins/chat/discourse/chat-route-map", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  function _default() {
    this.route("chat", {
      path: "/chat"
    }, function () {
      this.route("channel", {
        path: "/c/:channelTitle/:channelId"
      }, function () {
        this.route("near-message", {
          path: "/:messageId"
        });
        this.route("threads", {
          path: "/t"
        });
        this.route("thread", {
          path: "/t/:threadId"
        }, function () {
          this.route("near-message", {
            path: "/:messageId"
          });
        });
      });
      this.route("threads", {
        path: "/threads"
      });
      this.route("channel.info", {
        path: "/c/:channelTitle/:channelId/info"
      }, function () {
        this.route("members", {
          path: "/members"
        });
        this.route("settings", {
          path: "/settings"
        });
      });
      this.route("browse", {
        path: "/browse"
      }, function () {
        this.route("all", {
          path: "/all"
        });
        this.route("closed", {
          path: "/closed"
        });
        this.route("open", {
          path: "/open"
        });
        this.route("archived", {
          path: "/archived"
        });
      });
      this.route("message", {
        path: "/message/:messageId"
      });
    });
  }
});
define("discourse/plugins/chat/discourse/components/channel-title/index", ["exports", "@glimmer/component", "@ember/helper", "@ember/service", "@ember/template", "discourse/components/plugin-outlet", "discourse/components/user-status-message", "discourse/helpers/replace-emoji", "discourse-common/helpers/d-icon", "discourse/plugins/chat/discourse/components/chat-user-avatar", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _service, _template, _pluginOutlet, _userStatusMessage, _replaceEmoji, _dIcon, _chatUserAvatar, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelTitle = _exports.default = (_class = (_class2 = class ChatChannelTitle extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
    }
    get firstUser() {
      return this.args.channel.chatable.users[0];
    }
    get users() {
      return this.args.channel.chatable.users;
    }
    get groupDirectMessage() {
      return this.args.channel.isDirectMessageChannel && this.args.channel.chatable.group;
    }
    get groupsDirectMessageTitle() {
      return this.args.channel.title || this.usernames;
    }
    get usernames() {
      return this.users.mapBy("username").join(", ");
    }
    get channelColorStyle() {
      return (0, _template.htmlSafe)(`color: #${this.args.channel.chatable.color}`);
    }
    get showUserStatus() {
      return !!(this.users.length === 1 && this.users[0].status);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @channel.isDirectMessageChannel}}
        <div class="chat-channel-title is-dm">
          {{#if this.groupDirectMessage}}
            <span class="chat-channel-title__users-count">
              {{@channel.membershipsCount}}
            </span>
          {{else}}
            <div class="chat-channel-title__avatar">
              <ChatUserAvatar @user={{this.firstUser}} @interactive={{false}} />
            </div>
          {{/if}}
  
          <div class="chat-channel-title__user-info">
            <div class="chat-channel-title__usernames">
              {{#if this.groupDirectMessage}}
                <span class="chat-channel-title__name">
                  {{this.groupsDirectMessageTitle}}
                </span>
              {{else}}
                <span class="chat-channel-title__name">
                  {{this.firstUser.username}}
                </span>
                {{#if this.showUserStatus}}
                  <UserStatusMessage
                    @status={{get this.users "0.status"}}
                    @showDescription={{if this.site.mobileView "true"}}
                    class="chat-channel-title__user-status-message"
                  />
                {{/if}}
                <PluginOutlet
                  @name="after-chat-channel-username"
                  @outletArgs={{hash user=@user}}
                  @tagName=""
                  @connectorTagName=""
                />
              {{/if}}
  
            </div>
          </div>
  
          {{#if (has-block)}}
            {{yield}}
          {{/if}}
        </div>
      {{else if @channel.isCategoryChannel}}
        <div class="chat-channel-title is-category">
          <span
            class="chat-channel-title__category-badge"
            style={{this.channelColorStyle}}
          >
            {{icon "d-chat"}}
            {{#if @channel.chatable.read_restricted}}
              {{icon "lock" class="chat-channel-title__restricted-category-icon"}}
            {{/if}}
          </span>
          <span class="chat-channel-title__name">
            {{replaceEmoji @channel.title}}
          </span>
  
          {{#if (has-block)}}
            {{yield}}
          {{/if}}
        </div>
      {{/if}}
    
  */
  {
    "id": "ZbU75Kba",
    "block": "[[[1,\"\\n\"],[41,[30,1,[\"isDirectMessageChannel\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-channel-title is-dm\"],[12],[1,\"\\n\"],[41,[30,0,[\"groupDirectMessage\"]],[[[1,\"          \"],[10,1],[14,0,\"chat-channel-title__users-count\"],[12],[1,\"\\n            \"],[1,[30,1,[\"membershipsCount\"]]],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],[[[1,\"          \"],[10,0],[14,0,\"chat-channel-title__avatar\"],[12],[1,\"\\n            \"],[8,[32,0],null,[[\"@user\",\"@interactive\"],[[30,0,[\"firstUser\"]],false]],null],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]]],[1,\"\\n        \"],[10,0],[14,0,\"chat-channel-title__user-info\"],[12],[1,\"\\n          \"],[10,0],[14,0,\"chat-channel-title__usernames\"],[12],[1,\"\\n\"],[41,[30,0,[\"groupDirectMessage\"]],[[[1,\"              \"],[10,1],[14,0,\"chat-channel-title__name\"],[12],[1,\"\\n                \"],[1,[30,0,[\"groupsDirectMessageTitle\"]]],[1,\"\\n              \"],[13],[1,\"\\n\"]],[]],[[[1,\"              \"],[10,1],[14,0,\"chat-channel-title__name\"],[12],[1,\"\\n                \"],[1,[30,0,[\"firstUser\",\"username\"]]],[1,\"\\n              \"],[13],[1,\"\\n\"],[41,[30,0,[\"showUserStatus\"]],[[[1,\"                \"],[8,[32,1],[[24,0,\"chat-channel-title__user-status-message\"]],[[\"@status\",\"@showDescription\"],[[28,[32,2],[[30,0,[\"users\"]],\"0.status\"],null],[52,[30,0,[\"site\",\"mobileView\"]],\"true\"]]],null],[1,\"\\n\"]],[]],null],[1,\"              \"],[8,[32,3],null,[[\"@name\",\"@outletArgs\",\"@tagName\",\"@connectorTagName\"],[\"after-chat-channel-username\",[28,[32,4],null,[[\"user\"],[[30,2]]]],\"\",\"\"]],null],[1,\"\\n\"]],[]]],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\\n\"],[41,[48,[30,3]],[[[1,\"          \"],[18,3,null],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n\"]],[]],[[[41,[30,1,[\"isCategoryChannel\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-channel-title is-category\"],[12],[1,\"\\n        \"],[10,1],[14,0,\"chat-channel-title__category-badge\"],[15,5,[30,0,[\"channelColorStyle\"]]],[12],[1,\"\\n          \"],[1,[28,[32,5],[\"d-chat\"],null]],[1,\"\\n\"],[41,[30,1,[\"chatable\",\"read_restricted\"]],[[[1,\"            \"],[1,[28,[32,5],[\"lock\"],[[\"class\"],[\"chat-channel-title__restricted-category-icon\"]]]],[1,\"\\n\"]],[]],null],[1,\"        \"],[13],[1,\"\\n        \"],[10,1],[14,0,\"chat-channel-title__name\"],[12],[1,\"\\n          \"],[1,[28,[32,6],[[30,1,[\"title\"]]],null]],[1,\"\\n        \"],[13],[1,\"\\n\\n\"],[41,[48,[30,3]],[[[1,\"          \"],[18,3,null],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n    \"]],[]],null]],[]]],[1,\"  \"]],[\"@channel\",\"@user\",\"&default\"],false,[\"if\",\"has-block\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/channel-title/index.js",
    "scope": () => [_chatUserAvatar.default, _userStatusMessage.default, _helper.get, _pluginOutlet.default, _helper.hash, _dIcon.default, _replaceEmoji.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/channels-list", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/helper", "@ember/modifier", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/routing", "@ember/runloop", "@ember/service", "discourse/components/d-button", "discourse/components/plugin-outlet", "discourse/helpers/concat-class", "discourse/helpers/noop", "discourse-common/helpers/d-icon", "discourse-common/helpers/i18n", "discourse-common/utils/decorators", "truth-helpers/helpers/and", "truth-helpers/helpers/not", "discourse/plugins/chat/discourse/components/chat/modal/new-message", "discourse/plugins/chat/discourse/modifiers/chat/on-resize", "discourse/plugins/chat/discourse/components/chat-channel-row", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _helper, _modifier, _object, _didInsert, _routing, _runloop, _service, _dButton, _pluginOutlet, _concatClass, _noop, _dIcon, _i18n, _decorators, _and, _not, _newMessage, _onResize, _chatChannelRow, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChannelsList = _exports.default = (_class = (_class2 = class ChannelsList extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor3, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor4, this);
      _initializerDefineProperty(this, "site", _descriptor5, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor6, this);
      _initializerDefineProperty(this, "session", _descriptor7, this);
      _initializerDefineProperty(this, "currentUser", _descriptor8, this);
      _initializerDefineProperty(this, "modal", _descriptor9, this);
      _initializerDefineProperty(this, "hasScrollbar", _descriptor10, this);
    }
    computeHasScrollbar(element1) {
      this.hasScrollbar = element1.scrollHeight > element1.clientHeight;
    }
    computeResizedEntries(entries1) {
      this.computeHasScrollbar(entries1[0].target);
    }
    openNewMessageModal() {
      this.modal.show(_newMessage.default);
    }
    get showMobileDirectMessageButton() {
      return this.site.mobileView && this.canCreateDirectMessageChannel;
    }
    get inSidebar() {
      return this.args.inSidebar ?? false;
    }
    get publicMessageChannelsEmpty() {
      return this.chatChannelsManager.publicMessageChannels?.length === 0;
    }
    get createDirectMessageChannelLabel() {
      if (!this.canCreateDirectMessageChannel) {
        return "chat.direct_messages.cannot_create";
      }
      return "chat.direct_messages.new";
    }
    get showDirectMessageChannels() {
      return this.canCreateDirectMessageChannel || this.chatChannelsManager.directMessageChannels?.length > 0;
    }
    get canCreateDirectMessageChannel() {
      return this.chat.userCanDirectMessage;
    }
    get displayPublicChannels() {
      if (!this.siteSettings.enable_public_channels) {
        return false;
      }
      if (this.publicMessageChannelsEmpty) {
        return this.currentUser?.staff || this.currentUser?.has_joinable_public_channels;
      }
      return true;
    }
    get directMessageChannelClasses() {
      return `channels-list-container direct-message-channels ${this.inSidebar ? "collapsible-sidebar-section" : ""}`;
    }
    get hasUnreadThreads() {
      return this.chatChannelsManager.publicMessageChannels.some(channel1 => channel1.unreadThreadsCount > 0);
    }
    toggleChannelSection(section1) {
      this.args.toggleSection(section1);
    }
    didRender() {
      super.didRender(...arguments);
      (0, _runloop.schedule)("afterRender", this._applyScrollPosition);
    }
    storeScrollPosition() {
      if (this.chatStateManager.isDrawerActive) {
        return;
      }
      const scrollTop1 = document.querySelector(".channels-list")?.scrollTop || 0;
      this.session.channelsListPosition = scrollTop1;
    }
    _applyScrollPosition() {
      if (this.chatStateManager.isDrawerActive) {
        return;
      }
      const position1 = this.chatStateManager.isFullPageActive ? this.session.channelsListPosition || 0 : 0;
      const scroller1 = document.querySelector(".channels-list");
      scroller1.scrollTo(0, position1);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.showMobileDirectMessageButton}}
        <DButton
          @icon="plus"
          class="no-text btn-flat open-new-message-btn keep-mobile-sidebar-open btn-floating"
          @action={{this.openNewMessageModal}}
          title={{i18n this.createDirectMessageChannelLabel}}
        />
      {{/if}}
  
      <div
        role="region"
        aria-label={{i18n "chat.aria_roles.channels_list"}}
        class={{concatClass
          "channels-list"
          (if this.hasScrollbar "has-scrollbar")
        }}
        {{on
          "scroll"
          (if
            this.chatStateManager.isFullPageActive this.storeScrollPosition (noop)
          )
        }}
        {{didInsert this.computeHasScrollbar}}
        {{onResize this.computeResizedEntries}}
      >
  
        <LinkTo @route="chat.threads" class="chat-channel-row --threads">
          <span class="chat-channel-title">
            {{dIcon "discourse-threads" class="chat-user-threads__icon"}}
            {{i18n "chat.my_threads.title"}}
          </span>
          {{#if this.hasUnreadThreads}}
            <div class="c-unread-indicator">
              <div class="c-unread-indicator__number">&nbsp;</div>
            </div>
          {{/if}}
        </LinkTo>
  
        {{#if this.displayPublicChannels}}
          <div class="chat-channel-divider public-channels-section">
            {{#if this.inSidebar}}
              <span
                class="title-caret"
                id="public-channels-caret"
                role="button"
                title="toggle nav list"
                {{on "click" (fn this.toggleChannelSection "public-channels")}}
                data-toggleable="public-channels"
              >
                {{dIcon "angle-up"}}
              </span>
            {{/if}}
            <span class="channel-title">{{i18n "chat.chat_channels"}}</span>
  
            <LinkTo
              @route="chat.browse"
              class="btn no-text btn-flat open-browse-page-btn title-action"
              title={{i18n "chat.channels_list_popup.browse"}}
            >
              {{dIcon "pencil-alt"}}
            </LinkTo>
          </div>
  
          <div
            id="public-channels"
            class={{concatClass
              "channels-list-container"
              "public-channels"
              (if this.inSidebar "collapsible-sidebar-section")
            }}
          >
            {{#if this.publicChannelsEmpty}}
              <div class="public-channel-empty-message">
                <span class="channel-title">{{i18n
                    "chat.no_public_channels"
                  }}</span>
                <LinkTo @route="chat.browse">
                  {{i18n "chat.click_to_join"}}
                </LinkTo>
              </div>
            {{else}}
              {{#each
                this.chatChannelsManager.publicMessageChannels
                as |channel|
              }}
                <ChatChannelRow
                  @channel={{channel}}
                  @options={{hash settingsButton=true}}
                />
              {{/each}}
            {{/if}}
  
          </div>
        {{/if}}
  
        <PluginOutlet
          @name="below-public-chat-channels"
          @tagName=""
          @outletArgs={{hash inSidebar=this.inSidebar}}
        />
  
        {{#if this.showDirectMessageChannels}}
          <div class="chat-channel-divider direct-message-channels-section">
            {{#if this.inSidebar}}
              <span
                class="title-caret"
                id="direct-message-channels-caret"
                role="button"
                title="toggle nav list"
                {{on
                  "click"
                  (fn this.toggleChannelSection "direct-message-channels")
                }}
                data-toggleable="direct-message-channels"
              >
                {{dIcon "angle-up"}}
              </span>
            {{/if}}
            <span class="channel-title">{{i18n
                "chat.direct_messages.title"
              }}</span>
  
            {{#if
              (and
                this.canCreateDirectMessageChannel
                (not this.showMobileDirectMessageButton)
              )
            }}
              <DButton
                @icon="plus"
                class="no-text btn-flat open-new-message-btn"
                @action={{this.openNewMessageModal}}
                title={{i18n this.createDirectMessageChannelLabel}}
              />
            {{/if}}
          </div>
        {{/if}}
  
        <div
          id="direct-message-channels"
          class={{this.directMessageChannelClasses}}
        >
          {{#each
            this.chatChannelsManager.truncatedDirectMessageChannels
            as |channel|
          }}
            <ChatChannelRow
              @channel={{channel}}
              @options={{hash leaveButton=true}}
            />
          {{/each}}
        </div>
      </div>
    
  */
  {
    "id": "vTDocHnK",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"showMobileDirectMessageButton\"]],[[[1,\"      \"],[8,[32,0],[[24,0,\"no-text btn-flat open-new-message-btn keep-mobile-sidebar-open btn-floating\"],[16,\"title\",[28,[32,1],[[30,0,[\"createDirectMessageChannelLabel\"]]],null]]],[[\"@icon\",\"@action\"],[\"plus\",[30,0,[\"openNewMessageModal\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n    \"],[11,0],[24,\"role\",\"region\"],[16,\"aria-label\",[28,[32,1],[\"chat.aria_roles.channels_list\"],null]],[16,0,[28,[32,2],[\"channels-list\",[52,[30,0,[\"hasScrollbar\"]],\"has-scrollbar\"]],null]],[4,[32,3],[\"scroll\",[52,[30,0,[\"chatStateManager\",\"isFullPageActive\"]],[30,0,[\"storeScrollPosition\"]],[28,[32,4],null,null]]],null],[4,[32,5],[[30,0,[\"computeHasScrollbar\"]]],null],[4,[32,6],[[30,0,[\"computeResizedEntries\"]]],null],[12],[1,\"\\n\\n      \"],[8,[32,7],[[24,0,\"chat-channel-row --threads\"]],[[\"@route\"],[\"chat.threads\"]],[[\"default\"],[[[[1,\"\\n        \"],[10,1],[14,0,\"chat-channel-title\"],[12],[1,\"\\n          \"],[1,[28,[32,8],[\"discourse-threads\"],[[\"class\"],[\"chat-user-threads__icon\"]]]],[1,\"\\n          \"],[1,[28,[32,1],[\"chat.my_threads.title\"],null]],[1,\"\\n        \"],[13],[1,\"\\n\"],[41,[30,0,[\"hasUnreadThreads\"]],[[[1,\"          \"],[10,0],[14,0,\"c-unread-indicator\"],[12],[1,\"\\n            \"],[10,0],[14,0,\"c-unread-indicator__number\"],[12],[1,\" \"],[13],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"      \"]],[]]]]],[1,\"\\n\\n\"],[41,[30,0,[\"displayPublicChannels\"]],[[[1,\"        \"],[10,0],[14,0,\"chat-channel-divider public-channels-section\"],[12],[1,\"\\n\"],[41,[30,0,[\"inSidebar\"]],[[[1,\"            \"],[11,1],[24,0,\"title-caret\"],[24,1,\"public-channels-caret\"],[24,\"role\",\"button\"],[24,\"title\",\"toggle nav list\"],[24,\"data-toggleable\",\"public-channels\"],[4,[32,3],[\"click\",[28,[32,9],[[30,0,[\"toggleChannelSection\"]],\"public-channels\"],null]],null],[12],[1,\"\\n              \"],[1,[28,[32,8],[\"angle-up\"],null]],[1,\"\\n            \"],[13],[1,\"\\n\"]],[]],null],[1,\"          \"],[10,1],[14,0,\"channel-title\"],[12],[1,[28,[32,1],[\"chat.chat_channels\"],null]],[13],[1,\"\\n\\n          \"],[8,[32,7],[[24,0,\"btn no-text btn-flat open-browse-page-btn title-action\"],[16,\"title\",[28,[32,1],[\"chat.channels_list_popup.browse\"],null]]],[[\"@route\"],[\"chat.browse\"]],[[\"default\"],[[[[1,\"\\n            \"],[1,[28,[32,8],[\"pencil-alt\"],null]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"],[13],[1,\"\\n\\n        \"],[10,0],[14,1,\"public-channels\"],[15,0,[28,[32,2],[\"channels-list-container\",\"public-channels\",[52,[30,0,[\"inSidebar\"]],\"collapsible-sidebar-section\"]],null]],[12],[1,\"\\n\"],[41,[30,0,[\"publicChannelsEmpty\"]],[[[1,\"            \"],[10,0],[14,0,\"public-channel-empty-message\"],[12],[1,\"\\n              \"],[10,1],[14,0,\"channel-title\"],[12],[1,[28,[32,1],[\"chat.no_public_channels\"],null]],[13],[1,\"\\n              \"],[8,[32,7],null,[[\"@route\"],[\"chat.browse\"]],[[\"default\"],[[[[1,\"\\n                \"],[1,[28,[32,1],[\"chat.click_to_join\"],null]],[1,\"\\n              \"]],[]]]]],[1,\"\\n            \"],[13],[1,\"\\n\"]],[]],[[[42,[28,[31,2],[[28,[31,2],[[30,0,[\"chatChannelsManager\",\"publicMessageChannels\"]]],null]],null],null,[[[1,\"              \"],[8,[32,10],null,[[\"@channel\",\"@options\"],[[30,1],[28,[32,11],null,[[\"settingsButton\"],[true]]]]],null],[1,\"\\n\"]],[1]],null]],[]]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[8,[32,12],null,[[\"@name\",\"@tagName\",\"@outletArgs\"],[\"below-public-chat-channels\",\"\",[28,[32,11],null,[[\"inSidebar\"],[[30,0,[\"inSidebar\"]]]]]]],null],[1,\"\\n\\n\"],[41,[30,0,[\"showDirectMessageChannels\"]],[[[1,\"        \"],[10,0],[14,0,\"chat-channel-divider direct-message-channels-section\"],[12],[1,\"\\n\"],[41,[30,0,[\"inSidebar\"]],[[[1,\"            \"],[11,1],[24,0,\"title-caret\"],[24,1,\"direct-message-channels-caret\"],[24,\"role\",\"button\"],[24,\"title\",\"toggle nav list\"],[24,\"data-toggleable\",\"direct-message-channels\"],[4,[32,3],[\"click\",[28,[32,9],[[30,0,[\"toggleChannelSection\"]],\"direct-message-channels\"],null]],null],[12],[1,\"\\n              \"],[1,[28,[32,8],[\"angle-up\"],null]],[1,\"\\n            \"],[13],[1,\"\\n\"]],[]],null],[1,\"          \"],[10,1],[14,0,\"channel-title\"],[12],[1,[28,[32,1],[\"chat.direct_messages.title\"],null]],[13],[1,\"\\n\\n\"],[41,[28,[32,13],[[30,0,[\"canCreateDirectMessageChannel\"]],[28,[32,14],[[30,0,[\"showMobileDirectMessageButton\"]]],null]],null],[[[1,\"            \"],[8,[32,0],[[24,0,\"no-text btn-flat open-new-message-btn\"],[16,\"title\",[28,[32,1],[[30,0,[\"createDirectMessageChannelLabel\"]]],null]]],[[\"@icon\",\"@action\"],[\"plus\",[30,0,[\"openNewMessageModal\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"        \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[10,0],[14,1,\"direct-message-channels\"],[15,0,[30,0,[\"directMessageChannelClasses\"]]],[12],[1,\"\\n\"],[42,[28,[31,2],[[28,[31,2],[[30,0,[\"chatChannelsManager\",\"truncatedDirectMessageChannels\"]]],null]],null],null,[[[1,\"          \"],[8,[32,10],null,[[\"@channel\",\"@options\"],[[30,2],[28,[32,11],null,[[\"leaveButton\"],[true]]]]],null],[1,\"\\n\"]],[2]],null],[1,\"      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"channel\",\"channel\"],false,[\"if\",\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/channels-list.js",
    "scope": () => [_dButton.default, _i18n.default, _concatClass.default, _modifier.on, _noop.default, _didInsert.default, _onResize.default, _routing.LinkTo, _dIcon.default, _helper.fn, _chatChannelRow.default, _helper.hash, _pluginOutlet.default, _and.default, _not.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "session", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "hasScrollbar", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "computeHasScrollbar", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "computeHasScrollbar"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "computeResizedEntries", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "computeResizedEntries"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openNewMessageModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openNewMessageModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleChannelSection", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleChannelSection"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "storeScrollPosition", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "storeScrollPosition"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_applyScrollPosition", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_applyScrollPosition"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-channel-archive-status", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "@ember/template", "@ember/utils", "discourse/components/d-button", "discourse/helpers/concat-class", "discourse/lib/ajax-error", "discourse-common/lib/get-url", "discourse-i18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _template, _utils, _dButton, _concatClass, _ajaxError, _getUrl, _discourseI18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelArchiveStatus = _exports.default = (_class = (_class2 = class ChatChannelArchiveStatus extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "currentUser", _descriptor2, this);
    }
    get shouldRender() {
      return this.currentUser.admin && (0, _utils.isPresent)(this.args.channel.archive);
    }
    get channelArchiveFailedMessage() {
      const archive1 = this.args.channel.archive;
      const translationKey1 = !archive1.topicId ? "chat.channel_status.archive_failed_no_topic" : "chat.channel_status.archive_failed";
      return (0, _template.htmlSafe)(_discourseI18n.default.t(translationKey1, {
        completed: archive1.messages,
        total: archive1.totalMessages,
        topic_url: this.topicUrl
      }));
    }
    get channelArchiveCompletedMessage() {
      return (0, _template.htmlSafe)(_discourseI18n.default.t("chat.channel_status.archive_completed", {
        topic_url: this.topicUrl
      }));
    }
    retryArchive() {
      return this.chatApi.createChannelArchive(this.args.channel.id).catch(_ajaxError.popupAjaxError);
    }
    get topicUrl() {
      if (!this.args.channel.archive.topicId) {
        return "";
      }
      return (0, _getUrl.default)(`/t/-/${this.args.channel.archive.topicId}`);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.shouldRender}}
        {{#if @channel.archive.failed}}
          <div
            class={{concatClass
              "alert alert-warn chat-channel-retry-archive"
              @channel.status
            }}
          >
            <div class="chat-channel-archive-failed-message">
              {{this.channelArchiveFailedMessage}}
            </div>
  
            <div class="chat-channel-archive-failed-retry">
              <DButton
                @action={{this.retryArchive}}
                @label="chat.channel_archive.retry"
              />
            </div>
          </div>
        {{else if @channel.archive.completed}}
          <div
            class={{concatClass "chat-channel-archive-status" @channel.status}}
          >
            {{this.channelArchiveCompletedMessage}}
          </div>
        {{/if}}
      {{/if}}
    
  */
  {
    "id": "MmkrdEhj",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"shouldRender\"]],[[[41,[30,1,[\"archive\",\"failed\"]],[[[1,\"        \"],[10,0],[15,0,[28,[32,0],[\"alert alert-warn chat-channel-retry-archive\",[30,1,[\"status\"]]],null]],[12],[1,\"\\n          \"],[10,0],[14,0,\"chat-channel-archive-failed-message\"],[12],[1,\"\\n            \"],[1,[30,0,[\"channelArchiveFailedMessage\"]]],[1,\"\\n          \"],[13],[1,\"\\n\\n          \"],[10,0],[14,0,\"chat-channel-archive-failed-retry\"],[12],[1,\"\\n            \"],[8,[32,1],null,[[\"@action\",\"@label\"],[[30,0,[\"retryArchive\"]],\"chat.channel_archive.retry\"]],null],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],[[[41,[30,1,[\"archive\",\"completed\"]],[[[1,\"        \"],[10,0],[15,0,[28,[32,0],[\"chat-channel-archive-status\",[30,1,[\"status\"]]],null]],[12],[1,\"\\n          \"],[1,[30,0,[\"channelArchiveCompletedMessage\"]]],[1,\"\\n        \"],[13],[1,\"\\n      \"]],[]],null]],[]]]],[]],null],[1,\"  \"]],[\"@channel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-channel-archive-status.js",
    "scope": () => [_concatClass.default, _dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "retryArchive", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "retryArchive"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-channel-card", ["exports", "@glimmer/component", "@ember/helper", "@ember/routing", "@ember/service", "discourse/helpers/border-color", "discourse/helpers/concat-class", "discourse/helpers/replace-emoji", "discourse-common/helpers/d-icon", "discourse-common/helpers/i18n", "truth-helpers/helpers/gt", "discourse/plugins/chat/discourse/components/toggle-channel-membership-button", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _routing, _service, _borderColor, _concatClass, _replaceEmoji, _dIcon, _i18n, _gt, _toggleChannelMembershipButton, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelCard = _exports.default = (_class = (_class2 = class ChatChannelCard extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @channel}}
        <div
          class={{concatClass
            "chat-channel-card"
            (if @channel.isClosed "-closed")
            (if @channel.isArchived "-archived")
          }}
          style={{borderColor @channel.chatable.color}}
          data-channel-id={{@channel.id}}
        >
          <div class="chat-channel-card__header">
            <LinkTo
              @route="chat.channel"
              @models={{@channel.routeModels}}
              class="chat-channel-card__name-container"
            >
              <span class="chat-channel-card__name">
                {{replaceEmoji @channel.title}}
              </span>
              {{#if @channel.chatable.read_restricted}}
                {{dIcon "lock" class="chat-channel-card__read-restricted"}}
              {{/if}}
            </LinkTo>
  
            <div class="chat-channel-card__header-actions">
              {{#if @channel.currentUserMembership.muted}}
                <LinkTo
                  @route="chat.channel.info.settings"
                  @models={{@channel.routeModels}}
                  class="chat-channel-card__tag -muted"
                  tabindex="-1"
                >
                  {{i18n "chat.muted"}}
                </LinkTo>
              {{/if}}
  
              <LinkTo
                @route="chat.channel.info.settings"
                @models={{@channel.routeModels}}
                class="chat-channel-card__setting"
                tabindex="-1"
              >
                {{dIcon "cog"}}
              </LinkTo>
            </div>
          </div>
  
          {{#if @channel.description}}
            <div class="chat-channel-card__description">
              {{replaceEmoji @channel.description}}
            </div>
          {{/if}}
  
          <div class="chat-channel-card__cta">
            {{#if @channel.isFollowing}}
              <div class="chat-channel-card__tags">
                <span class="chat-channel-card__tag -joined">
                  {{i18n "chat.joined"}}
                </span>
  
                <ToggleChannelMembershipButton
                  @channel={{@channel}}
                  @options={{hash
                    leaveClass="btn-link btn-small chat-channel-card__leave-btn"
                    labelType="short"
                  }}
                />
              </div>
            {{else if @channel.isJoinable}}
              <ToggleChannelMembershipButton
                @channel={{@channel}}
                @options={{hash
                  joinClass="btn-primary btn-small chat-channel-card__join-btn"
                  labelType="short"
                }}
              />
            {{/if}}
  
            {{#if (gt @channel.membershipsCount 0)}}
              <LinkTo
                @route="chat.channel.info.members"
                @models={{@channel.routeModels}}
                class="chat-channel-card__members"
                tabindex="-1"
              >
                {{i18n
                  "chat.channel.memberships_count"
                  count=@channel.membershipsCount
                }}
              </LinkTo>
            {{/if}}
          </div>
        </div>
      {{/if}}
    
  */
  {
    "id": "piVdHQfB",
    "block": "[[[1,\"\\n\"],[41,[30,1],[[[1,\"      \"],[10,0],[15,0,[28,[32,0],[\"chat-channel-card\",[52,[30,1,[\"isClosed\"]],\"-closed\"],[52,[30,1,[\"isArchived\"]],\"-archived\"]],null]],[15,5,[28,[32,1],[[30,1,[\"chatable\",\"color\"]]],null]],[15,\"data-channel-id\",[30,1,[\"id\"]]],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-channel-card__header\"],[12],[1,\"\\n          \"],[8,[32,2],[[24,0,\"chat-channel-card__name-container\"]],[[\"@route\",\"@models\"],[\"chat.channel\",[30,1,[\"routeModels\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[10,1],[14,0,\"chat-channel-card__name\"],[12],[1,\"\\n              \"],[1,[28,[32,3],[[30,1,[\"title\"]]],null]],[1,\"\\n            \"],[13],[1,\"\\n\"],[41,[30,1,[\"chatable\",\"read_restricted\"]],[[[1,\"              \"],[1,[28,[32,4],[\"lock\"],[[\"class\"],[\"chat-channel-card__read-restricted\"]]]],[1,\"\\n\"]],[]],null],[1,\"          \"]],[]]]]],[1,\"\\n\\n          \"],[10,0],[14,0,\"chat-channel-card__header-actions\"],[12],[1,\"\\n\"],[41,[30,1,[\"currentUserMembership\",\"muted\"]],[[[1,\"              \"],[8,[32,2],[[24,0,\"chat-channel-card__tag -muted\"],[24,\"tabindex\",\"-1\"]],[[\"@route\",\"@models\"],[\"chat.channel.info.settings\",[30,1,[\"routeModels\"]]]],[[\"default\"],[[[[1,\"\\n                \"],[1,[28,[32,5],[\"chat.muted\"],null]],[1,\"\\n              \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n            \"],[8,[32,2],[[24,0,\"chat-channel-card__setting\"],[24,\"tabindex\",\"-1\"]],[[\"@route\",\"@models\"],[\"chat.channel.info.settings\",[30,1,[\"routeModels\"]]]],[[\"default\"],[[[[1,\"\\n              \"],[1,[28,[32,4],[\"cog\"],null]],[1,\"\\n            \"]],[]]]]],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\\n\"],[41,[30,1,[\"description\"]],[[[1,\"          \"],[10,0],[14,0,\"chat-channel-card__description\"],[12],[1,\"\\n            \"],[1,[28,[32,3],[[30,1,[\"description\"]]],null]],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n        \"],[10,0],[14,0,\"chat-channel-card__cta\"],[12],[1,\"\\n\"],[41,[30,1,[\"isFollowing\"]],[[[1,\"            \"],[10,0],[14,0,\"chat-channel-card__tags\"],[12],[1,\"\\n              \"],[10,1],[14,0,\"chat-channel-card__tag -joined\"],[12],[1,\"\\n                \"],[1,[28,[32,5],[\"chat.joined\"],null]],[1,\"\\n              \"],[13],[1,\"\\n\\n              \"],[8,[32,6],null,[[\"@channel\",\"@options\"],[[30,1],[28,[32,7],null,[[\"leaveClass\",\"labelType\"],[\"btn-link btn-small chat-channel-card__leave-btn\",\"short\"]]]]],null],[1,\"\\n            \"],[13],[1,\"\\n\"]],[]],[[[41,[30,1,[\"isJoinable\"]],[[[1,\"            \"],[8,[32,6],null,[[\"@channel\",\"@options\"],[[30,1],[28,[32,7],null,[[\"joinClass\",\"labelType\"],[\"btn-primary btn-small chat-channel-card__join-btn\",\"short\"]]]]],null],[1,\"\\n          \"]],[]],null]],[]]],[1,\"\\n\"],[41,[28,[32,8],[[30,1,[\"membershipsCount\"]],0],null],[[[1,\"            \"],[8,[32,2],[[24,0,\"chat-channel-card__members\"],[24,\"tabindex\",\"-1\"]],[[\"@route\",\"@models\"],[\"chat.channel.info.members\",[30,1,[\"routeModels\"]]]],[[\"default\"],[[[[1,\"\\n              \"],[1,[28,[32,5],[\"chat.channel.memberships_count\"],[[\"count\"],[[30,1,[\"membershipsCount\"]]]]]],[1,\"\\n            \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@channel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-channel-card.js",
    "scope": () => [_concatClass.default, _borderColor.default, _routing.LinkTo, _replaceEmoji.default, _dIcon.default, _i18n.default, _toggleChannelMembershipButton.default, _helper.hash, _gt.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat-channel-chooser-header", ["exports", "@ember/component", "select-kit/components/combo-box/combo-box-header", "@ember/template-factory"], function (_exports, _component, _comboBoxHeader, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="select-kit-header-wrapper">
    {{#if this.selectedContent}}
      <ChannelTitle @channel={{this.selectedContent}} />
    {{else}}
      {{i18n "chat.incoming_webhooks.channel_placeholder"}}
    {{/if}}
  
    {{d-icon this.caretIcon class="caret-icon"}}
  </div>
  */
  {
    "id": "Lr5V79a1",
    "block": "[[[10,0],[14,0,\"select-kit-header-wrapper\"],[12],[1,\"\\n\"],[41,[30,0,[\"selectedContent\"]],[[[1,\"    \"],[8,[39,1],null,[[\"@channel\"],[[30,0,[\"selectedContent\"]]]],null],[1,\"\\n\"]],[]],[[[1,\"    \"],[1,[28,[35,2],[\"chat.incoming_webhooks.channel_placeholder\"],null]],[1,\"\\n\"]],[]]],[1,\"\\n  \"],[1,[28,[35,3],[[30,0,[\"caretIcon\"]]],[[\"class\"],[\"caret-icon\"]]]],[1,\"\\n\"],[13]],[],false,[\"if\",\"channel-title\",\"i18n\",\"d-icon\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/chat-channel-chooser-header.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, _comboBoxHeader.default.extend({}));
});
define("discourse/plugins/chat/discourse/components/chat-channel-chooser-row", ["exports", "@ember/component", "select-kit/components/select-kit/select-kit-row", "@ember/template-factory"], function (_exports, _component, _selectKitRow, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <ChannelTitle @channel={{this.item}} />
  */
  {
    "id": "0Vwx6mQC",
    "block": "[[[8,[39,0],null,[[\"@channel\"],[[30,0,[\"item\"]]]],null]],[],false,[\"channel-title\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/chat-channel-chooser-row.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, _selectKitRow.default.extend({
    classNames: ["chat-channel-chooser-row"]
  }));
});
define("discourse/plugins/chat/discourse/components/chat-channel-chooser", ["exports", "select-kit/components/combo-box"], function (_exports, _comboBox) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _comboBox.default.extend({
    pluginApiIdentifiers: ["chat-channel-chooser"],
    classNames: ["chat-channel-chooser"],
    selectKitOptions: {
      headerComponent: "chat-channel-chooser-header"
    },
    modifyComponentForRow() {
      return "chat-channel-chooser-row";
    }
  });
});
define("discourse/plugins/chat/discourse/components/chat-channel-leave-btn", ["exports", "@glimmer/component", "@ember/service", "@ember/utils", "discourse/components/d-button", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _utils, _dButton, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelLeaveBtn = _exports.default = (_class = (_class2 = class ChatChannelLeaveBtn extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "site", _descriptor2, this);
    }
    get shouldRender() {
      return !this.site.mobileView && (0, _utils.isPresent)(this.args.channel);
    }
    get leaveChatTitleKey() {
      if (this.args.channel.isDirectMessageChannel) {
        return "chat.direct_messages.leave";
      } else {
        return "chat.leave";
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.shouldRender}}
        <DButton
          @icon="times"
          @action={{@onLeaveChannel}}
          @title={{this.leaveChatTitleKey}}
          class="btn-flat chat-channel-leave-btn"
        />
      {{/if}}
    
  */
  {
    "id": "Y3lBPzu0",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"shouldRender\"]],[[[1,\"      \"],[8,[32,0],[[24,0,\"btn-flat chat-channel-leave-btn\"]],[[\"@icon\",\"@action\",\"@title\"],[\"times\",[30,1],[30,0,[\"leaveChatTitleKey\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@onLeaveChannel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-channel-leave-btn.js",
    "scope": () => [_dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat-channel-message-emoji-picker", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "@popperjs/core", "ember-modifier", "discourse/lib/offset-calculator", "discourse/plugins/chat/discourse/components/chat-emoji-picker", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _core, _emberModifier, _offsetCalculator, _chatEmojiPicker, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelMessageEmojiPicker = _exports.default = (_class = (_class2 = class ChatChannelMessageEmojiPicker extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "site", _descriptor, this);
      _initializerDefineProperty(this, "chatEmojiPickerManager", _descriptor2, this);
      _defineProperty(this, "context", "chat-channel-message");
      _defineProperty(this, "listenToBodyScroll", (0, _emberModifier.modifier)(() => {
        const handler1 = () => {
          this.chatEmojiPickerManager.close();
        };
        document.addEventListener("scroll", handler1);
        return () => {
          document.removeEventListener("scroll", handler1);
        };
      }));
    }
    didSelectEmoji(emoji1) {
      this.chatEmojiPickerManager.picker?.didSelectEmoji(emoji1);
      this.chatEmojiPickerManager.close();
    }
    didInsert(element1) {
      if (this.site.mobileView) {
        element1.classList.remove("hidden");
        return;
      }
      this._popper = (0, _core.createPopper)(this.chatEmojiPickerManager.picker?.trigger, element1, {
        placement: "top",
        modifiers: [{
          name: "eventListeners",
          options: {
            scroll: false,
            resize: false
          }
        }, {
          name: "flip",
          options: {
            padding: {
              top: (0, _offsetCalculator.headerOffset)()
            }
          }
        }]
      });
      element1.classList.remove("hidden");
    }
    willDestroy() {
      super.willDestroy(...arguments);
      this._popper?.destroy();
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <ChatEmojiPicker
        {{this.listenToBodyScroll}}
        @context="chat-channel-message"
        @didInsert={{this.didInsert}}
        @willDestroy={{this.willDestroy}}
        @didSelectEmoji={{this.didSelectEmoji}}
        class="hidden"
      />
    
  */
  {
    "id": "jafPNlht",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[24,0,\"hidden\"],[4,[30,0,[\"listenToBodyScroll\"]],null,null]],[[\"@context\",\"@didInsert\",\"@willDestroy\",\"@didSelectEmoji\"],[\"chat-channel-message\",[30,0,[\"didInsert\"]],[30,0,[\"willDestroy\"]],[30,0,[\"didSelectEmoji\"]]]],null],[1,\"\\n  \"]],[],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-channel-message-emoji-picker.js",
    "scope": () => [_chatEmojiPicker.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatEmojiPickerManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "didSelectEmoji", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didSelectEmoji"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didInsert", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didInsert"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "willDestroy", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "willDestroy"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-channel-metadata", ["exports", "@glimmer/component", "discourse/plugins/chat/discourse/components/chat-channel-unread-indicator", "@ember/template-factory", "@ember/component"], function (_exports, _component, _chatChannelUnreadIndicator, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatChannelMetadata extends _component.default {
    get unreadIndicator() {
      return this.args.unreadIndicator ?? false;
    }
    get lastMessageFormattedDate() {
      return moment(this.args.channel.lastMessage.createdAt).calendar(null, {
        sameDay: "LT",
        nextDay: "[Tomorrow]",
        nextWeek: "dddd",
        lastDay: "[Yesterday]",
        lastWeek: "dddd",
        sameElse: "l"
      });
    }
  }
  _exports.default = ChatChannelMetadata;
  _class = ChatChannelMetadata;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-channel-metadata">
        {{#if @channel.lastMessage}}
          <div class="chat-channel-metadata__date">
            {{this.lastMessageFormattedDate}}
          </div>
        {{/if}}
  
        {{#if this.unreadIndicator}}
          <ChatChannelUnreadIndicator @channel={{@channel}} />
        {{/if}}
      </div>
    
  */
  {
    "id": "VtqVjBEM",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-channel-metadata\"],[12],[1,\"\\n\"],[41,[30,1,[\"lastMessage\"]],[[[1,\"        \"],[10,0],[14,0,\"chat-channel-metadata__date\"],[12],[1,\"\\n          \"],[1,[30,0,[\"lastMessageFormattedDate\"]]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"unreadIndicator\"]],[[[1,\"        \"],[8,[32,0],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@channel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-channel-metadata.js",
    "scope": () => [_chatChannelUnreadIndicator.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat-channel-preview-card", ["exports", "@glimmer/component", "@ember/helper", "@ember/routing", "@ember/service", "@ember/utils", "discourse/helpers/concat-class", "discourse-common/helpers/i18n", "discourse/plugins/chat/discourse/components/channel-title", "discourse/plugins/chat/discourse/components/toggle-channel-membership-button", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _routing, _service, _utils, _concatClass, _i18n, _channelTitle, _toggleChannelMembershipButton, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelPreviewCard = _exports.default = (_class = (_class2 = class ChatChannelPreviewCard extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
    }
    get showJoinButton() {
      return this.args.channel?.isOpen && this.args.channel?.canJoin;
    }
    get hasDescription() {
      return !(0, _utils.isEmpty)(this.args.channel?.description);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div
        class={{concatClass
          "chat-channel-preview-card"
          (unless this.hasDescription "-no-description")
          (unless this.showJoinButton "-no-button")
        }}
      >
        <ChannelTitle @channel={{@channel}} />
        {{#if this.hasDescription}}
          <p class="chat-channel-preview-card__description">
            {{@channel.description}}
          </p>
        {{/if}}
        {{#if this.showJoinButton}}
          <ToggleChannelMembershipButton
            @channel={{@channel}}
            @options={{hash joinClass="btn-primary"}}
          />
        {{/if}}
        <LinkTo
          @route="chat.browse"
          class="chat-channel-preview-card__browse-all"
        >
          {{i18n "chat.browse_all_channels"}}
        </LinkTo>
      </div>
    
  */
  {
    "id": "TZhYYRAq",
    "block": "[[[1,\"\\n    \"],[10,0],[15,0,[28,[32,0],[\"chat-channel-preview-card\",[52,[51,[30,0,[\"hasDescription\"]]],\"-no-description\"],[52,[51,[30,0,[\"showJoinButton\"]]],\"-no-button\"]],null]],[12],[1,\"\\n      \"],[8,[32,1],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n\"],[41,[30,0,[\"hasDescription\"]],[[[1,\"        \"],[10,2],[14,0,\"chat-channel-preview-card__description\"],[12],[1,\"\\n          \"],[1,[30,1,[\"description\"]]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[41,[30,0,[\"showJoinButton\"]],[[[1,\"        \"],[8,[32,2],null,[[\"@channel\",\"@options\"],[[30,1],[28,[32,3],null,[[\"joinClass\"],[\"btn-primary\"]]]]],null],[1,\"\\n\"]],[]],null],[1,\"      \"],[8,[32,4],[[24,0,\"chat-channel-preview-card__browse-all\"]],[[\"@route\"],[\"chat.browse\"]],[[\"default\"],[[[[1,\"\\n        \"],[1,[28,[32,5],[\"chat.browse_all_channels\"],null]],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@channel\"],false,[\"unless\",\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-channel-preview-card.js",
    "scope": () => [_concatClass.default, _channelTitle.default, _toggleChannelMembershipButton.default, _helper.hash, _routing.LinkTo, _i18n.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat-channel-row", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/helper", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/render-modifiers/modifiers/will-destroy", "@ember/routing", "@ember/service", "@ember/template", "ember-modifier", "discourse/helpers/concat-class", "discourse/lib/ajax-error", "discourse-common/helpers/d-icon", "discourse-common/utils/decorators", "discourse-i18n", "truth-helpers/helpers/and", "truth-helpers/helpers/eq", "discourse/plugins/chat/discourse/components/channel-title", "discourse/plugins/chat/discourse/components/chat-channel-metadata", "discourse/plugins/chat/discourse/components/toggle-channel-membership-button", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _helper, _object, _didInsert, _willDestroy, _routing, _service, _template, _emberModifier, _concatClass, _ajaxError, _dIcon, _decorators, _discourseI18n, _and, _eq, _channelTitle, _chatChannelMetadata, _toggleChannelMembershipButton, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _class2, _firstDirectMessageUser;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
  function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
  function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const FADEOUT_CLASS = "-fade-out";
  let ChatChannelRow = _exports.default = (_class = (_firstDirectMessageUser = /*#__PURE__*/new WeakMap(), (_class2 = class ChatChannelRow extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateFieldInitSpec(this, _firstDirectMessageUser, {
        get: _get_firstDirectMessageUser,
        set: void 0
      });
      _initializerDefineProperty(this, "api", _descriptor, this);
      _initializerDefineProperty(this, "capabilities", _descriptor2, this);
      _initializerDefineProperty(this, "chat", _descriptor3, this);
      _initializerDefineProperty(this, "currentUser", _descriptor4, this);
      _initializerDefineProperty(this, "router", _descriptor5, this);
      _initializerDefineProperty(this, "site", _descriptor6, this);
      _initializerDefineProperty(this, "isAtThreshold", _descriptor7, this);
      _initializerDefineProperty(this, "shouldRemoveChannel", _descriptor8, this);
      _initializerDefineProperty(this, "showRemoveButton", _descriptor9, this);
      _initializerDefineProperty(this, "swipableRow", _descriptor10, this);
      _initializerDefineProperty(this, "shouldReset", _descriptor11, this);
      _initializerDefineProperty(this, "diff", _descriptor12, this);
      _initializerDefineProperty(this, "rowStyle", _descriptor13, this);
      _initializerDefineProperty(this, "canSwipe", _descriptor14, this);
      _defineProperty(this, "registerSwipableRow", (0, _emberModifier.modifier)(element1 => {
        this.swipableRow = element1;
      }));
      _defineProperty(this, "onReset", (0, _emberModifier.modifier)(element1 => {
        const handler1 = () => {
          this.rowStyle = (0, _template.htmlSafe)("margin-right: 0px;");
          this.showRemoveButton = false;
          this.shouldReset = false;
        };
        element1.addEventListener("transitionend", handler1, {
          once: true
        });
        return () => {
          element1.removeEventListener("transitionend", handler1);
          this.rowStyle = (0, _template.htmlSafe)("margin-right: 0px;");
          this.showRemoveButton = false;
          this.shouldReset = false;
        };
      }));
      _defineProperty(this, "onRemoveChannel", (0, _emberModifier.modifier)(element1 => {
        element1.addEventListener("transitionend", () => {
          this.chat.unfollowChannel(this.args.channel).catch(_ajaxError.popupAjaxError);
        }, {
          once: true
        });
        element1.classList.add(FADEOUT_CLASS);
      }));
      _defineProperty(this, "handleSwipe", (0, _emberModifier.modifier)(element1 => {
        element1.addEventListener("touchstart", this.onSwipeStart, {
          passive: true
        });
        element1.addEventListener("touchmove", this.onSwipe, {
          passive: true
        });
        element1.addEventListener("touchend", this.onSwipeEnd);
        return () => {
          element1.removeEventListener("touchstart", this.onSwipeStart);
          element1.removeEventListener("touchmove", this.onSwipe);
          element1.removeEventListener("touchend", this.onSwipeEnd);
        };
      }));
    }
    onSwipeStart(event1) {
      this._initialX = event1.changedTouches[0].screenX;
    }
    onSwipe(event1) {
      this.showRemoveButton = true;
      this.shouldReset = false;
      this.isAtThreshold = false;
      const threshold1 = window.innerWidth / 3;
      const touchX1 = event1.changedTouches[0].screenX;
      this.diff = this._initialX - touchX1;
      this.isAtThreshold = this.diff >= threshold1;
      // ensures we will go back to the initial position when swiping very fast
      if (this.diff > 25) {
        if (this.isAtThreshold) {
          this.diff = threshold1 + (this.diff - threshold1) * 0.1;
        }
        this.rowStyle = (0, _template.htmlSafe)(`margin-right: ${this.diff}px;`);
      } else {
        this.rowStyle = (0, _template.htmlSafe)("margin-right: 0px;");
      }
    }
    onSwipeEnd() {
      if (this.isAtThreshold) {
        this.rowStyle = (0, _template.htmlSafe)("margin-right: 0px;");
        this.shouldRemoveChannel = true;
      } else {
        this.shouldReset = true;
      }
    }
    get shouldHandleSwipe() {
      return this.capabilities.touch && this.args.channel.isDirectMessageChannel;
    }
    get leaveDirectMessageLabel() {
      return _discourseI18n.default.t("chat.direct_messages.close");
    }
    get leaveChannelLabel() {
      return _discourseI18n.default.t("chat.channel_settings.leave_channel");
    }
    get channelHasUnread() {
      return this.args.channel.tracking.unreadCount > 0;
    }
    startTrackingStatus() {
      _classPrivateFieldGet(this, _firstDirectMessageUser)?.trackStatus();
    }
    stopTrackingStatus() {
      _classPrivateFieldGet(this, _firstDirectMessageUser)?.stopTrackingStatus();
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <LinkTo
        @route="chat.channel"
        @models={{@channel.routeModels}}
        class={{concatClass
          "chat-channel-row"
          (if @channel.focused "focused")
          (if @channel.currentUserMembership.muted "muted")
          (if @options.leaveButton "can-leave")
          (if (eq this.chat.activeChannel.id @channel.id) "active")
          (if this.channelHasUnread "has-unread")
        }}
        tabindex="0"
        data-chat-channel-id={{@channel.id}}
        {{didInsert this.startTrackingStatus}}
        {{willDestroy this.stopTrackingStatus}}
        {{(if this.shouldRemoveChannel (modifier this.onRemoveChannel))}}
      >
        <div
          class={{concatClass
            "chat-channel-row__content"
            (if this.shouldReset "-animate-reset")
          }}
          {{(if this.shouldHandleSwipe (modifier this.registerSwipableRow))}}
          {{(if this.shouldHandleSwipe (modifier this.handleSwipe))}}
          {{(if this.shouldReset (modifier this.onReset))}}
          style={{this.rowStyle}}
        >
          <ChannelTitle @channel={{@channel}} />
          <ChatChannelMetadata @channel={{@channel}} @unreadIndicator={{true}} />
  
          {{#if
            (and @options.leaveButton @channel.isFollowing this.site.desktopView)
          }}
            <ToggleChannelMembershipButton
              @channel={{@channel}}
              @options={{hash
                leaveClass="btn-flat chat-channel-leave-btn"
                labelType="none"
                leaveIcon="times"
                leaveTitle=(if
                  @channel.isDirectMessageChannel
                  this.leaveDirectMessageLabel
                  this.leaveChannelLabel
                )
              }}
            />
          {{/if}}
        </div>
  
        {{#if this.showRemoveButton}}
          <div
            class={{concatClass
              "chat-channel-row__action-btn"
              (if this.isAtThreshold "-at-threshold" "-not-at-threshold")
            }}
          >
            {{icon "times-circle"}}
          </div>
        {{/if}}
      </LinkTo>
    
  */
  {
    "id": "4Lvt76aZ",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[16,0,[28,[32,1],[\"chat-channel-row\",[52,[30,1,[\"focused\"]],\"focused\"],[52,[30,1,[\"currentUserMembership\",\"muted\"]],\"muted\"],[52,[30,2,[\"leaveButton\"]],\"can-leave\"],[52,[28,[32,2],[[30,0,[\"chat\",\"activeChannel\",\"id\"]],[30,1,[\"id\"]]],null],\"active\"],[52,[30,0,[\"channelHasUnread\"]],\"has-unread\"]],null]],[24,\"tabindex\",\"0\"],[16,\"data-chat-channel-id\",[30,1,[\"id\"]]],[4,[32,3],[[30,0,[\"startTrackingStatus\"]]],null],[4,[32,4],[[30,0,[\"stopTrackingStatus\"]]],null],[4,[52,[30,0,[\"shouldRemoveChannel\"]],[50,[30,0,[\"onRemoveChannel\"]],2,null,null]],null,null]],[[\"@route\",\"@models\"],[\"chat.channel\",[30,1,[\"routeModels\"]]]],[[\"default\"],[[[[1,\"\\n      \"],[11,0],[16,0,[28,[32,1],[\"chat-channel-row__content\",[52,[30,0,[\"shouldReset\"]],\"-animate-reset\"]],null]],[16,5,[30,0,[\"rowStyle\"]]],[4,[52,[30,0,[\"shouldHandleSwipe\"]],[50,[30,0,[\"registerSwipableRow\"]],2,null,null]],null,null],[4,[52,[30,0,[\"shouldHandleSwipe\"]],[50,[30,0,[\"handleSwipe\"]],2,null,null]],null,null],[4,[52,[30,0,[\"shouldReset\"]],[50,[30,0,[\"onReset\"]],2,null,null]],null,null],[12],[1,\"\\n        \"],[8,[32,5],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n        \"],[8,[32,6],null,[[\"@channel\",\"@unreadIndicator\"],[[30,1],true]],null],[1,\"\\n\\n\"],[41,[28,[32,7],[[30,2,[\"leaveButton\"]],[30,1,[\"isFollowing\"]],[30,0,[\"site\",\"desktopView\"]]],null],[[[1,\"          \"],[8,[32,8],null,[[\"@channel\",\"@options\"],[[30,1],[28,[32,9],null,[[\"leaveClass\",\"labelType\",\"leaveIcon\",\"leaveTitle\"],[\"btn-flat chat-channel-leave-btn\",\"none\",\"times\",[52,[30,1,[\"isDirectMessageChannel\"]],[30,0,[\"leaveDirectMessageLabel\"]],[30,0,[\"leaveChannelLabel\"]]]]]]]],null],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"showRemoveButton\"]],[[[1,\"        \"],[10,0],[15,0,[28,[32,1],[\"chat-channel-row__action-btn\",[52,[30,0,[\"isAtThreshold\"]],\"-at-threshold\",\"-not-at-threshold\"]],null]],[12],[1,\"\\n          \"],[1,[28,[32,10],[\"times-circle\"],null]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"    \"]],[]]]]],[1,\"\\n  \"]],[\"@channel\",\"@options\"],false,[\"if\",\"modifier\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-channel-row.js",
    "scope": () => [_routing.LinkTo, _concatClass.default, _eq.default, _didInsert.default, _willDestroy.default, _channelTitle.default, _chatChannelMetadata.default, _and.default, _toggleChannelMembershipButton.default, _helper.hash, _dIcon.default],
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "api", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "isAtThreshold", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "shouldRemoveChannel", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "showRemoveButton", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "swipableRow", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "shouldReset", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "diff", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "rowStyle", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "canSwipe", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "onSwipeStart", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onSwipeStart"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onSwipe", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onSwipe"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onSwipeEnd", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onSwipeEnd"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "startTrackingStatus", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "startTrackingStatus"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "stopTrackingStatus", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "stopTrackingStatus"), _class.prototype)), _class);
  function _get_firstDirectMessageUser() {
    return this.args.channel?.chatable?.users?.firstObject;
  }
});
define("discourse/plugins/chat/discourse/components/chat-channel-status", ["exports", "@glimmer/component", "discourse-common/helpers/d-icon", "discourse-i18n", "discourse/plugins/chat/discourse/models/chat-channel", "discourse/plugins/chat/discourse/components/chat-channel-archive-status", "@ember/template-factory", "@ember/component"], function (_exports, _component, _dIcon, _discourseI18n, _chatChannel, _chatChannelArchiveStatus, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  var _shortStatusMessage = /*#__PURE__*/new WeakSet();
  var _longStatusMessage = /*#__PURE__*/new WeakSet();
  class ChatChannelStatus extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _longStatusMessage);
      _classPrivateMethodInitSpec(this, _shortStatusMessage);
      _defineProperty(this, "LONG_FORMAT", "long");
      _defineProperty(this, "SHORT_FORMAT", "short");
      _defineProperty(this, "VALID_FORMATS", [this.SHORT_FORMAT, this.LONG_FORMAT]);
    }
    get format() {
      return this.VALID_FORMATS.includes(this.args.format) ? this.args.format : this.LONG_FORMAT;
    }
    get shouldRender() {
      return this.channelStatusIcon && this.args.channel.status !== _chatChannel.CHANNEL_STATUSES.open;
    }
    get channelStatusMessage() {
      if (this.format === this.LONG_FORMAT) {
        return _classPrivateMethodGet(this, _longStatusMessage, _longStatusMessage2).call(this, this.args.channel.status);
      } else {
        return _classPrivateMethodGet(this, _shortStatusMessage, _shortStatusMessage2).call(this, this.args.channel.status);
      }
    }
    get channelStatusIcon() {
      return (0, _chatChannel.channelStatusIcon)(this.args.channel.status);
    }
  }
  _exports.default = ChatChannelStatus;
  _class = ChatChannelStatus;
  function _shortStatusMessage2(status1) {
    switch (status1) {
      case _chatChannel.CHANNEL_STATUSES.archived:
        return _discourseI18n.default.t("chat.channel_status.archived");
      case _chatChannel.CHANNEL_STATUSES.closed:
        return _discourseI18n.default.t("chat.channel_status.closed");
      case _chatChannel.CHANNEL_STATUSES.open:
        return _discourseI18n.default.t("chat.channel_status.open");
      case _chatChannel.CHANNEL_STATUSES.readOnly:
        return _discourseI18n.default.t("chat.channel_status.read_only");
    }
  }
  function _longStatusMessage2(status1) {
    switch (status1) {
      case _chatChannel.CHANNEL_STATUSES.archived:
        return _discourseI18n.default.t("chat.channel_status.archived_header");
      case _chatChannel.CHANNEL_STATUSES.closed:
        return _discourseI18n.default.t("chat.channel_status.closed_header");
      case _chatChannel.CHANNEL_STATUSES.open:
        return _discourseI18n.default.t("chat.channel_status.open_header");
      case _chatChannel.CHANNEL_STATUSES.readOnly:
        return _discourseI18n.default.t("chat.channel_status.read_only_header");
    }
  }
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.shouldRender}}
        <div class="chat-channel-status">
          {{dIcon this.channelStatusIcon}}
          <span>{{this.channelStatusMessage}}</span>
          <ChatChannelArchiveStatus @channel={{@channel}} />
        </div>
      {{/if}}
    
  */
  {
    "id": "TFCSy/zp",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"shouldRender\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-channel-status\"],[12],[1,\"\\n        \"],[1,[28,[32,0],[[30,0,[\"channelStatusIcon\"]]],null]],[1,\"\\n        \"],[10,1],[12],[1,[30,0,[\"channelStatusMessage\"]]],[13],[1,\"\\n        \"],[8,[32,1],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@channel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-channel-status.js",
    "scope": () => [_dIcon.default, _chatChannelArchiveStatus.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat-channel-title", ["exports", "@glimmer/component", "discourse/plugins/chat/discourse/components/channel-title", "@ember/template-factory", "@ember/component"], function (_exports, _component, _channelTitle, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class OldChatChannelTitle extends _component.default {}
  _exports.default = OldChatChannelTitle;
  _class = OldChatChannelTitle;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <ChannelTitle @channel={{@channel}} />
    
  */
  {
    "id": "FbiREVGv",
    "block": "[[[1,\"\\n    \"],[8,[32,0],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n  \"]],[\"@channel\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-channel-title.js",
    "scope": () => [_channelTitle.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat-channel-unread-indicator", ["exports", "@glimmer/component", "@ember/service", "discourse/helpers/concat-class", "discourse/plugins/chat/discourse/lib/chat-user-preferences", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _concatClass, _chatUserPreferences, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _class2, _hasChannelMentions, _onlyMentions;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelUnreadIndicator = _exports.default = (_class = (_hasChannelMentions = /*#__PURE__*/new WeakSet(), _onlyMentions = /*#__PURE__*/new WeakSet(), (_class2 = class ChatChannelUnreadIndicator extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _onlyMentions);
      _classPrivateMethodInitSpec(this, _hasChannelMentions);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "site", _descriptor2, this);
      _initializerDefineProperty(this, "currentUser", _descriptor3, this);
    }
    get showUnreadIndicator() {
      return this.args.channel.tracking.unreadCount > 0 ||
      // We want to do this so we don't show a blue dot if the user is inside
      // the channel and a new unread thread comes in.
      this.chat.activeChannel?.id !== this.args.channel.id && this.args.channel.unreadThreadsCountSinceLastViewed > 0;
    }
    get unreadCount() {
      if (_classPrivateMethodGet(this, _onlyMentions, _onlyMentions2).call(this) && _classPrivateMethodGet(this, _hasChannelMentions, _hasChannelMentions2).call(this)) {
        return this.args.channel.tracking.mentionCount;
      }
      return this.args.channel.tracking.unreadCount;
    }
    get isUrgent() {
      if (_classPrivateMethodGet(this, _onlyMentions, _onlyMentions2).call(this)) {
        return _classPrivateMethodGet(this, _hasChannelMentions, _hasChannelMentions2).call(this);
      }
      return this.args.channel.isDirectMessageChannel || _classPrivateMethodGet(this, _hasChannelMentions, _hasChannelMentions2).call(this);
    }
    get showUnreadCount() {
      if (_classPrivateMethodGet(this, _onlyMentions, _onlyMentions2).call(this)) {
        return _classPrivateMethodGet(this, _hasChannelMentions, _hasChannelMentions2).call(this);
      }
      return this.args.channel.isDirectMessageChannel || this.isUrgent;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.showUnreadIndicator}}
        <div
          class={{concatClass
            "chat-channel-unread-indicator"
            (if this.isUrgent "-urgent")
          }}
        >
          <div class="chat-channel-unread-indicator__number">{{#if
              this.showUnreadCount
            }}{{this.unreadCount}}{{else}}&nbsp;{{/if}}</div>
        </div>
      {{/if}}
    
  */
  {
    "id": "2C3+2fx+",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"showUnreadIndicator\"]],[[[1,\"      \"],[10,0],[15,0,[28,[32,0],[\"chat-channel-unread-indicator\",[52,[30,0,[\"isUrgent\"]],\"-urgent\"]],null]],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-channel-unread-indicator__number\"],[12],[41,[30,0,[\"showUnreadCount\"]],[[[1,[30,0,[\"unreadCount\"]]]],[]],[[[1,\" \"]],[]]],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-channel-unread-indicator.js",
    "scope": () => [_concatClass.default],
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  function _hasChannelMentions2() {
    return this.args.channel.tracking.mentionCount > 0;
  }
  function _onlyMentions2() {
    return (0, _chatUserPreferences.hasChatIndicator)(this.currentUser).ONLY_MENTIONS;
  }
});
define("discourse/plugins/chat/discourse/components/chat-channel", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/application", "@ember/helper", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/render-modifiers/modifiers/did-update", "@ember/render-modifiers/modifiers/will-destroy", "@ember/runloop", "@ember/service", "discourse/helpers/concat-class", "discourse/lib/ajax-error", "discourse/lib/desktop-notifications", "discourse/lib/url", "discourse/lib/user-presence", "discourse-common/helpers/i18n", "discourse-common/lib/debounce", "discourse-common/utils/decorators", "truth-helpers/helpers/and", "truth-helpers/helpers/not", "discourse/plugins/chat/discourse/components/chat-channel-status", "discourse/plugins/chat/discourse/lib/chat-channel-subscription-manager", "discourse/plugins/chat/discourse/lib/chat-constants", "discourse/plugins/chat/discourse/lib/chat-ios-hacks", "discourse/plugins/chat/discourse/lib/chat-messages-loader", "discourse/plugins/chat/discourse/lib/check-message-visibility", "discourse/plugins/chat/discourse/lib/scroll-helpers", "discourse/plugins/chat/discourse/models/chat-message", "discourse/plugins/chat/discourse/modifiers/chat/on-resize", "discourse/plugins/chat/discourse/modifiers/chat/scrollable-list", "discourse/plugins/chat/discourse/components/chat/composer/channel", "discourse/plugins/chat/discourse/components/chat/scroll-to-bottom-arrow", "discourse/plugins/chat/discourse/components/chat/selection-manager", "discourse/plugins/chat/discourse/components/chat-channel-preview-card", "discourse/plugins/chat/discourse/components/chat-mention-warnings", "discourse/plugins/chat/discourse/components/chat-message", "discourse/plugins/chat/discourse/components/chat-notices", "discourse/plugins/chat/discourse/components/chat-skeleton", "discourse/plugins/chat/discourse/components/chat-upload-drop-zone", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _application, _helper, _object, _didInsert, _didUpdate, _willDestroy, _runloop, _service, _concatClass, _ajaxError, _desktopNotifications, _url, _userPresence, _i18n, _debounce, _decorators, _and, _not, _chatChannelStatus, _chatChannelSubscriptionManager, _chatConstants, _chatIosHacks, _chatMessagesLoader, _checkMessageVisibility, _scrollHelpers, _chatMessage, _onResize, _scrollableList, _channel, _scrollToBottomArrow, _selectionManager, _chatChannelPreviewCard, _chatMentionWarnings, _chatMessage2, _chatNotices, _chatSkeleton, _chatUploadDropZone, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _class2, _sendEditMessage, _sendNewMessage, _cancelHandlers, _preloadThreadTrackingState, _flushIgnoreNextScroll;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannel = _exports.default = (_dec = (0, _service.inject)("chat-channel-composer"), _dec2 = (0, _service.inject)("chat-channel-pane"), (_class = (_sendEditMessage = /*#__PURE__*/new WeakSet(), _sendNewMessage = /*#__PURE__*/new WeakSet(), _cancelHandlers = /*#__PURE__*/new WeakSet(), _preloadThreadTrackingState = /*#__PURE__*/new WeakSet(), _flushIgnoreNextScroll = /*#__PURE__*/new WeakSet(), (_class2 = class ChatChannel extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _flushIgnoreNextScroll);
      _classPrivateMethodInitSpec(this, _preloadThreadTrackingState);
      _classPrivateMethodInitSpec(this, _cancelHandlers);
      _classPrivateMethodInitSpec(this, _sendNewMessage);
      _classPrivateMethodInitSpec(this, _sendEditMessage);
      _initializerDefineProperty(this, "appEvents", _descriptor, this);
      _initializerDefineProperty(this, "capabilities", _descriptor2, this);
      _initializerDefineProperty(this, "chat", _descriptor3, this);
      _initializerDefineProperty(this, "chatApi", _descriptor4, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor5, this);
      _initializerDefineProperty(this, "chatComposerPresenceManager", _descriptor6, this);
      _initializerDefineProperty(this, "chatDraftsManager", _descriptor7, this);
      _initializerDefineProperty(this, "chatEmojiPickerManager", _descriptor8, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor9, this);
      _initializerDefineProperty(this, "composer", _descriptor10, this);
      _initializerDefineProperty(this, "pane", _descriptor11, this);
      _initializerDefineProperty(this, "currentUser", _descriptor12, this);
      _initializerDefineProperty(this, "messageBus", _descriptor13, this);
      _initializerDefineProperty(this, "router", _descriptor14, this);
      _initializerDefineProperty(this, "site", _descriptor15, this);
      _initializerDefineProperty(this, "sending", _descriptor16, this);
      _initializerDefineProperty(this, "showChatQuoteSuccess", _descriptor17, this);
      _initializerDefineProperty(this, "includeHeader", _descriptor18, this);
      _initializerDefineProperty(this, "needsArrow", _descriptor19, this);
      _initializerDefineProperty(this, "atBottom", _descriptor20, this);
      _initializerDefineProperty(this, "uploadDropZone", _descriptor21, this);
      _initializerDefineProperty(this, "isScrolling", _descriptor22, this);
      _defineProperty(this, "scrollable", null);
      _defineProperty(this, "_mentionWarningsSeen", {});
      _defineProperty(this, "_unreachableGroupMentions", []);
      _defineProperty(this, "_overMembersLimitGroupMentions", []);
    }
    get messagesLoader() {
      return new _chatMessagesLoader.default((0, _application.getOwner)(this), this.args.channel);
    }
    get messagesManager() {
      return this.args.channel.messagesManager;
    }
    get currentUserMembership() {
      return this.args.channel.currentUserMembership;
    }
    setScrollable(element1) {
      this.scrollable = element1;
    }
    teardown() {
      document.removeEventListener("keydown", this._autoFocus);
      _classPrivateMethodGet(this, _cancelHandlers, _cancelHandlers2).call(this);
      (0, _userPresence.removeOnPresenceChange)(this.onPresenceChangeCallback);
      this.subscriptionManager.teardown();
    }
    didResizePane() {
      this.debounceFillPaneAttempt();
      this.computeDatesSeparators();
    }
    setup(element1) {
      this.uploadDropZone = element1;
      document.addEventListener("keydown", this._autoFocus);
      (0, _userPresence.onPresenceChange)({
        callback: this.onPresenceChangeCallback
      });
      this.messagesManager.clear();
      if (this.args.channel.isDirectMessageChannel && !this.args.channel.isFollowing) {
        this.chatChannelsManager.follow(this.args.channel);
      }
      this.args.channel.draft = this.chatDraftsManager.get(this.args.channel?.id) || _chatMessage.default.createDraftMessage(this.args.channel, {
        user: this.currentUser
      });
      this.composer.focus();
      this.loadMessages();
      // We update this value server-side when we load the Channel
      // here, so this reflects reality for sidebar unread logic.
      this.args.channel.updateLastViewedAt();
    }
    loadMessages() {
      if (!this.args.channel?.id) {
        return;
      }
      this.subscriptionManager = new _chatChannelSubscriptionManager.default(this, this.args.channel, {
        onNewMessage: this.onNewMessage
      });
      if (this.args.targetMessageId) {
        this.debounceHighlightOrFetchMessage(this.args.targetMessageId);
      } else {
        this.fetchMessages({
          fetch_from_last_read: true
        });
      }
    }
    onNewMessage(message1) {
      (0, _chatIosHacks.stackingContextFix)(this.scrollable, () => {
        this.messagesManager.addMessages([message1]);
      });
      this.debouncedUpdateLastReadMessage();
    }
    onPresenceChangeCallback(present1) {
      if (present1) {
        this.debouncedUpdateLastReadMessage();
      }
    }
    async fetchMessages(findArgs1 = {}) {
      if (this.messagesLoader.loading) {
        return;
      }
      this.messagesManager.clear();
      const result1 = await this.messagesLoader.load(findArgs1);
      this.messagesManager.messages = this.processMessages(this.args.channel, result1);
      if (findArgs1.target_message_id) {
        this.scrollToMessageId(findArgs1.target_message_id, {
          highlight: true
        });
      } else if (findArgs1.fetch_from_last_read) {
        const lastReadMessageId1 = this.currentUserMembership?.lastReadMessageId;
        this.scrollToMessageId(lastReadMessageId1);
      } else if (findArgs1.target_date) {
        this.scrollToMessageId(result1.meta.target_message_id, {
          highlight: true,
          position: "center"
        });
      } else {
        this._ignoreNextScroll = true;
        this.scrollToBottom();
      }
      this.debounceFillPaneAttempt();
      this.debouncedUpdateLastReadMessage();
    }
    async fetchMoreMessages({
      direction: direction1
    }, opts1 = {}) {
      if (this.messagesLoader.loading) {
        return;
      }
      const result1 = await this.messagesLoader.loadMore({
        direction: direction1
      });
      if (!result1) {
        return;
      }
      const messages1 = this.processMessages(this.args.channel, result1);
      if (!messages1.length) {
        return;
      }
      const targetMessageId1 = this.messagesManager.messages.lastObject.id;
      (0, _chatIosHacks.stackingContextFix)(this.scrollable, () => {
        this.messagesManager.addMessages(messages1);
      });
      if (direction1 === _chatConstants.FUTURE && !opts1.noScroll) {
        this.scrollToMessageId(targetMessageId1, {
          position: "end",
          forceAuto: true
        });
      }
      this.debounceFillPaneAttempt();
    }
    scrollToBottom() {
      this._ignoreNextScroll = true;
      (0, _scrollHelpers.scrollListToBottom)(this.scrollable);
    }
    scrollToMessageId(messageId1, options1 = {}) {
      this._ignoreNextScroll = true;
      const message1 = this.messagesManager.findMessage(messageId1);
      (0, _scrollHelpers.scrollListToMessage)(this.scrollable, message1, options1);
    }
    debounceFillPaneAttempt() {
      this._debouncedFillPaneAttemptHandler = (0, _debounce.default)(this, this.fillPaneAttempt, 500);
    }
    fetchMessagesByDate(date1) {
      if (this.messagesLoader.loading) {
        return;
      }
      const message1 = this.messagesManager.findFirstMessageOfDay(new Date(date1));
      if (message1.firstOfResults && this.messagesLoader.canLoadMorePast) {
        this.fetchMessages({
          target_date: date1,
          direction: _chatConstants.FUTURE
        });
      } else {
        this.highlightOrFetchMessage(message1.id, {
          position: "center"
        });
      }
    }
    async fillPaneAttempt() {
      if (!this.messagesLoader.fetchedOnce) {
        return;
      }
      // safeguard
      if (this.messagesManager.messages.length > 200) {
        return;
      }
      if (!this.messagesLoader.canLoadMorePast) {
        return;
      }
      (0, _runloop.schedule)("afterRender", () => {
        const firstMessageId1 = this.messagesManager.messages.firstObject?.id;
        const messageContainer1 = this.scrollable.querySelector(`.chat-message-container[data-id="${firstMessageId1}"]`);
        if (messageContainer1 && (0, _checkMessageVisibility.checkMessageTopVisibility)(this.scrollable, messageContainer1)) {
          this.fetchMoreMessages({
            direction: _chatConstants.PAST
          });
        }
      });
    }
    processMessages(channel1, result1) {
      const messages1 = [];
      let foundFirstNew1 = false;
      const hasNewest1 = this.messagesManager.messages.some(m1 => m1.newest);
      result1?.messages?.forEach((messageData1, index1) => {
        messageData1.firstOfResults = index1 === 0;
        if (this.currentUser.ignored_users) {
          // If a message has been hidden it is because the current user is ignoring
          // the user who sent it, so we want to unconditionally hide it, even if
          // we are going directly to the target
          messageData1.hidden = this.currentUser.ignored_users.includes(messageData1.user.username);
        }
        if (this.requestedTargetMessageId === messageData1.id) {
          messageData1.expanded = !messageData1.hidden;
        } else {
          messageData1.expanded = !(messageData1.hidden || messageData1.deleted_at);
        }
        // newest has to be in after fetch callback as we don't want to make it
        // dynamic or it will make the pane jump around, it will disappear on reload
        if (!hasNewest1 && !foundFirstNew1 && messageData1.id > this.currentUserMembership?.lastReadMessageId) {
          foundFirstNew1 = true;
          messageData1.newest = true;
        }
        const message1 = _chatMessage.default.create(channel1, messageData1);
        message1.manager = channel1.messagesManager;
        if (message1.thread) {
          _classPrivateMethodGet(this, _preloadThreadTrackingState, _preloadThreadTrackingState2).call(this, message1.thread, result1.tracking.thread_tracking);
        }
        messages1.push(message1);
      });
      return messages1;
    }
    debounceHighlightOrFetchMessage(messageId1, options1 = {}) {
      this._debouncedHighlightOrFetchMessageHandler = (0, _debounce.default)(this, this.highlightOrFetchMessage, messageId1, options1, 100);
    }
    highlightOrFetchMessage(messageId1, options1 = {}) {
      const message1 = this.messagesManager.findMessage(messageId1);
      if (message1) {
        this.scrollToMessageId(message1.id, Object.assign({
          highlight: true,
          position: "start",
          autoExpand: true,
          behavior: this.capabilities.isIOS ? "smooth" : null
        }, options1));
      } else {
        this.fetchMessages({
          target_message_id: messageId1
        });
      }
    }
    debouncedUpdateLastReadMessage() {
      this._debouncedUpdateLastReadMessageHandler = (0, _debounce.default)(this, this.updateLastReadMessage, _chatConstants.READ_INTERVAL_MS);
    }
    updateLastReadMessage() {
      if (!this.args.channel.isFollowing) {
        return;
      }
      (0, _runloop.schedule)("afterRender", () => {
        let lastFullyVisibleMessageNode1 = null;
        this.scrollable.querySelectorAll(".chat-message-container").forEach(item1 => {
          if ((0, _checkMessageVisibility.checkMessageBottomVisibility)(this.scrollable, item1)) {
            lastFullyVisibleMessageNode1 = item1;
          }
        });
        if (!lastFullyVisibleMessageNode1) {
          return;
        }
        let lastUnreadVisibleMessage1 = this.messagesManager.findMessage(lastFullyVisibleMessageNode1.dataset.id);
        if (!lastUnreadVisibleMessage1) {
          return;
        }
        const lastReadId1 = this.args.channel.currentUserMembership?.lastReadMessageId;
        // we don't return early if === as we want to ensure different tabs will do the check
        if (lastReadId1 > lastUnreadVisibleMessage1.id) {
          return;
        }
        return this.chatApi.markChannelAsRead(this.args.channel.id, lastUnreadVisibleMessage1.id);
      });
    }
    scrollToLatestMessage() {
      if (this.messagesLoader.canLoadMoreFuture) {
        this.fetchMessages();
      } else if (this.messagesManager.messages.length > 0) {
        this.scrollToBottom(this.scrollable);
      }
    }
    onScroll(state1) {
      (0, _chatIosHacks.bodyScrollFix)();
      (0, _runloop.next)(() => {
        if (_classPrivateMethodGet(this, _flushIgnoreNextScroll, _flushIgnoreNextScroll2).call(this)) {
          return;
        }
        this.needsArrow = this.messagesLoader.fetchedOnce && this.messagesLoader.canLoadMoreFuture || state1.distanceToBottom.pixels > 250 && !state1.atBottom;
        this.isScrolling = true;
        this.debouncedUpdateLastReadMessage();
        if (state1.atTop || !this.capabilities.isIOS && state1.up && state1.distanceToTop.percentage < 40) {
          this.fetchMoreMessages({
            direction: _chatConstants.PAST
          });
        } else if (state1.atBottom) {
          this.fetchMoreMessages({
            direction: _chatConstants.FUTURE
          });
        }
      });
    }
    onScrollEnd(state1) {
      (0, _desktopNotifications.resetIdle)();
      this.needsArrow = this.messagesLoader.fetchedOnce && this.messagesLoader.canLoadMoreFuture || state1.distanceToBottom.pixels > 250 && !state1.atBottom;
      this.isScrolling = false;
      this.atBottom = state1.atBottom;
      if (state1.atBottom) {
        this.fetchMoreMessages({
          direction: _chatConstants.FUTURE
        });
      }
    }
    async onSendMessage(message1) {
      await message1.cook();
      if (message1.editing) {
        await _classPrivateMethodGet(this, _sendEditMessage, _sendEditMessage2).call(this, message1);
      } else {
        await _classPrivateMethodGet(this, _sendNewMessage, _sendNewMessage2).call(this, message1);
      }
    }
    resetComposerMessage() {
      this.args.channel.resetDraft(this.currentUser);
    }
    _onSendError(id1, error1) {
      const stagedMessage1 = this.args.channel.messagesManager.findStagedMessage(id1);
      if (stagedMessage1) {
        if (error1.jqXHR?.responseJSON?.errors?.length) {
          // only network errors are retryable
          stagedMessage1.message = "";
          stagedMessage1.cooked = "";
          stagedMessage1.error = error1.jqXHR.responseJSON.errors[0];
        } else {
          this.chat.markNetworkAsUnreliable();
          stagedMessage1.error = "network_error";
        }
      }
      this.resetComposerMessage();
    }
    resendStagedMessage(stagedMessage1) {
      this.pane.sending = true;
      stagedMessage1.error = null;
      const data1 = {
        cooked: stagedMessage1.cooked,
        message: stagedMessage1.message,
        upload_ids: stagedMessage1.uploads.map(upload1 => upload1.id),
        staged_id: stagedMessage1.id
      };
      this.chatApi.sendMessage(this.args.channel.id, data1).catch(error1 => {
        this._onSendError(data1.staged_id, error1);
      }).then(() => {
        this.chat.markNetworkAsReliable();
      }).finally(() => {
        this.pane.sending = false;
      });
    }
    onCloseFullScreen() {
      this.chatStateManager.prefersDrawer();
      _url.default.routeTo(this.chatStateManager.lastKnownAppURL).then(() => {
        _url.default.routeTo(this.chatStateManager.lastKnownChatURL);
      });
    }
    _autoFocus(event1) {
      if (this.chatStateManager.isDrawerActive) {
        return;
      }
      const {
        key: key1,
        metaKey: metaKey1,
        ctrlKey: ctrlKey1,
        code: code1,
        target: target1
      } = event1;
      if (!key1 ||
      // Handles things like Enter, Tab, Shift
      key1.length > 1 ||
      // Don't need to focus if the user is beginning a shortcut.
      metaKey1 || ctrlKey1 ||
      // Space's key comes through as ' ' so it's not covered by key
      code1 === "Space" ||
      // ? is used for the keyboard shortcut modal
      key1 === "?") {
        return;
      }
      if (!target1 || /^(INPUT|TEXTAREA|SELECT)$/.test(target1.tagName)) {
        return;
      }
      event1.preventDefault();
      this.composer.focus({
        addText: event1.key
      });
      return;
    }
    computeDatesSeparators() {
      (0, _runloop.schedule)("afterRender", () => {
        const dates1 = [...this.scrollable.querySelectorAll(".chat-message-separator-date")].reverse();
        const height1 = this.scrollable.querySelector(".chat-messages-container").clientHeight;
        dates1.map((date1, index1) => {
          const item1 = {
            bottom: 0,
            date: date1
          };
          const line1 = date1.nextElementSibling;
          if (index1 > 0) {
            const prevDate1 = dates1[index1 - 1];
            const prevLine1 = prevDate1.nextElementSibling;
            item1.bottom = height1 - prevLine1.offsetTop;
          }
          if (dates1.length === 1) {
            item1.height = height1;
          } else {
            if (index1 === 0) {
              item1.height = height1 - line1.offsetTop;
            } else {
              const prevDate1 = dates1[index1 - 1];
              const prevLine1 = prevDate1.nextElementSibling;
              item1.height = height1 - line1.offsetTop - (height1 - prevLine1.offsetTop);
            }
          }
          return item1;
        }) // group all writes at the end
        .forEach(item1 => {
          item1.date.style.bottom = item1.bottom + "px";
          item1.date.style.height = item1.height + "px";
        });
      });
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div
        class={{concatClass
          "chat-channel"
          (if this.messagesLoader.loading "loading")
          (if this.pane.sending "chat-channel--sending")
          (unless this.messagesLoader.fetchedOnce "chat-channel--not-loaded-once")
        }}
        {{willDestroy this.teardown}}
        {{didInsert this.setup}}
        {{didUpdate this.loadMessages @targetMessageId}}
        data-id={{@channel.id}}
      >
  
        <ChatChannelStatus @channel={{@channel}} />
        <ChatNotices @channel={{@channel}} />
        <ChatMentionWarnings />
  
        <div
          class="chat-messages-scroll chat-messages-container popper-viewport"
          {{didInsert this.setScrollable}}
          {{ChatScrollableList
            (hash
              onScroll=this.onScroll onScrollEnd=this.onScrollEnd reverse=true
            )
          }}
        >
          <div
            class="chat-messages-container"
            {{ChatOnResize this.didResizePane (hash delay=100 immediate=true)}}
          >
            {{#each this.messagesManager.messages key="id" as |message|}}
              <Message
                @message={{message}}
                @disableMouseEvents={{this.isScrolling}}
                @resendStagedMessage={{this.resendStagedMessage}}
                @fetchMessagesByDate={{this.fetchMessagesByDate}}
                @context="channel"
              />
            {{else}}
              {{#unless this.messagesLoader.fetchedOnce}}
                <ChatSkeleton />
              {{/unless}}
            {{/each}}
          </div>
  
          {{! at bottom even if shown at top due to column-reverse  }}
          {{#if this.messagesLoader.loadedPast}}
            <div class="all-loaded-message">
              {{i18n "chat.all_loaded"}}
            </div>
          {{/if}}
        </div>
  
        <ChatScrollToBottomArrow
          @onScrollToBottom={{this.scrollToLatestMessage}}
          @isVisible={{this.needsArrow}}
        />
  
        {{#if this.pane.selectingMessages}}
          <ChatSelectionManager
            @enableMove={{and
              (not @channel.isDirectMessageChannel)
              @channel.canModerate
            }}
            @pane={{this.pane}}
          />
        {{else}}
          {{#if (and (not @channel.isFollowing) @channel.isCategoryChannel)}}
            <ChatChannelPreviewCard @channel={{@channel}} />
          {{else}}
            <ChatComposerChannel
              @channel={{@channel}}
              @uploadDropZone={{this.uploadDropZone}}
              @onSendMessage={{this.onSendMessage}}
            />
          {{/if}}
        {{/if}}
  
        <ChatUploadDropZone @model={{@channel}} />
      </div>
    
  */
  {
    "id": "9bgKzSeq",
    "block": "[[[1,\"\\n    \"],[11,0],[16,0,[28,[32,0],[\"chat-channel\",[52,[30,0,[\"messagesLoader\",\"loading\"]],\"loading\"],[52,[30,0,[\"pane\",\"sending\"]],\"chat-channel--sending\"],[52,[51,[30,0,[\"messagesLoader\",\"fetchedOnce\"]]],\"chat-channel--not-loaded-once\"]],null]],[16,\"data-id\",[30,1,[\"id\"]]],[4,[32,1],[[30,0,[\"teardown\"]]],null],[4,[32,2],[[30,0,[\"setup\"]]],null],[4,[32,3],[[30,0,[\"loadMessages\"]],[30,2]],null],[12],[1,\"\\n\\n      \"],[8,[32,4],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n      \"],[8,[32,5],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n      \"],[8,[32,6],null,null,null],[1,\"\\n\\n      \"],[11,0],[24,0,\"chat-messages-scroll chat-messages-container popper-viewport\"],[4,[32,2],[[30,0,[\"setScrollable\"]]],null],[4,[32,7],[[28,[32,8],null,[[\"onScroll\",\"onScrollEnd\",\"reverse\"],[[30,0,[\"onScroll\"]],[30,0,[\"onScrollEnd\"]],true]]]],null],[12],[1,\"\\n        \"],[11,0],[24,0,\"chat-messages-container\"],[4,[32,9],[[30,0,[\"didResizePane\"]],[28,[32,8],null,[[\"delay\",\"immediate\"],[100,true]]]],null],[12],[1,\"\\n\"],[42,[28,[31,3],[[28,[31,3],[[30,0,[\"messagesManager\",\"messages\"]]],null]],null],\"id\",[[[1,\"            \"],[8,[32,10],null,[[\"@message\",\"@disableMouseEvents\",\"@resendStagedMessage\",\"@fetchMessagesByDate\",\"@context\"],[[30,3],[30,0,[\"isScrolling\"]],[30,0,[\"resendStagedMessage\"]],[30,0,[\"fetchMessagesByDate\"]],\"channel\"]],null],[1,\"\\n\"]],[3]],[[[41,[51,[30,0,[\"messagesLoader\",\"fetchedOnce\"]]],[[[1,\"              \"],[8,[32,11],null,null,null],[1,\"\\n\"]],[]],null]],[]]],[1,\"        \"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"messagesLoader\",\"loadedPast\"]],[[[1,\"          \"],[10,0],[14,0,\"all-loaded-message\"],[12],[1,\"\\n            \"],[1,[28,[32,12],[\"chat.all_loaded\"],null]],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n\\n      \"],[8,[32,13],null,[[\"@onScrollToBottom\",\"@isVisible\"],[[30,0,[\"scrollToLatestMessage\"]],[30,0,[\"needsArrow\"]]]],null],[1,\"\\n\\n\"],[41,[30,0,[\"pane\",\"selectingMessages\"]],[[[1,\"        \"],[8,[32,14],null,[[\"@enableMove\",\"@pane\"],[[28,[32,15],[[28,[32,16],[[30,1,[\"isDirectMessageChannel\"]]],null],[30,1,[\"canModerate\"]]],null],[30,0,[\"pane\"]]]],null],[1,\"\\n\"]],[]],[[[41,[28,[32,15],[[28,[32,16],[[30,1,[\"isFollowing\"]]],null],[30,1,[\"isCategoryChannel\"]]],null],[[[1,\"          \"],[8,[32,17],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n\"]],[]],[[[1,\"          \"],[8,[32,18],null,[[\"@channel\",\"@uploadDropZone\",\"@onSendMessage\"],[[30,1],[30,0,[\"uploadDropZone\"]],[30,0,[\"onSendMessage\"]]]],null],[1,\"\\n\"]],[]]]],[]]],[1,\"\\n      \"],[8,[32,19],null,[[\"@model\"],[[30,1]]],null],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@channel\",\"@targetMessageId\",\"message\"],false,[\"if\",\"unless\",\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-channel.js",
    "scope": () => [_concatClass.default, _willDestroy.default, _didInsert.default, _didUpdate.default, _chatChannelStatus.default, _chatNotices.default, _chatMentionWarnings.default, _scrollableList.default, _helper.hash, _onResize.default, _chatMessage2.default, _chatSkeleton.default, _i18n.default, _scrollToBottomArrow.default, _selectionManager.default, _and.default, _not.default, _chatChannelPreviewCard.default, _channel.default, _chatUploadDropZone.default],
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "appEvents", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "chatComposerPresenceManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "chatDraftsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "chatEmojiPickerManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "composer", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "pane", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "messageBus", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "sending", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, "showChatQuoteSuccess", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, "includeHeader", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, "needsArrow", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, "atBottom", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, "uploadDropZone", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, "isScrolling", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "messagesLoader", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "messagesLoader"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setScrollable", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setScrollable"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "teardown", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "teardown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didResizePane", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didResizePane"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setup", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "loadMessages", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "loadMessages"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onNewMessage", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onNewMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onPresenceChangeCallback", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onPresenceChangeCallback"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "scrollToBottom", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "scrollToBottom"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchMessagesByDate", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "fetchMessagesByDate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "processMessages", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "processMessages"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "scrollToLatestMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "scrollToLatestMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onScroll", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onScroll"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onScrollEnd", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onScrollEnd"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onSendMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onSendMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "resetComposerMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "resetComposerMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "resendStagedMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "resendStagedMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onCloseFullScreen", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onCloseFullScreen"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_autoFocus", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_autoFocus"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "computeDatesSeparators", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "computeDatesSeparators"), _class.prototype)), _class));
  async function _sendEditMessage2(message1) {
    this.pane.sending = true;
    const data1 = {
      message: message1.message,
      upload_ids: message1.uploads.map(upload1 => upload1.id)
    };
    this.resetComposerMessage();
    try {
      (0, _chatIosHacks.stackingContextFix)(this.scrollable, async () => {
        await this.chatApi.editMessage(this.args.channel.id, message1.id, data1);
      });
    } catch (e1) {
      (0, _ajaxError.popupAjaxError)(e1);
    } finally {
      message1.editing = false;
      this.pane.sending = false;
    }
  }
  async function _sendNewMessage2(message1) {
    this.pane.sending = true;
    (0, _desktopNotifications.resetIdle)();
    (0, _chatIosHacks.stackingContextFix)(this.scrollable, async () => {
      await this.args.channel.stageMessage(message1);
    });
    message1.manager = this.args.channel.messagesManager;
    this.resetComposerMessage();
    if (!this.capabilities.isIOS && !this.messagesLoader.canLoadMoreFuture) {
      this.scrollToLatestMessage();
    }
    try {
      await this.chatApi.sendMessage(this.args.channel.id, {
        message: message1.message,
        in_reply_to_id: message1.inReplyTo?.id,
        staged_id: message1.id,
        upload_ids: message1.uploads.map(upload1 => upload1.id)
      });
      if (!this.capabilities.isIOS) {
        this.scrollToLatestMessage();
      }
    } catch (error1) {
      this._onSendError(message1.id, error1);
    } finally {
      this.pane.sending = false;
    }
  }
  function _cancelHandlers2() {
    (0, _runloop.cancel)(this._debouncedHighlightOrFetchMessageHandler);
    (0, _runloop.cancel)(this._debouncedUpdateLastReadMessageHandler);
    (0, _runloop.cancel)(this._debouncedFillPaneAttemptHandler);
  }
  function _preloadThreadTrackingState2(thread1, threadTracking1) {
    if (!threadTracking1[thread1.id]) {
      return;
    }
    thread1.tracking.unreadCount = threadTracking1[thread1.id].unread_count;
    thread1.tracking.mentionCount = threadTracking1[thread1.id].mention_count;
  }
  function _flushIgnoreNextScroll2() {
    const prev1 = this._ignoreNextScroll;
    this._ignoreNextScroll = false;
    return prev1;
  }
});
define("discourse/plugins/chat/discourse/components/chat-composer-dropdown", ["exports", "@glimmer/component", "@ember/helper", "@ember/object", "discourse/components/d-button", "discourse/helpers/concat-class", "discourse-common/helpers/i18n", "float-kit/components/d-menu", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _object, _dButton, _concatClass, _i18n, _dMenu, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2;
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let ChatComposerDropdown = _exports.default = (_class = (_class2 = class ChatComposerDropdown extends _component.default {
    onButtonClick(button1, closeFn1) {
      closeFn1();
      button1.action();
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @buttons.length}}
        <DMenu
          class={{concatClass
            "chat-composer-dropdown__trigger-btn"
            "btn-flat"
            (if @hasActivePanel "has-active-panel")
          }}
          @title={{i18n "chat.composer.toggle_toolbar"}}
          @icon="plus"
          @disabled={{@isDisabled}}
          @arrow={{true}}
          @placements={{array "top" "bottom"}}
          ...attributes
          as |menu|
        >
          <ul class="chat-composer-dropdown__list">
            {{#each @buttons as |button|}}
              <li class={{concatClass "chat-composer-dropdown__item" button.id}}>
                <DButton
                  @icon={{button.icon}}
                  @action={{fn this.onButtonClick button menu.close}}
                  @label={{button.label}}
                  class={{concatClass
                    "chat-composer-dropdown__action-btn"
                    button.id
                  }}
                />
              </li>
            {{/each}}
          </ul>
        </DMenu>
      {{/if}}
    
  */
  {
    "id": "DnmH9nGM",
    "block": "[[[1,\"\\n\"],[41,[30,1,[\"length\"]],[[[1,\"      \"],[8,[32,0],[[16,0,[28,[32,1],[\"chat-composer-dropdown__trigger-btn\",\"btn-flat\",[52,[30,2],\"has-active-panel\"]],null]],[17,3]],[[\"@title\",\"@icon\",\"@disabled\",\"@arrow\",\"@placements\"],[[28,[32,2],[\"chat.composer.toggle_toolbar\"],null],\"plus\",[30,4],true,[28,[32,3],[\"top\",\"bottom\"],null]]],[[\"default\"],[[[[1,\"\\n        \"],[10,\"ul\"],[14,0,\"chat-composer-dropdown__list\"],[12],[1,\"\\n\"],[42,[28,[31,2],[[28,[31,2],[[30,1]],null]],null],null,[[[1,\"            \"],[10,\"li\"],[15,0,[28,[32,1],[\"chat-composer-dropdown__item\",[30,6,[\"id\"]]],null]],[12],[1,\"\\n              \"],[8,[32,4],[[16,0,[28,[32,1],[\"chat-composer-dropdown__action-btn\",[30,6,[\"id\"]]],null]]],[[\"@icon\",\"@action\",\"@label\"],[[30,6,[\"icon\"]],[28,[32,5],[[30,0,[\"onButtonClick\"]],[30,6],[30,5,[\"close\"]]],null],[30,6,[\"label\"]]]],null],[1,\"\\n            \"],[13],[1,\"\\n\"]],[6]],null],[1,\"        \"],[13],[1,\"\\n      \"]],[5]]]]],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@buttons\",\"@hasActivePanel\",\"&attrs\",\"@isDisabled\",\"menu\",\"button\"],false,[\"if\",\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-composer-dropdown.js",
    "scope": () => [_dMenu.default, _concatClass.default, _i18n.default, _helper.array, _dButton.default, _helper.fn],
    "isStrictMode": true
  }), _class2), _class2), (_applyDecoratedDescriptor(_class.prototype, "onButtonClick", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onButtonClick"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-composer-message-details", ["exports", "discourse/components/d-button", "discourse/helpers/replace-emoji", "discourse-common/helpers/d-icon", "discourse-common/helpers/html-safe", "discourse/plugins/chat/discourse/components/chat-user-avatar", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _dButton, _replaceEmoji, _dIcon, _htmlSafe, _chatUserAvatar, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ChatComposerMessageDetails = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    <div
      class="chat-composer-message-details"
      data-id={{@message.id}}
      data-action={{if @message.editing "edit" "reply"}}
    >
      <div class="chat-reply">
        {{dIcon (if @message.editing "pencil-alt" "reply")}}
        <ChatUserAvatar @user={{@message.user}} />
        <span class="chat-reply__username">{{@message.user.username}}</span>
        <span class="chat-reply__excerpt">
          {{replaceEmoji (htmlSafe @message.excerpt)}}
        </span>
      </div>
  
      <DButton
        @action={{@cancelAction}}
        @icon="times-circle"
        @title="cancel"
        class="btn-flat cancel-message-action"
      />
    </div>
  
  */
  {
    "id": "f2o3pL2a",
    "block": "[[[1,\"\\n  \"],[10,0],[14,0,\"chat-composer-message-details\"],[15,\"data-id\",[30,1,[\"id\"]]],[15,\"data-action\",[52,[30,1,[\"editing\"]],\"edit\",\"reply\"]],[12],[1,\"\\n    \"],[10,0],[14,0,\"chat-reply\"],[12],[1,\"\\n      \"],[1,[28,[32,0],[[52,[30,1,[\"editing\"]],\"pencil-alt\",\"reply\"]],null]],[1,\"\\n      \"],[8,[32,1],null,[[\"@user\"],[[30,1,[\"user\"]]]],null],[1,\"\\n      \"],[10,1],[14,0,\"chat-reply__username\"],[12],[1,[30,1,[\"user\",\"username\"]]],[13],[1,\"\\n      \"],[10,1],[14,0,\"chat-reply__excerpt\"],[12],[1,\"\\n        \"],[1,[28,[32,2],[[28,[32,3],[[30,1,[\"excerpt\"]]],null]],null]],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[8,[32,4],[[24,0,\"btn-flat cancel-message-action\"]],[[\"@action\",\"@icon\",\"@title\"],[[30,2],\"times-circle\",\"cancel\"]],null],[1,\"\\n  \"],[13],[1,\"\\n\"]],[\"@message\",\"@cancelAction\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-composer-message-details.js",
    "scope": () => [_dIcon.default, _chatUserAvatar.default, _replaceEmoji.default, _htmlSafe.default, _dButton.default],
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = ChatComposerMessageDetails;
});
define("discourse/plugins/chat/discourse/components/chat-composer-upload", ["exports", "@glimmer/component", "discourse/components/d-button", "discourse/helpers/concat-class", "discourse/lib/uploads", "discourse-common/helpers/d-icon", "discourse-common/helpers/i18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _dButton, _concatClass, _uploads, _dIcon, _i18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatComposerUpload extends _component.default {
    get isImage() {
      return (0, _uploads.isImage)(this.args.upload.original_filename || this.args.upload.fileName);
    }
    get fileName() {
      return this.args.isDone ? this.args.upload.original_filename : this.args.upload.fileName;
    }
  }
  _exports.default = ChatComposerUpload;
  _class = ChatComposerUpload;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @upload}}
        <div
          class={{concatClass
            "chat-composer-upload"
            (if this.isImage "chat-composer-upload--image")
            (unless @isDone "chat-composer-upload--in-progress")
          }}
        >
          <div class="preview">
            {{#if this.isImage}}
              {{#if @isDone}}
                <img class="preview-img" src={{@upload.short_path}} />
              {{else}}
                {{dIcon "far-image"}}
              {{/if}}
            {{else}}
              {{dIcon "file-alt"}}
            {{/if}}
          </div>
  
          <span class="data">
            {{#unless this.isImage}}
              <div class="top-data">
                <span class="file-name">{{this.fileName}}</span>
              </div>
            {{/unless}}
  
            <div class="bottom-data">
              {{#if @isDone}}
                {{#unless this.isImage}}
                  <span class="extension-pill">{{@upload.extension}}</span>
                {{/unless}}
              {{else}}
                {{#if @upload.processing}}
                  <span class="processing">{{i18n "processing"}}</span>
                {{else}}
                  <span class="uploading">{{i18n "uploading"}}</span>
                {{/if}}
  
                <progress
                  class="upload-progress"
                  id="file"
                  max="100"
                  value={{@upload.progress}}
                ></progress>
              {{/if}}
            </div>
          </span>
  
          <DButton
            @action={{@onCancel}}
            @icon="times"
            @title="chat.remove_upload"
            class="btn-flat chat-composer-upload__remove-btn"
          />
        </div>
      {{/if}}
    
  */
  {
    "id": "UMadJQbB",
    "block": "[[[1,\"\\n\"],[41,[30,1],[[[1,\"      \"],[10,0],[15,0,[28,[32,0],[\"chat-composer-upload\",[52,[30,0,[\"isImage\"]],\"chat-composer-upload--image\"],[52,[51,[30,2]],\"chat-composer-upload--in-progress\"]],null]],[12],[1,\"\\n        \"],[10,0],[14,0,\"preview\"],[12],[1,\"\\n\"],[41,[30,0,[\"isImage\"]],[[[41,[30,2],[[[1,\"              \"],[10,\"img\"],[14,0,\"preview-img\"],[15,\"src\",[30,1,[\"short_path\"]]],[12],[13],[1,\"\\n\"]],[]],[[[1,\"              \"],[1,[28,[32,1],[\"far-image\"],null]],[1,\"\\n\"]],[]]]],[]],[[[1,\"            \"],[1,[28,[32,1],[\"file-alt\"],null]],[1,\"\\n\"]],[]]],[1,\"        \"],[13],[1,\"\\n\\n        \"],[10,1],[14,0,\"data\"],[12],[1,\"\\n\"],[41,[51,[30,0,[\"isImage\"]]],[[[1,\"            \"],[10,0],[14,0,\"top-data\"],[12],[1,\"\\n              \"],[10,1],[14,0,\"file-name\"],[12],[1,[30,0,[\"fileName\"]]],[13],[1,\"\\n            \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n          \"],[10,0],[14,0,\"bottom-data\"],[12],[1,\"\\n\"],[41,[30,2],[[[41,[51,[30,0,[\"isImage\"]]],[[[1,\"                \"],[10,1],[14,0,\"extension-pill\"],[12],[1,[30,1,[\"extension\"]]],[13],[1,\"\\n\"]],[]],null]],[]],[[[41,[30,1,[\"processing\"]],[[[1,\"                \"],[10,1],[14,0,\"processing\"],[12],[1,[28,[32,2],[\"processing\"],null]],[13],[1,\"\\n\"]],[]],[[[1,\"                \"],[10,1],[14,0,\"uploading\"],[12],[1,[28,[32,2],[\"uploading\"],null]],[13],[1,\"\\n\"]],[]]],[1,\"\\n              \"],[10,\"progress\"],[14,0,\"upload-progress\"],[14,1,\"file\"],[14,\"max\",\"100\"],[15,2,[30,1,[\"progress\"]]],[12],[13],[1,\"\\n\"]],[]]],[1,\"          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\\n        \"],[8,[32,3],[[24,0,\"btn-flat chat-composer-upload__remove-btn\"]],[[\"@action\",\"@icon\",\"@title\"],[[30,3],\"times\",\"chat.remove_upload\"]],null],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@upload\",\"@isDone\",\"@onCancel\"],false,[\"if\",\"unless\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-composer-upload.js",
    "scope": () => [_concatClass.default, _dIcon.default, _i18n.default, _dButton.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat-composer-uploads", ["exports", "@ember/component", "@ember/object", "@ember/service", "discourse/lib/uppy-media-optimization-plugin", "discourse/lib/utilities", "discourse/mixins/uppy-upload", "discourse-common/lib/object", "discourse-common/utils/decorators", "@ember/template-factory"], function (_exports, _component, _object, _service, _uppyMediaOptimizationPlugin, _utilities, _uppyUpload, _object2, _decorators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _obj;
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if this.showUploadsContainer}}
    <div class="chat-composer-uploads-container">
      {{#each this.uploads as |upload|}}
        <ChatComposerUpload
          @upload={{upload}}
          @isDone={{true}}
          @onCancel={{action "removeUpload" upload}}
        />
      {{/each}}
  
      {{#each this.inProgressUploads as |upload|}}
        <ChatComposerUpload
          @upload={{upload}}
          @onCancel={{action "cancelUploading" upload}}
        />
      {{/each}}
    </div>
  {{/if}}
  
  <PickFilesButton
    @allowMultiple={{true}}
    @fileInputId={{this.fileUploadElementId}}
    @fileInputClass="hidden-upload-field"
  />
  */
  {
    "id": "FoGAB5VV",
    "block": "[[[41,[30,0,[\"showUploadsContainer\"]],[[[1,\"  \"],[10,0],[14,0,\"chat-composer-uploads-container\"],[12],[1,\"\\n\"],[42,[28,[37,2],[[28,[37,2],[[30,0,[\"uploads\"]]],null]],null],null,[[[1,\"      \"],[8,[39,3],null,[[\"@upload\",\"@isDone\",\"@onCancel\"],[[30,1],true,[28,[37,4],[[30,0],\"removeUpload\",[30,1]],null]]],null],[1,\"\\n\"]],[1]],null],[1,\"\\n\"],[42,[28,[37,2],[[28,[37,2],[[30,0,[\"inProgressUploads\"]]],null]],null],null,[[[1,\"      \"],[8,[39,3],null,[[\"@upload\",\"@onCancel\"],[[30,2],[28,[37,4],[[30,0],\"cancelUploading\",[30,2]],null]]],null],[1,\"\\n\"]],[2]],null],[1,\"  \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[8,[39,5],null,[[\"@allowMultiple\",\"@fileInputId\",\"@fileInputClass\"],[true,[30,0,[\"fileUploadElementId\"]],\"hidden-upload-field\"]],null]],[\"upload\",\"upload\"],false,[\"if\",\"each\",\"-track-array\",\"chat-composer-upload\",\"action\",\"pick-files-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/chat-composer-uploads.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, _component.default.extend(_uppyUpload.default, (_dec = (0, _decorators.default)("uploads.length", "inProgressUploads.length"), (_obj = {
    classNames: ["chat-composer-uploads"],
    mediaOptimizationWorker: (0, _service.inject)(),
    chatStateManager: (0, _service.inject)(),
    id: "chat-composer-uploader",
    type: "chat-composer",
    existingUploads: null,
    uploads: null,
    useMultipartUploadsIfAvailable: true,
    uploadDropZone: null,
    init() {
      this._super(...arguments);
      this.setProperties({
        fileInputSelector: `#${this.fileUploadElementId}`
      });
    },
    didReceiveAttrs() {
      this._super(...arguments);
      if (this.inProgressUploads?.length > 0) {
        this._uppyInstance?.cancelAll();
      }
      this.set("uploads", this.existingUploads ? (0, _object2.cloneJSON)(this.existingUploads) : []);
    },
    didInsertElement() {
      this._super(...arguments);
      this.composerInputEl?.addEventListener("paste", this._pasteEventListener);
    },
    willDestroyElement() {
      this._super(...arguments);
      this.composerInputEl?.removeEventListener("paste", this._pasteEventListener);
    },
    uploadDone(upload) {
      this.uploads.pushObject(upload);
      this._triggerUploadsChanged();
    },
    showUploadsContainer(uploadsCount, inProgressUploadsCount) {
      return uploadsCount > 0 || inProgressUploadsCount > 0;
    },
    cancelUploading(upload) {
      this.appEvents.trigger(`upload-mixin:${this.id}:cancel-upload`, {
        fileId: upload.id
      });
      this.removeUpload(upload);
    },
    removeUpload(upload) {
      this.uploads.removeObject(upload);
      this._triggerUploadsChanged();
    },
    _uploadDropTargetOptions() {
      return {
        target: this.uploadDropZone || document.body
      };
    },
    _uppyReady() {
      if (this.siteSettings.composer_media_optimization_image_enabled) {
        this._useUploadPlugin(_uppyMediaOptimizationPlugin.default, {
          optimizeFn: (data, opts) => this.mediaOptimizationWorker.optimizeImage(data, opts),
          runParallel: !this.site.isMobileDevice
        });
      }
      this._onPreProcessProgress(file => {
        const inProgressUpload = this.inProgressUploads.findBy("id", file.id);
        if (!inProgressUpload?.processing) {
          inProgressUpload?.set("processing", true);
        }
      });
      this._onPreProcessComplete(file => {
        const inProgressUpload = this.inProgressUploads.findBy("id", file.id);
        inProgressUpload?.set("processing", false);
      });
    },
    _pasteEventListener(event) {
      if (document.activeElement !== this.composerInputEl) {
        return;
      }
      const {
        canUpload,
        canPasteHtml,
        types
      } = (0, _utilities.clipboardHelpers)(event, {
        siteSettings: this.siteSettings,
        canUpload: true
      });
      if (!canUpload || canPasteHtml || types.includes("text/plain")) {
        return;
      }
      if (event && event.clipboardData && event.clipboardData.files) {
        this._addFiles([...event.clipboardData.files], {
          pasted: true
        });
      }
    },
    onProgressUploadsChanged() {
      this._triggerUploadsChanged(this.uploads, {
        inProgressUploadsCount: this.inProgressUploads?.length
      });
    },
    _triggerUploadsChanged() {
      this.onUploadChanged?.(this.uploads, {
        inProgressUploadsCount: this.inProgressUploads?.length
      });
    }
  }, (_applyDecoratedDescriptor(_obj, "showUploadsContainer", [_dec], Object.getOwnPropertyDescriptor(_obj, "showUploadsContainer"), _obj), _applyDecoratedDescriptor(_obj, "cancelUploading", [_object.action], Object.getOwnPropertyDescriptor(_obj, "cancelUploading"), _obj), _applyDecoratedDescriptor(_obj, "removeUpload", [_object.action], Object.getOwnPropertyDescriptor(_obj, "removeUpload"), _obj), _applyDecoratedDescriptor(_obj, "_pasteEventListener", [_decorators.bind], Object.getOwnPropertyDescriptor(_obj, "_pasteEventListener"), _obj)), _obj))));
});
define("discourse/plugins/chat/discourse/components/chat-composer", ["exports", "@ember/component", "@glimmer/component", "@glimmer/tracking", "@ember/application", "@ember/object", "@ember/runloop", "@ember/service", "@ember/utils", "jquery", "pretty-text/emoji", "pretty-text/emoji/data", "rsvp", "discourse/components/modal/insert-hyperlink", "discourse/lib/autocomplete", "discourse/lib/hashtag-autocomplete", "discourse/lib/text", "discourse/lib/user-search", "discourse/lib/user-status-on-autocomplete", "discourse-common/lib/object", "discourse-common/lib/raw-templates", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/modal/channel-summary", "discourse/plugins/chat/discourse/lib/chat-composer-buttons", "discourse/plugins/chat/discourse/lib/chat-message-interactor", "discourse/plugins/chat/discourse/lib/textarea-interactor", "@ember/template-factory"], function (_exports, _component, _component2, _tracking, _application, _object, _runloop, _service, _utils, _jquery, _emoji, _data, _rsvp, _insertHyperlink, _autocomplete, _hashtagAutocomplete, _text, _userSearch, _userStatusOnAutocomplete, _object2, _rawTemplates, _discourseI18n, _channelSummary, _chatComposerButtons, _chatMessageInteractor, _textareaInteractor, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _addMentionedUser, _applyUserAutocomplete, _applyCategoryHashtagAutocomplete, _applyEmojiAutocomplete, _isAutocompleteDisplayed, _deleteEmptyMessage;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{! template-lint-disable no-pointer-down-event-binding }}
  {{! template-lint-disable no-invalid-interactive }}
  
  <div class="chat-composer__wrapper">
    {{#if this.shouldRenderMessageDetails}}
      <ChatComposerMessageDetails
        @message={{if this.draft.editing this.draft this.draft.inReplyTo}}
        @cancelAction={{this.resetDraft}}
      />
    {{/if}}
  
    <div
      role="region"
      aria-label={{i18n "chat.aria_roles.composer"}}
      class={{concat-class
        "chat-composer"
        (if this.isFocused "is-focused")
        (if this.pane.sending "is-sending")
        (if this.sendEnabled "is-send-enabled" "is-send-disabled")
        (if this.disabled "is-disabled" "is-enabled")
        (if this.draft.draftSaved "is-draft-saved" "is-draft-unsaved")
      }}
      {{did-update this.didUpdateMessage this.draft}}
      {{did-update this.didUpdateInReplyTo this.draft.inReplyTo}}
      {{did-insert this.setup}}
      {{will-destroy this.teardown}}
      {{will-destroy this.cancelPersistDraft}}
    >
      <div class="chat-composer__outer-container">
        <div class="chat-composer__inner-container">
          <ChatComposerDropdown
            @buttons={{this.dropdownButtons}}
            @isDisabled={{this.disabled}}
          />
  
          <div
            class="chat-composer__input-container"
            {{on "click" this.composer.focus}}
          >
            <DTextarea
              id={{this.composerId}}
              value={{readonly this.draft.message}}
              type="text"
              class="chat-composer__input"
              disabled={{this.disabled}}
              autocorrect="on"
              autocapitalize="sentences"
              placeholder={{this.placeholder}}
              rows={{1}}
              {{did-insert this.setupTextareaInteractor}}
              {{on "input" this.onInput}}
              {{on "keydown" this.onKeyDown}}
              {{on "focusin" this.onTextareaFocusIn}}
              {{on "focusin" (fn this.computeIsFocused true)}}
              {{on "focusout" (fn this.computeIsFocused false)}}
              {{did-insert this.setupAutocomplete}}
              data-chat-composer-context={{this.context}}
            />
          </div>
  
          {{#if this.inlineButtons.length}}
            {{#each this.inlineButtons as |button|}}
              <Chat::Composer::Button
                @icon={{button.icon}}
                class="-{{button.id}}"
                disabled={{or this.disabled button.disabled}}
                tabindex={{if button.disabled -1 0}}
                {{on
                  "click"
                  (fn this.handleInlineButtonAction button.action)
                  bubbles=false
                }}
                {{on "focus" (fn this.computeIsFocused true)}}
                {{on "blur" (fn this.computeIsFocused false)}}
              />
            {{/each}}
  
            <Chat::Composer::Separator />
          {{/if}}
  
          <Chat::Composer::Button
            @icon="paper-plane"
            class="-send"
            title={{i18n "chat.composer.send"}}
            disabled={{or this.disabled (not this.sendEnabled)}}
            tabindex={{if this.sendEnabled 0 -1}}
            {{on "click" this.onSend}}
            {{on "mousedown" this.trapMouseDown}}
            {{on "focus" (fn this.computeIsFocused true)}}
            {{on "blur" (fn this.computeIsFocused false)}}
          />
        </div>
      </div>
    </div>
  
    {{#if this.canAttachUploads}}
      <ChatComposerUploads
        @fileUploadElementId={{this.fileUploadElementId}}
        @onUploadChanged={{this.onUploadChanged}}
        @existingUploads={{this.draft.uploads}}
        @uploadDropZone={{@uploadDropZone}}
        @composerInputEl={{this.composer.textarea.element}}
      />
    {{/if}}
  
    <div class="chat-replying-indicator-container">
      <ChatReplyingIndicator @presenceChannelName={{this.presenceChannelName}} />
    </div>
  
    <ChatEmojiPicker
      @context={{this.context}}
      @didSelectEmoji={{this.onSelectEmoji}}
    />
  </div>
  */
  {
    "id": "h27tq99D",
    "block": "[[[1,\"\\n\"],[10,0],[14,0,\"chat-composer__wrapper\"],[12],[1,\"\\n\"],[41,[30,0,[\"shouldRenderMessageDetails\"]],[[[1,\"    \"],[8,[39,1],null,[[\"@message\",\"@cancelAction\"],[[52,[30,0,[\"draft\",\"editing\"]],[30,0,[\"draft\"]],[30,0,[\"draft\",\"inReplyTo\"]]],[30,0,[\"resetDraft\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n  \"],[11,0],[24,\"role\",\"region\"],[16,\"aria-label\",[28,[37,2],[\"chat.aria_roles.composer\"],null]],[16,0,[28,[37,3],[\"chat-composer\",[52,[30,0,[\"isFocused\"]],\"is-focused\"],[52,[30,0,[\"pane\",\"sending\"]],\"is-sending\"],[52,[30,0,[\"sendEnabled\"]],\"is-send-enabled\",\"is-send-disabled\"],[52,[30,0,[\"disabled\"]],\"is-disabled\",\"is-enabled\"],[52,[30,0,[\"draft\",\"draftSaved\"]],\"is-draft-saved\",\"is-draft-unsaved\"]],null]],[4,[38,4],[[30,0,[\"didUpdateMessage\"]],[30,0,[\"draft\"]]],null],[4,[38,4],[[30,0,[\"didUpdateInReplyTo\"]],[30,0,[\"draft\",\"inReplyTo\"]]],null],[4,[38,5],[[30,0,[\"setup\"]]],null],[4,[38,6],[[30,0,[\"teardown\"]]],null],[4,[38,6],[[30,0,[\"cancelPersistDraft\"]]],null],[12],[1,\"\\n    \"],[10,0],[14,0,\"chat-composer__outer-container\"],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-composer__inner-container\"],[12],[1,\"\\n        \"],[8,[39,7],null,[[\"@buttons\",\"@isDisabled\"],[[30,0,[\"dropdownButtons\"]],[30,0,[\"disabled\"]]]],null],[1,\"\\n\\n        \"],[11,0],[24,0,\"chat-composer__input-container\"],[4,[38,8],[\"click\",[30,0,[\"composer\",\"focus\"]]],null],[12],[1,\"\\n          \"],[8,[39,9],[[16,1,[30,0,[\"composerId\"]]],[16,2,[28,[37,10],[[30,0,[\"draft\",\"message\"]]],null]],[24,0,\"chat-composer__input\"],[16,\"disabled\",[30,0,[\"disabled\"]]],[24,\"autocorrect\",\"on\"],[24,\"autocapitalize\",\"sentences\"],[16,\"placeholder\",[30,0,[\"placeholder\"]]],[16,\"rows\",1],[16,\"data-chat-composer-context\",[30,0,[\"context\"]]],[24,4,\"text\"],[4,[38,5],[[30,0,[\"setupTextareaInteractor\"]]],null],[4,[38,8],[\"input\",[30,0,[\"onInput\"]]],null],[4,[38,8],[\"keydown\",[30,0,[\"onKeyDown\"]]],null],[4,[38,8],[\"focusin\",[30,0,[\"onTextareaFocusIn\"]]],null],[4,[38,8],[\"focusin\",[28,[37,11],[[30,0,[\"computeIsFocused\"]],true],null]],null],[4,[38,8],[\"focusout\",[28,[37,11],[[30,0,[\"computeIsFocused\"]],false],null]],null],[4,[38,5],[[30,0,[\"setupAutocomplete\"]]],null]],null,null],[1,\"\\n        \"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"inlineButtons\",\"length\"]],[[[42,[28,[37,13],[[28,[37,13],[[30,0,[\"inlineButtons\"]]],null]],null],null,[[[1,\"            \"],[8,[39,14],[[16,0,[29,[\"-\",[30,1,[\"id\"]]]]],[16,\"disabled\",[28,[37,15],[[30,0,[\"disabled\"]],[30,1,[\"disabled\"]]],null]],[16,\"tabindex\",[52,[30,1,[\"disabled\"]],-1,0]],[4,[38,8],[\"click\",[28,[37,11],[[30,0,[\"handleInlineButtonAction\"]],[30,1,[\"action\"]]],null]],[[\"bubbles\"],[false]]],[4,[38,8],[\"focus\",[28,[37,11],[[30,0,[\"computeIsFocused\"]],true],null]],null],[4,[38,8],[\"blur\",[28,[37,11],[[30,0,[\"computeIsFocused\"]],false],null]],null]],[[\"@icon\"],[[30,1,[\"icon\"]]]],null],[1,\"\\n\"]],[1]],null],[1,\"\\n          \"],[8,[39,16],null,null,null],[1,\"\\n\"]],[]],null],[1,\"\\n        \"],[8,[39,14],[[24,0,\"-send\"],[16,\"title\",[28,[37,2],[\"chat.composer.send\"],null]],[16,\"disabled\",[28,[37,15],[[30,0,[\"disabled\"]],[28,[37,17],[[30,0,[\"sendEnabled\"]]],null]],null]],[16,\"tabindex\",[52,[30,0,[\"sendEnabled\"]],0,-1]],[4,[38,8],[\"click\",[30,0,[\"onSend\"]]],null],[4,[38,8],[\"mousedown\",[30,0,[\"trapMouseDown\"]]],null],[4,[38,8],[\"focus\",[28,[37,11],[[30,0,[\"computeIsFocused\"]],true],null]],null],[4,[38,8],[\"blur\",[28,[37,11],[[30,0,[\"computeIsFocused\"]],false],null]],null]],[[\"@icon\"],[\"paper-plane\"]],null],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"canAttachUploads\"]],[[[1,\"    \"],[8,[39,18],null,[[\"@fileUploadElementId\",\"@onUploadChanged\",\"@existingUploads\",\"@uploadDropZone\",\"@composerInputEl\"],[[30,0,[\"fileUploadElementId\"]],[30,0,[\"onUploadChanged\"]],[30,0,[\"draft\",\"uploads\"]],[30,2],[30,0,[\"composer\",\"textarea\",\"element\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n  \"],[10,0],[14,0,\"chat-replying-indicator-container\"],[12],[1,\"\\n    \"],[8,[39,19],null,[[\"@presenceChannelName\"],[[30,0,[\"presenceChannelName\"]]]],null],[1,\"\\n  \"],[13],[1,\"\\n\\n  \"],[8,[39,20],null,[[\"@context\",\"@didSelectEmoji\"],[[30,0,[\"context\"]],[30,0,[\"onSelectEmoji\"]]]],null],[1,\"\\n\"],[13]],[\"button\",\"@uploadDropZone\"],false,[\"if\",\"chat-composer-message-details\",\"i18n\",\"concat-class\",\"did-update\",\"did-insert\",\"will-destroy\",\"chat-composer-dropdown\",\"on\",\"d-textarea\",\"readonly\",\"fn\",\"each\",\"-track-array\",\"chat/composer/button\",\"or\",\"chat/composer/separator\",\"not\",\"chat-composer-uploads\",\"chat-replying-indicator\",\"chat-emoji-picker\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/chat-composer.hbs",
    "isStrictMode": false
  });
  let ChatComposer = _exports.default = (_class = (_addMentionedUser = /*#__PURE__*/new WeakSet(), _applyUserAutocomplete = /*#__PURE__*/new WeakSet(), _applyCategoryHashtagAutocomplete = /*#__PURE__*/new WeakSet(), _applyEmojiAutocomplete = /*#__PURE__*/new WeakSet(), _isAutocompleteDisplayed = /*#__PURE__*/new WeakSet(), _deleteEmptyMessage = /*#__PURE__*/new WeakSet(), class ChatComposer extends _component2.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _deleteEmptyMessage);
      _classPrivateMethodInitSpec(this, _isAutocompleteDisplayed);
      _classPrivateMethodInitSpec(this, _applyEmojiAutocomplete);
      _classPrivateMethodInitSpec(this, _applyCategoryHashtagAutocomplete);
      _classPrivateMethodInitSpec(this, _applyUserAutocomplete);
      _classPrivateMethodInitSpec(this, _addMentionedUser);
      _initializerDefineProperty(this, "capabilities", _descriptor, this);
      _initializerDefineProperty(this, "site", _descriptor2, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor3, this);
      _initializerDefineProperty(this, "store", _descriptor4, this);
      _initializerDefineProperty(this, "chat", _descriptor5, this);
      _initializerDefineProperty(this, "chatComposerPresenceManager", _descriptor6, this);
      _initializerDefineProperty(this, "chatComposerWarningsTracker", _descriptor7, this);
      _initializerDefineProperty(this, "appEvents", _descriptor8, this);
      _initializerDefineProperty(this, "chatEmojiReactionStore", _descriptor9, this);
      _initializerDefineProperty(this, "chatEmojiPickerManager", _descriptor10, this);
      _initializerDefineProperty(this, "currentUser", _descriptor11, this);
      _initializerDefineProperty(this, "chatApi", _descriptor12, this);
      _initializerDefineProperty(this, "chatDraftsManager", _descriptor13, this);
      _initializerDefineProperty(this, "modal", _descriptor14, this);
      _initializerDefineProperty(this, "isFocused", _descriptor15, this);
      _initializerDefineProperty(this, "inProgressUploadsCount", _descriptor16, this);
      _initializerDefineProperty(this, "presenceChannelName", _descriptor17, this);
    }
    get shouldRenderMessageDetails() {
      return this.draft?.editing || this.context === "channel" && this.draft?.inReplyTo;
    }
    get inlineButtons() {
      return (0, _chatComposerButtons.chatComposerButtons)(this, "inline", this.context);
    }
    get dropdownButtons() {
      return (0, _chatComposerButtons.chatComposerButtons)(this, "dropdown", this.context);
    }
    get fileUploadElementId() {
      return this.context + "-file-uploader";
    }
    get canAttachUploads() {
      return this.siteSettings.chat_allow_uploads && (0, _utils.isPresent)(this.args.uploadDropZone);
    }
    persistDraft() {}
    setupAutocomplete(textarea) {
      const $textarea = (0, _jquery.default)(textarea);
      _classPrivateMethodGet(this, _applyUserAutocomplete, _applyUserAutocomplete2).call(this, $textarea);
      _classPrivateMethodGet(this, _applyEmojiAutocomplete, _applyEmojiAutocomplete2).call(this, $textarea);
      _classPrivateMethodGet(this, _applyCategoryHashtagAutocomplete, _applyCategoryHashtagAutocomplete2).call(this, $textarea);
    }
    setupTextareaInteractor(textarea) {
      this.composer.textarea = new _textareaInteractor.default((0, _application.getOwner)(this), textarea);
      if (this.site.desktopView && this.args.autofocus) {
        this.composer.focus({
          ensureAtEnd: true,
          refreshHeight: true
        });
      }
    }
    didUpdateMessage() {
      this.cancelPersistDraft();
      this.composer.textarea.value = this.draft.message;
      this.persistDraft();
      this.captureMentions({
        skipDebounce: true
      });
    }
    didUpdateInReplyTo() {
      this.cancelPersistDraft();
      this.persistDraft();
    }
    cancelPersistDraft() {
      (0, _runloop.cancel)(this._persistHandler);
    }
    handleInlineButtonAction(buttonAction, event) {
      event.stopPropagation();
      buttonAction();
    }
    get hasContent() {
      const minLength = this.siteSettings.chat_minimum_message_length || 1;
      return this.draft?.message?.length >= minLength || this.canAttachUploads && this.hasUploads;
    }
    get hasUploads() {
      return this.draft?.uploads?.length > 0;
    }
    get sendEnabled() {
      return (this.hasContent || this.draft?.editing) && !this.pane.sending && !this.inProgressUploadsCount > 0;
    }
    setup() {
      this.appEvents.on("chat:modify-selection", this, "modifySelection");
      this.appEvents.on("chat:open-insert-link-modal", this, "openInsertLinkModal");
    }
    teardown() {
      this.appEvents.off("chat:modify-selection", this, "modifySelection");
      this.appEvents.off("chat:open-insert-link-modal", this, "openInsertLinkModal");
      this.pane.sending = false;
    }
    insertDiscourseLocalDate() {
      // JIT import because local-dates isn't necessarily enabled
      const LocalDatesCreateModal = require("discourse/plugins/discourse-local-dates/discourse/components/modal/local-dates-create").default;
      this.modal.show(LocalDatesCreateModal, {
        model: {
          insertDate: markup => {
            this.composer.textarea.addText(this.composer.textarea.getSelected(), markup);
            this.composer.focus();
          }
        }
      });
    }
    uploadClicked() {
      document.querySelector(`#${this.fileUploadElementId}`).click();
    }
    computeIsFocused(isFocused) {
      (0, _runloop.next)(() => {
        this.isFocused = isFocused;
      });
    }
    onInput(event) {
      this.draft.draftSaved = false;
      this.draft.message = event.target.value;
      this.composer.textarea.refreshHeight();
      this.reportReplyingPresence();
      this.persistDraft();
      this.captureMentions();
    }
    onUploadChanged(uploads, {
      inProgressUploadsCount
    }) {
      this.draft.draftSaved = false;
      this.inProgressUploadsCount = inProgressUploadsCount || 0;
      if (typeof uploads !== "undefined" && inProgressUploadsCount !== "undefined" && inProgressUploadsCount === 0 && this.draft) {
        this.draft.uploads = (0, _object2.cloneJSON)(uploads);
      }
      this.composer.textarea?.focus();
      this.reportReplyingPresence();
      this.persistDraft();
    }
    trapMouseDown(event) {
      event?.preventDefault();
    }
    async onSend(event) {
      if (!this.sendEnabled) {
        return;
      }
      event?.preventDefault();
      if (this.draft.editing && !this.hasUploads && this.draft.message.length === 0) {
        _classPrivateMethodGet(this, _deleteEmptyMessage, _deleteEmptyMessage2).call(this);
        return;
      }
      await this.args.onSendMessage(this.draft);
      this.composer.textarea.refreshHeight();
    }
    reportReplyingPresence() {
      if (!this.args.channel || !this.draft) {
        return;
      }
      this.chatComposerPresenceManager.notifyState(this.presenceChannelName, !this.draft.editing && this.hasContent);
    }
    modifySelection(event, options = {
      type: null,
      context: null
    }) {
      if (options.context !== this.context) {
        return;
      }
      const sel = this.composer.textarea.getSelected("", {
        lineVal: true
      });
      if (options.type === "bold") {
        this.composer.textarea.applySurround(sel, "**", "**", "bold_text");
      } else if (options.type === "italic") {
        this.composer.textarea.applySurround(sel, "_", "_", "italic_text");
      } else if (options.type === "code") {
        this.composer.textarea.applySurround(sel, "`", "`", "code_text");
      }
    }
    onTextareaFocusIn(textarea) {
      if (!this.capabilities.isIOS) {
        return;
      }

      // hack to prevent the whole viewport to move on focus input
      // we need access to native node
      textarea = this.composer.textarea.textarea;
      textarea.style.transform = "translateY(-99999px)";
      textarea.focus();
      window.requestAnimationFrame(() => {
        window.requestAnimationFrame(() => {
          textarea.style.transform = "";
        });
      });
    }
    onKeyDown(event) {
      if (this.site.mobileView || event.altKey || event.metaKey || _classPrivateMethodGet(this, _isAutocompleteDisplayed, _isAutocompleteDisplayed2).call(this)) {
        return;
      }
      if (event.key === "Escape" && !event.shiftKey) {
        return this.handleEscape(event);
      }
      if (event.key === "Enter") {
        if (event.shiftKey) {
          // Shift+Enter: insert newline
          return;
        }

        // Ctrl+Enter, plain Enter: send
        if (!event.ctrlKey) {
          // if we are inside a code block just insert newline
          const {
            pre
          } = this.composer.textarea.getSelected({
            lineVal: true
          });
          if (this.composer.textarea.isInside(pre, /(^|\n)```/g)) {
            return;
          }
        }
        this.onSend();
        event.preventDefault();
        return false;
      }
      if (event.key === "ArrowUp" && !this.hasContent && !this.draft.editing) {
        if (event.shiftKey && this.lastMessage?.replyable) {
          this.composer.replyTo(this.lastMessage);
        } else {
          const editableMessage = this.lastUserMessage(this.currentUser);
          if (editableMessage?.editable) {
            this.composer.edit(editableMessage);
            this.args.channel.draft = editableMessage;
          }
        }
      }
    }
    openInsertLinkModal(event, options = {
      context: null
    }) {
      if (options.context !== this.context) {
        return;
      }
      const selected = this.composer.textarea.getSelected("", {
        lineVal: true
      });
      const linkText = selected?.value;
      this.modal.show(_insertHyperlink.default, {
        model: {
          linkText,
          toolbarEvent: {
            addText: text => this.composer.textarea.addText(selected, text)
          }
        }
      });
    }
    onSelectEmoji(emoji) {
      const code = `:${emoji}:`;
      this.chatEmojiReactionStore.track(code);
      this.composer.textarea.addText(this.composer.textarea.getSelected(), code);
      if (this.site.desktopView) {
        this.composer.focus();
      } else {
        this.chatEmojiPickerManager.close();
      }
    }
    captureMentions(opts = {
      skipDebounce: false
    }) {
      if (this.hasContent) {
        this.chatComposerWarningsTracker.trackMentions(this.draft, opts.skipDebounce);
      } else {
        this.chatComposerWarningsTracker.reset();
      }
    }
    showChannelSummaryModal() {
      this.modal.show(_channelSummary.default, {
        model: {
          channelId: this.args.channel.id
        }
      });
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "store", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "chatComposerPresenceManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "chatComposerWarningsTracker", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "appEvents", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "chatEmojiReactionStore", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "chatEmojiPickerManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "chatDraftsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "isFocused", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "inProgressUploadsCount", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, "presenceChannelName", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "persistDraft", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "persistDraft"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setupAutocomplete", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setupAutocomplete"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setupTextareaInteractor", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setupTextareaInteractor"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didUpdateMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didUpdateMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didUpdateInReplyTo", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didUpdateInReplyTo"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cancelPersistDraft", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "cancelPersistDraft"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleInlineButtonAction", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "handleInlineButtonAction"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setup", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "teardown", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "teardown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "insertDiscourseLocalDate", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "insertDiscourseLocalDate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "uploadClicked", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "uploadClicked"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "computeIsFocused", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "computeIsFocused"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onInput", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onInput"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onUploadChanged", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onUploadChanged"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "trapMouseDown", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "trapMouseDown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onSend", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onSend"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "modifySelection", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "modifySelection"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onTextareaFocusIn", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onTextareaFocusIn"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onKeyDown", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onKeyDown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openInsertLinkModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openInsertLinkModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onSelectEmoji", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onSelectEmoji"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "captureMentions", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "captureMentions"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "showChannelSummaryModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "showChannelSummaryModal"), _class.prototype)), _class);
  function _addMentionedUser2(userData) {
    const user = this.store.createRecord("user", userData);
    this.draft.mentionedUsers.set(user.id, user);
  }
  function _applyUserAutocomplete2($textarea) {
    if (!this.siteSettings.enable_mentions) {
      return;
    }
    $textarea.autocomplete({
      template: (0, _rawTemplates.findRawTemplate)("user-selector-autocomplete"),
      key: "@",
      width: "100%",
      treatAsTextarea: true,
      autoSelectFirstSuggestion: true,
      transformComplete: obj => {
        if (obj.isUser) {
          _classPrivateMethodGet(this, _addMentionedUser, _addMentionedUser2).call(this, obj);
        }
        return obj.username || obj.name;
      },
      dataSource: term => {
        (0, _userStatusOnAutocomplete.destroyUserStatuses)();
        return (0, _userSearch.default)({
          term,
          includeGroups: true
        }).then(result => {
          if (result?.users?.length > 0) {
            const presentUserNames = this.chat.presenceChannel.users?.mapBy("username");
            result.users.forEach(user => {
              if (presentUserNames.includes(user.username)) {
                user.cssClasses = "is-online";
              }
            });
            (0, _userStatusOnAutocomplete.initUserStatusHtml)((0, _application.getOwner)(this), result.users);
          }
          return result;
        });
      },
      onRender: options => {
        (0, _userStatusOnAutocomplete.renderUserStatusHtml)(options);
      },
      afterComplete: (text, event) => {
        event.preventDefault();
        this.composer.textarea.value = text;
        this.composer.focus();
        this.captureMentions();
      },
      onClose: _userStatusOnAutocomplete.destroyUserStatuses
    });
  }
  function _applyCategoryHashtagAutocomplete2($textarea) {
    (0, _hashtagAutocomplete.setupHashtagAutocomplete)(this.site.hashtag_configurations["chat-composer"], $textarea, this.siteSettings, {
      treatAsTextarea: true,
      afterComplete: (text, event) => {
        event.preventDefault();
        this.composer.textarea.value = text;
        this.composer.focus();
      }
    });
  }
  function _applyEmojiAutocomplete2($textarea) {
    if (!this.siteSettings.enable_emoji) {
      return;
    }
    $textarea.autocomplete({
      template: (0, _rawTemplates.findRawTemplate)("emoji-selector-autocomplete"),
      key: ":",
      afterComplete: (text, event) => {
        event.preventDefault();
        this.composer.textarea.value = text;
        this.composer.focus();
      },
      treatAsTextarea: true,
      onKeyUp: (text, cp) => {
        const matches = /(?:^|[\s.\?,@\/#!%&*;:\[\]{}=\-_()])(:(?!:).?[\w-]*:?(?!:)(?:t\d?)?:?) ?$/gi.exec(text.substring(0, cp));
        if (matches && matches[1]) {
          return [matches[1]];
        }
      },
      transformComplete: v => {
        if (v.code) {
          this.chatEmojiReactionStore.track(v.code);
          return `${v.code}:`;
        } else {
          $textarea.autocomplete({
            cancel: true
          });
          this.chatEmojiPickerManager.open({
            context: this.context,
            initialFilter: v.term
          });
          return "";
        }
      },
      dataSource: term => {
        return new _rsvp.Promise(resolve => {
          const full = `:${term}`;
          term = term.toLowerCase();

          // We need to avoid quick emoji autocomplete cause it can interfere with quick
          // typing, set minimal length to 2
          let minLength = Math.max(this.siteSettings.emoji_autocomplete_min_chars, 2);
          if (term.length < minLength) {
            return resolve(_autocomplete.SKIP);
          }

          // bypass :-p and other common typed smileys
          if (!term.match(/[^-\{\}\[\]\(\)\*_\<\>\\\/].*[^-\{\}\[\]\(\)\*_\<\>\\\/]/)) {
            return resolve(_autocomplete.SKIP);
          }
          if (term === "") {
            if (this.chatEmojiReactionStore.favorites.length) {
              return resolve(this.chatEmojiReactionStore.favorites.slice(0, 5));
            } else {
              return resolve(["slight_smile", "smile", "wink", "sunny", "blush"]);
            }
          }

          // note this will only work for emojis starting with :
          // eg: :-)
          const emojiTranslation = this.site.custom_emoji_translation || {};
          const allTranslations = Object.assign({}, _data.translations, emojiTranslation);
          if (allTranslations[full]) {
            return resolve([allTranslations[full]]);
          }
          const emojiDenied = this.site.denied_emojis || [];
          const match = term.match(/^:?(.*?):t([2-6])?$/);
          if (match) {
            const name = match[1];
            const scale = match[2];
            if ((0, _emoji.isSkinTonableEmoji)(name) && !emojiDenied.includes(name)) {
              if (scale) {
                return resolve([`${name}:t${scale}`]);
              } else {
                return resolve([2, 3, 4, 5, 6].map(x => `${name}:t${x}`));
              }
            }
          }
          const options = (0, _emoji.emojiSearch)(term, {
            maxResults: 5,
            diversity: this.chatEmojiReactionStore.diversity,
            exclude: emojiDenied
          });
          return resolve(options);
        }).then(list => {
          if (list === _autocomplete.SKIP) {
            return;
          }
          return list.map(code => ({
            code,
            src: (0, _text.emojiUrlFor)(code)
          }));
        }).then(list => {
          if (list?.length) {
            list.push({
              label: _discourseI18n.default.t("composer.more_emoji"),
              term
            });
          }
          return list;
        });
      }
    });
  }
  function _isAutocompleteDisplayed2() {
    return document.querySelector(".autocomplete");
  }
  function _deleteEmptyMessage2() {
    new _chatMessageInteractor.default((0, _application.getOwner)(this), this.draft, this.context).delete();
    this.resetDraft();
  }
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatComposer);
});
define("discourse/plugins/chat/discourse/components/chat-drawer", ["exports", "@ember/component", "@ember/object", "@ember/runloop", "@ember/service", "@ember/template", "discourse/lib/url", "discourse/lib/utilities", "discourse-common/lib/get-url", "discourse-common/utils/decorators", "@ember/template-factory"], function (_exports, _component, _object, _runloop, _service, _template, _url, _utilities, _getUrl, _decorators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _obj;
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if this.chatStateManager.isDrawerActive}}
    <div
      data-chat-channel-id={{this.chat.activeChannel.id}}
      data-chat-thread-id={{this.chat.activeChannel.activeThread.id}}
      class={{concat-class
        "chat-drawer"
        (if this.chatStateManager.isDrawerExpanded "is-expanded")
      }}
      {{chat/resizable-node ".chat-drawer-resizer" this.didResize}}
      style={{this.drawerStyle}}
    >
      <div class="chat-drawer-container">
        <div class="chat-drawer-resizer"></div>
        <this.chatDrawerRouter.component
          @params={{this.chatDrawerRouter.params}}
          @openURL={{this.openURL}}
          @openInFullPage={{this.openInFullPage}}
          @toggleExpand={{this.toggleExpand}}
          @close={{this.close}}
          @drawerActions={{this.drawerActions}}
        />
      </div>
    </div>
  {{/if}}
  */
  {
    "id": "Km2Q7jFJ",
    "block": "[[[41,[30,0,[\"chatStateManager\",\"isDrawerActive\"]],[[[1,\"  \"],[11,0],[16,\"data-chat-channel-id\",[30,0,[\"chat\",\"activeChannel\",\"id\"]]],[16,\"data-chat-thread-id\",[30,0,[\"chat\",\"activeChannel\",\"activeThread\",\"id\"]]],[16,0,[28,[37,1],[\"chat-drawer\",[52,[30,0,[\"chatStateManager\",\"isDrawerExpanded\"]],\"is-expanded\"]],null]],[16,5,[30,0,[\"drawerStyle\"]]],[4,[38,2],[\".chat-drawer-resizer\",[30,0,[\"didResize\"]]],null],[12],[1,\"\\n    \"],[10,0],[14,0,\"chat-drawer-container\"],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-drawer-resizer\"],[12],[13],[1,\"\\n      \"],[8,[30,0,[\"chatDrawerRouter\",\"component\"]],null,[[\"@params\",\"@openURL\",\"@openInFullPage\",\"@toggleExpand\",\"@close\",\"@drawerActions\"],[[30,0,[\"chatDrawerRouter\",\"params\"]],[30,0,[\"openURL\"]],[30,0,[\"openInFullPage\"]],[30,0,[\"toggleExpand\"]],[30,0,[\"close\"]],[30,0,[\"drawerActions\"]]]],null],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]],null]],[],false,[\"if\",\"concat-class\",\"chat/resizable-node\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/chat-drawer.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, _component.default.extend((_dec = (0, _decorators.observes)("chatStateManager.isDrawerActive"), (_obj = {
    tagName: "",
    chat: (0, _service.inject)(),
    router: (0, _service.inject)(),
    chatDrawerSize: (0, _service.inject)(),
    chatChannelsManager: (0, _service.inject)(),
    chatStateManager: (0, _service.inject)(),
    chatDrawerRouter: (0, _service.inject)(),
    loading: false,
    sizeTimer: null,
    rafTimer: null,
    hasUnreadMessages: false,
    drawerStyle: null,
    didInsertElement() {
      this._super(...arguments);
      if (!this.chat.userCanChat) {
        return;
      }
      this._checkSize();
      this.appEvents.on("chat:open-url", this, "openURL");
      this.appEvents.on("chat:toggle-close", this, "close");
      this.appEvents.on("composer:closed", this, "_checkSize");
      this.appEvents.on("composer:opened", this, "_checkSize");
      this.appEvents.on("composer:resized", this, "_checkSize");
      this.appEvents.on("composer:div-resizing", this, "_dynamicCheckSize");
      window.addEventListener("resize", this._checkSize);
      this.appEvents.on("composer:resize-started", this, "_startDynamicCheckSize");
      this.appEvents.on("composer:resize-ended", this, "_clearDynamicCheckSize");
      this.computeDrawerStyle();
    },
    willDestroyElement() {
      this._super(...arguments);
      if (!this.chat.userCanChat) {
        return;
      }
      window.removeEventListener("resize", this._checkSize);
      if (this.appEvents) {
        this.appEvents.off("chat:open-url", this, "openURL");
        this.appEvents.off("chat:toggle-close", this, "close");
        this.appEvents.off("composer:closed", this, "_checkSize");
        this.appEvents.off("composer:opened", this, "_checkSize");
        this.appEvents.off("composer:resized", this, "_checkSize");
        this.appEvents.off("composer:div-resizing", this, "_dynamicCheckSize");
        this.appEvents.off("composer:resize-started", this, "_startDynamicCheckSize");
        this.appEvents.off("composer:resize-ended", this, "_clearDynamicCheckSize");
      }
      if (this.sizeTimer) {
        (0, _runloop.cancel)(this.sizeTimer);
        this.sizeTimer = null;
      }
      if (this.rafTimer) {
        window.cancelAnimationFrame(this.rafTimer);
      }
    },
    _fireHiddenAppEvents() {
      this.appEvents.trigger("chat:rerender-header");
    },
    computeDrawerStyle() {
      const {
        width,
        height
      } = this.chatDrawerSize.size;
      let style = `width: ${(0, _utilities.escapeExpression)((width || "0").toString())}px;`;
      style += `height: ${(0, _utilities.escapeExpression)((height || "0").toString())}px;`;
      this.set("drawerStyle", (0, _template.htmlSafe)(style));
    },
    get drawerActions() {
      return {
        openInFullPage: this.openInFullPage,
        close: this.close,
        toggleExpand: this.toggleExpand
      };
    },
    _dynamicCheckSize() {
      if (!this.chatStateManager.isDrawerActive) {
        return;
      }
      if (this.rafTimer) {
        return;
      }
      this.rafTimer = window.requestAnimationFrame(() => {
        this.rafTimer = null;
        this._performCheckSize();
      });
    },
    _startDynamicCheckSize() {
      if (!this.chatStateManager.isDrawerActive) {
        return;
      }
      document.querySelector(".chat-drawer-outlet-container").classList.add("clear-transitions");
    },
    _clearDynamicCheckSize() {
      if (!this.chatStateManager.isDrawerActive) {
        return;
      }
      document.querySelector(".chat-drawer-outlet-container").classList.remove("clear-transitions");
      this._checkSize();
    },
    _checkSize() {
      this.sizeTimer = (0, _runloop.throttle)(this, this._performCheckSize, 150);
    },
    _performCheckSize() {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      const drawerContainer = document.querySelector(".chat-drawer-outlet-container");
      if (!drawerContainer) {
        return;
      }
      const composer = document.getElementById("reply-control");
      const composerIsClosed = composer.classList.contains("closed");
      const minRightMargin = 15;
      drawerContainer.style.setProperty("--composer-right", (composerIsClosed ? minRightMargin : Math.max(minRightMargin, composer.offsetLeft)) + "px");
    },
    openURL(url = null) {
      this.chat.activeChannel = null;
      this.chatDrawerRouter.stateFor(this._routeFromURL(url));
      this.chatStateManager.didOpenDrawer(url);
    },
    _routeFromURL(url) {
      let route = this.router.recognize((0, _getUrl.default)(url || "/"));

      // ember might recognize the index subroute
      if (route.localName === "index") {
        route = route.parent;
      }
      return route;
    },
    async openInFullPage() {
      this.chatStateManager.storeAppURL();
      this.chatStateManager.prefersFullPage();
      this.chat.activeChannel = null;
      await new Promise(resolve => (0, _runloop.next)(resolve));
      return _url.default.routeTo(this.chatStateManager.lastKnownChatURL);
    },
    toggleExpand() {
      this.computeDrawerStyle();
      this.chatStateManager.didToggleDrawer();
      this.appEvents.trigger("chat:toggle-expand", this.chatStateManager.isDrawerExpanded);
    },
    close() {
      this.computeDrawerStyle();
      this.chatStateManager.didCloseDrawer();
      this.chat.activeChannel = null;
    },
    didResize(element, {
      width,
      height
    }) {
      this.chatDrawerSize.size = {
        width,
        height
      };
    }
  }, (_applyDecoratedDescriptor(_obj, "_fireHiddenAppEvents", [_dec], Object.getOwnPropertyDescriptor(_obj, "_fireHiddenAppEvents"), _obj), _applyDecoratedDescriptor(_obj, "_dynamicCheckSize", [_decorators.bind], Object.getOwnPropertyDescriptor(_obj, "_dynamicCheckSize"), _obj), _applyDecoratedDescriptor(_obj, "_checkSize", [_decorators.bind], Object.getOwnPropertyDescriptor(_obj, "_checkSize"), _obj), _applyDecoratedDescriptor(_obj, "openURL", [_object.action], Object.getOwnPropertyDescriptor(_obj, "openURL"), _obj), _applyDecoratedDescriptor(_obj, "openInFullPage", [_object.action], Object.getOwnPropertyDescriptor(_obj, "openInFullPage"), _obj), _applyDecoratedDescriptor(_obj, "toggleExpand", [_object.action], Object.getOwnPropertyDescriptor(_obj, "toggleExpand"), _obj), _applyDecoratedDescriptor(_obj, "close", [_object.action], Object.getOwnPropertyDescriptor(_obj, "close"), _obj), _applyDecoratedDescriptor(_obj, "didResize", [_object.action], Object.getOwnPropertyDescriptor(_obj, "didResize"), _obj)), _obj))));
});
define("discourse/plugins/chat/discourse/components/chat-emoji-avatar", ["exports", "discourse/helpers/replace-emoji", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _replaceEmoji, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ChatEmojiAvatar = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    <div class="chat-emoji-avatar">
      <div class="chat-emoji-avatar-container">
        {{replaceEmoji @emoji}}
      </div>
    </div>
  
  */
  {
    "id": "KhMYGrSP",
    "block": "[[[1,\"\\n  \"],[10,0],[14,0,\"chat-emoji-avatar\"],[12],[1,\"\\n    \"],[10,0],[14,0,\"chat-emoji-avatar-container\"],[12],[1,\"\\n      \"],[1,[28,[32,0],[[30,1]],null]],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"]],[\"@emoji\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-emoji-avatar.js",
    "scope": () => [_replaceEmoji.default],
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = ChatEmojiAvatar;
});
define("discourse/plugins/chat/discourse/components/chat-emoji-picker", ["exports", "@ember/component", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/runloop", "@ember/service", "@ember/template", "discourse/lib/text", "discourse-common/config/environment", "discourse-common/lib/debounce", "discourse-common/utils/decorators", "@ember/template-factory"], function (_exports, _component, _component2, _tracking, _object, _runloop, _service, _template, _text, _environment, _debounce, _decorators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.FITZPATRICK_MODIFIERS = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    {{! template-lint-disable no-invalid-interactive }}
  {{! template-lint-disable no-nested-interactive }}
  {{! template-lint-disable no-pointer-down-event-binding }}
  
  {{#if (eq this.chatEmojiPickerManager.picker.context @context)}}
    <div
      class={{concat-class
        "chat-emoji-picker"
        (if this.chatEmojiPickerManager.closing "closing")
      }}
      {{did-insert this.addClickOutsideEventListener}}
      {{did-insert this.chatEmojiPickerManager.loadEmojis}}
      {{did-insert (if @didInsert @didInsert (noop))}}
      {{will-destroy (if @willDestroy @willDestroy (noop))}}
      {{will-destroy this.removeClickOutsideEventListener}}
      {{on "keydown" this.trapKeyDownEvents}}
      ...attributes
    >
      <div class="chat-emoji-picker__filter-container">
        <DcFilterInput
          {{did-insert (if this.site.desktopView this.focusFilter (noop))}}
          {{did-insert
            (fn
              this.didInputFilter this.chatEmojiPickerManager.picker.initialFilter
            )
          }}
          @value={{this.chatEmojiPickerManager.picker.initialFilter}}
          @filterAction={{action this.didInputFilter value="target.value"}}
          @icons={{hash left="search"}}
          @containerClass="chat-emoji-picker__filter"
          autofocus={{true}}
          placeholder={{i18n "chat.emoji_picker.search_placeholder"}}
        >
          <div
            class="chat-emoji-picker__fitzpatrick-scale"
            role="toolbar"
            {{on "keyup" this.didNavigateFitzpatrickScale}}
          >
            {{#if this.isExpandedFitzpatrickScale}}
              {{#each this.fitzpatrickModifiers as |fitzpatrick|}}
  
                {{#if
                  (not-eq fitzpatrick.scale this.chatEmojiReactionStore.diversity)
                }}
                  <button
                    type="button"
                    title={{concat "t" fitzpatrick.scale}}
                    tabindex="-1"
                    class={{concat-class
                      "chat-emoji-picker__fitzpatrick-modifier-btn"
                      (concat "t" fitzpatrick.scale)
                    }}
                    {{on
                      "keyup"
                      (fn this.didRequestFitzpatrickScale fitzpatrick.scale)
                    }}
                    {{on
                      "click"
                      (fn this.didRequestFitzpatrickScale fitzpatrick.scale)
                    }}
                  >
                    {{d-icon "check"}}
                  </button>
                {{/if}}
              {{/each}}
            {{/if}}
  
            <button
              type="button"
              title={{concat "t" this.fitzpatrick.scale}}
              class={{concat-class
                "chat-emoji-picker__fitzpatrick-modifier-btn current"
                (concat "t" this.chatEmojiReactionStore.diversity)
              }}
              {{on "keyup" this.didToggleFitzpatrickScale}}
              {{on "click" this.didToggleFitzpatrickScale}}
            ></button>
          </div>
        </DcFilterInput>
      </div>
  
      {{#if this.chatEmojiPickerManager.sections.length}}
        {{#if (eq this.filteredEmojis null)}}
          <div class="chat-emoji-picker__sections-nav">
            <div
              class="chat-emoji-picker__sections-nav__indicator"
              style={{this.navIndicatorStyle}}
            ></div>
  
            {{#each-in this.groups as |section emojis|}}
              <DButton
                class={{concat-class
                  "btn-flat"
                  "chat-emoji-picker__section-btn"
                  (if
                    (eq this.chatEmojiPickerManager.lastVisibleSection section)
                    "active"
                  )
                }}
                tabindex="-1"
                style={{this.navBtnStyle}}
                @action={{fn this.didRequestSection section}}
                data-section={{section}}
              >
                {{#if (eq section "favorites")}}
                  {{replace-emoji ":star:"}}
                {{else}}
                  <img
                    width="18"
                    height="18"
                    class="emoji"
                    src={{get emojis "0.url"}}
                  />
                {{/if}}
              </DButton>
            {{/each-in}}
          </div>
        {{/if}}
  
        <div
          class="chat-emoji-picker__scrollable-content"
          {{chat/emoji-picker-scroll-listener}}
        >
          <div
            class="chat-emoji-picker__sections"
            {{on "click" this.didSelectEmoji}}
            {{on "keydown" this.onSectionsKeyDown}}
            role="button"
          >
            {{#if (not-eq this.filteredEmojis null)}}
              <div class="chat-emoji-picker__section filtered">
                {{#each this.filteredEmojis as |emoji|}}
                  <img
                    width="32"
                    height="32"
                    class="emoji"
                    src={{tonable-emoji-url
                      emoji
                      this.chatEmojiReactionStore.diversity
                    }}
                    tabindex="0"
                    data-emoji={{emoji.name}}
                    data-tonable={{if emoji.tonable "true"}}
                    alt={{emoji.name}}
                    title={{tonable-emoji-title
                      emoji
                      this.chatEmojiReactionStore.diversity
                    }}
                    loading="lazy"
                  />
                {{else}}
                  <p class="chat-emoji-picker__no-results">
                    {{i18n "chat.emoji_picker.no_results"}}
                  </p>
                {{/each}}
              </div>
            {{/if}}
  
            {{#each-in this.groups as |section emojis|}}
              <div
                class={{concat-class
                  "chat-emoji-picker__section"
                  (if (not-eq this.filteredEmojis null) "hidden")
                }}
                data-section={{section}}
                role="region"
                aria-label={{i18n
                  (concat "chat.emoji_picker." section)
                  translatedFallback=section
                }}
              >
                <h2 class="chat-emoji-picker__section-title">
                  {{i18n
                    (concat "chat.emoji_picker." section)
                    translatedFallback=section
                  }}
                </h2>
                <div class="chat-emoji-picker__section-emojis">
                  {{! we always want the first emoji for tabbing}}
                  {{#let (get emojis "0") as |emoji|}}
                    <img
                      width="32"
                      height="32"
                      class="emoji"
                      src={{tonable-emoji-url
                        emoji
                        this.chatEmojiReactionStore.diversity
                      }}
                      tabindex="0"
                      data-emoji={{emoji.name}}
                      data-tonable={{if emoji.tonable "true"}}
                      alt={{emoji.name}}
                      title={{tonable-emoji-title
                        emoji
                        this.chatEmojiReactionStore.diversity
                      }}
                      loading="lazy"
                    />
                  {{/let}}
  
                  {{#if
                    (includes this.chatEmojiPickerManager.visibleSections section)
                  }}
                    {{#each emojis as |emoji index|}}
                      {{! first emoji has already been rendered, we don't want to re render or would lose focus}}
                      {{#if (gt index 0)}}
                        <img
                          width="32"
                          height="32"
                          class="emoji"
                          src={{tonable-emoji-url
                            emoji
                            this.chatEmojiReactionStore.diversity
                          }}
                          tabindex="-1"
                          data-emoji={{emoji.name}}
                          data-tonable={{if emoji.tonable "true"}}
                          alt={{emoji.name}}
                          title={{tonable-emoji-title
                            emoji
                            this.chatEmojiReactionStore.diversity
                          }}
                          loading="lazy"
                        />
                      {{/if}}
                    {{/each}}
                  {{/if}}
                </div>
              </div>
            {{/each-in}}
          </div>
        </div>
      {{else}}
        <div class="spinner medium"></div>
      {{/if}}
    </div>
  
    {{#if
      (and
        this.site.mobileView
        (eq this.chatEmojiPickerManager.picker.context "chat-channel-message")
      )
    }}
      <div class="chat-emoji-picker__backdrop"></div>
    {{/if}}
  {{/if}}
  */
  {
    "id": "eJPIWM3x",
    "block": "[[[1,\"\\n\"],[41,[28,[37,1],[[30,0,[\"chatEmojiPickerManager\",\"picker\",\"context\"]],[30,1]],null],[[[1,\"  \"],[11,0],[16,0,[28,[37,2],[\"chat-emoji-picker\",[52,[30,0,[\"chatEmojiPickerManager\",\"closing\"]],\"closing\"]],null]],[17,2],[4,[38,3],[[30,0,[\"addClickOutsideEventListener\"]]],null],[4,[38,3],[[30,0,[\"chatEmojiPickerManager\",\"loadEmojis\"]]],null],[4,[38,3],[[52,[30,3],[30,3],[28,[37,4],null,null]]],null],[4,[38,5],[[52,[30,4],[30,4],[28,[37,4],null,null]]],null],[4,[38,5],[[30,0,[\"removeClickOutsideEventListener\"]]],null],[4,[38,6],[\"keydown\",[30,0,[\"trapKeyDownEvents\"]]],null],[12],[1,\"\\n    \"],[10,0],[14,0,\"chat-emoji-picker__filter-container\"],[12],[1,\"\\n      \"],[8,[39,7],[[16,\"autofocus\",true],[16,\"placeholder\",[28,[37,8],[\"chat.emoji_picker.search_placeholder\"],null]],[4,[38,3],[[52,[30,0,[\"site\",\"desktopView\"]],[30,0,[\"focusFilter\"]],[28,[37,4],null,null]]],null],[4,[38,3],[[28,[37,11],[[30,0,[\"didInputFilter\"]],[30,0,[\"chatEmojiPickerManager\",\"picker\",\"initialFilter\"]]],null]],null]],[[\"@value\",\"@filterAction\",\"@icons\",\"@containerClass\"],[[30,0,[\"chatEmojiPickerManager\",\"picker\",\"initialFilter\"]],[28,[37,9],[[30,0],[30,0,[\"didInputFilter\"]]],[[\"value\"],[\"target.value\"]]],[28,[37,10],null,[[\"left\"],[\"search\"]]],\"chat-emoji-picker__filter\"]],[[\"default\"],[[[[1,\"\\n        \"],[11,0],[24,0,\"chat-emoji-picker__fitzpatrick-scale\"],[24,\"role\",\"toolbar\"],[4,[38,6],[\"keyup\",[30,0,[\"didNavigateFitzpatrickScale\"]]],null],[12],[1,\"\\n\"],[41,[30,0,[\"isExpandedFitzpatrickScale\"]],[[[42,[28,[37,13],[[28,[37,13],[[30,0,[\"fitzpatrickModifiers\"]]],null]],null],null,[[[1,\"\\n\"],[41,[28,[37,14],[[30,5,[\"scale\"]],[30,0,[\"chatEmojiReactionStore\",\"diversity\"]]],null],[[[1,\"                \"],[11,\"button\"],[16,\"title\",[28,[37,15],[\"t\",[30,5,[\"scale\"]]],null]],[24,\"tabindex\",\"-1\"],[16,0,[28,[37,2],[\"chat-emoji-picker__fitzpatrick-modifier-btn\",[28,[37,15],[\"t\",[30,5,[\"scale\"]]],null]],null]],[24,4,\"button\"],[4,[38,6],[\"keyup\",[28,[37,11],[[30,0,[\"didRequestFitzpatrickScale\"]],[30,5,[\"scale\"]]],null]],null],[4,[38,6],[\"click\",[28,[37,11],[[30,0,[\"didRequestFitzpatrickScale\"]],[30,5,[\"scale\"]]],null]],null],[12],[1,\"\\n                  \"],[1,[28,[35,16],[\"check\"],null]],[1,\"\\n                \"],[13],[1,\"\\n\"]],[]],null]],[5]],null]],[]],null],[1,\"\\n          \"],[11,\"button\"],[16,\"title\",[28,[37,15],[\"t\",[30,0,[\"fitzpatrick\",\"scale\"]]],null]],[16,0,[28,[37,2],[\"chat-emoji-picker__fitzpatrick-modifier-btn current\",[28,[37,15],[\"t\",[30,0,[\"chatEmojiReactionStore\",\"diversity\"]]],null]],null]],[24,4,\"button\"],[4,[38,6],[\"keyup\",[30,0,[\"didToggleFitzpatrickScale\"]]],null],[4,[38,6],[\"click\",[30,0,[\"didToggleFitzpatrickScale\"]]],null],[12],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"chatEmojiPickerManager\",\"sections\",\"length\"]],[[[41,[28,[37,1],[[30,0,[\"filteredEmojis\"]],null],null],[[[1,\"        \"],[10,0],[14,0,\"chat-emoji-picker__sections-nav\"],[12],[1,\"\\n          \"],[10,0],[14,0,\"chat-emoji-picker__sections-nav__indicator\"],[15,5,[30,0,[\"navIndicatorStyle\"]]],[12],[13],[1,\"\\n\\n\"],[42,[28,[37,17],[[30,0,[\"groups\"]]],null],null,[[[1,\"            \"],[8,[39,18],[[16,0,[28,[37,2],[\"btn-flat\",\"chat-emoji-picker__section-btn\",[52,[28,[37,1],[[30,0,[\"chatEmojiPickerManager\",\"lastVisibleSection\"]],[30,7]],null],\"active\"]],null]],[24,\"tabindex\",\"-1\"],[16,5,[30,0,[\"navBtnStyle\"]]],[16,\"data-section\",[30,7]]],[[\"@action\"],[[28,[37,11],[[30,0,[\"didRequestSection\"]],[30,7]],null]]],[[\"default\"],[[[[1,\"\\n\"],[41,[28,[37,1],[[30,7],\"favorites\"],null],[[[1,\"                \"],[1,[28,[35,19],[\":star:\"],null]],[1,\"\\n\"]],[]],[[[1,\"                \"],[10,\"img\"],[14,\"width\",\"18\"],[14,\"height\",\"18\"],[14,0,\"emoji\"],[15,\"src\",[28,[37,20],[[30,6],\"0.url\"],null]],[12],[13],[1,\"\\n\"]],[]]],[1,\"            \"]],[]]]]],[1,\"\\n\"]],[6,7]],null],[1,\"        \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[11,0],[24,0,\"chat-emoji-picker__scrollable-content\"],[4,[38,21],null,null],[12],[1,\"\\n        \"],[11,0],[24,0,\"chat-emoji-picker__sections\"],[24,\"role\",\"button\"],[4,[38,6],[\"click\",[30,0,[\"didSelectEmoji\"]]],null],[4,[38,6],[\"keydown\",[30,0,[\"onSectionsKeyDown\"]]],null],[12],[1,\"\\n\"],[41,[28,[37,14],[[30,0,[\"filteredEmojis\"]],null],null],[[[1,\"            \"],[10,0],[14,0,\"chat-emoji-picker__section filtered\"],[12],[1,\"\\n\"],[42,[28,[37,13],[[28,[37,13],[[30,0,[\"filteredEmojis\"]]],null]],null],null,[[[1,\"                \"],[10,\"img\"],[14,\"width\",\"32\"],[14,\"height\",\"32\"],[14,0,\"emoji\"],[15,\"src\",[28,[37,22],[[30,8],[30,0,[\"chatEmojiReactionStore\",\"diversity\"]]],null]],[14,\"tabindex\",\"0\"],[15,\"data-emoji\",[30,8,[\"name\"]]],[15,\"data-tonable\",[52,[30,8,[\"tonable\"]],\"true\"]],[15,\"alt\",[30,8,[\"name\"]]],[15,\"title\",[28,[37,23],[[30,8],[30,0,[\"chatEmojiReactionStore\",\"diversity\"]]],null]],[14,\"loading\",\"lazy\"],[12],[13],[1,\"\\n\"]],[8]],[[[1,\"                \"],[10,2],[14,0,\"chat-emoji-picker__no-results\"],[12],[1,\"\\n                  \"],[1,[28,[35,8],[\"chat.emoji_picker.no_results\"],null]],[1,\"\\n                \"],[13],[1,\"\\n\"]],[]]],[1,\"            \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[42,[28,[37,17],[[30,0,[\"groups\"]]],null],null,[[[1,\"            \"],[10,0],[15,0,[28,[37,2],[\"chat-emoji-picker__section\",[52,[28,[37,14],[[30,0,[\"filteredEmojis\"]],null],null],\"hidden\"]],null]],[15,\"data-section\",[30,10]],[14,\"role\",\"region\"],[15,\"aria-label\",[28,[37,8],[[28,[37,15],[\"chat.emoji_picker.\",[30,10]],null]],[[\"translatedFallback\"],[[30,10]]]]],[12],[1,\"\\n              \"],[10,\"h2\"],[14,0,\"chat-emoji-picker__section-title\"],[12],[1,\"\\n                \"],[1,[28,[35,8],[[28,[37,15],[\"chat.emoji_picker.\",[30,10]],null]],[[\"translatedFallback\"],[[30,10]]]]],[1,\"\\n              \"],[13],[1,\"\\n              \"],[10,0],[14,0,\"chat-emoji-picker__section-emojis\"],[12],[1,\"\\n\"],[44,[[28,[37,20],[[30,9],\"0\"],null]],[[[1,\"                  \"],[10,\"img\"],[14,\"width\",\"32\"],[14,\"height\",\"32\"],[14,0,\"emoji\"],[15,\"src\",[28,[37,22],[[30,11],[30,0,[\"chatEmojiReactionStore\",\"diversity\"]]],null]],[14,\"tabindex\",\"0\"],[15,\"data-emoji\",[30,11,[\"name\"]]],[15,\"data-tonable\",[52,[30,11,[\"tonable\"]],\"true\"]],[15,\"alt\",[30,11,[\"name\"]]],[15,\"title\",[28,[37,23],[[30,11],[30,0,[\"chatEmojiReactionStore\",\"diversity\"]]],null]],[14,\"loading\",\"lazy\"],[12],[13],[1,\"\\n\"]],[11]]],[1,\"\\n\"],[41,[28,[37,25],[[30,0,[\"chatEmojiPickerManager\",\"visibleSections\"]],[30,10]],null],[[[42,[28,[37,13],[[28,[37,13],[[30,9]],null]],null],null,[[[41,[28,[37,26],[[30,13],0],null],[[[1,\"                      \"],[10,\"img\"],[14,\"width\",\"32\"],[14,\"height\",\"32\"],[14,0,\"emoji\"],[15,\"src\",[28,[37,22],[[30,12],[30,0,[\"chatEmojiReactionStore\",\"diversity\"]]],null]],[14,\"tabindex\",\"-1\"],[15,\"data-emoji\",[30,12,[\"name\"]]],[15,\"data-tonable\",[52,[30,12,[\"tonable\"]],\"true\"]],[15,\"alt\",[30,12,[\"name\"]]],[15,\"title\",[28,[37,23],[[30,12],[30,0,[\"chatEmojiReactionStore\",\"diversity\"]]],null]],[14,\"loading\",\"lazy\"],[12],[13],[1,\"\\n\"]],[]],null]],[12,13]],null]],[]],null],[1,\"              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n\"]],[9,10]],null],[1,\"        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],[[[1,\"      \"],[10,0],[14,0,\"spinner medium\"],[12],[13],[1,\"\\n\"]],[]]],[1,\"  \"],[13],[1,\"\\n\\n\"],[41,[28,[37,27],[[30,0,[\"site\",\"mobileView\"]],[28,[37,1],[[30,0,[\"chatEmojiPickerManager\",\"picker\",\"context\"]],\"chat-channel-message\"],null]],null],[[[1,\"    \"],[10,0],[14,0,\"chat-emoji-picker__backdrop\"],[12],[13],[1,\"\\n\"]],[]],null]],[]],null]],[\"@context\",\"&attrs\",\"@didInsert\",\"@willDestroy\",\"fitzpatrick\",\"emojis\",\"section\",\"emoji\",\"emojis\",\"section\",\"emoji\",\"emoji\",\"index\"],false,[\"if\",\"eq\",\"concat-class\",\"did-insert\",\"noop\",\"will-destroy\",\"on\",\"dc-filter-input\",\"i18n\",\"action\",\"hash\",\"fn\",\"each\",\"-track-array\",\"not-eq\",\"concat\",\"d-icon\",\"-each-in\",\"d-button\",\"replace-emoji\",\"get\",\"chat/emoji-picker-scroll-listener\",\"tonable-emoji-url\",\"tonable-emoji-title\",\"let\",\"includes\",\"gt\",\"and\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/chat-emoji-picker.hbs",
    "isStrictMode": false
  });
  const FITZPATRICK_MODIFIERS = _exports.FITZPATRICK_MODIFIERS = [{
    scale: 1,
    modifier: null
  }, {
    scale: 2,
    modifier: ":t2"
  }, {
    scale: 3,
    modifier: ":t3"
  }, {
    scale: 4,
    modifier: ":t4"
  }, {
    scale: 5,
    modifier: ":t5"
  }, {
    scale: 6,
    modifier: ":t6"
  }];
  let ChatEmojiPicker = _exports.default = (_class = class ChatEmojiPicker extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatEmojiPickerManager", _descriptor, this);
      _initializerDefineProperty(this, "emojiPickerScrollObserver", _descriptor2, this);
      _initializerDefineProperty(this, "chatEmojiReactionStore", _descriptor3, this);
      _initializerDefineProperty(this, "capabilities", _descriptor4, this);
      _initializerDefineProperty(this, "site", _descriptor5, this);
      _initializerDefineProperty(this, "filteredEmojis", _descriptor6, this);
      _initializerDefineProperty(this, "isExpandedFitzpatrickScale", _descriptor7, this);
      _defineProperty(this, "fitzpatrickModifiers", FITZPATRICK_MODIFIERS);
    }
    get groups() {
      const emojis = this.chatEmojiPickerManager.emojis;
      const favorites = {
        favorites: this.chatEmojiReactionStore.favorites.filter(f => !this.site.denied_emojis?.includes(f)).map(name => {
          return {
            name,
            group: "favorites",
            url: (0, _text.emojiUrlFor)(name)
          };
        })
      };
      return {
        ...favorites,
        ...emojis
      };
    }
    get flatEmojis() {
      if (!this.chatEmojiPickerManager.emojis) {
        return [];
      }

      // eslint-disable-next-line no-unused-vars
      let {
        favorites,
        ...rest
      } = this.chatEmojiPickerManager.emojis;
      return Object.values(rest).flat();
    }
    get navIndicatorStyle() {
      const section = this.chatEmojiPickerManager.lastVisibleSection;
      const index = Object.keys(this.groups).indexOf(section);
      return (0, _template.htmlSafe)(`width: ${100 / Object.keys(this.groups).length}%; transform: translateX(${index * 100}%);`);
    }
    get navBtnStyle() {
      return (0, _template.htmlSafe)(`width: ${100 / Object.keys(this.groups).length}%;`);
    }
    trapKeyDownEvents(event) {
      if (event.key === "Escape") {
        this.chatEmojiPickerManager.close();
      }
      if (event.key === "ArrowUp") {
        event.stopPropagation();
      }
      if (event.key === "ArrowDown" && event.target.classList.contains("dc-filter-input")) {
        event.stopPropagation();
        event.preventDefault();
        document.querySelector(`.chat-emoji-picker__scrollable-content .emoji[tabindex="0"]`)?.focus();
      }
    }
    didNavigateFitzpatrickScale(event) {
      if (event.type !== "keyup") {
        return;
      }
      const scaleNodes = event.target.closest(".chat-emoji-picker__fitzpatrick-scale")?.querySelectorAll(".chat-emoji-picker__fitzpatrick-modifier-btn") || [];
      const scales = [...scaleNodes];
      if (event.key === "ArrowRight") {
        event.preventDefault();
        if (event.target === scales[scales.length - 1]) {
          scales[0].focus();
        } else {
          event.target.nextElementSibling?.focus();
        }
      }
      if (event.key === "ArrowLeft") {
        event.preventDefault();
        if (event.target === scales[0]) {
          scales[scales.length - 1].focus();
        } else {
          event.target.previousElementSibling?.focus();
        }
      }
    }
    didToggleFitzpatrickScale(event) {
      if (event.type === "keyup") {
        if (event.key === "Escape") {
          event.preventDefault();
          this.isExpandedFitzpatrickScale = false;
          return;
        }
        if (event.key !== "Enter") {
          return;
        }
      }
      this.isExpandedFitzpatrickScale = !this.isExpandedFitzpatrickScale;
    }
    didRequestFitzpatrickScale(scale, event) {
      if (event.type === "keyup") {
        if (event.key === "Escape") {
          event.preventDefault();
          event.stopPropagation();
          this.isExpandedFitzpatrickScale = false;
          this._focusCurrentFitzpatrickScale();
          return;
        }
        if (event.key !== "Enter") {
          return;
        }
      }
      event.preventDefault();
      event.stopPropagation();
      this.isExpandedFitzpatrickScale = false;
      this.chatEmojiReactionStore.diversity = scale;
      this._focusCurrentFitzpatrickScale();
    }
    _focusCurrentFitzpatrickScale() {
      (0, _runloop.schedule)("afterRender", () => {
        document.querySelector(".chat-emoji-picker__fitzpatrick-modifier-btn.current")?.focus();
      });
    }
    didInputFilter(value) {
      if (!value?.length) {
        this.filteredEmojis = null;
        return;
      }
      (0, _debounce.default)(this, this.debouncedDidInputFilter, value, _environment.INPUT_DELAY);
    }
    focusFilter(target) {
      (0, _runloop.schedule)("afterRender", () => {
        target?.focus();
      });
    }
    debouncedDidInputFilter(filter = "") {
      filter = filter.toLowerCase();
      this.filteredEmojis = this.flatEmojis.filter(emoji => emoji.name.toLowerCase().includes(filter) || emoji.search_aliases?.any(alias => alias.toLowerCase().includes(filter)));
      (0, _runloop.schedule)("afterRender", () => {
        const scrollableContent = document.querySelector(".chat-emoji-picker__scrollable-content");
        if (scrollableContent) {
          scrollableContent.scrollTop = 0;
        }
      });
    }
    onSectionsKeyDown(event) {
      if (event.key === "Enter") {
        this.didSelectEmoji(event);
      } else {
        this.didNavigateSection(event);
      }
    }
    didNavigateSection(event) {
      const sectionsEmojis = section => [...section.querySelectorAll(".emoji")];
      const focusSectionsLastEmoji = section => {
        const emojis = sectionsEmojis(section);
        return emojis[emojis.length - 1].focus();
      };
      const focusSectionsFirstEmoji = section => {
        sectionsEmojis(section)[0].focus();
      };
      const currentSection = event.target.closest(".chat-emoji-picker__section");
      const focusFilter = () => {
        document.querySelector(".dc-filter-input")?.focus();
      };
      const allEmojis = () => [...document.querySelectorAll(".chat-emoji-picker__section:not(.hidden) .emoji")];
      if (event.key === "ArrowRight") {
        event.preventDefault();
        const nextEmoji = event.target.nextElementSibling;
        if (nextEmoji) {
          nextEmoji.focus();
        } else {
          const nextSection = currentSection.nextElementSibling;
          if (nextSection) {
            focusSectionsFirstEmoji(nextSection);
          }
        }
      }
      if (event.key === "ArrowLeft") {
        event.preventDefault();
        const prevEmoji = event.target.previousElementSibling;
        if (prevEmoji) {
          prevEmoji.focus();
        } else {
          const prevSection = currentSection.previousElementSibling;
          if (prevSection) {
            focusSectionsLastEmoji(prevSection);
          } else {
            focusFilter();
          }
        }
      }
      if (event.key === "ArrowDown") {
        event.preventDefault();
        event.stopPropagation();
        const nextEmoji = allEmojis().filter(c => c.offsetTop > event.target.offsetTop).findBy("offsetLeft", event.target.offsetLeft);
        if (nextEmoji) {
          nextEmoji.focus();
        } else {
          // for perf reason all emojis might not be loaded at this point
          // but the first one will always be
          const nextSection = currentSection.nextElementSibling;
          if (nextSection) {
            focusSectionsFirstEmoji(nextSection);
          }
        }
      }
      if (event.key === "ArrowUp") {
        event.preventDefault();
        event.stopPropagation();
        const prevEmoji = allEmojis().reverse().filter(c => c.offsetTop < event.target.offsetTop).findBy("offsetLeft", event.target.offsetLeft);
        if (prevEmoji) {
          prevEmoji.focus();
        } else {
          focusFilter();
        }
      }
    }
    didSelectEmoji(event) {
      if (!event.target.classList.contains("emoji")) {
        return;
      }
      if (event.type === "click" || event.key === "Enter") {
        event.preventDefault();
        event.stopPropagation();
        let emoji = event.target.dataset.emoji;
        const tonable = event.target.dataset.tonable;
        const diversity = this.chatEmojiReactionStore.diversity;
        if (tonable && diversity > 1) {
          emoji = `${emoji}:t${diversity}`;
        }
        this.args.didSelectEmoji?.(emoji);
      }
    }
    didRequestSection(section) {
      const scrollableContent = document.querySelector(".chat-emoji-picker__scrollable-content");
      this.filteredEmojis = null;

      // we disable scroll listener during requesting section
      // to avoid it from detecting another section during scroll to requested section
      this.emojiPickerScrollObserver.enabled = false;
      this.chatEmojiPickerManager.addVisibleSections([section]);
      this.chatEmojiPickerManager.lastVisibleSection = section;

      // iOS hack to avoid blank div when requesting section during momentum
      if (scrollableContent && this.capabilities.isIOS) {
        document.querySelector(".chat-emoji-picker__scrollable-content").style.overflow = "hidden";
      }
      (0, _runloop.schedule)("afterRender", () => {
        const firstEmoji = document.querySelector(`.chat-emoji-picker__section[data-section="${section}"] .emoji:nth-child(1)`);
        const targetEmoji = [...document.querySelectorAll(`.chat-emoji-picker__section[data-section="${section}"] .emoji`)].find(emoji => emoji.offsetTop > firstEmoji.offsetTop) || firstEmoji;
        targetEmoji.focus();
        (0, _runloop.later)(() => {
          // iOS hack to avoid blank div when requesting section during momentum
          if (scrollableContent && this.capabilities.isIOS) {
            document.querySelector(".chat-emoji-picker__scrollable-content").style.overflow = "scroll";
          }
          this.emojiPickerScrollObserver.enabled = true;
        }, 200);
      });
    }
    addClickOutsideEventListener() {
      document.addEventListener("click", this.didClickOutside);
    }
    removeClickOutsideEventListener() {
      document.removeEventListener("click", this.didClickOutside);
    }
    didClickOutside(event) {
      if (!event.target.closest(".chat-emoji-picker")) {
        this.chatEmojiPickerManager.close();
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatEmojiPickerManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "emojiPickerScrollObserver", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatEmojiReactionStore", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "filteredEmojis", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "isExpandedFitzpatrickScale", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "trapKeyDownEvents", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "trapKeyDownEvents"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didNavigateFitzpatrickScale", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didNavigateFitzpatrickScale"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didToggleFitzpatrickScale", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didToggleFitzpatrickScale"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didRequestFitzpatrickScale", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didRequestFitzpatrickScale"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didInputFilter", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didInputFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "focusFilter", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "focusFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onSectionsKeyDown", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onSectionsKeyDown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didNavigateSection", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didNavigateSection"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didSelectEmoji", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didSelectEmoji"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didRequestSection", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didRequestSection"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "addClickOutsideEventListener", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "addClickOutsideEventListener"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "removeClickOutsideEventListener", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "removeClickOutsideEventListener"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didClickOutside", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "didClickOutside"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatEmojiPicker);
});
define("discourse/plugins/chat/discourse/components/chat-header", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/routing", "@ember/service", "discourse-common/helpers/d-icon", "discourse-common/lib/get-url", "discourse-i18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _routing, _service, _dIcon, _getUrl, _discourseI18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2, _updatePreviousURL;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatHeader = _exports.default = (_class = (_updatePreviousURL = /*#__PURE__*/new WeakSet(), (_class2 = class ChatHeader extends _component.default {
    constructor() {
      super(...arguments);
      _classPrivateMethodInitSpec(this, _updatePreviousURL);
      _initializerDefineProperty(this, "site", _descriptor, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor2, this);
      _initializerDefineProperty(this, "router", _descriptor3, this);
      _initializerDefineProperty(this, "previousURL", _descriptor4, this);
      _defineProperty(this, "title", _discourseI18n.default.t("chat.back_to_forum"));
      _defineProperty(this, "heading", _discourseI18n.default.t("chat.heading"));
      this.router.on("routeDidChange", this, _classPrivateMethodGet(this, _updatePreviousURL, _updatePreviousURL2));
    }
    get shouldRender() {
      return this.siteSettings.chat_enabled && this.site.mobileView && this.isChatOpen;
    }
    willDestroy() {
      super.willDestroy(...arguments);
      this.router.off("routeDidChange", this, _classPrivateMethodGet(this, _updatePreviousURL, _updatePreviousURL2));
    }
    get isChatOpen() {
      return this.router.currentURL.startsWith("/chat");
    }
    get forumLink() {
      return (0, _getUrl.default)(this.previousURL ?? this.router.rootURL);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.shouldRender}}
        <div class="c-header">
          <a
            href={{this.forumLink}}
            class="btn-flat back-to-forum"
            title={{this.title}}
          >
            {{icon "arrow-left"}}
            {{this.title}}
          </a>
  
          <LinkTo @route="chat.index" class="c-heading">{{this.heading}}</LinkTo>
        </div>
      {{else}}
        {{yield}}
      {{/if}}
    
  */
  {
    "id": "prasS2Ah",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"shouldRender\"]],[[[1,\"      \"],[10,0],[14,0,\"c-header\"],[12],[1,\"\\n        \"],[10,3],[15,6,[30,0,[\"forumLink\"]]],[14,0,\"btn-flat back-to-forum\"],[15,\"title\",[30,0,[\"title\"]]],[12],[1,\"\\n          \"],[1,[28,[32,0],[\"arrow-left\"],null]],[1,\"\\n          \"],[1,[30,0,[\"title\"]]],[1,\"\\n        \"],[13],[1,\"\\n\\n        \"],[8,[32,1],[[24,0,\"c-heading\"]],[[\"@route\"],[\"chat.index\"]],[[\"default\"],[[[[1,[30,0,[\"heading\"]]]],[]]]]],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],[[[1,\"      \"],[18,1,null],[1,\"\\n\"]],[]]],[1,\"  \"]],[\"&default\"],false,[\"if\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-header.js",
    "scope": () => [_dIcon.default, _routing.LinkTo],
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "previousURL", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  function _updatePreviousURL2() {
    if (!this.isChatOpen) {
      this.previousURL = this.router.currentURL;
    }
  }
});
define("discourse/plugins/chat/discourse/components/chat-mention-warnings", ["exports", "@glimmer/component", "@ember/service", "@ember/template", "discourse-common/helpers/d-icon", "discourse-common/helpers/i18n", "discourse-common/lib/get-url", "discourse-i18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _template, _dIcon, _i18n, _getUrl, _discourseI18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMentionWarnings = _exports.default = (_class = (_class2 = class ChatMentionWarnings extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "siteSettings", _descriptor, this);
      _initializerDefineProperty(this, "currentUser", _descriptor2, this);
      _initializerDefineProperty(this, "chatComposerWarningsTracker", _descriptor3, this);
    }
    get unreachableGroupMentions() {
      return this.chatComposerWarningsTracker.unreachableGroupMentions;
    }
    get overMembersLimitGroupMentions() {
      return this.chatComposerWarningsTracker.overMembersLimitGroupMentions;
    }
    get hasTooManyMentions() {
      return this.chatComposerWarningsTracker.tooManyMentions;
    }
    get channelWideMentionDisallowed() {
      return this.chatComposerWarningsTracker.channelWideMentionDisallowed;
    }
    get mentionsCount() {
      return this.chatComposerWarningsTracker.mentionsCount;
    }
    get unreachableGroupMentionsCount() {
      return this.unreachableGroupMentions.length;
    }
    get overMembersLimitMentionsCount() {
      return this.overMembersLimitGroupMentions.length;
    }
    get hasUnreachableGroupMentions() {
      return this.unreachableGroupMentionsCount > 0;
    }
    get hasOverMembersLimitGroupMentions() {
      return this.overMembersLimitMentionsCount > 0;
    }
    get warningsCount() {
      return this.unreachableGroupMentionsCount + this.overMembersLimitMentionsCount;
    }
    get show() {
      return this.hasTooManyMentions || this.channelWideMentionDisallowed || this.hasUnreachableGroupMentions || this.hasOverMembersLimitGroupMentions;
    }
    get listStyleClass() {
      if (this.hasTooManyMentions) {
        return "chat-mention-warnings-list__simple";
      }
      if (this.warningsCount > 1) {
        return "chat-mention-warnings-list__multiple";
      } else {
        return "chat-mention-warnings-list__simple";
      }
    }
    get warningHeaderText() {
      if (this.mentionsCount <= this.warningsCount || this.hasTooManyMentions) {
        return _discourseI18n.default.t("chat.mention_warning.groups.header.all");
      } else {
        return _discourseI18n.default.t("chat.mention_warning.groups.header.some");
      }
    }
    get tooManyMentionsBody() {
      if (!this.hasTooManyMentions) {
        return;
      }
      if (this.currentUser.admin) {
        return (0, _template.htmlSafe)(_discourseI18n.default.t("chat.mention_warning.too_many_mentions_admin", {
          count: this.siteSettings.max_mentions_per_chat_message,
          siteSettingUrl: (0, _getUrl.default)("/admin/site_settings/category/plugins?filter=max_mentions_per_chat_message")
        }));
      } else {
        return (0, _template.htmlSafe)(_discourseI18n.default.t("chat.mention_warning.too_many_mentions", {
          count: this.siteSettings.max_mentions_per_chat_message
        }));
      }
    }
    get unreachableBody() {
      if (!this.hasUnreachableGroupMentions) {
        return;
      }
      switch (this.unreachableGroupMentionsCount) {
        case 1:
          return _discourseI18n.default.t("chat.mention_warning.groups.unreachable_1", {
            group: this.unreachableGroupMentions[0]
          });
        case 2:
          return _discourseI18n.default.t("chat.mention_warning.groups.unreachable_2", {
            group1: this.unreachableGroupMentions[0],
            group2: this.unreachableGroupMentions[1]
          });
        default:
          return _discourseI18n.default.t("chat.mention_warning.groups.unreachable_multiple", {
            group: this.unreachableGroupMentions[0],
            count: this.unreachableGroupMentionsCount - 1
          });
      }
    }
    get overMembersLimitBody() {
      if (!this.hasOverMembersLimitGroupMentions) {
        return;
      }
      return (0, _template.htmlSafe)(_discourseI18n.default.messageFormat("chat.mention_warning.groups.too_many_members_MF", {
        groupCount: this.overMembersLimitMentionsCount,
        isAdmin: this.currentUser.admin,
        siteSettingUrl: (0, _getUrl.default)("/admin/site_settings/category/plugins?filter=max_users_notified_per_group_mention"),
        notificationLimit: this.siteSettings.max_users_notified_per_group_mention,
        group1: this.overMembersLimitGroupMentions[0],
        group2: this.overMembersLimitGroupMentions[1]
      }));
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.show}}
        <div class="chat-mention-warnings">
          <div class="chat-mention-warning__icon">
            {{dIcon "exclamation-triangle"}}
          </div>
          <div class="chat-mention-warning__text">
            <div class="chat-mention-warning__header">
              {{this.warningHeaderText}}
            </div>
            <ul class={{this.listStyleClass}}>
              {{#if this.hasTooManyMentions}}
                <li>{{this.tooManyMentionsBody}}</li>
              {{else}}
                {{#if this.channelWideMentionDisallowed}}
                  <li>{{i18n
                      "chat.mention_warning.channel_wide_mentions_disallowed"
                    }}</li>
                {{/if}}
                {{#if this.hasUnreachableGroupMentions}}
                  <li>{{this.unreachableBody}}</li>
                {{/if}}
                {{#if this.hasOverMembersLimitGroupMentions}}
                  <li>{{this.overMembersLimitBody}}</li>
                {{/if}}
              {{/if}}
            </ul>
          </div>
        </div>
      {{/if}}
    
  */
  {
    "id": "SOmtPjIN",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"show\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-mention-warnings\"],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-mention-warning__icon\"],[12],[1,\"\\n          \"],[1,[28,[32,0],[\"exclamation-triangle\"],null]],[1,\"\\n        \"],[13],[1,\"\\n        \"],[10,0],[14,0,\"chat-mention-warning__text\"],[12],[1,\"\\n          \"],[10,0],[14,0,\"chat-mention-warning__header\"],[12],[1,\"\\n            \"],[1,[30,0,[\"warningHeaderText\"]]],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,\"ul\"],[15,0,[30,0,[\"listStyleClass\"]]],[12],[1,\"\\n\"],[41,[30,0,[\"hasTooManyMentions\"]],[[[1,\"              \"],[10,\"li\"],[12],[1,[30,0,[\"tooManyMentionsBody\"]]],[13],[1,\"\\n\"]],[]],[[[41,[30,0,[\"channelWideMentionDisallowed\"]],[[[1,\"                \"],[10,\"li\"],[12],[1,[28,[32,1],[\"chat.mention_warning.channel_wide_mentions_disallowed\"],null]],[13],[1,\"\\n\"]],[]],null],[41,[30,0,[\"hasUnreachableGroupMentions\"]],[[[1,\"                \"],[10,\"li\"],[12],[1,[30,0,[\"unreachableBody\"]]],[13],[1,\"\\n\"]],[]],null],[41,[30,0,[\"hasOverMembersLimitGroupMentions\"]],[[[1,\"                \"],[10,\"li\"],[12],[1,[30,0,[\"overMembersLimitBody\"]]],[13],[1,\"\\n\"]],[]],null]],[]]],[1,\"          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-mention-warnings.js",
    "scope": () => [_dIcon.default, _i18n.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatComposerWarningsTracker", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat-message-actions-desktop", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/application", "@ember/helper", "@ember/modifier", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/render-modifiers/modifiers/did-update", "@ember/render-modifiers/modifiers/will-destroy", "@ember/runloop", "@ember/service", "@popperjs/core", "discourse/components/bookmark-icon", "discourse/components/d-button", "discourse/helpers/concat-class", "select-kit/components/dropdown-select-box", "truth-helpers/helpers/and", "discourse/plugins/chat/discourse/components/chat-message-reaction", "discourse/plugins/chat/discourse/lib/chat-message-container", "discourse/plugins/chat/discourse/lib/chat-message-interactor", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _application, _helper, _modifier, _object, _didInsert, _didUpdate, _willDestroy, _runloop, _service, _core, _bookmarkIcon, _dButton, _concatClass, _dropdownSelectBox, _and, _chatMessageReaction, _chatMessageContainer, _chatMessageInteractor, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const MSG_ACTIONS_VERTICAL_PADDING = -10;
  const FULL = "full";
  const REDUCED = "reduced";
  const REDUCED_WIDTH_THRESHOLD = 500;
  let ChatMessageActionsDesktop = _exports.default = (_class = (_class2 = class ChatMessageActionsDesktop extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatEmojiPickerManager", _descriptor2, this);
      _initializerDefineProperty(this, "site", _descriptor3, this);
      _initializerDefineProperty(this, "size", _descriptor4, this);
      _defineProperty(this, "popper", null);
    }
    get message() {
      return this.chat.activeMessage.model;
    }
    get context() {
      return this.chat.activeMessage.context;
    }
    get messageInteractor() {
      return new _chatMessageInteractor.default((0, _application.getOwner)(this), this.message, this.context);
    }
    get shouldRenderFavoriteReactions() {
      return this.size === FULL;
    }
    onWheel() {
      // prevents menu to stop scroll on the list of messages
      this.chat.activeMessage = null;
    }
    setup(element1) {
      this.popper?.destroy();
      (0, _runloop.schedule)("afterRender", () => {
        const messageContainer1 = (0, _chatMessageContainer.default)(this.message.id, this.context);
        if (!messageContainer1) {
          return;
        }
        const viewport1 = messageContainer1.closest(".popper-viewport");
        this.size = viewport1.clientWidth < REDUCED_WIDTH_THRESHOLD ? REDUCED : FULL;
        if (!messageContainer1) {
          return;
        }
        this.popper = (0, _core.createPopper)(messageContainer1, element1, {
          placement: "top-end",
          strategy: "fixed",
          modifiers: [{
            name: "flip",
            enabled: true,
            options: {
              boundary: viewport1,
              fallbackPlacements: ["bottom-end"]
            }
          }, {
            name: "hide",
            enabled: true
          }, {
            name: "eventListeners",
            options: {
              scroll: false
            }
          }, {
            name: "offset",
            options: {
              offset: [-2, MSG_ACTIONS_VERTICAL_PADDING]
            }
          }]
        });
      });
    }
    teardown() {
      this.popper?.destroy();
      this.popper = null;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if (and this.site.desktopView this.chat.activeMessage.model.persisted)}}
        <div
          {{didInsert this.setup}}
          {{didUpdate this.setup this.chat.activeMessage.model.id}}
          {{on "wheel" this.onWheel passive=true}}
          {{willDestroy this.teardown}}
          class={{concatClass
            "chat-message-actions-container"
            (concat "is-size-" this.size)
          }}
          data-id={{this.message.id}}
        >
          <div
            class={{concatClass
              "chat-message-actions"
              (unless
                this.messageInteractor.secondaryActions.length
                "has-no-secondary-actions"
              )
            }}
          >
            {{#if this.shouldRenderFavoriteReactions}}
              {{#each
                this.messageInteractor.emojiReactions key="emoji"
                as |reaction|
              }}
                <ChatMessageReaction
                  @reaction={{reaction}}
                  @onReaction={{this.messageInteractor.react}}
                  @message={{this.message}}
                  @showCount={{false}}
                  @disableTooltip={{true}}
                />
              {{/each}}
            {{/if}}
  
            {{#if this.messageInteractor.canInteractWithMessage}}
              <DButton
                @action={{this.messageInteractor.openEmojiPicker}}
                @icon="discourse-emojis"
                @title="chat.react"
                @forwardEvent={{true}}
                class="btn-flat react-btn"
              />
            {{/if}}
  
            {{#if this.messageInteractor.canBookmark}}
              <DButton
                @action={{this.messageInteractor.toggleBookmark}}
                class="btn-flat bookmark-btn"
              >
                <BookmarkIcon @bookmark={{this.message.bookmark}} />
              </DButton>
            {{/if}}
  
            {{#if this.messageInteractor.canReply}}
              <DButton
                @action={{this.messageInteractor.reply}}
                @icon="reply"
                @title="chat.reply"
                class="btn-flat reply-btn"
              />
            {{/if}}
  
            {{#if
              (and
                this.messageInteractor.message
                this.messageInteractor.secondaryActions.length
              )
            }}
              <DropdownSelectBox
                @options={{hash
                  icon="ellipsis-v"
                  placement="left"
                  customStyle="true"
                  btnCustomClasses="btn-flat"
                }}
                @content={{this.messageInteractor.secondaryActions}}
                @onChange={{this.messageInteractor.handleSecondaryActions}}
                class="more-buttons secondary-actions"
              />
            {{/if}}
          </div>
        </div>
      {{/if}}
    
  */
  {
    "id": "J9vk+hV8",
    "block": "[[[1,\"\\n\"],[41,[28,[32,0],[[30,0,[\"site\",\"desktopView\"]],[30,0,[\"chat\",\"activeMessage\",\"model\",\"persisted\"]]],null],[[[1,\"      \"],[11,0],[16,0,[28,[32,1],[\"chat-message-actions-container\",[28,[32,2],[\"is-size-\",[30,0,[\"size\"]]],null]],null]],[16,\"data-id\",[30,0,[\"message\",\"id\"]]],[4,[32,3],[[30,0,[\"setup\"]]],null],[4,[32,4],[[30,0,[\"setup\"]],[30,0,[\"chat\",\"activeMessage\",\"model\",\"id\"]]],null],[4,[32,5],[\"wheel\",[30,0,[\"onWheel\"]]],[[\"passive\"],[true]]],[4,[32,6],[[30,0,[\"teardown\"]]],null],[12],[1,\"\\n        \"],[10,0],[15,0,[28,[32,1],[\"chat-message-actions\",[52,[51,[30,0,[\"messageInteractor\",\"secondaryActions\",\"length\"]]],\"has-no-secondary-actions\"]],null]],[12],[1,\"\\n\"],[41,[30,0,[\"shouldRenderFavoriteReactions\"]],[[[42,[28,[31,3],[[28,[31,3],[[30,0,[\"messageInteractor\",\"emojiReactions\"]]],null]],null],\"emoji\",[[[1,\"              \"],[8,[32,7],null,[[\"@reaction\",\"@onReaction\",\"@message\",\"@showCount\",\"@disableTooltip\"],[[30,1],[30,0,[\"messageInteractor\",\"react\"]],[30,0,[\"message\"]],false,true]],null],[1,\"\\n\"]],[1]],null]],[]],null],[1,\"\\n\"],[41,[30,0,[\"messageInteractor\",\"canInteractWithMessage\"]],[[[1,\"            \"],[8,[32,8],[[24,0,\"btn-flat react-btn\"]],[[\"@action\",\"@icon\",\"@title\",\"@forwardEvent\"],[[30,0,[\"messageInteractor\",\"openEmojiPicker\"]],\"discourse-emojis\",\"chat.react\",true]],null],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"messageInteractor\",\"canBookmark\"]],[[[1,\"            \"],[8,[32,8],[[24,0,\"btn-flat bookmark-btn\"]],[[\"@action\"],[[30,0,[\"messageInteractor\",\"toggleBookmark\"]]]],[[\"default\"],[[[[1,\"\\n              \"],[8,[32,9],null,[[\"@bookmark\"],[[30,0,[\"message\",\"bookmark\"]]]],null],[1,\"\\n            \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"messageInteractor\",\"canReply\"]],[[[1,\"            \"],[8,[32,8],[[24,0,\"btn-flat reply-btn\"]],[[\"@action\",\"@icon\",\"@title\"],[[30,0,[\"messageInteractor\",\"reply\"]],\"reply\",\"chat.reply\"]],null],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[28,[32,0],[[30,0,[\"messageInteractor\",\"message\"]],[30,0,[\"messageInteractor\",\"secondaryActions\",\"length\"]]],null],[[[1,\"            \"],[8,[32,10],[[24,0,\"more-buttons secondary-actions\"]],[[\"@options\",\"@content\",\"@onChange\"],[[28,[32,11],null,[[\"icon\",\"placement\",\"customStyle\",\"btnCustomClasses\"],[\"ellipsis-v\",\"left\",\"true\",\"btn-flat\"]]],[30,0,[\"messageInteractor\",\"secondaryActions\"]],[30,0,[\"messageInteractor\",\"handleSecondaryActions\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"reaction\"],false,[\"if\",\"unless\",\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-message-actions-desktop.js",
    "scope": () => [_and.default, _concatClass.default, _helper.concat, _didInsert.default, _didUpdate.default, _modifier.on, _willDestroy.default, _chatMessageReaction.default, _dButton.default, _bookmarkIcon.default, _dropdownSelectBox.default, _helper.hash],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatEmojiPickerManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "size", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return FULL;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "onWheel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onWheel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setup", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "teardown", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "teardown"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-message-actions-mobile", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/application", "@ember/helper", "@ember/modifier", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/service", "discourse/components/bookmark-icon", "discourse/components/d-button", "discourse/helpers/concat-class", "discourse-common/lib/later", "truth-helpers/helpers/and", "truth-helpers/helpers/or", "discourse/plugins/chat/discourse/components/chat-message-reaction", "discourse/plugins/chat/discourse/components/chat-user-avatar", "discourse/plugins/chat/discourse/lib/chat-message-interactor", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _application, _helper, _modifier, _object, _didInsert, _service, _bookmarkIcon, _dButton, _concatClass, _later, _and, _or, _chatMessageReaction, _chatUserAvatar, _chatMessageInteractor, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class2, _onCloseMenu, _addFadeIn, _removeFadeIn;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessageActionsMobile = _exports.default = (_class = (_onCloseMenu = /*#__PURE__*/new WeakSet(), _addFadeIn = /*#__PURE__*/new WeakSet(), _removeFadeIn = /*#__PURE__*/new WeakSet(), (_class2 = class ChatMessageActionsMobile extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _removeFadeIn);
      _classPrivateMethodInitSpec(this, _addFadeIn);
      _classPrivateMethodInitSpec(this, _onCloseMenu);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "site", _descriptor2, this);
      _initializerDefineProperty(this, "capabilities", _descriptor3, this);
      _initializerDefineProperty(this, "hasExpandedReply", _descriptor4, this);
      _initializerDefineProperty(this, "showFadeIn", _descriptor5, this);
    }
    get message() {
      return this.chat.activeMessage.model;
    }
    get context() {
      return this.chat.activeMessage.context;
    }
    get messageInteractor() {
      return new _chatMessageInteractor.default((0, _application.getOwner)(this), this.message, this.context);
    }
    fadeAndVibrate() {
      (0, _later.default)(_classPrivateMethodGet(this, _addFadeIn, _addFadeIn2).bind(this));
      if (this.capabilities.userHasBeenActive && this.capabilities.canVibrate) {
        navigator.vibrate(5);
      }
    }
    expandReply(event1) {
      event1.stopPropagation();
      this.hasExpandedReply = true;
    }
    collapseMenu(event1) {
      event1.preventDefault();
      _classPrivateMethodGet(this, _onCloseMenu, _onCloseMenu2).call(this);
    }
    actAndCloseMenu(fnId1) {
      this.messageInteractor[fnId1]();
      _classPrivateMethodGet(this, _onCloseMenu, _onCloseMenu2).call(this);
    }
    openEmojiPicker(_1, event1) {
      this.messageInteractor.openEmojiPicker(_1, event1);
      _classPrivateMethodGet(this, _onCloseMenu, _onCloseMenu2).call(this);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if (and this.site.mobileView this.chat.activeMessage.model.persisted)}}
        <div
          class={{concatClass
            "chat-message-actions-backdrop"
            (if this.showFadeIn "fade-in")
          }}
          {{didInsert this.fadeAndVibrate}}
        >
          <div
            role="button"
            class="collapse-area"
            {{on "touchstart" this.collapseMenu passive=false bubbles=false}}
          >
          </div>
  
          <div class="chat-message-actions">
            <div class="selected-message-container">
              <div class="selected-message">
                <ChatUserAvatar @user={{this.message.user}} />
                <span
                  {{on "touchstart" this.expandReply passive=true}}
                  role="button"
                  class={{concatClass
                    "selected-message-reply"
                    (if this.hasExpandedReply "is-expanded")
                  }}
                >
                  {{this.message.message}}
                </span>
              </div>
            </div>
  
            <ul class="secondary-actions">
              {{#each this.messageInteractor.secondaryActions as |button|}}
                <li class="chat-message-action-item" data-id={{button.id}}>
                  <DButton
                    @translatedLabel={{button.name}}
                    @icon={{button.icon}}
                    @action={{fn this.actAndCloseMenu button.id}}
                    class="chat-message-action"
                  />
                </li>
              {{/each}}
            </ul>
  
            {{#if
              (or this.messageInteractor.canReact this.messageInteractor.canReply)
            }}
              <div class="main-actions">
                {{#if this.messageInteractor.canReact}}
                  {{#each this.messageInteractor.emojiReactions as |reaction|}}
                    <ChatMessageReaction
                      @reaction={{reaction}}
                      @onReaction={{this.messageInteractor.react}}
                      @message={{this.message}}
                      @showCount={{false}}
                    />
                  {{/each}}
  
                  <DButton
                    @action={{this.openEmojiPicker}}
                    @icon="discourse-emojis"
                    @title="chat.react"
                    @forwardEvent={{true}}
                    data-id="react"
                    class="btn-flat react-btn"
                  />
                {{/if}}
  
                {{#if this.messageInteractor.canBookmark}}
                  <DButton
                    @action={{fn this.actAndCloseMenu "toggleBookmark"}}
                    data-id="bookmark"
                    class="btn-flat bookmark-btn"
                  >
                    <BookmarkIcon @bookmark={{this.message.bookmark}} />
                  </DButton>
                {{/if}}
  
                {{#if this.messageInteractor.canReply}}
                  <DButton
                    @action={{fn this.actAndCloseMenu "reply"}}
                    @icon="reply"
                    @title="chat.reply"
                    data-id="reply"
                    class="chat-message-action reply-btn btn-flat"
                  />
                {{/if}}
              </div>
            {{/if}}
          </div>
        </div>
      {{/if}}
    
  */
  {
    "id": "f/B4wzmA",
    "block": "[[[1,\"\\n\"],[41,[28,[32,0],[[30,0,[\"site\",\"mobileView\"]],[30,0,[\"chat\",\"activeMessage\",\"model\",\"persisted\"]]],null],[[[1,\"      \"],[11,0],[16,0,[28,[32,1],[\"chat-message-actions-backdrop\",[52,[30,0,[\"showFadeIn\"]],\"fade-in\"]],null]],[4,[32,2],[[30,0,[\"fadeAndVibrate\"]]],null],[12],[1,\"\\n        \"],[11,0],[24,\"role\",\"button\"],[24,0,\"collapse-area\"],[4,[32,3],[\"touchstart\",[30,0,[\"collapseMenu\"]]],[[\"passive\",\"bubbles\"],[false,false]]],[12],[1,\"\\n        \"],[13],[1,\"\\n\\n        \"],[10,0],[14,0,\"chat-message-actions\"],[12],[1,\"\\n          \"],[10,0],[14,0,\"selected-message-container\"],[12],[1,\"\\n            \"],[10,0],[14,0,\"selected-message\"],[12],[1,\"\\n              \"],[8,[32,4],null,[[\"@user\"],[[30,0,[\"message\",\"user\"]]]],null],[1,\"\\n              \"],[11,1],[24,\"role\",\"button\"],[16,0,[28,[32,1],[\"selected-message-reply\",[52,[30,0,[\"hasExpandedReply\"]],\"is-expanded\"]],null]],[4,[32,3],[\"touchstart\",[30,0,[\"expandReply\"]]],[[\"passive\"],[true]]],[12],[1,\"\\n                \"],[1,[30,0,[\"message\",\"message\"]]],[1,\"\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n\\n          \"],[10,\"ul\"],[14,0,\"secondary-actions\"],[12],[1,\"\\n\"],[42,[28,[31,2],[[28,[31,2],[[30,0,[\"messageInteractor\",\"secondaryActions\"]]],null]],null],null,[[[1,\"              \"],[10,\"li\"],[14,0,\"chat-message-action-item\"],[15,\"data-id\",[30,1,[\"id\"]]],[12],[1,\"\\n                \"],[8,[32,5],[[24,0,\"chat-message-action\"]],[[\"@translatedLabel\",\"@icon\",\"@action\"],[[30,1,[\"name\"]],[30,1,[\"icon\"]],[28,[32,6],[[30,0,[\"actAndCloseMenu\"]],[30,1,[\"id\"]]],null]]],null],[1,\"\\n              \"],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n\\n\"],[41,[28,[32,7],[[30,0,[\"messageInteractor\",\"canReact\"]],[30,0,[\"messageInteractor\",\"canReply\"]]],null],[[[1,\"            \"],[10,0],[14,0,\"main-actions\"],[12],[1,\"\\n\"],[41,[30,0,[\"messageInteractor\",\"canReact\"]],[[[42,[28,[31,2],[[28,[31,2],[[30,0,[\"messageInteractor\",\"emojiReactions\"]]],null]],null],null,[[[1,\"                  \"],[8,[32,8],null,[[\"@reaction\",\"@onReaction\",\"@message\",\"@showCount\"],[[30,2],[30,0,[\"messageInteractor\",\"react\"]],[30,0,[\"message\"]],false]],null],[1,\"\\n\"]],[2]],null],[1,\"\\n                \"],[8,[32,5],[[24,\"data-id\",\"react\"],[24,0,\"btn-flat react-btn\"]],[[\"@action\",\"@icon\",\"@title\",\"@forwardEvent\"],[[30,0,[\"openEmojiPicker\"]],\"discourse-emojis\",\"chat.react\",true]],null],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"messageInteractor\",\"canBookmark\"]],[[[1,\"                \"],[8,[32,5],[[24,\"data-id\",\"bookmark\"],[24,0,\"btn-flat bookmark-btn\"]],[[\"@action\"],[[28,[32,6],[[30,0,[\"actAndCloseMenu\"]],\"toggleBookmark\"],null]]],[[\"default\"],[[[[1,\"\\n                  \"],[8,[32,9],null,[[\"@bookmark\"],[[30,0,[\"message\",\"bookmark\"]]]],null],[1,\"\\n                \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"messageInteractor\",\"canReply\"]],[[[1,\"                \"],[8,[32,5],[[24,\"data-id\",\"reply\"],[24,0,\"chat-message-action reply-btn btn-flat\"]],[[\"@action\",\"@icon\",\"@title\"],[[28,[32,6],[[30,0,[\"actAndCloseMenu\"]],\"reply\"],null],\"reply\",\"chat.reply\"]],null],[1,\"\\n\"]],[]],null],[1,\"            \"],[13],[1,\"\\n\"]],[]],null],[1,\"        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"button\",\"reaction\"],false,[\"if\",\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-message-actions-mobile.js",
    "scope": () => [_and.default, _concatClass.default, _didInsert.default, _modifier.on, _chatUserAvatar.default, _dButton.default, _helper.fn, _or.default, _chatMessageReaction.default, _bookmarkIcon.default],
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "hasExpandedReply", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "showFadeIn", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "fadeAndVibrate", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "fadeAndVibrate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "expandReply", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "expandReply"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "collapseMenu", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "collapseMenu"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "actAndCloseMenu", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "actAndCloseMenu"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openEmojiPicker", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openEmojiPicker"), _class.prototype)), _class);
  function _onCloseMenu2() {
    _classPrivateMethodGet(this, _removeFadeIn, _removeFadeIn2).call(this);
    // we don't want to remove the component right away as it's animating
    // 200 is equal to the duration of the css animation
    (0, _later.default)(() => {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      // by ensuring we are not hovering any message anymore
      // we also ensure the menu is fully removed
      this.chat.activeMessage = null;
    }, 200);
  }
  function _addFadeIn2() {
    this.showFadeIn = true;
  }
  function _removeFadeIn2() {
    this.showFadeIn = false;
  }
});
define("discourse/plugins/chat/discourse/components/chat-message-collapser", ["exports", "@ember/component", "@glimmer/component", "@ember/service", "@ember/template", "discourse/lib/utilities", "discourse-common/lib/dom-from-string", "discourse-i18n", "@ember/template-factory"], function (_exports, _component, _component2, _service, _template, _utilities, _domFromString, _discourseI18n, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.isCollapsible = isCollapsible;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="chat-message-collapser">
    {{#if this.hasUploads}}
      {{html-safe @cooked}}
  
      <Collapser @header={{this.uploadsHeader}} @onToggle={{@onToggleCollapse}}>
        <div class="chat-uploads">
          {{#each @uploads as |upload|}}
            <ChatUpload @upload={{upload}} />
          {{/each}}
        </div>
      </Collapser>
    {{else}}
      {{#each this.cookedBodies as |cooked|}}
        {{#if cooked.needsCollapser}}
          <Collapser @header={{cooked.header}} @onToggle={{@onToggleCollapse}}>
            {{#if cooked.videoAttributes}}
              <div class="chat-message-collapser-lazy-video">
                <LazyVideo @videoAttributes={{cooked.videoAttributes}} />
              </div>
            {{else}}
              {{cooked.body}}
            {{/if}}
          </Collapser>
        {{else}}
          {{cooked.body}}
        {{/if}}
      {{/each}}
    {{/if}}
  </div>
  */
  {
    "id": "0kb4UYGW",
    "block": "[[[10,0],[14,0,\"chat-message-collapser\"],[12],[1,\"\\n\"],[41,[30,0,[\"hasUploads\"]],[[[1,\"    \"],[1,[28,[35,1],[[30,1]],null]],[1,\"\\n\\n    \"],[8,[39,2],null,[[\"@header\",\"@onToggle\"],[[30,0,[\"uploadsHeader\"]],[30,2]]],[[\"default\"],[[[[1,\"\\n      \"],[10,0],[14,0,\"chat-uploads\"],[12],[1,\"\\n\"],[42,[28,[37,4],[[28,[37,4],[[30,3]],null]],null],null,[[[1,\"          \"],[8,[39,5],null,[[\"@upload\"],[[30,4]]],null],[1,\"\\n\"]],[4]],null],[1,\"      \"],[13],[1,\"\\n    \"]],[]]]]],[1,\"\\n\"]],[]],[[[42,[28,[37,4],[[28,[37,4],[[30,0,[\"cookedBodies\"]]],null]],null],null,[[[41,[30,5,[\"needsCollapser\"]],[[[1,\"        \"],[8,[39,2],null,[[\"@header\",\"@onToggle\"],[[30,5,[\"header\"]],[30,2]]],[[\"default\"],[[[[1,\"\\n\"],[41,[30,5,[\"videoAttributes\"]],[[[1,\"            \"],[10,0],[14,0,\"chat-message-collapser-lazy-video\"],[12],[1,\"\\n              \"],[8,[39,6],null,[[\"@videoAttributes\"],[[30,5,[\"videoAttributes\"]]]],null],[1,\"\\n            \"],[13],[1,\"\\n\"]],[]],[[[1,\"            \"],[1,[30,5,[\"body\"]]],[1,\"\\n\"]],[]]],[1,\"        \"]],[]]]]],[1,\"\\n\"]],[]],[[[1,\"        \"],[1,[30,5,[\"body\"]]],[1,\"\\n\"]],[]]]],[5]],null]],[]]],[13]],[\"@cooked\",\"@onToggleCollapse\",\"@uploads\",\"upload\",\"cooked\"],false,[\"if\",\"html-safe\",\"collapser\",\"each\",\"-track-array\",\"chat-upload\",\"lazy-video\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/chat-message-collapser.hbs",
    "isStrictMode": false
  });
  let ChatMessageCollapser = _exports.default = (_class = class ChatMessageCollapser extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "siteSettings", _descriptor, this);
    }
    get hasUploads() {
      return hasUploads(this.args.uploads);
    }
    get uploadsHeader() {
      let name = "";
      if (this.args.uploads.length === 1) {
        name = this.args.uploads[0].original_filename;
      } else {
        name = _discourseI18n.default.t("chat.uploaded_files", {
          count: this.args.uploads.length
        });
      }
      return (0, _template.htmlSafe)(`<span class="chat-message-collapser-link-small">${(0, _utilities.escapeExpression)(name)}</span>`);
    }
    get cookedBodies() {
      const elements = Array.prototype.slice.call((0, _domFromString.default)(this.args.cooked));
      if (hasLazyVideo(elements)) {
        return this.lazyVideoCooked(elements);
      }
      if (hasImageOnebox(elements)) {
        return this.imageOneboxCooked(elements);
      }
      if (hasImage(elements)) {
        return this.imageCooked(elements);
      }
      if (hasGallery(elements)) {
        return this.galleryCooked(elements);
      }
      return [];
    }
    lazyVideoCooked(elements) {
      return elements.reduce((acc, e) => {
        if (this.siteSettings.lazy_videos_enabled && lazyVideoPredicate(e)) {
          const getVideoAttributes = requirejs("discourse/plugins/discourse-lazy-videos/lib/lazy-video-attributes").default;
          const videoAttributes = getVideoAttributes(e);
          if (this.siteSettings[`lazy_${videoAttributes.providerName}_enabled`]) {
            const link = (0, _utilities.escapeExpression)(videoAttributes.url);
            const title = videoAttributes.title;
            const header = (0, _template.htmlSafe)(`<a target="_blank" class="chat-message-collapser-link" rel="noopener noreferrer" href="${link}">${title}</a>`);
            acc.push({
              header,
              body: e,
              videoAttributes,
              needsCollapser: true
            });
          } else {
            acc.push({
              body: e,
              needsCollapser: false
            });
          }
        } else {
          acc.push({
            body: e,
            needsCollapser: false
          });
        }
        return acc;
      }, []);
    }
    imageOneboxCooked(elements) {
      return elements.reduce((acc, e) => {
        if (imageOneboxPredicate(e)) {
          let link = animatedImagePredicate(e) ? e.firstChild.src : e.firstElementChild.href;
          link = (0, _utilities.escapeExpression)(link);
          const header = (0, _template.htmlSafe)(`<a target="_blank" class="chat-message-collapser-link-small" rel="noopener noreferrer" href="${link}">${link}</a>`);
          acc.push({
            header,
            body: e,
            needsCollapser: true
          });
        } else {
          acc.push({
            body: e,
            needsCollapser: false
          });
        }
        return acc;
      }, []);
    }
    imageCooked(elements) {
      return elements.reduce((acc, e) => {
        if (imagePredicate(e)) {
          const link = (0, _utilities.escapeExpression)(e.firstElementChild.src);
          const alt = (0, _utilities.escapeExpression)(e.firstElementChild.alt);
          const header = (0, _template.htmlSafe)(`<a target="_blank" class="chat-message-collapser-link-small" rel="noopener noreferrer" href="${link}">${alt || link}</a>`);
          acc.push({
            header,
            body: e,
            needsCollapser: true
          });
        } else {
          acc.push({
            body: e,
            needsCollapser: false
          });
        }
        return acc;
      }, []);
    }
    galleryCooked(elements) {
      return elements.reduce((acc, e) => {
        if (galleryPredicate(e)) {
          const link = (0, _utilities.escapeExpression)(e.firstElementChild.href);
          const title = (0, _utilities.escapeExpression)(e.firstElementChild.firstElementChild.textContent);
          e.firstElementChild.removeChild(e.firstElementChild.firstElementChild);
          const header = (0, _template.htmlSafe)(`<a target="_blank" class="chat-message-collapser-link-small" rel="noopener noreferrer" href="${link}">${title}</a>`);
          acc.push({
            header,
            body: e,
            needsCollapser: true
          });
        } else {
          acc.push({
            body: e,
            needsCollapser: false
          });
        }
        return acc;
      }, []);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  function lazyVideoPredicate(e) {
    return e.classList.contains("lazy-video-container");
  }
  function hasLazyVideo(elements) {
    return elements.some(e => lazyVideoPredicate(e));
  }
  function animatedImagePredicate(e) {
    return e.firstChild && e.firstChild.nodeName === "IMG" && e.firstChild.classList.contains("animated") && e.firstChild.classList.contains("onebox");
  }
  function externalImageOnebox(e) {
    return e.firstElementChild && e.firstElementChild.nodeName === "A" && e.firstElementChild.classList.contains("onebox") && e.firstElementChild.firstElementChild && e.firstElementChild.firstElementChild.nodeName === "IMG";
  }
  function imageOneboxPredicate(e) {
    return animatedImagePredicate(e) || externalImageOnebox(e);
  }
  function hasImageOnebox(elements) {
    return elements.some(e => imageOneboxPredicate(e));
  }
  function hasUploads(uploads) {
    return uploads?.length > 0;
  }
  function imagePredicate(e) {
    return e.nodeName === "P" && e.firstElementChild && e.firstElementChild.nodeName === "IMG" && !e.firstElementChild.classList.contains("emoji");
  }
  function hasImage(elements) {
    return elements.some(e => imagePredicate(e));
  }
  function galleryPredicate(e) {
    return e.firstElementChild && e.firstElementChild.nodeName === "A" && e.firstElementChild.firstElementChild && e.firstElementChild.firstElementChild.classList.contains("outer-box");
  }
  function hasGallery(elements) {
    return elements.some(e => galleryPredicate(e));
  }
  function isCollapsible(cooked, uploads) {
    const elements = Array.prototype.slice.call((0, _domFromString.default)(cooked));
    return hasLazyVideo(elements) || hasImageOnebox(elements) || hasUploads(uploads) || hasImage(elements) || hasGallery(elements);
  }
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatMessageCollapser);
});
define("discourse/plugins/chat/discourse/components/chat-message-in-reply-to-indicator", ["exports", "@glimmer/component", "@ember/routing", "@ember/service", "discourse/helpers/replace-emoji", "discourse-common/helpers/d-icon", "discourse-common/helpers/html-safe", "discourse/plugins/chat/discourse/components/chat-emoji-avatar", "discourse/plugins/chat/discourse/components/chat-user-avatar", "@ember/template-factory", "@ember/component"], function (_exports, _component, _routing, _service, _replaceEmoji, _dIcon, _htmlSafe, _chatEmojiAvatar, _chatUserAvatar, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessageInReplyToIndicator = _exports.default = (_class = (_class2 = class ChatMessageInReplyToIndicator extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
    }
    get route() {
      if (this.hasThread) {
        return "chat.channel.thread";
      } else {
        return "chat.channel.near-message";
      }
    }
    get model() {
      if (this.hasThread) {
        return [...this.args.message.channel.routeModels, this.args.message.thread.id];
      } else {
        return [...this.args.message.channel.routeModels, this.args.message.inReplyTo.id];
      }
    }
    get hasThread() {
      return this.args.message?.channel?.threadingEnabled && this.args.message?.thread?.id;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @message.inReplyTo}}
        <LinkTo
          @route={{this.route}}
          @models={{this.model}}
          class="chat-reply is-direct-reply"
        >
          {{dIcon "share" title="chat.in_reply_to"}}
  
          {{#if @message.inReplyTo.chatWebhookEvent.emoji}}
            <ChatEmojiAvatar
              @emoji={{@message.inReplyTo.chatWebhookEvent.emoji}}
            />
          {{else}}
            <ChatUserAvatar @user={{@message.inReplyTo.user}} />
          {{/if}}
  
          <span class="chat-reply__excerpt">
            {{replaceEmoji (htmlSafe @message.inReplyTo.excerpt)}}
          </span>
        </LinkTo>
      {{/if}}
    
  */
  {
    "id": "vgamxX3+",
    "block": "[[[1,\"\\n\"],[41,[30,1,[\"inReplyTo\"]],[[[1,\"      \"],[8,[32,0],[[24,0,\"chat-reply is-direct-reply\"]],[[\"@route\",\"@models\"],[[30,0,[\"route\"]],[30,0,[\"model\"]]]],[[\"default\"],[[[[1,\"\\n        \"],[1,[28,[32,1],[\"share\"],[[\"title\"],[\"chat.in_reply_to\"]]]],[1,\"\\n\\n\"],[41,[30,1,[\"inReplyTo\",\"chatWebhookEvent\",\"emoji\"]],[[[1,\"          \"],[8,[32,2],null,[[\"@emoji\"],[[30,1,[\"inReplyTo\",\"chatWebhookEvent\",\"emoji\"]]]],null],[1,\"\\n\"]],[]],[[[1,\"          \"],[8,[32,3],null,[[\"@user\"],[[30,1,[\"inReplyTo\",\"user\"]]]],null],[1,\"\\n\"]],[]]],[1,\"\\n        \"],[10,1],[14,0,\"chat-reply__excerpt\"],[12],[1,\"\\n          \"],[1,[28,[32,4],[[28,[32,5],[[30,1,[\"inReplyTo\",\"excerpt\"]]],null]],null]],[1,\"\\n        \"],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@message\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-message-in-reply-to-indicator.js",
    "scope": () => [_routing.LinkTo, _dIcon.default, _chatEmojiAvatar.default, _chatUserAvatar.default, _replaceEmoji.default, _htmlSafe.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat-message-reaction", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/modifier", "@ember/object", "@ember/service", "@ember/template", "ember-modifier", "discourse/helpers/concat-class", "discourse/lib/text", "truth-helpers/helpers/and", "discourse/plugins/chat/discourse/lib/get-reaction-text", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _modifier, _object, _service, _template, _emberModifier, _concatClass, _text, _and, _getReactionText, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessageReaction = _exports.default = (_class = (_class2 = class ChatMessageReaction extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "capabilities", _descriptor, this);
      _initializerDefineProperty(this, "currentUser", _descriptor2, this);
      _initializerDefineProperty(this, "tooltip", _descriptor3, this);
      _initializerDefineProperty(this, "site", _descriptor4, this);
      _initializerDefineProperty(this, "isActive", _descriptor5, this);
      _defineProperty(this, "registerTooltip", (0, _emberModifier.modifier)(element1 => {
        if (this.disableTooltip || !this.popoverContent?.length) {
          return;
        }
        const instance1 = this.tooltip.register(element1, {
          content: (0, _template.htmlSafe)(this.popoverContent),
          identifier: "chat-message-reaction-tooltip",
          animated: false,
          placement: "top",
          fallbackPlacements: ["bottom"],
          triggers: this.site.mobileView ? ["hold"] : ["hover"]
        });
        return () => {
          instance1?.destroy();
        };
      }));
    }
    get disableTooltip() {
      return this.args.disableTooltip ?? false;
    }
    get showCount() {
      return this.args.showCount ?? true;
    }
    get emojiString() {
      return `:${this.args.reaction.emoji}:`;
    }
    get emojiUrl() {
      return (0, _text.emojiUrlFor)(this.args.reaction.emoji);
    }
    handleClick(event1) {
      event1.stopPropagation();
      this.args.onReaction?.(this.args.reaction.emoji, this.args.reaction.reacted ? "remove" : "add");
      this.tooltip.close();
    }
    get popoverContent() {
      if (!this.args.reaction.count || !this.args.reaction.users?.length) {
        return;
      }
      return (0, _text.emojiUnescape)((0, _getReactionText.getReactionText)(this.args.reaction, this.currentUser));
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if (and @reaction this.emojiUrl)}}
        <button
          type="button"
          tabindex="0"
          class={{concatClass
            "chat-message-reaction"
            (if @reaction.reacted "reacted")
            (if this.isActive "-active")
          }}
          data-emoji-name={{@reaction.emoji}}
          title={{this.emojiString}}
          {{on "click" this.handleClick passive=true}}
          {{this.registerTooltip}}
        >
          <img
            loading="lazy"
            class="emoji"
            width="20"
            height="20"
            alt={{this.emojiString}}
            src={{this.emojiUrl}}
          />
  
          {{#if (and this.showCount @reaction.count)}}
            <span class="count">{{@reaction.count}}</span>
          {{/if}}
        </button>
      {{/if}}
    
  */
  {
    "id": "DyOJuZ8i",
    "block": "[[[1,\"\\n\"],[41,[28,[32,0],[[30,1],[30,0,[\"emojiUrl\"]]],null],[[[1,\"      \"],[11,\"button\"],[24,\"tabindex\",\"0\"],[16,0,[28,[32,1],[\"chat-message-reaction\",[52,[30,1,[\"reacted\"]],\"reacted\"],[52,[30,0,[\"isActive\"]],\"-active\"]],null]],[16,\"data-emoji-name\",[30,1,[\"emoji\"]]],[16,\"title\",[30,0,[\"emojiString\"]]],[24,4,\"button\"],[4,[32,2],[\"click\",[30,0,[\"handleClick\"]]],[[\"passive\"],[true]]],[4,[30,0,[\"registerTooltip\"]],null,null],[12],[1,\"\\n        \"],[10,\"img\"],[14,\"loading\",\"lazy\"],[14,0,\"emoji\"],[14,\"width\",\"20\"],[14,\"height\",\"20\"],[15,\"alt\",[30,0,[\"emojiString\"]]],[15,\"src\",[30,0,[\"emojiUrl\"]]],[12],[13],[1,\"\\n\\n\"],[41,[28,[32,0],[[30,0,[\"showCount\"]],[30,1,[\"count\"]]],null],[[[1,\"          \"],[10,1],[14,0,\"count\"],[12],[1,[30,1,[\"count\"]]],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@reaction\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-message-reaction.js",
    "scope": () => [_and.default, _concatClass.default, _modifier.on],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "tooltip", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "isActive", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "handleClick", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "handleClick"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "popoverContent", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "popoverContent"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-message-separator-date", ["exports", "@glimmer/component", "@ember/modifier", "@ember/object", "discourse/helpers/concat-class", "discourse-common/helpers/i18n", "discourse/plugins/chat/discourse/modifiers/chat/track-message-separator-date", "@ember/template-factory", "@ember/component"], function (_exports, _component, _modifier, _object, _concatClass, _i18n, _trackMessageSeparatorDate, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2;
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let ChatMessageSeparatorDate = _exports.default = (_class = (_class2 = class ChatMessageSeparatorDate extends _component.default {
    onDateClick() {
      return this.args.fetchMessagesByDate?.(this.args.message.firstMessageOfTheDayAt);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @message.formattedFirstMessageDate}}
        <div
          class={{concatClass
            "chat-message-separator-date"
            (if @message.newest "with-last-visit")
          }}
          role="button"
          {{on "click" this.onDateClick passive=true}}
        >
          <div
            class="chat-message-separator__text-container"
            {{trackMessageSeparatorDate}}
          >
            <span class="chat-message-separator__text">
              {{@message.formattedFirstMessageDate}}
  
              {{#if @message.newest}}
                <span class="chat-message-separator__last-visit">
                  <span
                    class="chat-message-separator__last-visit-separator"
                  >-</span>
                  {{i18n "chat.last_visit"}}
                </span>
              {{/if}}
            </span>
          </div>
        </div>
  
        <div class="chat-message-separator__line-container">
          <div class="chat-message-separator__line"></div>
        </div>
      {{/if}}
    
  */
  {
    "id": "GTpyJJv8",
    "block": "[[[1,\"\\n\"],[41,[30,1,[\"formattedFirstMessageDate\"]],[[[1,\"      \"],[11,0],[16,0,[28,[32,0],[\"chat-message-separator-date\",[52,[30,1,[\"newest\"]],\"with-last-visit\"]],null]],[24,\"role\",\"button\"],[4,[32,1],[\"click\",[30,0,[\"onDateClick\"]]],[[\"passive\"],[true]]],[12],[1,\"\\n        \"],[11,0],[24,0,\"chat-message-separator__text-container\"],[4,[32,2],null,null],[12],[1,\"\\n          \"],[10,1],[14,0,\"chat-message-separator__text\"],[12],[1,\"\\n            \"],[1,[30,1,[\"formattedFirstMessageDate\"]]],[1,\"\\n\\n\"],[41,[30,1,[\"newest\"]],[[[1,\"              \"],[10,1],[14,0,\"chat-message-separator__last-visit\"],[12],[1,\"\\n                \"],[10,1],[14,0,\"chat-message-separator__last-visit-separator\"],[12],[1,\"-\"],[13],[1,\"\\n                \"],[1,[28,[32,3],[\"chat.last_visit\"],null]],[1,\"\\n              \"],[13],[1,\"\\n\"]],[]],null],[1,\"          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\\n      \"],[10,0],[14,0,\"chat-message-separator__line-container\"],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-message-separator__line\"],[12],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@message\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-message-separator-date.js",
    "scope": () => [_concatClass.default, _modifier.on, _trackMessageSeparatorDate.default, _i18n.default],
    "isStrictMode": true
  }), _class2), _class2), (_applyDecoratedDescriptor(_class.prototype, "onDateClick", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onDateClick"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-message-separator-new", ["exports", "discourse-common/helpers/i18n", "truth-helpers/helpers/and", "truth-helpers/helpers/not", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _i18n, _and, _not, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ChatMessageSeparatorNew = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    {{#if (and @message.newest (not @message.formattedFirstMessageDate))}}
      <div class="chat-message-separator-new">
        <div class="chat-message-separator__text-container">
          <span class="chat-message-separator__text">
            {{i18n "chat.last_visit"}}
          </span>
        </div>
  
        <div class="chat-message-separator__line-container">
          <div class="chat-message-separator__line"></div>
        </div>
      </div>
    {{/if}}
  
  */
  {
    "id": "TwTALrFk",
    "block": "[[[1,\"\\n\"],[41,[28,[32,0],[[30,1,[\"newest\"]],[28,[32,1],[[30,1,[\"formattedFirstMessageDate\"]]],null]],null],[[[1,\"    \"],[10,0],[14,0,\"chat-message-separator-new\"],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-message-separator__text-container\"],[12],[1,\"\\n        \"],[10,1],[14,0,\"chat-message-separator__text\"],[12],[1,\"\\n          \"],[1,[28,[32,2],[\"chat.last_visit\"],null]],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\\n      \"],[10,0],[14,0,\"chat-message-separator__line-container\"],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-message-separator__line\"],[12],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n\"]],[]],null]],[\"@message\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-message-separator-new.js",
    "scope": () => [_and.default, _not.default, _i18n.default],
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = ChatMessageSeparatorNew;
});
define("discourse/plugins/chat/discourse/components/chat-message-text", ["exports", "@glimmer/component", "discourse-common/helpers/html-safe", "discourse-common/helpers/i18n", "discourse/plugins/chat/discourse/components/chat-message-collapser", "@ember/template-factory", "@ember/component"], function (_exports, _component, _htmlSafe, _i18n, _chatMessageCollapser, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatMessageText extends _component.default {
    get isEdited() {
      return this.args.edited ?? false;
    }
    get isCollapsible() {
      return (0, _chatMessageCollapser.isCollapsible)(this.args.cooked, this.args.uploads);
    }
  }
  _exports.default = ChatMessageText;
  _class = ChatMessageText;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-message-text">
        {{#if this.isCollapsible}}
          <ChatMessageCollapser
            @cooked={{@cooked}}
            @uploads={{@uploads}}
            @onToggleCollapse={{@onToggleCollapse}}
          />
        {{else}}
          {{htmlSafe @cooked}}
        {{/if}}
  
        {{#if this.isEdited}}
          <span class="chat-message-edited">({{i18n "chat.edited"}})</span>
        {{/if}}
  
        {{yield}}
      </div>
    
  */
  {
    "id": "ROTAl0ka",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-message-text\"],[12],[1,\"\\n\"],[41,[30,0,[\"isCollapsible\"]],[[[1,\"        \"],[8,[32,0],null,[[\"@cooked\",\"@uploads\",\"@onToggleCollapse\"],[[30,1],[30,2],[30,3]]],null],[1,\"\\n\"]],[]],[[[1,\"        \"],[1,[28,[32,1],[[30,1]],null]],[1,\"\\n\"]],[]]],[1,\"\\n\"],[41,[30,0,[\"isEdited\"]],[[[1,\"        \"],[10,1],[14,0,\"chat-message-edited\"],[12],[1,\"(\"],[1,[28,[32,2],[\"chat.edited\"],null]],[1,\")\"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[18,4,null],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@cooked\",\"@uploads\",\"@onToggleCollapse\",\"&default\"],false,[\"if\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-message-text.js",
    "scope": () => [_chatMessageCollapser.default, _htmlSafe.default, _i18n.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat-message-thread-indicator", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/render-modifiers/modifiers/will-destroy", "@ember/service", "discourse/helpers/concat-class", "discourse/helpers/format-date", "discourse/helpers/replace-emoji", "discourse-common/helpers/html-safe", "discourse-common/helpers/i18n", "discourse-common/lib/get-url", "discourse-common/utils/decorators", "discourse/plugins/chat/discourse/components/chat-thread-participants", "discourse/plugins/chat/discourse/components/chat-user-avatar", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _object, _didInsert, _willDestroy, _service, _concatClass, _formatDate, _replaceEmoji, _htmlSafe, _i18n, _getUrl, _decorators, _chatThreadParticipants, _chatUserAvatar, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessageThreadIndicator = _exports.default = (_class = (_class2 = class ChatMessageThreadIndicator extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "capabilities", _descriptor, this);
      _initializerDefineProperty(this, "chat", _descriptor2, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor3, this);
      _initializerDefineProperty(this, "router", _descriptor4, this);
      _initializerDefineProperty(this, "site", _descriptor5, this);
      _initializerDefineProperty(this, "isActive", _descriptor6, this);
    }
    get interactiveUser() {
      return this.args.interactiveUser ?? true;
    }
    setup(element1) {
      this.element = element1;
      if (this.capabilities.touch) {
        this.element.addEventListener("touchstart", this.onTouchStart, {
          passive: true
        });
        this.element.addEventListener("touchmove", this.cancelTouch, {
          passive: true
        });
        this.element.addEventListener("touchend", this.onTouchEnd);
        this.element.addEventListener("touchCancel", this.cancelTouch);
      }
      this.element.addEventListener("mousedown", this.openThread, {
        passive: true
      });
      this.element.addEventListener("keydown", this.openThread, {
        passive: true
      });
    }
    teardown() {
      if (this.capabilities.touch) {
        this.element.removeEventListener("touchstart", this.onTouchStart, {
          passive: true
        });
        this.element.removeEventListener("touchmove", this.cancelTouch, {
          passive: true
        });
        this.element.removeEventListener("touchend", this.onTouchEnd);
        this.element.removeEventListener("touchCancel", this.cancelTouch);
      }
      this.element.removeEventListener("mousedown", this.openThread, {
        passive: true
      });
      this.element.removeEventListener("keydown", this.openThread, {
        passive: true
      });
    }
    onTouchStart(event1) {
      this.isActive = true;
      event1.stopPropagation();
      this.touching = true;
    }
    onTouchEnd() {
      this.isActive = false;
      if (this.touching) {
        this.openThread();
      }
    }
    cancelTouch() {
      this.isActive = false;
      this.touching = false;
    }
    openThread(event1) {
      if (event1?.type === "keydown" && event1?.key !== "Enter") {
        return;
      }
      // handle middle mouse
      if (event1?.type === "mousedown" && (event1?.which === 2 || event1?.shiftKey)) {
        window.open((0, _getUrl.default)(this.router.urlFor("chat.channel.thread", ...this.args.message.thread.routeModels)), "_blank");
        return;
      }
      this.chat.activeMessage = null;
      this.router.transitionTo("chat.channel.thread", ...this.args.message.thread.routeModels);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div
        class={{concatClass
          "chat-message-thread-indicator"
          (if this.isActive "-active")
        }}
        {{didInsert this.setup}}
        {{willDestroy this.teardown}}
        role="button"
        title={{i18n "chat.threads.open"}}
        tabindex="0"
        ...attributes
      >
  
        <div class="chat-message-thread-indicator__last-reply-avatar">
          <ChatUserAvatar
            @user={{@message.thread.preview.lastReplyUser}}
            @avatarSize="small"
            @interactive={{this.interactiveUser}}
          />
        </div>
  
        <div class="chat-message-thread-indicator__last-reply-info">
          <span class="chat-message-thread-indicator__last-reply-username">
            {{@message.thread.preview.lastReplyUser.username}}
          </span>
          <span class="chat-message-thread-indicator__last-reply-timestamp">
            {{formatDate
              @message.thread.preview.lastReplyCreatedAt
              leaveAgo="true"
            }}
          </span>
        </div>
        <div class="chat-message-thread-indicator__replies-count">
          {{i18n "chat.thread.replies" count=@message.thread.preview.replyCount}}
        </div>
        <ChatThreadParticipants @thread={{@message.thread}} />
        <div class="chat-message-thread-indicator__last-reply-excerpt">
          {{replaceEmoji (htmlSafe @message.thread.preview.lastReplyExcerpt)}}
        </div>
      </div>
    
  */
  {
    "id": "b0SPB+Uj",
    "block": "[[[1,\"\\n    \"],[11,0],[16,0,[28,[32,0],[\"chat-message-thread-indicator\",[52,[30,0,[\"isActive\"]],\"-active\"]],null]],[24,\"role\",\"button\"],[16,\"title\",[28,[32,1],[\"chat.threads.open\"],null]],[24,\"tabindex\",\"0\"],[17,1],[4,[32,2],[[30,0,[\"setup\"]]],null],[4,[32,3],[[30,0,[\"teardown\"]]],null],[12],[1,\"\\n\\n      \"],[10,0],[14,0,\"chat-message-thread-indicator__last-reply-avatar\"],[12],[1,\"\\n        \"],[8,[32,4],null,[[\"@user\",\"@avatarSize\",\"@interactive\"],[[30,2,[\"thread\",\"preview\",\"lastReplyUser\"]],\"small\",[30,0,[\"interactiveUser\"]]]],null],[1,\"\\n      \"],[13],[1,\"\\n\\n      \"],[10,0],[14,0,\"chat-message-thread-indicator__last-reply-info\"],[12],[1,\"\\n        \"],[10,1],[14,0,\"chat-message-thread-indicator__last-reply-username\"],[12],[1,\"\\n          \"],[1,[30,2,[\"thread\",\"preview\",\"lastReplyUser\",\"username\"]]],[1,\"\\n        \"],[13],[1,\"\\n        \"],[10,1],[14,0,\"chat-message-thread-indicator__last-reply-timestamp\"],[12],[1,\"\\n          \"],[1,[28,[32,5],[[30,2,[\"thread\",\"preview\",\"lastReplyCreatedAt\"]]],[[\"leaveAgo\"],[\"true\"]]]],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n      \"],[10,0],[14,0,\"chat-message-thread-indicator__replies-count\"],[12],[1,\"\\n        \"],[1,[28,[32,1],[\"chat.thread.replies\"],[[\"count\"],[[30,2,[\"thread\",\"preview\",\"replyCount\"]]]]]],[1,\"\\n      \"],[13],[1,\"\\n      \"],[8,[32,6],null,[[\"@thread\"],[[30,2,[\"thread\"]]]],null],[1,\"\\n      \"],[10,0],[14,0,\"chat-message-thread-indicator__last-reply-excerpt\"],[12],[1,\"\\n        \"],[1,[28,[32,7],[[28,[32,8],[[30,2,[\"thread\",\"preview\",\"lastReplyExcerpt\"]]],null]],null]],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"&attrs\",\"@message\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-message-thread-indicator.js",
    "scope": () => [_concatClass.default, _i18n.default, _didInsert.default, _willDestroy.default, _chatUserAvatar.default, _formatDate.default, _chatThreadParticipants.default, _replaceEmoji.default, _htmlSafe.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "isActive", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setup", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "teardown", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "teardown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onTouchStart", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onTouchStart"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onTouchEnd", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onTouchEnd"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cancelTouch", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "cancelTouch"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openThread", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "openThread"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-message", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/application", "@ember/component", "@ember/modifier", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/render-modifiers/modifiers/did-update", "@ember/render-modifiers/modifiers/will-destroy", "@ember/runloop", "@ember/service", "ember-modifier", "discourse/components/d-button", "discourse/helpers/concat-class", "discourse/lib/optional-service", "discourse/lib/update-user-status-on-mention", "discourse-common/lib/debounce", "discourse-common/lib/later", "discourse-common/utils/decorators", "discourse-i18n", "truth-helpers/helpers/eq", "truth-helpers/helpers/not", "discourse/plugins/chat/discourse/components/chat/message/avatar", "discourse/plugins/chat/discourse/components/chat/message/error", "discourse/plugins/chat/discourse/components/chat/message/info", "discourse/plugins/chat/discourse/components/chat/message/left-gutter", "discourse/plugins/chat/discourse/components/chat-message-in-reply-to-indicator", "discourse/plugins/chat/discourse/components/chat-message-reaction", "discourse/plugins/chat/discourse/components/chat-message-separator-date", "discourse/plugins/chat/discourse/components/chat-message-separator-new", "discourse/plugins/chat/discourse/components/chat-message-text", "discourse/plugins/chat/discourse/components/chat-message-thread-indicator", "discourse/plugins/chat/discourse/lib/chat-message-interactor", "discourse/plugins/chat/discourse/lib/zoom-check", "discourse/plugins/chat/discourse/modifiers/chat/on-long-press", "@ember/template-factory"], function (_exports, _component, _tracking, _application, _component2, _modifier, _object, _didInsert, _didUpdate, _willDestroy, _runloop, _service, _emberModifier, _dButton, _concatClass, _optionalService, _updateUserStatusOnMention, _debounce, _later, _decorators, _discourseI18n, _eq, _not, _avatar, _error, _info, _leftGutter, _chatMessageInReplyToIndicator, _chatMessageReaction, _chatMessageSeparatorDate, _chatMessageSeparatorNew, _chatMessageText, _chatMessageThreadIndicator, _chatMessageInteractor, _zoomCheck, _onLongPress, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MESSAGE_CONTEXT_THREAD = _exports.MENTION_KEYWORDS = void 0;
  _exports.addChatMessageDecorator = addChatMessageDecorator;
  _exports.default = void 0;
  _exports.resetChatMessageDecorators = resetChatMessageDecorators;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _class2, _teardownMentionedUsers;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let _chatMessageDecorators = [];
  function addChatMessageDecorator(decorator1) {
    _chatMessageDecorators.push(decorator1);
  }
  function resetChatMessageDecorators() {
    _chatMessageDecorators = [];
  }
  const MENTION_KEYWORDS = _exports.MENTION_KEYWORDS = ["here", "all"];
  const MESSAGE_CONTEXT_THREAD = _exports.MESSAGE_CONTEXT_THREAD = "thread";
  let ChatMessage = _exports.default = (_class = (_teardownMentionedUsers = /*#__PURE__*/new WeakSet(), (_class2 = class ChatMessage extends _component.default {
    constructor() {
      super(...arguments);
      _classPrivateMethodInitSpec(this, _teardownMentionedUsers);
      _initializerDefineProperty(this, "site", _descriptor, this);
      _initializerDefineProperty(this, "dialog", _descriptor2, this);
      _initializerDefineProperty(this, "currentUser", _descriptor3, this);
      _initializerDefineProperty(this, "appEvents", _descriptor4, this);
      _initializerDefineProperty(this, "capabilities", _descriptor5, this);
      _initializerDefineProperty(this, "chat", _descriptor6, this);
      _initializerDefineProperty(this, "chatApi", _descriptor7, this);
      _initializerDefineProperty(this, "chatEmojiReactionStore", _descriptor8, this);
      _initializerDefineProperty(this, "chatEmojiPickerManager", _descriptor9, this);
      _initializerDefineProperty(this, "chatChannelPane", _descriptor10, this);
      _initializerDefineProperty(this, "chatThreadPane", _descriptor11, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor12, this);
      _initializerDefineProperty(this, "router", _descriptor13, this);
      _initializerDefineProperty(this, "toasts", _descriptor14, this);
      _initializerDefineProperty(this, "isActive", _descriptor15, this);
      _initializerDefineProperty(this, "adminTools", _descriptor16, this);
      _defineProperty(this, "toggleCheckIfPossible", (0, _emberModifier.modifier)(element1 => {
        let addedListener1 = false;
        const handler1 = () => {
          if (!this.pane.selectingMessages) {
            return;
          }
          if (event.shiftKey) {
            this.messageInteractor.bulkSelect(!this.args.message.selected);
            return;
          }
          this.messageInteractor.select(!this.args.message.selected);
        };
        if (this.pane.selectingMessages) {
          element1.addEventListener("click", handler1, {
            passive: true
          });
          addedListener1 = true;
        }
        return () => {
          if (addedListener1) {
            element1.removeEventListener("click", handler1);
          }
        };
      }));
      this.initMentionedUsers();
    }
    get pane() {
      return this.args.context === MESSAGE_CONTEXT_THREAD ? this.chatThreadPane : this.chatChannelPane;
    }
    get messageInteractor() {
      return new _chatMessageInteractor.default((0, _application.getOwner)(this), this.args.message, this.args.context);
    }
    get deletedAndCollapsed() {
      return this.args.message?.deletedAt && this.collapsed;
    }
    get hiddenAndCollapsed() {
      return this.args.message?.hidden && this.collapsed;
    }
    get collapsed() {
      return !this.args.message?.expanded;
    }
    get deletedMessageLabel() {
      let count1 = 1;
      const recursiveCount1 = message1 => {
        const previousMessage1 = message1.previousMessage;
        if (previousMessage1?.deletedAt) {
          count1++;
          recursiveCount1(previousMessage1);
        }
      };
      recursiveCount1(this.args.message);
      return _discourseI18n.default.t("chat.deleted", {
        count: count1
      });
    }
    get shouldRender() {
      return this.args.message.expanded || !this.args.message.deletedAt || this.args.message.deletedAt && !this.args.message.nextMessage?.deletedAt;
    }
    get shouldRenderOpenEmojiPickerButton() {
      return this.chat.userCanInteractWithChat && this.site.desktopView;
    }
    get secondaryActionsIsExpanded() {
      return document.querySelector(".more-buttons.secondary-actions.is-expanded");
    }
    expand() {
      const recursiveExpand1 = message1 => {
        const previousMessage1 = message1.previousMessage;
        if (previousMessage1?.deletedAt) {
          previousMessage1.expanded = true;
          recursiveExpand1(previousMessage1);
        }
      };
      this.args.message.expanded = true;
      this.refreshStatusOnMentions();
      recursiveExpand1(this.args.message);
    }
    toggleChecked(event1) {
      event1.stopPropagation();
      if (event1.shiftKey) {
        this.messageInteractor.bulkSelect(event1.target.checked);
        return;
      }
      this.messageInteractor.select(event1.target.checked);
    }
    willDestroyMessage() {
      (0, _runloop.cancel)(this._invitationSentTimer);
      (0, _runloop.cancel)(this._disableMessageActionsHandler);
      (0, _runloop.cancel)(this._makeMessageActiveHandler);
      (0, _runloop.cancel)(this._debounceDecorateCookedMessageHandler);
      _classPrivateMethodGet(this, _teardownMentionedUsers, _teardownMentionedUsers2).call(this);
      this.chat.activeMessage = null;
    }
    refreshStatusOnMentions() {
      (0, _runloop.schedule)("afterRender", () => {
        this.args.message.mentionedUsers.forEach(user1 => {
          const href1 = `/u/${user1.username.toLowerCase()}`;
          const mentions1 = this.messageContainer.querySelectorAll(`a.mention[href="${href1}"]`);
          mentions1.forEach(mention1 => {
            (0, _updateUserStatusOnMention.updateUserStatusOnMention)((0, _application.getOwner)(this), mention1, user1.status);
          });
        });
      });
    }
    didInsertMessage(element1) {
      this.messageContainer = element1;
      this.debounceDecorateCookedMessage();
      this.refreshStatusOnMentions();
    }
    didUpdateMessageId() {
      this.debounceDecorateCookedMessage();
    }
    didUpdateMessageVersion() {
      this.debounceDecorateCookedMessage();
      this.refreshStatusOnMentions();
      this.initMentionedUsers();
    }
    debounceDecorateCookedMessage() {
      this._debounceDecorateCookedMessageHandler = (0, _debounce.default)(this, this.decorateCookedMessage, this.args.message, 100);
    }
    decorateCookedMessage(message1) {
      (0, _runloop.schedule)("afterRender", () => {
        _chatMessageDecorators.forEach(decorator1 => {
          decorator1.call(this, this.messageContainer, message1.channel);
        });
      });
    }
    initMentionedUsers() {
      this.args.message.mentionedUsers.forEach(user1 => {
        if (user1.isTrackingStatus()) {
          return;
        }
        user1.trackStatus();
        user1.on("status-changed", this, "refreshStatusOnMentions");
      });
    }
    get show() {
      return !this.args.message?.deletedAt || this.currentUser.id === this.args.message?.user?.id || this.currentUser.staff || this.args.message?.channel?.canModerate;
    }
    onMouseEnter() {
      if (this.site.mobileView) {
        return;
      }
      if (this.chat.activeMessage?.model?.id === this.args.message.id) {
        return;
      }
      if (!this.secondaryActionsIsExpanded) {
        this._onMouseEnterMessageDebouncedHandler = (0, _debounce.default)(this, this._debouncedOnHoverMessage, 250);
      }
    }
    onMouseMove() {
      if (this.site.mobileView) {
        return;
      }
      if (this.chat.activeMessage?.model?.id === this.args.message.id) {
        return;
      }
      if (!this.secondaryActionsIsExpanded) {
        this._setActiveMessage();
      }
    }
    onMouseLeave(event1) {
      (0, _runloop.cancel)(this._onMouseEnterMessageDebouncedHandler);
      if (this.site.mobileView) {
        return;
      }
      if ((event1.toElement || event1.relatedTarget)?.closest(".chat-message-actions-container")) {
        return;
      }
      if (!this.secondaryActionsIsExpanded) {
        this.chat.activeMessage = null;
      }
    }
    _debouncedOnHoverMessage() {
      this._setActiveMessage();
    }
    _setActiveMessage() {
      if (this.args.disableMouseEvents) {
        return;
      }
      (0, _runloop.cancel)(this._onMouseEnterMessageDebouncedHandler);
      if (!this.chat.userCanInteractWithChat) {
        return;
      }
      if (!this.args.message.expanded) {
        return;
      }
      this.chat.activeMessage = {
        model: this.args.message,
        context: this.args.context
      };
    }
    onLongPressStart(element1, event1) {
      if (!this.args.message.expanded || !this.args.message.persisted) {
        return;
      }
      if (event1.target.tagName === "IMG") {
        return;
      }
      // prevents message to show as active when starting scroll
      // at this moment scroll has no momentum and the row can
      // capture the touch event instead of a scroll
      this._makeMessageActiveHandler = (0, _later.default)(() => {
        this.isActive = true;
      }, 125);
    }
    onLongPressCancel() {
      (0, _runloop.cancel)(this._makeMessageActiveHandler);
      this.isActive = false;
      // this a tricky bit of code which is needed to prevent the long press
      // from triggering a click on the message actions panel when releasing finger press
      // we can't prevent default as we need to keep the event passive for performance reasons
      // this class will prevent any click from being triggered until removed
      // this number has been chosen from testing but might need to be increased
      this._disableMessageActionsHandler = (0, _later.default)(() => {
        document.documentElement.classList.remove("disable-message-actions-touch");
      }, 200);
    }
    onLongPressEnd(element1, event1) {
      if (event1.target.tagName === "IMG") {
        return;
      }
      (0, _runloop.cancel)(this._makeMessageActiveHandler);
      this.isActive = false;
      if ((0, _zoomCheck.default)()) {
        // if zoomed don't handle long press
        return;
      }
      document.documentElement.classList.add("disable-message-actions-touch");
      document.activeElement.blur();
      document.querySelector(".chat-composer__input")?.blur();
      this._setActiveMessage();
    }
    get hasActiveState() {
      return this.isActive || this.chat.activeMessage?.model?.id === this.args.message.id;
    }
    get hasReply() {
      return this.args.message.inReplyTo && !this.hideReplyToInfo;
    }
    get hideUserInfo() {
      const message1 = this.args.message;
      const previousMessage1 = message1.previousMessage;
      if (!previousMessage1) {
        return false;
      }
      // this is a micro optimization to avoid layout changes when we load more messages
      if (message1.firstOfResults) {
        return false;
      }
      if (message1.chatWebhookEvent) {
        return false;
      }
      if (previousMessage1.deletedAt) {
        return false;
      }
      if (Math.abs(new Date(message1.createdAt) - new Date(previousMessage1.createdAt)) > 300000) {
        return false;
      }
      if (message1.inReplyTo) {
        if (message1.inReplyTo?.id === previousMessage1.id) {
          return message1.user?.id === previousMessage1.user?.id;
        } else {
          return false;
        }
      }
      return message1.user?.id === previousMessage1.user?.id;
    }
    get hideReplyToInfo() {
      return this.args.context === MESSAGE_CONTEXT_THREAD || this.args.message?.inReplyTo?.id === this.args.message?.previousMessage?.id || this.threadingEnabled;
    }
    get threadingEnabled() {
      return this.args.message?.channel?.threadingEnabled && !!this.args.message?.thread;
    }
    get showThreadIndicator() {
      return this.args.context !== MESSAGE_CONTEXT_THREAD && this.threadingEnabled && this.args.message?.thread && this.args.message?.thread.preview.replyCount > 0;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{! template-lint-disable no-invalid-interactive }}
      {{#if this.shouldRender}}
        {{#if (eq @context "channel")}}
          <ChatMessageSeparatorDate
            @fetchMessagesByDate={{@fetchMessagesByDate}}
            @message={{@message}}
          />
          <ChatMessageSeparatorNew @message={{@message}} />
        {{/if}}
  
        <div
          class={{concatClass
            "chat-message-container"
            (if this.pane.selectingMessages "-selectable")
            (if @message.highlighted "-highlighted")
            (if (eq @message.user.id this.currentUser.id) "is-by-current-user")
            (if @message.staged "-staged" "-persisted")
            (if @message.processed "-processed" "-not-processed")
            (if this.hasActiveState "-active")
            (if @message.bookmark "-bookmarked")
            (if @message.deletedAt "-deleted")
            (if @message.selected "-selected")
            (if @message.error "-errored")
            (if this.showThreadIndicator "has-thread-indicator")
            (if this.hideUserInfo "-user-info-hidden")
            (if this.hasReply "has-reply")
          }}
          data-id={{@message.id}}
          data-thread-id={{@message.thread.id}}
          {{didInsert this.didInsertMessage}}
          {{didUpdate this.didUpdateMessageId @message.id}}
          {{didUpdate this.didUpdateMessageVersion @message.version}}
          {{willDestroy this.willDestroyMessage}}
          {{on "mouseenter" this.onMouseEnter passive=true}}
          {{on "mouseleave" this.onMouseLeave passive=true}}
          {{on "mousemove" this.onMouseMove passive=true}}
          {{this.toggleCheckIfPossible}}
          {{ChatOnLongPress
            this.onLongPressStart
            this.onLongPressEnd
            this.onLongPressCancel
          }}
          ...attributes
        >
          {{#if this.show}}
            {{#if this.pane.selectingMessages}}
              <Input
                @type="checkbox"
                class="chat-message-selector"
                @checked={{@message.selected}}
                {{on "click" this.toggleChecked}}
              />
            {{/if}}
  
            {{#if this.deletedAndCollapsed}}
              <div class="chat-message-text -deleted">
                <DButton
                  @action={{this.expand}}
                  @translatedLabel={{this.deletedMessageLabel}}
                  class="btn-flat chat-message-expand"
                />
              </div>
            {{else if this.hiddenAndCollapsed}}
              <div class="chat-message-text -hidden">
                <DButton
                  @action={{this.expand}}
                  @label="chat.hidden"
                  class="btn-flat chat-message-expand"
                />
              </div>
            {{else}}
              <div class="chat-message">
                {{#unless this.hideReplyToInfo}}
                  <ChatMessageInReplyToIndicator @message={{@message}} />
                {{/unless}}
  
                {{#if this.hideUserInfo}}
                  <ChatMessageLeftGutter @message={{@message}} />
                {{else}}
                  <ChatMessageAvatar @message={{@message}} />
                {{/if}}
  
                <div class="chat-message-content">
                  <ChatMessageInfo
                    @message={{@message}}
                    @show={{not this.hideUserInfo}}
                  />
  
                  <ChatMessageText
                    @cooked={{@message.cooked}}
                    @uploads={{@message.uploads}}
                    @edited={{@message.edited}}
                  >
                    {{#if @message.reactions.length}}
                      <div class="chat-message-reaction-list">
                        {{#each @message.reactions as |reaction|}}
                          <ChatMessageReaction
                            @reaction={{reaction}}
                            @onReaction={{this.messageInteractor.react}}
                            @message={{@message}}
                            @showTooltip={{true}}
                          />
                        {{/each}}
  
                        {{#if this.shouldRenderOpenEmojiPickerButton}}
                          <DButton
                            @action={{this.messageInteractor.openEmojiPicker}}
                            @icon="discourse-emojis"
                            @title="chat.react"
                            @forwardEvent={{true}}
                            class="chat-message-react-btn"
                          />
                        {{/if}}
                      </div>
                    {{/if}}
                  </ChatMessageText>
  
                  <ChatMessageError
                    @message={{@message}}
                    @onRetry={{@resendStagedMessage}}
                  />
                </div>
  
                {{#if this.showThreadIndicator}}
                  <ChatMessageThreadIndicator @message={{@message}} />
                {{/if}}
              </div>
            {{/if}}
          {{/if}}
        </div>
      {{/if}}
    
  */
  {
    "id": "0cU26ola",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"shouldRender\"]],[[[41,[28,[32,0],[[30,1],\"channel\"],null],[[[1,\"        \"],[8,[32,1],null,[[\"@fetchMessagesByDate\",\"@message\"],[[30,2],[30,3]]],null],[1,\"\\n        \"],[8,[32,2],null,[[\"@message\"],[[30,3]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[11,0],[16,0,[28,[32,3],[\"chat-message-container\",[52,[30,0,[\"pane\",\"selectingMessages\"]],\"-selectable\"],[52,[30,3,[\"highlighted\"]],\"-highlighted\"],[52,[28,[32,0],[[30,3,[\"user\",\"id\"]],[30,0,[\"currentUser\",\"id\"]]],null],\"is-by-current-user\"],[52,[30,3,[\"staged\"]],\"-staged\",\"-persisted\"],[52,[30,3,[\"processed\"]],\"-processed\",\"-not-processed\"],[52,[30,0,[\"hasActiveState\"]],\"-active\"],[52,[30,3,[\"bookmark\"]],\"-bookmarked\"],[52,[30,3,[\"deletedAt\"]],\"-deleted\"],[52,[30,3,[\"selected\"]],\"-selected\"],[52,[30,3,[\"error\"]],\"-errored\"],[52,[30,0,[\"showThreadIndicator\"]],\"has-thread-indicator\"],[52,[30,0,[\"hideUserInfo\"]],\"-user-info-hidden\"],[52,[30,0,[\"hasReply\"]],\"has-reply\"]],null]],[16,\"data-id\",[30,3,[\"id\"]]],[16,\"data-thread-id\",[30,3,[\"thread\",\"id\"]]],[17,4],[4,[32,4],[[30,0,[\"didInsertMessage\"]]],null],[4,[32,5],[[30,0,[\"didUpdateMessageId\"]],[30,3,[\"id\"]]],null],[4,[32,5],[[30,0,[\"didUpdateMessageVersion\"]],[30,3,[\"version\"]]],null],[4,[32,6],[[30,0,[\"willDestroyMessage\"]]],null],[4,[32,7],[\"mouseenter\",[30,0,[\"onMouseEnter\"]]],[[\"passive\"],[true]]],[4,[32,7],[\"mouseleave\",[30,0,[\"onMouseLeave\"]]],[[\"passive\"],[true]]],[4,[32,7],[\"mousemove\",[30,0,[\"onMouseMove\"]]],[[\"passive\"],[true]]],[4,[30,0,[\"toggleCheckIfPossible\"]],null,null],[4,[32,8],[[30,0,[\"onLongPressStart\"]],[30,0,[\"onLongPressEnd\"]],[30,0,[\"onLongPressCancel\"]]],null],[12],[1,\"\\n\"],[41,[30,0,[\"show\"]],[[[41,[30,0,[\"pane\",\"selectingMessages\"]],[[[1,\"            \"],[8,[32,9],[[24,0,\"chat-message-selector\"],[4,[32,7],[\"click\",[30,0,[\"toggleChecked\"]]],null]],[[\"@type\",\"@checked\"],[\"checkbox\",[30,3,[\"selected\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"deletedAndCollapsed\"]],[[[1,\"            \"],[10,0],[14,0,\"chat-message-text -deleted\"],[12],[1,\"\\n              \"],[8,[32,10],[[24,0,\"btn-flat chat-message-expand\"]],[[\"@action\",\"@translatedLabel\"],[[30,0,[\"expand\"]],[30,0,[\"deletedMessageLabel\"]]]],null],[1,\"\\n            \"],[13],[1,\"\\n\"]],[]],[[[41,[30,0,[\"hiddenAndCollapsed\"]],[[[1,\"            \"],[10,0],[14,0,\"chat-message-text -hidden\"],[12],[1,\"\\n              \"],[8,[32,10],[[24,0,\"btn-flat chat-message-expand\"]],[[\"@action\",\"@label\"],[[30,0,[\"expand\"]],\"chat.hidden\"]],null],[1,\"\\n            \"],[13],[1,\"\\n\"]],[]],[[[1,\"            \"],[10,0],[14,0,\"chat-message\"],[12],[1,\"\\n\"],[41,[51,[30,0,[\"hideReplyToInfo\"]]],[[[1,\"                \"],[8,[32,11],null,[[\"@message\"],[[30,3]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"hideUserInfo\"]],[[[1,\"                \"],[8,[32,12],null,[[\"@message\"],[[30,3]]],null],[1,\"\\n\"]],[]],[[[1,\"                \"],[8,[32,13],null,[[\"@message\"],[[30,3]]],null],[1,\"\\n\"]],[]]],[1,\"\\n              \"],[10,0],[14,0,\"chat-message-content\"],[12],[1,\"\\n                \"],[8,[32,14],null,[[\"@message\",\"@show\"],[[30,3],[28,[32,15],[[30,0,[\"hideUserInfo\"]]],null]]],null],[1,\"\\n\\n                \"],[8,[32,16],null,[[\"@cooked\",\"@uploads\",\"@edited\"],[[30,3,[\"cooked\"]],[30,3,[\"uploads\"]],[30,3,[\"edited\"]]]],[[\"default\"],[[[[1,\"\\n\"],[41,[30,3,[\"reactions\",\"length\"]],[[[1,\"                    \"],[10,0],[14,0,\"chat-message-reaction-list\"],[12],[1,\"\\n\"],[42,[28,[31,3],[[28,[31,3],[[30,3,[\"reactions\"]]],null]],null],null,[[[1,\"                        \"],[8,[32,17],null,[[\"@reaction\",\"@onReaction\",\"@message\",\"@showTooltip\"],[[30,5],[30,0,[\"messageInteractor\",\"react\"]],[30,3],true]],null],[1,\"\\n\"]],[5]],null],[1,\"\\n\"],[41,[30,0,[\"shouldRenderOpenEmojiPickerButton\"]],[[[1,\"                        \"],[8,[32,10],[[24,0,\"chat-message-react-btn\"]],[[\"@action\",\"@icon\",\"@title\",\"@forwardEvent\"],[[30,0,[\"messageInteractor\",\"openEmojiPicker\"]],\"discourse-emojis\",\"chat.react\",true]],null],[1,\"\\n\"]],[]],null],[1,\"                    \"],[13],[1,\"\\n\"]],[]],null],[1,\"                \"]],[]]]]],[1,\"\\n\\n                \"],[8,[32,18],null,[[\"@message\",\"@onRetry\"],[[30,3],[30,6]]],null],[1,\"\\n              \"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"showThreadIndicator\"]],[[[1,\"                \"],[8,[32,19],null,[[\"@message\"],[[30,3]]],null],[1,\"\\n\"]],[]],null],[1,\"            \"],[13],[1,\"\\n          \"]],[]]]],[]]]],[]],null],[1,\"      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@context\",\"@fetchMessagesByDate\",\"@message\",\"&attrs\",\"reaction\",\"@resendStagedMessage\"],false,[\"if\",\"unless\",\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-message.js",
    "scope": () => [_eq.default, _chatMessageSeparatorDate.default, _chatMessageSeparatorNew.default, _concatClass.default, _didInsert.default, _didUpdate.default, _willDestroy.default, _modifier.on, _onLongPress.default, _component2.Input, _dButton.default, _chatMessageInReplyToIndicator.default, _leftGutter.default, _avatar.default, _info.default, _not.default, _chatMessageText.default, _chatMessageReaction.default, _error.default, _chatMessageThreadIndicator.default],
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "dialog", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "appEvents", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "chatEmojiReactionStore", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "chatEmojiPickerManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "chatChannelPane", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "chatThreadPane", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "toasts", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "isActive", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "adminTools", [_optionalService.default], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "expand", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "expand"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleChecked", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleChecked"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "willDestroyMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "willDestroyMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "refreshStatusOnMentions", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "refreshStatusOnMentions"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didInsertMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didInsertMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didUpdateMessageId", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didUpdateMessageId"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didUpdateMessageVersion", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didUpdateMessageVersion"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "decorateCookedMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "decorateCookedMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "initMentionedUsers", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "initMentionedUsers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMouseEnter", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onMouseEnter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMouseMove", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onMouseMove"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMouseLeave", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onMouseLeave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_debouncedOnHoverMessage", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_debouncedOnHoverMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onLongPressStart", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onLongPressStart"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onLongPressCancel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onLongPressCancel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onLongPressEnd", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onLongPressEnd"), _class.prototype)), _class);
  function _teardownMentionedUsers2() {
    this.args.message.mentionedUsers.forEach(user1 => {
      user1.stopTrackingStatus();
      user1.off("status-changed", this, "refreshStatusOnMentions");
    });
  }
});
define("discourse/plugins/chat/discourse/components/chat-notice", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse/plugins/chat/discourse/components/chat/notices/mention_without_membership", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _dButton, _mention_without_membership, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const COMPONENT_DICT = {
    mention_without_membership: _mention_without_membership.default
  };
  let ChatNotices = _exports.default = (_dec = (0, _service.inject)("chat-channel-notices-manager"), (_class = (_class2 = class ChatNotices extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "noticesManager", _descriptor, this);
    }
    clearNotice() {
      this.noticesManager.clearNotice(this.args.notice);
    }
    get component() {
      return COMPONENT_DICT[this.args.notice.type];
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-notices__notice">
  
        {{#if @notice.textContent}}
          <p class="chat-notices__notice__content">
            {{@notice.textContent}}
          </p>
        {{else}}
          <this.component
            @channel={{@channel}}
            @notice={{@notice}}
            @clearNotice={{this.clearNotice}}
          />
        {{/if}}
  
        <DButton
          @icon="times"
          @action={{this.clearNotice}}
          class="btn-flat chat-notices__notice__clear"
        />
      </div>
    
  */
  {
    "id": "41ZrfDlf",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-notices__notice\"],[12],[1,\"\\n\\n\"],[41,[30,1,[\"textContent\"]],[[[1,\"        \"],[10,2],[14,0,\"chat-notices__notice__content\"],[12],[1,\"\\n          \"],[1,[30,1,[\"textContent\"]]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],[[[1,\"        \"],[8,[30,0,[\"component\"]],null,[[\"@channel\",\"@notice\",\"@clearNotice\"],[[30,2],[30,1],[30,0,[\"clearNotice\"]]]],null],[1,\"\\n\"]],[]]],[1,\"\\n      \"],[8,[32,0],[[24,0,\"btn-flat chat-notices__notice__clear\"]],[[\"@icon\",\"@action\"],[\"times\",[30,0,[\"clearNotice\"]]]],null],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@notice\",\"@channel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-notice.js",
    "scope": () => [_dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "noticesManager", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "clearNotice", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "clearNotice"), _class.prototype)), _class));
});
define("discourse/plugins/chat/discourse/components/chat-notices", ["exports", "@glimmer/component", "@ember/service", "discourse/plugins/chat/discourse/components/chat-notice", "discourse/plugins/chat/discourse/components/chat-retention-reminder", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _chatNotice, _chatRetentionReminder, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNotices = _exports.default = (_dec = (0, _service.inject)("chat-channel-notices-manager"), (_class = (_class2 = class ChatNotices extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "noticesManager", _descriptor, this);
    }
    get noticesForChannel() {
      return this.noticesManager.notices.filter(notice1 => notice1.channelId === this.args.channel.id);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-notices">
        <ChatRetentionReminder @channel={{@channel}} />
  
        {{#each this.noticesForChannel as |notice|}}
          <ChatNotice @notice={{notice}} @channel={{@channel}} />
        {{/each}}
      </div>
    
  */
  {
    "id": "7fwhHL4t",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-notices\"],[12],[1,\"\\n      \"],[8,[32,0],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n\\n\"],[42,[28,[31,1],[[28,[31,1],[[30,0,[\"noticesForChannel\"]]],null]],null],null,[[[1,\"        \"],[8,[32,1],null,[[\"@notice\",\"@channel\"],[[30,2],[30,1]]],null],[1,\"\\n\"]],[2]],null],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@channel\",\"notice\"],false,[\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-notices.js",
    "scope": () => [_chatRetentionReminder.default, _chatNotice.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "noticesManager", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
});
define("discourse/plugins/chat/discourse/components/chat-replying-indicator", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/render-modifiers/modifiers/did-update", "@ember/render-modifiers/modifiers/will-destroy", "@ember/service", "@ember/utils", "discourse/helpers/concat-class", "discourse-i18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _object, _didInsert, _didUpdate, _willDestroy, _service, _utils, _concatClass, _discourseI18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatReplyingIndicator = _exports.default = (_class = (_class2 = class ChatReplyingIndicator extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
      _initializerDefineProperty(this, "presence", _descriptor2, this);
      _initializerDefineProperty(this, "presenceChannel", _descriptor3, this);
    }
    async updateSubscription() {
      await this.unsubscribe();
      await this.subscribe();
    }
    async subscribe() {
      this.presenceChannel = this.presence.getChannel(this.args.presenceChannelName);
      await this.presenceChannel.subscribe();
    }
    async unsubscribe() {
      if (this.presenceChannel?.subscribed) {
        await this.presenceChannel.unsubscribe();
      }
    }
    get users() {
      return this.presenceChannel?.get("users")?.filter(u1 => u1.id !== this.currentUser.id) || [];
    }
    get usernames() {
      return this.users.mapBy("username");
    }
    get text() {
      if (this.usernames.length === 1) {
        return _discourseI18n.default.t("chat.replying_indicator.single_user", {
          username: this.usernames[0]
        });
      }
      if (this.usernames.length < 4) {
        const lastUsername1 = this.usernames[this.usernames.length - 1];
        const commaSeparatedUsernames1 = this.usernames.slice(0, this.usernames.length - 1).join(_discourseI18n.default.t("word_connector.comma"));
        return _discourseI18n.default.t("chat.replying_indicator.multiple_users", {
          commaSeparatedUsernames: commaSeparatedUsernames1,
          lastUsername: lastUsername1
        });
      }
      const commaSeparatedUsernames1 = this.usernames.slice(0, 2).join(_discourseI18n.default.t("word_connector.comma"));
      return _discourseI18n.default.t("chat.replying_indicator.many_users", {
        commaSeparatedUsernames: commaSeparatedUsernames1,
        count: this.usernames.length - 2
      });
    }
    get shouldRender() {
      return (0, _utils.isPresent)(this.usernames);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @presenceChannelName}}
        <div
          class={{concatClass
            "chat-replying-indicator"
            (if this.presenceChannel.subscribed "is-subscribed")
          }}
          {{didInsert this.subscribe}}
          {{didUpdate this.updateSubscription @presenceChannelName}}
          {{willDestroy this.unsubscribe}}
        >
          {{#if this.shouldRender}}
            <span class="chat-replying-indicator__text">{{this.text}}</span>
            <span class="chat-replying-indicator__wave">
              <span class="chat-replying-indicator__dot">.</span>
              <span class="chat-replying-indicator__dot">.</span>
              <span class="chat-replying-indicator__dot">.</span>
            </span>
          {{/if}}
        </div>
      {{/if}}
    
  */
  {
    "id": "sEFDJy6P",
    "block": "[[[1,\"\\n\"],[41,[30,1],[[[1,\"      \"],[11,0],[16,0,[28,[32,0],[\"chat-replying-indicator\",[52,[30,0,[\"presenceChannel\",\"subscribed\"]],\"is-subscribed\"]],null]],[4,[32,1],[[30,0,[\"subscribe\"]]],null],[4,[32,2],[[30,0,[\"updateSubscription\"]],[30,1]],null],[4,[32,3],[[30,0,[\"unsubscribe\"]]],null],[12],[1,\"\\n\"],[41,[30,0,[\"shouldRender\"]],[[[1,\"          \"],[10,1],[14,0,\"chat-replying-indicator__text\"],[12],[1,[30,0,[\"text\"]]],[13],[1,\"\\n          \"],[10,1],[14,0,\"chat-replying-indicator__wave\"],[12],[1,\"\\n            \"],[10,1],[14,0,\"chat-replying-indicator__dot\"],[12],[1,\".\"],[13],[1,\"\\n            \"],[10,1],[14,0,\"chat-replying-indicator__dot\"],[12],[1,\".\"],[13],[1,\"\\n            \"],[10,1],[14,0,\"chat-replying-indicator__dot\"],[12],[1,\".\"],[13],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@presenceChannelName\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-replying-indicator.js",
    "scope": () => [_concatClass.default, _didInsert.default, _didUpdate.default, _willDestroy.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "presence", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "presenceChannel", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "updateSubscription", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "updateSubscription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "subscribe", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "subscribe"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "unsubscribe", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "unsubscribe"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-retention-reminder-text", ["exports", "@glimmer/component", "@ember/service", "discourse-i18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _discourseI18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2, _countForChannelType;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
  function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
  function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatRetentionReminderText = _exports.default = (_class = (_countForChannelType = /*#__PURE__*/new WeakMap(), (_class2 = class ChatRetentionReminderText extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateFieldInitSpec(this, _countForChannelType, {
        get: _get_countForChannelType,
        set: void 0
      });
      _initializerDefineProperty(this, "siteSettings", _descriptor, this);
    }
    get type() {
      return this.args.type ?? "long";
    }
    get text() {
      if (this.args.channel.isDirectMessageChannel) {
        if (_classPrivateFieldGet(this, _countForChannelType) > 0) {
          return _discourseI18n.default.t(`chat.retention_reminders.${this.type}`, {
            count: this.siteSettings.chat_dm_retention_days
          });
        } else {
          return _discourseI18n.default.t(`chat.retention_reminders.indefinitely_${this.type}`);
        }
      } else {
        if (_classPrivateFieldGet(this, _countForChannelType) > 0) {
          return _discourseI18n.default.t(`chat.retention_reminders.${this.type}`, {
            count: this.siteSettings.chat_channel_retention_days
          });
        } else {
          return _discourseI18n.default.t(`chat.retention_reminders.indefinitely_${this.type}`);
        }
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <span class="chat-retention-reminder-text">
        {{this.text}}
      </span>
    
  */
  {
    "id": "NqjXhW5H",
    "block": "[[[1,\"\\n    \"],[10,1],[14,0,\"chat-retention-reminder-text\"],[12],[1,\"\\n      \"],[1,[30,0,[\"text\"]]],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-retention-reminder-text.js",
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  function _get_countForChannelType() {
    return this.args.channel.isDirectMessageChannel ? this.siteSettings.chat_dm_retention_days : this.siteSettings.chat_channel_retention_days;
  }
});
define("discourse/plugins/chat/discourse/components/chat-retention-reminder", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse/lib/ajax", "discourse/lib/ajax-error", "discourse/plugins/chat/discourse/components/chat-retention-reminder-text", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _dButton, _ajax, _ajaxError, _chatRetentionReminderText, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatRetentionReminder = _exports.default = (_class = (_class2 = class ChatRetentionReminder extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
    }
    get show() {
      return this.args.channel?.isDirectMessageChannel && this.currentUser?.get("needs_dm_retention_reminder") || this.args.channel?.isCategoryChannel && this.currentUser?.get("needs_channel_retention_reminder");
    }
    async dismiss() {
      try {
        await (0, _ajax.ajax)("/chat/dismiss-retention-reminder", {
          method: "POST",
          data: {
            chatable_type: this.args.channel.chatableType
          }
        });
        const field1 = this.args.channel.isDirectMessageChannel ? "needs_dm_retention_reminder" : "needs_channel_retention_reminder";
        this.currentUser.set(field1, false);
      } catch (e1) {
        (0, _ajaxError.popupAjaxError)(e1);
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.show}}
        <div class="chat-retention-reminder">
          <ChatRetentionReminderText @channel={{@channel}} />
          <DButton
            @action={{this.dismiss}}
            @icon="times"
            class="btn no-text btn-icon btn-flat no-text dismiss-btn"
          />
        </div>
      {{/if}}
    
  */
  {
    "id": "YDt8w5/c",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"show\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-retention-reminder\"],[12],[1,\"\\n        \"],[8,[32,0],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n        \"],[8,[32,1],[[24,0,\"btn no-text btn-icon btn-flat no-text dismiss-btn\"]],[[\"@action\",\"@icon\"],[[30,0,[\"dismiss\"]],\"times\"]],null],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@channel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-retention-reminder.js",
    "scope": () => [_chatRetentionReminderText.default, _dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "dismiss", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "dismiss"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-side-panel-resizer", ["exports", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ChatSidePanelResizer = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    <div class="chat-side-panel-resizer"></div>
  
  */
  {
    "id": "brtCnjNY",
    "block": "[[[1,\"\\n  \"],[10,0],[14,0,\"chat-side-panel-resizer\"],[12],[13],[1,\"\\n\"]],[],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-side-panel-resizer.js",
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = ChatSidePanelResizer;
});
define("discourse/plugins/chat/discourse/components/chat-side-panel", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/helper", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/service", "@ember/template", "truth-helpers/helpers/and", "discourse/plugins/chat/discourse/modifiers/chat/resizable-node", "discourse/plugins/chat/discourse/components/chat-side-panel-resizer", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _helper, _object, _didInsert, _service, _template, _and, _resizableNode, _chatSidePanelResizer, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2, _maxWidth;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const MIN_CHAT_CHANNEL_WIDTH = 250;
  let ChatSidePanel = _exports.default = (_class = (_maxWidth = /*#__PURE__*/new WeakSet(), (_class2 = class ChatSidePanel extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _maxWidth);
      _initializerDefineProperty(this, "chatStateManager", _descriptor, this);
      _initializerDefineProperty(this, "chatSidePanelSize", _descriptor2, this);
      _initializerDefineProperty(this, "site", _descriptor3, this);
      _initializerDefineProperty(this, "widthStyle", _descriptor4, this);
    }
    setupSize() {
      this.widthStyle = (0, _template.htmlSafe)(`width:${this.chatSidePanelSize.width}px`);
    }
    didResize(element1, size1) {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      const parentWidth1 = element1.parentElement.getBoundingClientRect().width;
      const mainPanelWidth1 = parentWidth1 - size1.width;
      if (mainPanelWidth1 >= MIN_CHAT_CHANNEL_WIDTH) {
        this.chatSidePanelSize.width = size1.width;
        element1.style.width = size1.width + "px";
        this.widthStyle = (0, _template.htmlSafe)(`width:${size1.width}px`);
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.chatStateManager.isSidePanelExpanded}}
        <div
          class="chat-side-panel"
          {{didInsert this.setupSize}}
          {{resizableNode
            ".chat-side-panel-resizer"
            this.didResize
            (hash
              position=false vertical=false mutate=false resetOnWindowResize=true
            )
          }}
          style={{if
            (and this.site.desktopView this.chatStateManager.isFullPageActive)
            this.widthStyle
          }}
        >
          {{yield}}
  
          {{#if this.site.desktopView}}
            <ChatSidePanelResizer />
          {{/if}}
        </div>
      {{/if}}
    
  */
  {
    "id": "xFuspm1W",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"chatStateManager\",\"isSidePanelExpanded\"]],[[[1,\"      \"],[11,0],[24,0,\"chat-side-panel\"],[16,5,[52,[28,[32,0],[[30,0,[\"site\",\"desktopView\"]],[30,0,[\"chatStateManager\",\"isFullPageActive\"]]],null],[30,0,[\"widthStyle\"]]]],[4,[32,1],[[30,0,[\"setupSize\"]]],null],[4,[32,2],[\".chat-side-panel-resizer\",[30,0,[\"didResize\"]],[28,[32,3],null,[[\"position\",\"vertical\",\"mutate\",\"resetOnWindowResize\"],[false,false,false,true]]]],null],[12],[1,\"\\n        \"],[18,1,null],[1,\"\\n\\n\"],[41,[30,0,[\"site\",\"desktopView\"]],[[[1,\"          \"],[8,[32,4],null,null,null],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"&default\"],false,[\"if\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-side-panel.js",
    "scope": () => [_and.default, _didInsert.default, _resizableNode.default, _helper.hash, _chatSidePanelResizer.default],
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatSidePanelSize", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "widthStyle", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "setupSize", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setupSize"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didResize", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didResize"), _class.prototype)), _class);
  function _maxWidth2(element1) {
    const parentWidth1 = element1.parentElement.getBoundingClientRect().width;
    return parentWidth1 - MIN_CHAT_CHANNEL_WIDTH;
  }
});
define("discourse/plugins/chat/discourse/components/chat-skeleton", ["exports", "@glimmer/component", "@ember/template", "@ember/template-factory", "@ember/component"], function (_exports, _component, _template, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  var _randomIntFromInterval = /*#__PURE__*/new WeakSet();
  class ChatSkeleton extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _randomIntFromInterval);
    }
    get placeholders() {
      return Array.from({
        length: 15
      }, () => {
        return {
          image: _classPrivateMethodGet(this, _randomIntFromInterval, _randomIntFromInterval2).call(this, 1, 10) === 5,
          rows: Array.from({
            length: _classPrivateMethodGet(this, _randomIntFromInterval, _randomIntFromInterval2).call(this, 1, 5)
          }, () => {
            return (0, _template.htmlSafe)(`width: ${_classPrivateMethodGet(this, _randomIntFromInterval, _randomIntFromInterval2).call(this, 20, 95)}%`);
          }),
          reactions: Array.from({
            length: _classPrivateMethodGet(this, _randomIntFromInterval, _randomIntFromInterval2).call(this, 0, 3)
          })
        };
      });
    }
  }
  _exports.default = ChatSkeleton;
  _class = ChatSkeleton;
  function _randomIntFromInterval2(min1, max1) {
    return Math.floor(Math.random() * (max1 - min1 + 1) + min1);
  }
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-skeleton -animation">
        {{#each this.placeholders as |placeholder|}}
          <div class="chat-skeleton__body">
            <div class="chat-skeleton__message">
              <div class="chat-skeleton__message-avatar"></div>
              <div class="chat-skeleton__message-poster"></div>
              <div class="chat-skeleton__message-content">
                {{#if placeholder.image}}
                  <div class="chat-skeleton__message-img"></div>
                {{/if}}
  
                <div class="chat-skeleton__message-text">
                  {{#each placeholder.rows as |row|}}
                    <div class="chat-skeleton__message-msg" style={{row}}></div>
                  {{/each}}
                </div>
  
                {{#if placeholder.reactions}}
                  <div class="chat-skeleton__message-reactions">
                    {{#each placeholder.reactions}}
                      <div class="chat-skeleton__message-reaction"></div>
                    {{/each}}
                  </div>
                {{/if}}
              </div>
            </div>
          </div>
        {{/each}}
      </div>
    
  */
  {
    "id": "T00BLXuP",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-skeleton -animation\"],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[30,0,[\"placeholders\"]]],null]],null],null,[[[1,\"        \"],[10,0],[14,0,\"chat-skeleton__body\"],[12],[1,\"\\n          \"],[10,0],[14,0,\"chat-skeleton__message\"],[12],[1,\"\\n            \"],[10,0],[14,0,\"chat-skeleton__message-avatar\"],[12],[13],[1,\"\\n            \"],[10,0],[14,0,\"chat-skeleton__message-poster\"],[12],[13],[1,\"\\n            \"],[10,0],[14,0,\"chat-skeleton__message-content\"],[12],[1,\"\\n\"],[41,[30,1,[\"image\"]],[[[1,\"                \"],[10,0],[14,0,\"chat-skeleton__message-img\"],[12],[13],[1,\"\\n\"]],[]],null],[1,\"\\n              \"],[10,0],[14,0,\"chat-skeleton__message-text\"],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[30,1,[\"rows\"]]],null]],null],null,[[[1,\"                  \"],[10,0],[14,0,\"chat-skeleton__message-msg\"],[15,5,[30,2]],[12],[13],[1,\"\\n\"]],[2]],null],[1,\"              \"],[13],[1,\"\\n\\n\"],[41,[30,1,[\"reactions\"]],[[[1,\"                \"],[10,0],[14,0,\"chat-skeleton__message-reactions\"],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[30,1,[\"reactions\"]]],null]],null],null,[[[1,\"                    \"],[10,0],[14,0,\"chat-skeleton__message-reaction\"],[12],[13],[1,\"\\n\"]],[]],null],[1,\"                \"],[13],[1,\"\\n\"]],[]],null],[1,\"            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\"]],[1]],null],[1,\"    \"],[13],[1,\"\\n  \"]],[\"placeholder\",\"row\"],false,[\"each\",\"-track-array\",\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-skeleton.js",
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat-thread-list", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/service", "ember-modifier", "discourse/components/conditional-loading-spinner", "discourse/lib/is-element-in-viewport", "discourse-common/utils/decorators", "discourse-i18n", "truth-helpers/helpers/eq", "discourse/plugins/chat/discourse/components/chat/thread-list/item", "discourse/plugins/chat/discourse/modifiers/chat/track-message", "ember-this-fallback/deprecations-helper", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _service, _emberModifier, _conditionalLoadingSpinner, _isElementInViewport, _decorators, _discourseI18n, _eq, _item, _trackMessage, _deprecationsHelper, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatThreadList = _exports.default = (_class = (_class2 = class ChatThreadList extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatApi", _descriptor2, this);
      _initializerDefineProperty(this, "messageBus", _descriptor3, this);
      _initializerDefineProperty(this, "chatTrackingStateManager", _descriptor4, this);
      _defineProperty(this, "noThreadsLabel", _discourseI18n.default.t("chat.threads.none"));
      _defineProperty(this, "subscribe", (0, _emberModifier.modifier)((element1, [channel1]) => {
        this.messageBus.subscribe(`/chat/${channel1.id}`, this.onMessageBus, channel1.channelMessageBusLastId);
        return () => {
          // TODO (joffrey) In drawer we won't have channel anymore at this point
          if (!channel1) {
            return;
          }
          this.messageBus.unsubscribe(`/chat/${channel1.id}`, this.onMessageBus);
        };
      }));
      _defineProperty(this, "fill", (0, _emberModifier.modifier)(element1 => {
        this.resizeObserver = new ResizeObserver(() => {
          if ((0, _isElementInViewport.default)(element1)) {
            this.loadThreads();
          }
        });
        this.resizeObserver.observe(element1);
        return () => {
          this.resizeObserver.disconnect();
        };
      }));
      _defineProperty(this, "loadMore", (0, _emberModifier.modifier)(element1 => {
        this.intersectionObserver = new IntersectionObserver(this.loadThreads);
        this.intersectionObserver.observe(element1);
        return () => {
          this.intersectionObserver.disconnect();
        };
      }));
    }
    get threadsCollection() {
      return this.chatApi.threads(this.args.channel.id, this.handleLoadedThreads);
    }
    loadThreads() {
      this.threadsCollection.load({
        limit: 10
      });
    }
    get threadsManager() {
      return this.args.channel.threadsManager;
    }
    // NOTE: This replicates sort logic from the server. We need this because
    // the thread unread count + last reply date + time update when new messages
    // are sent to the thread, and we want the list to react in realtime to this.
    get sortedThreads() {
      return this.threadsManager.threads.filter(thread1 => !thread1.originalMessage.deletedAt).sort((threadA1, threadB1) => {
        // If both are unread we just want to sort by last reply date + time descending.
        if (threadA1.tracking.unreadCount && threadB1.tracking.unreadCount) {
          if (threadA1.preview.lastReplyCreatedAt > threadB1.preview.lastReplyCreatedAt) {
            return -1;
          } else {
            return 1;
          }
        }
        // If one is unread and the other is not, we want to sort the unread one first.
        if (threadA1.tracking.unreadCount) {
          return -1;
        }
        if (threadB1.tracking.unreadCount) {
          return 1;
        }
        // If both are read, we want to sort by last reply date + time descending.
        if (threadA1.preview.lastReplyCreatedAt > threadB1.preview.lastReplyCreatedAt) {
          return -1;
        } else {
          return 1;
        }
      });
    }
    get lastThread() {
      return this.sortedThreads[this.sortedThreads.length - 1];
    }
    get shouldRender() {
      return !!this.args.channel;
    }
    onMessageBus(busData1) {
      switch (busData1.type) {
        case "delete":
          this.handleDeleteMessage(busData1);
          break;
        case "restore":
          this.handleRestoreMessage(busData1);
          break;
      }
    }
    handleDeleteMessage(data1) {
      const deletedOriginalMessageThread1 = this.threadsManager.threads.findBy("originalMessage.id", data1.deleted_id);
      if (!deletedOriginalMessageThread1) {
        return;
      }
      deletedOriginalMessageThread1.originalMessage.deletedAt = new Date();
    }
    handleRestoreMessage(data1) {
      const restoredOriginalMessageThread1 = this.threadsManager.threads.findBy("originalMessage.id", data1.chat_message.id);
      if (!restoredOriginalMessageThread1) {
        return;
      }
      restoredOriginalMessageThread1.originalMessage.deletedAt = null;
    }
    handleLoadedThreads(result1) {
      return result1.threads.map(thread1 => {
        const threadModel1 = this.threadsManager.add(this.args.channel, thread1, {
          replace: true
        });
        this.chatTrackingStateManager.setupChannelThreadState(this.args.channel, result1.tracking);
        return threadModel1;
      });
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.shouldRender}}
        <div class="chat-thread-list" {{this.subscribe @channel}}>
          <div class="chat-thread-list__items" {{this.fill}}>
  
            {{#each this.sortedThreads key="id" as |thread|}}
              <ChatThreadListItem
                @thread={{thread}}
                {{(if
                  (eq thread this.lastThread)
                  (modifier ChatTrackMessage this.load)
                )}}
              />
            {{else}}
              {{#if this.threadsCollection.fetchedOnce}}
                <div class="chat-thread-list__no-threads">
                  {{this.noThreadsLabel}}
                </div>
              {{/if}}
            {{/each}}
  
            <ConditionalLoadingSpinner
              @condition={{this.threadsCollection.loading}}
            />
  
            <div {{this.loadMore}}>
              <br />
            </div>
          </div>
        </div>
      {{/if}}
    
  */
  {
    "id": "1aEs5xvs",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"shouldRender\"]],[[[1,\"      \"],[11,0],[24,0,\"chat-thread-list\"],[4,[30,0,[\"subscribe\"]],[[30,1]],null],[12],[1,\"\\n        \"],[11,0],[24,0,\"chat-thread-list__items\"],[4,[30,0,[\"fill\"]],null,null],[12],[1,\"\\n\\n\"],[42,[28,[31,2],[[28,[31,2],[[30,0,[\"sortedThreads\"]]],null]],null],\"id\",[[[1,\"            \"],[8,[32,0],[[4,[52,[28,[32,1],[[30,2],[30,0,[\"lastThread\"]]],null],[50,[30,0,[\"ChatTrackMessage\"]],2,[[30,0,[\"load\"]]],null]],null,null]],[[\"@thread\"],[[30,2]]],null],[1,\"\\n\"]],[2]],[[[41,[30,0,[\"threadsCollection\",\"fetchedOnce\"]],[[[1,\"              \"],[10,0],[14,0,\"chat-thread-list__no-threads\"],[12],[1,\"\\n                \"],[1,[30,0,[\"noThreadsLabel\"]]],[1,\"\\n              \"],[13],[1,\"\\n\"]],[]],null]],[]]],[1,\"\\n          \"],[8,[32,2],null,[[\"@condition\"],[[30,0,[\"threadsCollection\",\"loading\"]]]],null],[1,\"\\n\\n          \"],[11,0],[4,[30,0,[\"loadMore\"]],null,null],[12],[1,\"\\n            \"],[10,\"br\"],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"],[1,[28,[32,3],[\"[[\\\"The `ChatTrackMessage` property path was used in the `/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-thread-list.js` template without using `this`. This fallback behavior has been deprecated, all properties must be looked up on `this` when used in the template: {{this.ChatTrackMessage}}\\\",false,{\\\"id\\\":\\\"ember-this-fallback.this-property-fallback\\\",\\\"until\\\":\\\"n/a\\\",\\\"for\\\":\\\"ember-this-fallback\\\",\\\"url\\\":\\\"https://deprecations.emberjs.com/v3.x#toc_this-property-fallback\\\",\\\"since\\\":{\\\"available\\\":\\\"0.2.0\\\"}}]]\"],null]]],[\"@channel\",\"thread\"],false,[\"if\",\"each\",\"-track-array\",\"modifier\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-thread-list.js",
    "scope": () => [_item.default, _eq.default, _conditionalLoadingSpinner.default, _deprecationsHelper.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "messageBus", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatTrackingStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "threadsCollection", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "threadsCollection"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "loadThreads", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "loadThreads"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "sortedThreads", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "sortedThreads"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMessageBus", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onMessageBus"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleLoadedThreads", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "handleLoadedThreads"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-thread-participants", ["exports", "@glimmer/component", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat-user-avatar", "@ember/template-factory", "@ember/component"], function (_exports, _component, _discourseI18n, _chatUserAvatar, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatThreadParticipants extends _component.default {
    get showParticipants() {
      if (!this.args.thread) {
        return;
      }
      if (this.includeOriginalMessageUser) {
        return this.participantsUsers.length > 1;
      }
      return this.participantsUsers.length > 0;
    }
    get includeOriginalMessageUser() {
      return this.args.includeOriginalMessageUser ?? true;
    }
    get participantsUsers() {
      const users1 = this.args.thread.preview.participantUsers;
      if (this.includeOriginalMessageUser) {
        if (users1.length > 3) {
          return users1.slice(0, 2).concat(users1[users1.length - 1]);
        } else {
          return users1;
        }
      }
      return users1.filter(user1 => {
        return user1.id !== this.args.thread.originalMessage.user.id;
      });
    }
    get otherCountLabel() {
      return _discourseI18n.default.t("chat.thread.participants_other_count", {
        count: this.args.thread.preview.otherParticipantCount
      });
    }
  }
  _exports.default = ChatThreadParticipants;
  _class = ChatThreadParticipants;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.showParticipants}}
        <div class="chat-thread-participants" ...attributes>
          <div class="chat-thread-participants__avatar-group">
            {{#each this.participantsUsers as |user|}}
              <ChatUserAvatar
                @user={{user}}
                @avatarSize="tiny"
                @showPresence={{false}}
                @interactive={{false}}
              />
            {{/each}}
          </div>
          {{#if @thread.preview.otherParticipantCount}}
            <div class="chat-thread-participants__other-count">
              {{this.otherCountLabel}}
            </div>
          {{/if}}
        </div>
      {{/if}}
    
  */
  {
    "id": "2IKXzvFb",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"showParticipants\"]],[[[1,\"      \"],[11,0],[24,0,\"chat-thread-participants\"],[17,1],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-thread-participants__avatar-group\"],[12],[1,\"\\n\"],[42,[28,[31,2],[[28,[31,2],[[30,0,[\"participantsUsers\"]]],null]],null],null,[[[1,\"            \"],[8,[32,0],null,[[\"@user\",\"@avatarSize\",\"@showPresence\",\"@interactive\"],[[30,2],\"tiny\",false,false]],null],[1,\"\\n\"]],[2]],null],[1,\"        \"],[13],[1,\"\\n\"],[41,[30,3,[\"preview\",\"otherParticipantCount\"]],[[[1,\"          \"],[10,0],[14,0,\"chat-thread-participants__other-count\"],[12],[1,\"\\n            \"],[1,[30,0,[\"otherCountLabel\"]]],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"&attrs\",\"user\",\"@thread\"],false,[\"if\",\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-thread-participants.js",
    "scope": () => [_chatUserAvatar.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat-thread-tracking-dropdown", ["exports", "select-kit/components/notifications-button", "discourse/plugins/chat/discourse/lib/chat-notification-levels"], function (_exports, _notificationsButton, _chatNotificationLevels) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _notificationsButton.default.extend({
    pluginApiIdentifiers: ["thread-notifications-button"],
    classNames: ["thread-notifications-button"],
    content: _chatNotificationLevels.threadNotificationButtonLevels,
    selectKitOptions: {
      i18nPrefix: "chat.thread.notifications",
      showFullTitle: false,
      btnCustomClasses: "btn-flat"
    }
  });
});
define("discourse/plugins/chat/discourse/components/chat-thread", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/application", "@ember/helper", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/render-modifiers/modifiers/will-destroy", "@ember/runloop", "@ember/service", "discourse/helpers/concat-class", "discourse/lib/ajax-error", "discourse/lib/desktop-notifications", "discourse/lib/notification-levels", "discourse-common/lib/debounce", "discourse-common/utils/decorators", "discourse/plugins/chat/discourse/lib/chat-channel-thread-subscription-manager", "discourse/plugins/chat/discourse/lib/chat-constants", "discourse/plugins/chat/discourse/lib/chat-ios-hacks", "discourse/plugins/chat/discourse/lib/chat-messages-loader", "discourse/plugins/chat/discourse/lib/scroll-helpers", "discourse/plugins/chat/discourse/models/chat-message", "discourse/plugins/chat/discourse/models/user-chat-thread-membership", "discourse/plugins/chat/discourse/modifiers/chat/on-resize", "discourse/plugins/chat/discourse/modifiers/chat/scrollable-list", "discourse/plugins/chat/discourse/components/chat/composer/thread", "discourse/plugins/chat/discourse/components/chat/scroll-to-bottom-arrow", "discourse/plugins/chat/discourse/components/chat/selection-manager", "discourse/plugins/chat/discourse/components/chat-message", "discourse/plugins/chat/discourse/components/chat-skeleton", "discourse/plugins/chat/discourse/components/chat-upload-drop-zone", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _application, _helper, _object, _didInsert, _willDestroy, _runloop, _service, _concatClass, _ajaxError, _desktopNotifications, _notificationLevels, _debounce, _decorators, _chatChannelThreadSubscriptionManager, _chatConstants, _chatIosHacks, _chatMessagesLoader, _scrollHelpers, _chatMessage, _userChatThreadMembership, _onResize, _scrollableList, _thread, _scrollToBottomArrow, _selectionManager, _chatMessage2, _chatSkeleton, _chatUploadDropZone, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _class2, _sendNewMessage, _sendEditMessage, _onSendError, _flushIgnoreNextScroll;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatThread = _exports.default = (_class = (_sendNewMessage = /*#__PURE__*/new WeakSet(), _sendEditMessage = /*#__PURE__*/new WeakSet(), _onSendError = /*#__PURE__*/new WeakSet(), _flushIgnoreNextScroll = /*#__PURE__*/new WeakSet(), (_class2 = class ChatThread extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _flushIgnoreNextScroll);
      _classPrivateMethodInitSpec(this, _onSendError);
      _classPrivateMethodInitSpec(this, _sendEditMessage);
      _classPrivateMethodInitSpec(this, _sendNewMessage);
      _initializerDefineProperty(this, "appEvents", _descriptor, this);
      _initializerDefineProperty(this, "capabilities", _descriptor2, this);
      _initializerDefineProperty(this, "chat", _descriptor3, this);
      _initializerDefineProperty(this, "chatApi", _descriptor4, this);
      _initializerDefineProperty(this, "chatComposerPresenceManager", _descriptor5, this);
      _initializerDefineProperty(this, "chatHistory", _descriptor6, this);
      _initializerDefineProperty(this, "chatDraftsManager", _descriptor7, this);
      _initializerDefineProperty(this, "chatThreadComposer", _descriptor8, this);
      _initializerDefineProperty(this, "chatThreadPane", _descriptor9, this);
      _initializerDefineProperty(this, "currentUser", _descriptor10, this);
      _initializerDefineProperty(this, "router", _descriptor11, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor12, this);
      _initializerDefineProperty(this, "isAtBottom", _descriptor13, this);
      _initializerDefineProperty(this, "isScrolling", _descriptor14, this);
      _initializerDefineProperty(this, "needsArrow", _descriptor15, this);
      _initializerDefineProperty(this, "uploadDropZone", _descriptor16, this);
      _defineProperty(this, "scrollable", null);
    }
    resetIdle() {
      (0, _desktopNotifications.resetIdle)();
    }
    get messagesLoader() {
      return new _chatMessagesLoader.default((0, _application.getOwner)(this), this.args.thread);
    }
    get messagesManager() {
      return this.args.thread.messagesManager;
    }
    handleKeydown(event1) {
      if (event1.key === "Escape") {
        return this.router.transitionTo("chat.channel", ...this.args.thread.channel.routeModels);
      }
    }
    setup(element1) {
      this.uploadDropZone = element1;
      this.messagesManager.clear();
      this.args.thread.draft = this.chatDraftsManager.get(this.args.thread.channel?.id, this.args.thread.id) || _chatMessage.default.createDraftMessage(this.args.thread.channel, {
        user: this.currentUser,
        thread: this.args.thread
      });
      this.chatThreadComposer.focus();
      this.loadMessages();
    }
    teardown() {
      this.subscriptionManager.teardown();
      (0, _runloop.cancel)(this._debouncedFillPaneAttemptHandler);
      (0, _runloop.cancel)(this._debounceUpdateLastReadMessageHandler);
    }
    onScroll(state1) {
      (0, _runloop.next)(() => {
        if (_classPrivateMethodGet(this, _flushIgnoreNextScroll, _flushIgnoreNextScroll2).call(this)) {
          return;
        }
        (0, _chatIosHacks.bodyScrollFix)();
        this.needsArrow = this.messagesLoader.fetchedOnce && this.messagesLoader.canLoadMoreFuture || state1.distanceToBottom.pixels > 250 && !state1.atBottom;
        this.isScrolling = true;
        this.debounceUpdateLastReadMessage();
        if (state1.atTop || !this.capabilities.isIOS && state1.up && state1.distanceToTop.percentage < 40) {
          this.fetchMoreMessages({
            direction: _chatConstants.PAST
          });
        } else if (state1.atBottom) {
          this.fetchMoreMessages({
            direction: _chatConstants.FUTURE
          });
        }
      });
    }
    onScrollEnd(state1) {
      this.needsArrow = this.messagesLoader.fetchedOnce && this.messagesLoader.canLoadMoreFuture || state1.distanceToBottom.pixels > 250 && !state1.atBottom;
      this.isScrolling = false;
      this.resetIdle();
      this.atBottom = state1.atBottom;
      if (state1.atBottom) {
        this.fetchMoreMessages({
          direction: _chatConstants.FUTURE
        });
      }
    }
    debounceUpdateLastReadMessage() {
      this._debounceUpdateLastReadMessageHandler = (0, _debounce.default)(this, this.updateLastReadMessage, _chatConstants.READ_INTERVAL_MS);
    }
    updateLastReadMessage() {
      // HACK: We don't have proper scroll visibility over
      // what message we are looking at, don't have the lastReadMessageId
      // for the thread, and this updateLastReadMessage function is only
      // called when scrolling all the way to the bottom.
      this.markThreadAsRead();
    }
    setScrollable(element1) {
      this.scrollable = element1;
    }
    loadMessages() {
      this.fetchMessages();
      this.subscriptionManager = new _chatChannelThreadSubscriptionManager.default(this, this.args.thread, {
        onNewMessage: this.onNewMessage
      });
    }
    didResizePane() {
      this._ignoreNextScroll = true;
      this.debounceFillPaneAttempt();
      this.debounceUpdateLastReadMessage();
    }
    async fetchMessages(findArgs1 = {}) {
      if (this.messagesLoader.loading) {
        return;
      }
      this.messagesManager.clear();
      findArgs1.targetMessageId ??= this.args.targetMessageId || this.args.thread.currentUserMembership?.lastReadMessageId;
      if (!findArgs1.targetMessageId) {
        findArgs1.direction = _chatConstants.FUTURE;
      }
      const result1 = await this.messagesLoader.load(findArgs1);
      if (!result1) {
        return;
      }
      const [messages1, meta1] = this.processMessages(this.args.thread, result1);
      (0, _chatIosHacks.stackingContextFix)(this.scrollable, () => {
        this.messagesManager.addMessages(messages1);
      });
      this.args.thread.details = meta1;
      if (this.args.targetMessageId) {
        this.scrollToMessageId(this.args.targetMessageId, {
          highlight: true
        });
      } else if (this.args.thread.currentUserMembership?.lastReadMessageId) {
        this.scrollToMessageId(this.args.thread.currentUserMembership?.lastReadMessageId);
      } else {
        this.scrollToTop();
      }
      this.debounceFillPaneAttempt();
    }
    async fetchMoreMessages({
      direction: direction1
    }) {
      if (this.messagesLoader.loading) {
        return;
      }
      const result1 = await this.messagesLoader.loadMore({
        direction: direction1
      });
      if (!result1) {
        return;
      }
      const [messages1, meta1] = this.processMessages(this.args.thread, result1);
      if (!messages1?.length) {
        return;
      }
      (0, _chatIosHacks.stackingContextFix)(this.scrollable, () => {
        this.messagesManager.addMessages(messages1);
      });
      this.args.thread.details = meta1;
      if (direction1 === _chatConstants.FUTURE) {
        this.scrollToMessageId(messages1.firstObject.id, {
          position: "end",
          behavior: "auto"
        });
      } else if (direction1 === _chatConstants.PAST) {
        this.scrollToMessageId(messages1.lastObject.id);
      }
      this.debounceFillPaneAttempt();
    }
    scrollToLatestMessage() {
      if (this.messagesLoader.canLoadMoreFuture) {
        this.fetchMessages();
      } else if (this.messagesManager.messages.length > 0) {
        this.scrollToBottom();
      }
    }
    debounceFillPaneAttempt() {
      if (!this.messagesLoader.fetchedOnce) {
        return;
      }
      this._debouncedFillPaneAttemptHandler = (0, _debounce.default)(this, this.fillPaneAttempt, 500);
    }
    async fillPaneAttempt() {
      // safeguard
      if (this.messagesManager.messages.length > 200) {
        return;
      }
      if (!this.messagesLoader.canLoadMorePast) {
        return;
      }
      const firstMessage1 = this.messagesManager.messages.firstObject;
      if (!firstMessage1?.visible) {
        return;
      }
      await this.fetchMoreMessages({
        direction: _chatConstants.PAST
      });
    }
    scrollToMessageId(messageId1, opts1 = {
      highlight: false,
      position: "start",
      autoExpand: false
    }) {
      this._ignoreNextScroll = true;
      const message1 = this.messagesManager.findMessage(messageId1);
      (0, _scrollHelpers.scrollListToMessage)(this.scrollable, message1, opts1);
    }
    onNewMessage(message1) {
      this.messagesManager.addMessages([message1]);
    }
    processMessages(thread1, result1) {
      const messages1 = result1.messages.map(messageData1 => {
        const ignored1 = this.currentUser.ignored_users || [];
        const hidden1 = ignored1.includes(messageData1.user.username);
        return _chatMessage.default.create(thread1.channel, {
          ...messageData1,
          hidden: hidden1,
          expanded: !(hidden1 || messageData1.deleted_at),
          manager: this.messagesManager,
          thread: thread1
        });
      });
      return [messages1, result1.meta];
    }
    // NOTE: At some point we want to do this based on visible messages
    // and scrolling; for now it's enough to do it when the thread panel
    // opens/messages are loaded since we have no pagination for threads.
    markThreadAsRead() {
      if (!this.args.thread) {
        return;
      }
      return this.chatApi.markThreadAsRead(this.args.thread.channel.id, this.args.thread.id);
    }
    async onSendMessage(message1) {
      (0, _desktopNotifications.resetIdle)();
      await message1.cook();
      if (message1.editing) {
        await _classPrivateMethodGet(this, _sendEditMessage, _sendEditMessage2).call(this, message1);
      } else {
        await _classPrivateMethodGet(this, _sendNewMessage, _sendNewMessage2).call(this, message1);
      }
    }
    resetComposerMessage() {
      this.args.thread.draft = _chatMessage.default.createDraftMessage(this.args.thread.channel, {
        user: this.currentUser,
        thread: this.args.thread
      });
    }
    scrollToBottom() {
      this._ignoreNextScroll = true;
      (0, _scrollHelpers.scrollListToBottom)(this.scrollable);
    }
    scrollToTop() {
      this._ignoreNextScroll = true;
      (0, _scrollHelpers.scrollListToTop)(this.scrollable);
    }
    resendStagedMessage() {}
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div
        class={{concatClass
          "chat-thread"
          (if this.messagesLoader.loading "loading")
        }}
        data-id={{@thread.id}}
        {{didInsert this.setup}}
        {{willDestroy this.teardown}}
      >
        <div
          class="chat-thread__body popper-viewport chat-messages-scroll"
          {{didInsert this.setScrollable}}
          {{ChatScrollableList
            (hash
              onScroll=this.onScroll onScrollEnd=this.onScrollEnd reverse=true
            )
          }}
        >
          <div
            class="chat-messages-container"
            {{ChatOnResize this.didResizePane (hash delay=100 immediate=true)}}
          >
            {{#each this.messagesManager.messages key="id" as |message|}}
              <Message
                @message={{message}}
                @disableMouseEvents={{this.isScrolling}}
                @resendStagedMessage={{this.resendStagedMessage}}
                @context="thread"
              />
            {{/each}}
  
            {{#unless this.messagesLoader.fetchedOnce}}
              {{#if this.messagesLoader.loading}}
                <ChatSkeleton />
              {{/if}}
            {{/unless}}
          </div>
        </div>
  
        <ChatScrollToBottomArrow
          @onScrollToBottom={{this.scrollToLatestMessage}}
          @isVisible={{this.needsArrow}}
        />
  
        {{#if this.chatThreadPane.selectingMessages}}
          <ChatSelectionManager @pane={{this.chatThreadPane}} />
        {{else}}
          <ChatComposerThread
            @channel={{@channel}}
            @thread={{@thread}}
            @onSendMessage={{this.onSendMessage}}
            @uploadDropZone={{this.uploadDropZone}}
          />
        {{/if}}
  
        <ChatUploadDropZone @model={{@thread}} />
      </div>
    
  */
  {
    "id": "CmnaXWc+",
    "block": "[[[1,\"\\n    \"],[11,0],[16,0,[28,[32,0],[\"chat-thread\",[52,[30,0,[\"messagesLoader\",\"loading\"]],\"loading\"]],null]],[16,\"data-id\",[30,1,[\"id\"]]],[4,[32,1],[[30,0,[\"setup\"]]],null],[4,[32,2],[[30,0,[\"teardown\"]]],null],[12],[1,\"\\n      \"],[11,0],[24,0,\"chat-thread__body popper-viewport chat-messages-scroll\"],[4,[32,1],[[30,0,[\"setScrollable\"]]],null],[4,[32,3],[[28,[32,4],null,[[\"onScroll\",\"onScrollEnd\",\"reverse\"],[[30,0,[\"onScroll\"]],[30,0,[\"onScrollEnd\"]],true]]]],null],[12],[1,\"\\n        \"],[11,0],[24,0,\"chat-messages-container\"],[4,[32,5],[[30,0,[\"didResizePane\"]],[28,[32,4],null,[[\"delay\",\"immediate\"],[100,true]]]],null],[12],[1,\"\\n\"],[42,[28,[31,2],[[28,[31,2],[[30,0,[\"messagesManager\",\"messages\"]]],null]],null],\"id\",[[[1,\"            \"],[8,[32,6],null,[[\"@message\",\"@disableMouseEvents\",\"@resendStagedMessage\",\"@context\"],[[30,2],[30,0,[\"isScrolling\"]],[30,0,[\"resendStagedMessage\"]],\"thread\"]],null],[1,\"\\n\"]],[2]],null],[1,\"\\n\"],[41,[51,[30,0,[\"messagesLoader\",\"fetchedOnce\"]]],[[[41,[30,0,[\"messagesLoader\",\"loading\"]],[[[1,\"              \"],[8,[32,7],null,null,null],[1,\"\\n\"]],[]],null]],[]],null],[1,\"        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\\n      \"],[8,[32,8],null,[[\"@onScrollToBottom\",\"@isVisible\"],[[30,0,[\"scrollToLatestMessage\"]],[30,0,[\"needsArrow\"]]]],null],[1,\"\\n\\n\"],[41,[30,0,[\"chatThreadPane\",\"selectingMessages\"]],[[[1,\"        \"],[8,[32,9],null,[[\"@pane\"],[[30,0,[\"chatThreadPane\"]]]],null],[1,\"\\n\"]],[]],[[[1,\"        \"],[8,[32,10],null,[[\"@channel\",\"@thread\",\"@onSendMessage\",\"@uploadDropZone\"],[[30,3],[30,1],[30,0,[\"onSendMessage\"]],[30,0,[\"uploadDropZone\"]]]],null],[1,\"\\n\"]],[]]],[1,\"\\n      \"],[8,[32,11],null,[[\"@model\"],[[30,1]]],null],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@thread\",\"message\",\"@channel\"],false,[\"if\",\"each\",\"-track-array\",\"unless\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-thread.js",
    "scope": () => [_concatClass.default, _didInsert.default, _willDestroy.default, _scrollableList.default, _helper.hash, _onResize.default, _chatMessage2.default, _chatSkeleton.default, _scrollToBottomArrow.default, _selectionManager.default, _thread.default, _chatUploadDropZone.default],
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "appEvents", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "chatComposerPresenceManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "chatHistory", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "chatDraftsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "chatThreadComposer", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "chatThreadPane", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "isAtBottom", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "isScrolling", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "needsArrow", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "uploadDropZone", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "resetIdle", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "resetIdle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "messagesLoader", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "messagesLoader"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleKeydown", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "handleKeydown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setup", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "teardown", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "teardown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onScroll", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onScroll"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onScrollEnd", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onScrollEnd"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateLastReadMessage", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "updateLastReadMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setScrollable", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setScrollable"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "loadMessages", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "loadMessages"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didResizePane", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "didResizePane"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchMoreMessages", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "fetchMoreMessages"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "scrollToLatestMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "scrollToLatestMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onNewMessage", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onNewMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "processMessages", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "processMessages"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onSendMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onSendMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "resetComposerMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "resetComposerMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "scrollToBottom", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "scrollToBottom"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "scrollToTop", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "scrollToTop"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "resendStagedMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "resendStagedMessage"), _class.prototype)), _class);
  async function _sendNewMessage2(message1) {
    if (this.chatThreadPane.sending) {
      return;
    }
    this.chatThreadPane.sending = true;
    this._ignoreNextScroll = true;
    (0, _chatIosHacks.stackingContextFix)(this.scrollable, async () => {
      await this.args.thread.stageMessage(message1);
    });
    this.resetComposerMessage();
    if (!this.messagesLoader.canLoadMoreFuture) {
      this.scrollToLatestMessage();
    }
    try {
      const response1 = await this.chatApi.sendMessage(this.args.thread.channel.id, {
        message: message1.message,
        in_reply_to_id: null,
        staged_id: message1.id,
        upload_ids: message1.uploads.map(upload1 => upload1.id),
        thread_id: message1.thread.id
      });
      this.args.thread.currentUserMembership ??= _userChatThreadMembership.default.create({
        notification_level: _notificationLevels.NotificationLevels.TRACKING,
        last_read_message_id: response1.message_id
      });
      this.scrollToLatestMessage();
    } catch (error1) {
      _classPrivateMethodGet(this, _onSendError, _onSendError2).call(this, message1.id, error1);
    } finally {
      this.chatDraftsManager.remove(this.args.thread.channel.id, this.args.thread.id);
      this.chatThreadPane.sending = false;
    }
  }
  async function _sendEditMessage2(message1) {
    this.chatThreadPane.sending = true;
    const data1 = {
      message: message1.message,
      upload_ids: message1.uploads.map(upload1 => upload1.id)
    };
    this.resetComposerMessage();
    try {
      return await this.chatApi.editMessage(message1.channel.id, message1.id, data1);
    } catch (e1) {
      (0, _ajaxError.popupAjaxError)(e1);
    } finally {
      this.chatDraftsManager.remove(this.args.thread.channel.id, this.args.thread.id);
      this.chatThreadPane.sending = false;
    }
  }
  function _onSendError2(stagedId1, error1) {
    const stagedMessage1 = this.args.thread.messagesManager.findStagedMessage(stagedId1);
    if (stagedMessage1) {
      if (error1.jqXHR?.responseJSON?.errors?.length) {
        stagedMessage1.error = error1.jqXHR.responseJSON.errors[0];
      } else {
        this.chat.markNetworkAsUnreliable();
        stagedMessage1.error = "network_error";
      }
    }
    this.resetComposerMessage();
  }
  function _flushIgnoreNextScroll2() {
    const prev1 = this._ignoreNextScroll;
    this._ignoreNextScroll = false;
    return prev1;
  }
});
define("discourse/plugins/chat/discourse/components/chat-to-topic-selector", ["exports", "@ember/component", "@ember/object/computed", "@ember/template", "discourse-common/utils/decorators", "@ember/template-factory"], function (_exports, _component, _computed, _template, _decorators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.NEW_TOPIC_SELECTION = _exports.NEW_MESSAGE_SELECTION = _exports.EXISTING_TOPIC_SELECTION = void 0;
  var _dec, _dec2, _dec3, _obj;
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="chat-to-topic-selector">
    <div class="radios">
      <label class="radio-label" for="move-to-new-topic">
        <RadioButton
          @id="move-to-new-topic"
          @name="move-to-entity"
          @value={{this.newTopicSelection}}
          @selection={{this.selection}}
        />
        <b>{{i18n "topic.split_topic.radio_label"}}</b>
      </label>
  
      <label class="radio-label" for="move-to-existing-topic">
        <RadioButton
          @id="move-to-existing-topic"
          @name="move-to-entity"
          @value={{this.existingTopicSelection}}
          @selection={{this.selection}}
        />
        <b>{{i18n "topic.merge_topic.radio_label"}}</b>
      </label>
  
      {{#if this.allowNewMessage}}
        <label class="radio-label" for="move-to-new-message">
          <RadioButton
            @id="move-to-new-message"
            @name="move-to-entity"
            @value={{this.newMessageSelection}}
            @selection={{this.selection}}
          />
          <b>{{i18n "topic.move_to_new_message.radio_label"}}</b>
        </label>
      {{/if}}
    </div>
  
    {{#if this.newTopic}}
      <p>{{this.newTopicInstruction}}</p>
  
      <form>
        <label for="split-topic-name">
          {{i18n "topic.split_topic.topic_name"}}
        </label>
  
        <TextField
          @value={{this.topicTitle}}
          @placeholderKey="composer.title_placeholder"
          @id="split-topic-name"
        />
  
        <label>{{i18n "categories.category"}}</label>
  
        <CategoryChooser
          @id="new-topic-category-selector"
          @value={{this.categoryId}}
          @onChange={{action (mut this.categoryId)}}
          class="small"
        />
  
        {{#if this.canAddTags}}
          <label>{{i18n "tagging.tags"}}</label>
          <TagChooser
            @tags={{this.tags}}
            @filterable={{true}}
            @categoryId={{this.categoryId}}
          />
        {{/if}}
      </form>
    {{/if}}
  
    {{#if this.existingTopic}}
      <p>{{this.existingTopicInstruction}}</p>
      <form>
        <ChooseTopic @selectedTopicId={{this.selectedTopicId}} />
      </form>
    {{/if}}
  
    {{#if (and this.allowNewMessage this.newMessage)}}
      <p>{{this.newMessageInstruction}}</p>
  
      <form>
        <label for="split-message-title">
          {{i18n "topic.move_to_new_message.message_title"}}
        </label>
  
        <TextField
          @value={{this.topicTitle}}
          @placeholderKey="composer.title_placeholder"
          @id="split-message-title"
        />
  
        {{#if this.canTagMessages}}
          <label>{{i18n "tagging.tags"}}</label>
          <TagChooser @tags={{this.tags}} @filterable={{true}} />
        {{/if}}
      </form>
    {{/if}}
  </div>
  */
  {
    "id": "pfhwe5XR",
    "block": "[[[10,0],[14,0,\"chat-to-topic-selector\"],[12],[1,\"\\n  \"],[10,0],[14,0,\"radios\"],[12],[1,\"\\n    \"],[10,\"label\"],[14,0,\"radio-label\"],[14,\"for\",\"move-to-new-topic\"],[12],[1,\"\\n      \"],[8,[39,0],null,[[\"@id\",\"@name\",\"@value\",\"@selection\"],[\"move-to-new-topic\",\"move-to-entity\",[30,0,[\"newTopicSelection\"]],[30,0,[\"selection\"]]]],null],[1,\"\\n      \"],[10,\"b\"],[12],[1,[28,[35,1],[\"topic.split_topic.radio_label\"],null]],[13],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[10,\"label\"],[14,0,\"radio-label\"],[14,\"for\",\"move-to-existing-topic\"],[12],[1,\"\\n      \"],[8,[39,0],null,[[\"@id\",\"@name\",\"@value\",\"@selection\"],[\"move-to-existing-topic\",\"move-to-entity\",[30,0,[\"existingTopicSelection\"]],[30,0,[\"selection\"]]]],null],[1,\"\\n      \"],[10,\"b\"],[12],[1,[28,[35,1],[\"topic.merge_topic.radio_label\"],null]],[13],[1,\"\\n    \"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"allowNewMessage\"]],[[[1,\"      \"],[10,\"label\"],[14,0,\"radio-label\"],[14,\"for\",\"move-to-new-message\"],[12],[1,\"\\n        \"],[8,[39,0],null,[[\"@id\",\"@name\",\"@value\",\"@selection\"],[\"move-to-new-message\",\"move-to-entity\",[30,0,[\"newMessageSelection\"]],[30,0,[\"selection\"]]]],null],[1,\"\\n        \"],[10,\"b\"],[12],[1,[28,[35,1],[\"topic.move_to_new_message.radio_label\"],null]],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"newTopic\"]],[[[1,\"    \"],[10,2],[12],[1,[30,0,[\"newTopicInstruction\"]]],[13],[1,\"\\n\\n    \"],[10,\"form\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,\"for\",\"split-topic-name\"],[12],[1,\"\\n        \"],[1,[28,[35,1],[\"topic.split_topic.topic_name\"],null]],[1,\"\\n      \"],[13],[1,\"\\n\\n      \"],[8,[39,3],null,[[\"@value\",\"@placeholderKey\",\"@id\"],[[30,0,[\"topicTitle\"]],\"composer.title_placeholder\",\"split-topic-name\"]],null],[1,\"\\n\\n      \"],[10,\"label\"],[12],[1,[28,[35,1],[\"categories.category\"],null]],[13],[1,\"\\n\\n      \"],[8,[39,4],[[24,0,\"small\"]],[[\"@id\",\"@value\",\"@onChange\"],[\"new-topic-category-selector\",[30,0,[\"categoryId\"]],[28,[37,5],[[30,0],[28,[37,6],[[30,0,[\"categoryId\"]]],null]],null]]],null],[1,\"\\n\\n\"],[41,[30,0,[\"canAddTags\"]],[[[1,\"        \"],[10,\"label\"],[12],[1,[28,[35,1],[\"tagging.tags\"],null]],[13],[1,\"\\n        \"],[8,[39,7],null,[[\"@tags\",\"@filterable\",\"@categoryId\"],[[30,0,[\"tags\"]],true,[30,0,[\"categoryId\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"existingTopic\"]],[[[1,\"    \"],[10,2],[12],[1,[30,0,[\"existingTopicInstruction\"]]],[13],[1,\"\\n    \"],[10,\"form\"],[12],[1,\"\\n      \"],[8,[39,8],null,[[\"@selectedTopicId\"],[[30,0,[\"selectedTopicId\"]]]],null],[1,\"\\n    \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[28,[37,9],[[30,0,[\"allowNewMessage\"]],[30,0,[\"newMessage\"]]],null],[[[1,\"    \"],[10,2],[12],[1,[30,0,[\"newMessageInstruction\"]]],[13],[1,\"\\n\\n    \"],[10,\"form\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,\"for\",\"split-message-title\"],[12],[1,\"\\n        \"],[1,[28,[35,1],[\"topic.move_to_new_message.message_title\"],null]],[1,\"\\n      \"],[13],[1,\"\\n\\n      \"],[8,[39,3],null,[[\"@value\",\"@placeholderKey\",\"@id\"],[[30,0,[\"topicTitle\"]],\"composer.title_placeholder\",\"split-message-title\"]],null],[1,\"\\n\\n\"],[41,[30,0,[\"canTagMessages\"]],[[[1,\"        \"],[10,\"label\"],[12],[1,[28,[35,1],[\"tagging.tags\"],null]],[13],[1,\"\\n        \"],[8,[39,7],null,[[\"@tags\",\"@filterable\"],[[30,0,[\"tags\"]],true]],null],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n\"]],[]],null],[13]],[],false,[\"radio-button\",\"i18n\",\"if\",\"text-field\",\"category-chooser\",\"action\",\"mut\",\"tag-chooser\",\"choose-topic\",\"and\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/chat-to-topic-selector.hbs",
    "isStrictMode": false
  });
  const NEW_TOPIC_SELECTION = _exports.NEW_TOPIC_SELECTION = "new_topic";
  const EXISTING_TOPIC_SELECTION = _exports.EXISTING_TOPIC_SELECTION = "existing_topic";
  const NEW_MESSAGE_SELECTION = _exports.NEW_MESSAGE_SELECTION = "new_message";
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, _component.default.extend((_dec = (0, _decorators.default)(), _dec2 = (0, _decorators.default)(), _dec3 = (0, _decorators.default)(), (_obj = {
    newTopicSelection: NEW_TOPIC_SELECTION,
    existingTopicSelection: EXISTING_TOPIC_SELECTION,
    newMessageSelection: NEW_MESSAGE_SELECTION,
    selection: null,
    newTopic: (0, _computed.equal)("selection", NEW_TOPIC_SELECTION),
    existingTopic: (0, _computed.equal)("selection", EXISTING_TOPIC_SELECTION),
    newMessage: (0, _computed.equal)("selection", NEW_MESSAGE_SELECTION),
    canAddTags: (0, _computed.alias)("site.can_create_tag"),
    canTagMessages: (0, _computed.alias)("site.can_tag_pms"),
    topicTitle: null,
    categoryId: null,
    tags: null,
    selectedTopicId: null,
    chatMessageIds: null,
    chatChannelId: null,
    newTopicInstruction() {
      return (0, _template.htmlSafe)(this.instructionLabels[NEW_TOPIC_SELECTION]);
    },
    existingTopicInstruction() {
      return (0, _template.htmlSafe)(this.instructionLabels[EXISTING_TOPIC_SELECTION]);
    },
    newMessageInstruction() {
      return (0, _template.htmlSafe)(this.instructionLabels[NEW_MESSAGE_SELECTION]);
    }
  }, (_applyDecoratedDescriptor(_obj, "newTopicInstruction", [_dec], Object.getOwnPropertyDescriptor(_obj, "newTopicInstruction"), _obj), _applyDecoratedDescriptor(_obj, "existingTopicInstruction", [_dec2], Object.getOwnPropertyDescriptor(_obj, "existingTopicInstruction"), _obj), _applyDecoratedDescriptor(_obj, "newMessageInstruction", [_dec3], Object.getOwnPropertyDescriptor(_obj, "newMessageInstruction"), _obj)), _obj))));
});
define("discourse/plugins/chat/discourse/components/chat-upload-drop-zone", ["exports", "@glimmer/component", "discourse-i18n", "discourse/plugins/chat/discourse/models/chat-thread", "@ember/template-factory", "@ember/component"], function (_exports, _component, _discourseI18n, _chatThread, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  var _isThread = /*#__PURE__*/new WeakSet();
  class ChatUploadDropZone extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _isThread);
    }
    get title() {
      if (_classPrivateMethodGet(this, _isThread, _isThread2).call(this)) {
        return _discourseI18n.default.t("chat.upload_to_thread");
      } else {
        return _discourseI18n.default.t("chat.upload_to_channel", {
          title: this.args.model.title
        });
      }
    }
  }
  _exports.default = ChatUploadDropZone;
  _class = ChatUploadDropZone;
  function _isThread2() {
    return this.args.model instanceof _chatThread.default;
  }
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-upload-drop-zone">
        <div class="chat-upload-drop-zone__content">
          <div class="chat-upload-drop-zone__background">
            <svg
              width="94"
              height="90"
              viewBox="0 0 94 90"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M94 40.5591C94 69.8685 64.0686 90 40.9592 90C17.8499 90 0 83.9085 0 60.6907C0 37.4729 28.458 0 51.5674 0C74.6768 0 94 17.3413 94 40.5591Z"
                fill="#D1F0FF"
              ></path>
            </svg>
          </div>
          <div class="chat-upload-drop-zone__illustration">
            <svg
              width="106"
              height="84"
              viewBox="0 0 106 84"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <rect
                x="55.832"
                y="6.82959"
                width="45.7854"
                height="33.8408"
                transform="rotate(13.4039 55.832 6.82959)"
                fill="#D9D9D9"
              ></rect>
              <path
                d="M100.66 13.7645L61.1414 4.34705C58.6715 3.75846 56.1786 5.37298 55.59 7.84288L47.6214 41.2815C47.0102 43.8464 48.5297 46.3167 50.9996 46.9053L90.518 56.3227C92.9879 56.9113 95.5532 55.4145 96.1644 52.8496L104.133 19.4109C104.722 16.941 103.225 14.3757 100.66 13.7645ZM58.7093 41.5144C58.5961 41.9894 58.1482 42.1838 57.7682 42.0933L53.2084 41.0067C52.7334 40.8935 52.5163 40.5406 52.6295 40.0656L53.7161 35.5058C53.8067 35.1258 54.1822 34.8137 54.6572 34.9269L59.122 35.9909C59.502 36.0815 59.7915 36.552 59.7009 36.932L58.7093 41.5144ZM61.6069 29.3549C61.4938 29.8299 61.0459 30.0243 60.6659 29.9338L56.1061 28.8472C55.6311 28.734 55.414 28.3811 55.5272 27.9061L56.6138 23.3463C56.7044 22.9663 57.0799 22.6542 57.5549 22.7674L62.0197 23.8314C62.3997 23.922 62.6891 24.3925 62.5986 24.7725L61.5119 29.3323L61.6069 29.3549ZM64.5046 17.1954C64.3914 17.6704 63.9435 17.8648 63.5635 17.7743L59.0037 16.6877C58.5287 16.5745 58.3117 16.2216 58.4249 15.7466L59.5115 11.1868C59.602 10.8068 59.9776 10.4947 60.4526 10.6079L64.9174 11.6719C65.2974 11.7625 65.5868 12.233 65.4962 12.613L64.5046 17.1954ZM81.6894 46.1876C81.4857 47.0426 80.5673 47.5264 79.8073 47.3453L64.6079 43.7232C63.753 43.5195 63.2464 42.6961 63.4502 41.8411L65.6234 32.7215C65.8045 31.9615 66.6506 31.36 67.5056 31.5637L82.705 35.1858C83.4649 35.3669 84.0438 36.308 83.8627 37.068L81.6894 46.1876ZM86.036 27.9483C85.8322 28.8033 84.9138 29.2872 84.1538 29.1061L68.9544 25.484C68.0995 25.2802 67.593 24.4568 67.7967 23.6018L69.97 14.4822C70.1511 13.7222 70.9971 13.1207 71.8521 13.3245L87.0515 16.9466C87.8114 17.1277 88.3903 18.0687 88.2092 18.8287L86.036 27.9483ZM92.1479 49.483C92.0347 49.958 91.5868 50.1524 91.2068 50.0619L86.742 48.9979C86.267 48.8847 86.05 48.5318 86.1631 48.0568L87.2498 43.497C87.3403 43.117 87.8109 42.8276 88.1908 42.9181L92.7507 44.0048C93.1306 44.0953 93.4201 44.5659 93.3295 44.9458L92.2429 49.5057L92.1479 49.483ZM95.0456 37.3235C94.9324 37.7985 94.4845 37.9929 94.1045 37.9024L89.6397 36.8384C89.1647 36.7252 88.9476 36.3723 89.0608 35.8973L90.1474 31.3375C90.238 30.9575 90.6135 30.6455 91.0885 30.7586L95.5533 31.8226C95.9333 31.9132 96.2228 32.3837 96.1322 32.7637L95.0456 37.3235ZM97.9432 25.164C97.8301 25.639 97.3822 25.8334 97.0022 25.7429L92.5374 24.6789C92.0624 24.5657 91.8453 24.2128 91.9585 23.7378L93.0451 19.178C93.1357 18.798 93.5112 18.486 93.8912 18.5765L98.356 19.6405C98.736 19.731 99.0254 20.2016 98.9349 20.5816L97.8483 25.1414L97.9432 25.164Z"
                fill="#AFAFAF"
              ></path>
              <path
                d="M30.7898 24.814L27.2823 9.2672L4.41944 14.4252C2.81904 14.7863 1.95958 16.3017 2.29486 17.7878L14.2615 70.8296C14.6226 72.43 16.0236 73.3153 17.624 72.9542L56.0337 64.2887C57.5198 63.9534 58.5193 62.5266 58.1582 60.9262L49.699 23.4311L34.1523 26.9385C32.5519 27.2996 31.1508 26.4144 30.7898 24.814ZM48.719 19.0871C48.5643 18.4012 48.0666 17.7927 47.4804 17.3243L33.7501 8.64894C33.0754 8.32063 32.3121 8.13243 31.6263 8.28717L30.9404 8.44191L34.2415 23.0742L48.8738 19.773L48.719 19.0871Z"
                fill="#0AADFF"
              ></path>
              <rect
                x="41.7334"
                y="40.3967"
                width="37.6309"
                height="28.6511"
                transform="rotate(6.29289 41.7334 40.3967)"
                fill="#66CCFF"
              ></rect>
              <path
                d="M76.768 40.4721L44.4638 36.9097C42.3671 36.6785 40.548 38.2071 40.3254 40.2261L37.8591 62.5905C37.6279 64.6872 39.0788 66.4977 41.1755 66.729L73.4796 70.2913C75.4987 70.514 77.3869 69.0716 77.6181 66.9749L80.0843 44.6105C80.307 42.5915 78.787 40.6947 76.768 40.4721ZM73.4248 66.5125L42.0524 63.0529C41.7418 63.0187 41.6036 62.8462 41.6379 62.5356L44.0014 41.103C44.0271 40.8701 44.2081 40.6542 44.5187 40.6885L75.891 44.1481C76.124 44.1738 76.3312 44.4324 76.3056 44.6654L73.9421 66.098C73.9078 66.4086 73.6577 66.5382 73.4248 66.5125ZM49.9226 44.4284C48.1365 44.2314 46.6623 45.4836 46.4739 47.192C46.2769 48.978 47.4514 50.4437 49.2375 50.6407C50.9459 50.8291 52.4892 49.6631 52.6862 47.8771C52.8746 46.1687 51.631 44.6168 49.9226 44.4284ZM45.725 59.6852L70.5743 62.4255L71.2594 56.2131L65.1708 48.7036C64.8254 48.2725 64.2818 48.2126 63.8507 48.558L53.5908 56.7799L50.8186 53.4088C50.4732 52.9777 49.9296 52.9178 49.4985 53.2632L46.136 55.9578L45.725 59.6852Z"
                fill="white"
              ></path>
              <path
                d="M37.8174 63.0181L77.5892 66.862L77.012 72.8342C76.9057 73.9336 75.9283 74.7388 74.8288 74.6325L39.0385 71.1734C37.939 71.0671 37.1339 70.0897 37.2402 68.9902L37.8174 63.0181Z"
                fill="white"
              ></path>
            </svg>
          </div>
          <div class="chat-upload-drop-zone__text">
            <span class="chat-upload-drop-zone__text__title">
              {{this.title}}
            </span>
          </div>
        </div>
      </div>
    
  */
  {
    "id": "8LRzgpPD",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-upload-drop-zone\"],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-upload-drop-zone__content\"],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-upload-drop-zone__background\"],[12],[1,\"\\n          \"],[10,\"svg\"],[14,\"width\",\"94\"],[14,\"height\",\"90\"],[14,\"viewBox\",\"0 0 94 90\"],[14,\"fill\",\"none\"],[14,\"xmlns\",\"http://www.w3.org/2000/svg\",\"http://www.w3.org/2000/xmlns/\"],[12],[1,\"\\n            \"],[10,\"path\"],[14,\"d\",\"M94 40.5591C94 69.8685 64.0686 90 40.9592 90C17.8499 90 0 83.9085 0 60.6907C0 37.4729 28.458 0 51.5674 0C74.6768 0 94 17.3413 94 40.5591Z\"],[14,\"fill\",\"#D1F0FF\"],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n        \"],[10,0],[14,0,\"chat-upload-drop-zone__illustration\"],[12],[1,\"\\n          \"],[10,\"svg\"],[14,\"width\",\"106\"],[14,\"height\",\"84\"],[14,\"viewBox\",\"0 0 106 84\"],[14,\"fill\",\"none\"],[14,\"xmlns\",\"http://www.w3.org/2000/svg\",\"http://www.w3.org/2000/xmlns/\"],[12],[1,\"\\n            \"],[10,\"rect\"],[14,\"x\",\"55.832\"],[14,\"y\",\"6.82959\"],[14,\"width\",\"45.7854\"],[14,\"height\",\"33.8408\"],[14,\"transform\",\"rotate(13.4039 55.832 6.82959)\"],[14,\"fill\",\"#D9D9D9\"],[12],[13],[1,\"\\n            \"],[10,\"path\"],[14,\"d\",\"M100.66 13.7645L61.1414 4.34705C58.6715 3.75846 56.1786 5.37298 55.59 7.84288L47.6214 41.2815C47.0102 43.8464 48.5297 46.3167 50.9996 46.9053L90.518 56.3227C92.9879 56.9113 95.5532 55.4145 96.1644 52.8496L104.133 19.4109C104.722 16.941 103.225 14.3757 100.66 13.7645ZM58.7093 41.5144C58.5961 41.9894 58.1482 42.1838 57.7682 42.0933L53.2084 41.0067C52.7334 40.8935 52.5163 40.5406 52.6295 40.0656L53.7161 35.5058C53.8067 35.1258 54.1822 34.8137 54.6572 34.9269L59.122 35.9909C59.502 36.0815 59.7915 36.552 59.7009 36.932L58.7093 41.5144ZM61.6069 29.3549C61.4938 29.8299 61.0459 30.0243 60.6659 29.9338L56.1061 28.8472C55.6311 28.734 55.414 28.3811 55.5272 27.9061L56.6138 23.3463C56.7044 22.9663 57.0799 22.6542 57.5549 22.7674L62.0197 23.8314C62.3997 23.922 62.6891 24.3925 62.5986 24.7725L61.5119 29.3323L61.6069 29.3549ZM64.5046 17.1954C64.3914 17.6704 63.9435 17.8648 63.5635 17.7743L59.0037 16.6877C58.5287 16.5745 58.3117 16.2216 58.4249 15.7466L59.5115 11.1868C59.602 10.8068 59.9776 10.4947 60.4526 10.6079L64.9174 11.6719C65.2974 11.7625 65.5868 12.233 65.4962 12.613L64.5046 17.1954ZM81.6894 46.1876C81.4857 47.0426 80.5673 47.5264 79.8073 47.3453L64.6079 43.7232C63.753 43.5195 63.2464 42.6961 63.4502 41.8411L65.6234 32.7215C65.8045 31.9615 66.6506 31.36 67.5056 31.5637L82.705 35.1858C83.4649 35.3669 84.0438 36.308 83.8627 37.068L81.6894 46.1876ZM86.036 27.9483C85.8322 28.8033 84.9138 29.2872 84.1538 29.1061L68.9544 25.484C68.0995 25.2802 67.593 24.4568 67.7967 23.6018L69.97 14.4822C70.1511 13.7222 70.9971 13.1207 71.8521 13.3245L87.0515 16.9466C87.8114 17.1277 88.3903 18.0687 88.2092 18.8287L86.036 27.9483ZM92.1479 49.483C92.0347 49.958 91.5868 50.1524 91.2068 50.0619L86.742 48.9979C86.267 48.8847 86.05 48.5318 86.1631 48.0568L87.2498 43.497C87.3403 43.117 87.8109 42.8276 88.1908 42.9181L92.7507 44.0048C93.1306 44.0953 93.4201 44.5659 93.3295 44.9458L92.2429 49.5057L92.1479 49.483ZM95.0456 37.3235C94.9324 37.7985 94.4845 37.9929 94.1045 37.9024L89.6397 36.8384C89.1647 36.7252 88.9476 36.3723 89.0608 35.8973L90.1474 31.3375C90.238 30.9575 90.6135 30.6455 91.0885 30.7586L95.5533 31.8226C95.9333 31.9132 96.2228 32.3837 96.1322 32.7637L95.0456 37.3235ZM97.9432 25.164C97.8301 25.639 97.3822 25.8334 97.0022 25.7429L92.5374 24.6789C92.0624 24.5657 91.8453 24.2128 91.9585 23.7378L93.0451 19.178C93.1357 18.798 93.5112 18.486 93.8912 18.5765L98.356 19.6405C98.736 19.731 99.0254 20.2016 98.9349 20.5816L97.8483 25.1414L97.9432 25.164Z\"],[14,\"fill\",\"#AFAFAF\"],[12],[13],[1,\"\\n            \"],[10,\"path\"],[14,\"d\",\"M30.7898 24.814L27.2823 9.2672L4.41944 14.4252C2.81904 14.7863 1.95958 16.3017 2.29486 17.7878L14.2615 70.8296C14.6226 72.43 16.0236 73.3153 17.624 72.9542L56.0337 64.2887C57.5198 63.9534 58.5193 62.5266 58.1582 60.9262L49.699 23.4311L34.1523 26.9385C32.5519 27.2996 31.1508 26.4144 30.7898 24.814ZM48.719 19.0871C48.5643 18.4012 48.0666 17.7927 47.4804 17.3243L33.7501 8.64894C33.0754 8.32063 32.3121 8.13243 31.6263 8.28717L30.9404 8.44191L34.2415 23.0742L48.8738 19.773L48.719 19.0871Z\"],[14,\"fill\",\"#0AADFF\"],[12],[13],[1,\"\\n            \"],[10,\"rect\"],[14,\"x\",\"41.7334\"],[14,\"y\",\"40.3967\"],[14,\"width\",\"37.6309\"],[14,\"height\",\"28.6511\"],[14,\"transform\",\"rotate(6.29289 41.7334 40.3967)\"],[14,\"fill\",\"#66CCFF\"],[12],[13],[1,\"\\n            \"],[10,\"path\"],[14,\"d\",\"M76.768 40.4721L44.4638 36.9097C42.3671 36.6785 40.548 38.2071 40.3254 40.2261L37.8591 62.5905C37.6279 64.6872 39.0788 66.4977 41.1755 66.729L73.4796 70.2913C75.4987 70.514 77.3869 69.0716 77.6181 66.9749L80.0843 44.6105C80.307 42.5915 78.787 40.6947 76.768 40.4721ZM73.4248 66.5125L42.0524 63.0529C41.7418 63.0187 41.6036 62.8462 41.6379 62.5356L44.0014 41.103C44.0271 40.8701 44.2081 40.6542 44.5187 40.6885L75.891 44.1481C76.124 44.1738 76.3312 44.4324 76.3056 44.6654L73.9421 66.098C73.9078 66.4086 73.6577 66.5382 73.4248 66.5125ZM49.9226 44.4284C48.1365 44.2314 46.6623 45.4836 46.4739 47.192C46.2769 48.978 47.4514 50.4437 49.2375 50.6407C50.9459 50.8291 52.4892 49.6631 52.6862 47.8771C52.8746 46.1687 51.631 44.6168 49.9226 44.4284ZM45.725 59.6852L70.5743 62.4255L71.2594 56.2131L65.1708 48.7036C64.8254 48.2725 64.2818 48.2126 63.8507 48.558L53.5908 56.7799L50.8186 53.4088C50.4732 52.9777 49.9296 52.9178 49.4985 53.2632L46.136 55.9578L45.725 59.6852Z\"],[14,\"fill\",\"white\"],[12],[13],[1,\"\\n            \"],[10,\"path\"],[14,\"d\",\"M37.8174 63.0181L77.5892 66.862L77.012 72.8342C76.9057 73.9336 75.9283 74.7388 74.8288 74.6325L39.0385 71.1734C37.939 71.0671 37.1339 70.0897 37.2402 68.9902L37.8174 63.0181Z\"],[14,\"fill\",\"white\"],[12],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n        \"],[10,0],[14,0,\"chat-upload-drop-zone__text\"],[12],[1,\"\\n          \"],[10,1],[14,0,\"chat-upload-drop-zone__text__title\"],[12],[1,\"\\n            \"],[1,[30,0,[\"title\"]]],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-upload-drop-zone.js",
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat-upload", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/modifier", "@ember/object", "@ember/service", "@ember/template", "discourse/lib/uploads", "truth-helpers/helpers/eq", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _modifier, _object, _service, _template, _uploads, _eq, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatUpload = _exports.default = (_class = (_class2 = class ChatUpload extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "siteSettings", _descriptor, this);
      _initializerDefineProperty(this, "loaded", _descriptor2, this);
      _defineProperty(this, "IMAGE_TYPE", "image");
      _defineProperty(this, "VIDEO_TYPE", "video");
      _defineProperty(this, "AUDIO_TYPE", "audio");
      _defineProperty(this, "ATTACHMENT_TYPE", "attachment");
    }
    get type() {
      if ((0, _uploads.isImage)(this.args.upload.original_filename)) {
        return this.IMAGE_TYPE;
      }
      if ((0, _uploads.isVideo)(this.args.upload.original_filename)) {
        return this.VIDEO_TYPE;
      }
      if ((0, _uploads.isAudio)(this.args.upload.original_filename)) {
        return this.AUDIO_TYPE;
      }
      return this.ATTACHMENT_TYPE;
    }
    get size() {
      const width1 = this.args.upload.width;
      const height1 = this.args.upload.height;
      const ratio1 = Math.min(this.siteSettings.max_image_width / width1, this.siteSettings.max_image_height / height1);
      return {
        width: width1 * ratio1,
        height: height1 * ratio1
      };
    }
    get imageUrl() {
      return this.args.upload.thumbnail?.url ?? this.args.upload.url;
    }
    get imageStyle() {
      if (this.args.upload.dominant_color && !this.loaded) {
        return (0, _template.htmlSafe)(`background-color: #${this.args.upload.dominant_color};`);
      }
    }
    imageLoaded() {
      this.loaded = true;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if (eq this.type this.IMAGE_TYPE)}}
        <img
          class="chat-img-upload"
          data-orig-src={{@upload.short_url}}
          data-large-src={{@upload.url}}
          height={{this.size.height}}
          width={{this.size.width}}
          src={{this.imageUrl}}
          style={{this.imageStyle}}
          loading="lazy"
          tabindex="0"
          data-dominant-color={{@upload.dominant_color}}
          {{on "load" this.imageLoaded}}
        />
      {{else if (eq this.type this.VIDEO_TYPE)}}
        <video class="chat-video-upload" preload="metadata" height="150" controls>
          <source src={{@upload.url}} />
        </video>
      {{else if (eq this.type this.AUDIO_TYPE)}}
        <audio class="chat-audio-upload" preload="metadata" controls>
          <source src={{@upload.url}} />
        </audio>
      {{else}}
        <a
          class="chat-other-upload"
          data-orig-href={{@upload.short_url}}
          href={{@upload.url}}
        >
          {{@upload.original_filename}}
        </a>
      {{/if}}
    
  */
  {
    "id": "mKOa16Fh",
    "block": "[[[1,\"\\n\"],[41,[28,[32,0],[[30,0,[\"type\"]],[30,0,[\"IMAGE_TYPE\"]]],null],[[[1,\"      \"],[11,\"img\"],[24,0,\"chat-img-upload\"],[16,\"data-orig-src\",[30,1,[\"short_url\"]]],[16,\"data-large-src\",[30,1,[\"url\"]]],[16,\"height\",[30,0,[\"size\",\"height\"]]],[16,\"width\",[30,0,[\"size\",\"width\"]]],[16,\"src\",[30,0,[\"imageUrl\"]]],[16,5,[30,0,[\"imageStyle\"]]],[24,\"loading\",\"lazy\"],[24,\"tabindex\",\"0\"],[16,\"data-dominant-color\",[30,1,[\"dominant_color\"]]],[4,[32,1],[\"load\",[30,0,[\"imageLoaded\"]]],null],[12],[13],[1,\"\\n\"]],[]],[[[41,[28,[32,0],[[30,0,[\"type\"]],[30,0,[\"VIDEO_TYPE\"]]],null],[[[1,\"      \"],[10,\"video\"],[14,0,\"chat-video-upload\"],[14,\"preload\",\"metadata\"],[14,\"height\",\"150\"],[14,\"controls\",\"\"],[12],[1,\"\\n        \"],[10,\"source\"],[15,\"src\",[30,1,[\"url\"]]],[12],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],[[[41,[28,[32,0],[[30,0,[\"type\"]],[30,0,[\"AUDIO_TYPE\"]]],null],[[[1,\"      \"],[10,\"audio\"],[14,0,\"chat-audio-upload\"],[14,\"preload\",\"metadata\"],[14,\"controls\",\"\"],[12],[1,\"\\n        \"],[10,\"source\"],[15,\"src\",[30,1,[\"url\"]]],[12],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],[[[1,\"      \"],[10,3],[14,0,\"chat-other-upload\"],[15,\"data-orig-href\",[30,1,[\"short_url\"]]],[15,6,[30,1,[\"url\"]]],[12],[1,\"\\n        \"],[1,[30,1,[\"original_filename\"]]],[1,\"\\n      \"],[13],[1,\"\\n    \"]],[]]]],[]]]],[]]],[1,\"  \"]],[\"@upload\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-upload.js",
    "scope": () => [_eq.default, _modifier.on],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "loaded", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "imageLoaded", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "imageLoaded"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat-user-avatar", ["exports", "@glimmer/component", "@ember/service", "@ember/template", "discourse/helpers/concat-class", "discourse/helpers/user-avatar", "discourse/lib/url", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _template, _concatClass, _userAvatar, _url, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatUserAvatar = _exports.default = (_class = (_class2 = class ChatUserAvatar extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
    }
    get avatar() {
      return (0, _template.htmlSafe)((0, _userAvatar.renderAvatar)(this.args.user, {
        imageSize: this.avatarSize
      }));
    }
    get interactive() {
      return this.args.interactive ?? true;
    }
    get avatarSize() {
      return this.args.avatarSize || "tiny";
    }
    get showPresence() {
      return this.args.showPresence ?? true;
    }
    get isOnline() {
      const users1 = (this.args.chat || this.chat).presenceChannel?.users;
      return this.showPresence && !!users1?.find(({
        id: id1,
        username: username1
      }) => this.args.user?.id === id1 || this.args.user?.username === username1);
    }
    get userPath() {
      return (0, _url.userPath)(this.args.user.username);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div
        class={{concatClass "chat-user-avatar" (if this.isOnline "is-online")}}
        data-username={{@user.username}}
      >
        {{#if this.interactive}}
          <a
            class="chat-user-avatar__container"
            href={{this.userPath}}
            data-user-card={{@user.username}}
          >
            {{this.avatar}}
          </a>
        {{else}}
          <span class="chat-user-avatar__container">
            {{this.avatar}}
          </span>
        {{/if}}
      </div>
    
  */
  {
    "id": "q+lVicGx",
    "block": "[[[1,\"\\n    \"],[10,0],[15,0,[28,[32,0],[\"chat-user-avatar\",[52,[30,0,[\"isOnline\"]],\"is-online\"]],null]],[15,\"data-username\",[30,1,[\"username\"]]],[12],[1,\"\\n\"],[41,[30,0,[\"interactive\"]],[[[1,\"        \"],[10,3],[14,0,\"chat-user-avatar__container\"],[15,6,[30,0,[\"userPath\"]]],[15,\"data-user-card\",[30,1,[\"username\"]]],[12],[1,\"\\n          \"],[1,[30,0,[\"avatar\"]]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],[[[1,\"        \"],[10,1],[14,0,\"chat-user-avatar__container\"],[12],[1,\"\\n          \"],[1,[30,0,[\"avatar\"]]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]]],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@user\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-user-avatar.js",
    "scope": () => [_concatClass.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat-user-display-name", ["exports", "@glimmer/component", "@ember/service", "discourse/helpers/concat-class", "discourse/lib/utilities", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _concatClass, _utilities, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatUserDisplayName = _exports.default = (_class = (_class2 = class ChatUserDisplayName extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "siteSettings", _descriptor, this);
    }
    get shouldPrioritizeNameInUx() {
      return !this.siteSettings.prioritize_username_in_ux;
    }
    get hasValidName() {
      return this.args.user?.name && this.args.user.name.trim().length > 0;
    }
    get formattedUsername() {
      return (0, _utilities.formatUsername)(this.args.user?.username);
    }
    get shouldShowNameFirst() {
      return this.shouldPrioritizeNameInUx && this.hasValidName;
    }
    get shouldShowNameLast() {
      return !this.shouldPrioritizeNameInUx && this.hasValidName;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <span class="chat-user-display-name">
        {{#if this.shouldShowNameFirst}}
          <span class="chat-user-display-name__name -first">{{@user.name}}</span>
          <span class="separator">—</span>
        {{/if}}
  
        <span
          class={{concatClass
            "chat-user-display-name__username"
            (unless this.shouldShowNameFirst "-first")
          }}
        >
          {{this.formattedUsername}}
        </span>
  
        {{#if this.shouldShowNameLast}}
          <span class="separator">—</span>
          <span class="chat-user-display-name__name">{{@user.name}}</span>
        {{/if}}
      </span>
    
  */
  {
    "id": "gQwu+R1b",
    "block": "[[[1,\"\\n    \"],[10,1],[14,0,\"chat-user-display-name\"],[12],[1,\"\\n\"],[41,[30,0,[\"shouldShowNameFirst\"]],[[[1,\"        \"],[10,1],[14,0,\"chat-user-display-name__name -first\"],[12],[1,[30,1,[\"name\"]]],[13],[1,\"\\n        \"],[10,1],[14,0,\"separator\"],[12],[1,\"—\"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[10,1],[15,0,[28,[32,0],[\"chat-user-display-name__username\",[52,[51,[30,0,[\"shouldShowNameFirst\"]]],\"-first\"]],null]],[12],[1,\"\\n        \"],[1,[30,0,[\"formattedUsername\"]]],[1,\"\\n      \"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"shouldShowNameLast\"]],[[[1,\"        \"],[10,1],[14,0,\"separator\"],[12],[1,\"—\"],[13],[1,\"\\n        \"],[10,1],[14,0,\"chat-user-display-name__name\"],[12],[1,[30,1,[\"name\"]]],[13],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@user\"],false,[\"if\",\"unless\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-user-display-name.js",
    "scope": () => [_concatClass.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat-user-info", ["exports", "@glimmer/component", "discourse/lib/url", "discourse/plugins/chat/discourse/components/chat-user-avatar", "discourse/plugins/chat/discourse/components/chat-user-display-name", "@ember/template-factory", "@ember/component"], function (_exports, _component, _url, _chatUserAvatar, _chatUserDisplayName, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatUserInfo extends _component.default {
    get avatarSize() {
      return this.args.avatarSize ?? "medium";
    }
    get userPath() {
      return (0, _url.userPath)(this.args.user.username);
    }
    get interactive() {
      return this.args.interactive ?? false;
    }
  }
  _exports.default = ChatUserInfo;
  _class = ChatUserInfo;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @user}}
        <ChatUserAvatar
          @user={{@user}}
          @avatarSize={{this.avatarSize}}
          @interactive={{this.interactive}}
        />
  
        {{#if this.interactive}}
          <a href={{this.userPath}} data-user-card={{@user.username}}>
            <ChatUserDisplayName @user={{@user}} />
          </a>
        {{else}}
          <ChatUserDisplayName @user={{@user}} />
        {{/if}}
      {{/if}}
    
  */
  {
    "id": "Gy9EQPNJ",
    "block": "[[[1,\"\\n\"],[41,[30,1],[[[1,\"      \"],[8,[32,0],null,[[\"@user\",\"@avatarSize\",\"@interactive\"],[[30,1],[30,0,[\"avatarSize\"]],[30,0,[\"interactive\"]]]],null],[1,\"\\n\\n\"],[41,[30,0,[\"interactive\"]],[[[1,\"        \"],[10,3],[15,6,[30,0,[\"userPath\"]]],[15,\"data-user-card\",[30,1,[\"username\"]]],[12],[1,\"\\n          \"],[8,[32,1],null,[[\"@user\"],[[30,1]]],null],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],[[[1,\"        \"],[8,[32,1],null,[[\"@user\"],[[30,1]]],null],[1,\"\\n\"]],[]]]],[]],null],[1,\"  \"]],[\"@user\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat-user-info.js",
    "scope": () => [_chatUserAvatar.default, _chatUserDisplayName.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat-vh", ["exports", "@ember/component", "@ember/service", "discourse-common/utils/decorators", "discourse/plugins/chat/discourse/lib/zoom-check"], function (_exports, _component, _service, _decorators, _zoomCheck) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _blurActiveElement;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const CSS_VAR = "--chat-vh";
  let lastVH;
  let ChatVh = _exports.default = (_class = (_blurActiveElement = /*#__PURE__*/new WeakSet(), class ChatVh extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _blurActiveElement);
      _initializerDefineProperty(this, "capabilities", _descriptor, this);
      _defineProperty(this, "tagName", "");
    }
    didInsertElement() {
      super.didInsertElement(...arguments);
      if ("virtualKeyboard" in navigator) {
        navigator.virtualKeyboard.overlaysContent = true;
        navigator.virtualKeyboard.addEventListener("geometrychange", this.setVH);
      }
      this.activeWindow = window.visualViewport || window;
      this.activeWindow.addEventListener("resize", this.setVH);
      this.setVH();
    }
    willDestroyElement() {
      super.willDestroyElement(...arguments);
      this.activeWindow?.removeEventListener("resize", this.setVH);
      lastVH = null;
      if ("virtualKeyboard" in navigator) {
        navigator.virtualKeyboard.removeEventListener("geometrychange", this.setVH);
      }
    }
    setVH() {
      if ((0, _zoomCheck.default)()) {
        return;
      }
      let height;
      if ("virtualKeyboard" in navigator) {
        height = window.visualViewport.height - navigator.virtualKeyboard.boundingRect.height;
      } else {
        height = this.activeWindow?.height || window.innerHeight;
      }
      const vh = height * 0.01;
      if (lastVH === vh) {
        return;
      }
      lastVH = vh;
      document.documentElement.style.setProperty(CSS_VAR, `${vh}px`);
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "setVH", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "setVH"), _class.prototype)), _class);
  function _blurActiveElement2() {
    if (document.activeElement?.blur) {
      document.activeElement.blur();
    }
  }
});
define("discourse/plugins/chat/discourse/components/chat/admin/export-messages", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse/lib/ajax-error", "discourse-common/helpers/i18n", "discourse-i18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _dButton, _ajaxError, _i18n, _discourseI18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatAdminExportMessages = _exports.default = (_class = (_class2 = class ChatAdminExportMessages extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatAdminApi", _descriptor, this);
      _initializerDefineProperty(this, "dialog", _descriptor2, this);
    }
    async exportMessages() {
      try {
        await this.chatAdminApi.exportMessages();
        this.dialog.alert(_discourseI18n.default.t("chat.admin.export_messages.export_has_started"));
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <section class="admin-section">
        <h3>{{i18n "chat.admin.export_messages.title"}}</h3>
        <p>{{i18n "chat.admin.export_messages.description"}}</p>
        <DButton
          @label="chat.admin.export_messages.create_export"
          @title="chat.admin.export_messages.create_export"
          @action={{this.exportMessages}}
          class="btn-primary"
        />
      </section>
    
  */
  {
    "id": "JJJVlSh/",
    "block": "[[[1,\"\\n    \"],[10,\"section\"],[14,0,\"admin-section\"],[12],[1,\"\\n      \"],[10,\"h3\"],[12],[1,[28,[32,0],[\"chat.admin.export_messages.title\"],null]],[13],[1,\"\\n      \"],[10,2],[12],[1,[28,[32,0],[\"chat.admin.export_messages.description\"],null]],[13],[1,\"\\n      \"],[8,[32,1],[[24,0,\"btn-primary\"]],[[\"@label\",\"@title\",\"@action\"],[\"chat.admin.export_messages.create_export\",\"chat.admin.export_messages.create_export\",[30,0,[\"exportMessages\"]]]],null],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/admin/export-messages.js",
    "scope": () => [_i18n.default, _dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatAdminApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "dialog", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "exportMessages", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "exportMessages"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/composer/button", ["exports", "discourse-common/helpers/d-icon", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _dIcon, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ChatComposerButton = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    <div class="chat-composer-button__wrapper">
      <button type="button" class="chat-composer-button" ...attributes>
        {{dIcon @icon}}
      </button>
    </div>
  
  */
  {
    "id": "FSPgr3RE",
    "block": "[[[1,\"\\n  \"],[10,0],[14,0,\"chat-composer-button__wrapper\"],[12],[1,\"\\n    \"],[11,\"button\"],[24,4,\"button\"],[24,0,\"chat-composer-button\"],[17,1],[12],[1,\"\\n      \"],[1,[28,[32,0],[[30,2]],null]],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"]],[\"&attrs\",\"@icon\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/composer/button.js",
    "scope": () => [_dIcon.default],
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = ChatComposerButton;
});
define("discourse/plugins/chat/discourse/components/chat/composer/channel", ["exports", "@ember/object", "@ember/service", "discourse-common/utils/decorators", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat-composer"], function (_exports, _object, _service, _decorators, _discourseI18n, _chatComposer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _messageRecipients;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatComposerChannel = _exports.default = (_dec = (0, _service.inject)("chat-channel-composer"), _dec2 = (0, _service.inject)("chat-channel-pane"), _dec3 = (0, _decorators.debounce)(2000), (_class = (_messageRecipients = /*#__PURE__*/new WeakSet(), class ChatComposerChannel extends _chatComposer.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _messageRecipients);
      _initializerDefineProperty(this, "composer", _descriptor, this);
      _initializerDefineProperty(this, "pane", _descriptor2, this);
      _initializerDefineProperty(this, "currentUser", _descriptor3, this);
      _initializerDefineProperty(this, "chatDraftsManager", _descriptor4, this);
      _defineProperty(this, "context", "channel");
      _defineProperty(this, "composerId", "channel-composer");
    }
    persistDraft() {
      this.chatDraftsManager.add(this.draft, this.args.channel.id);
    }
    destroyDraft() {
      this.chatDraftsManager.remove(this.args.channel.id);
    }
    resetDraft() {
      this.args.channel.resetDraft(this.currentUser);
    }
    get draft() {
      return this.args.channel.draft;
    }
    get presenceChannelName() {
      const channel = this.args.channel;
      return `/chat-reply/${channel.id}`;
    }
    get disabled() {
      return !this.chat.userCanInteractWithChat || !this.args.channel.canModifyMessages(this.currentUser);
    }
    get lastMessage() {
      return this.args.channel.lastMessage;
    }
    lastUserMessage(user) {
      return this.args.channel.messagesManager.findLastUserMessage(user);
    }
    get placeholder() {
      if (!this.args.channel.canModifyMessages(this.currentUser)) {
        return _discourseI18n.default.t(`chat.placeholder_new_message_disallowed.${this.args.channel.status}`);
      }
      if (!this.chat.userCanInteractWithChat) {
        return _discourseI18n.default.t("chat.placeholder_silenced");
      } else {
        return _classPrivateMethodGet(this, _messageRecipients, _messageRecipients2).call(this, this.args.channel);
      }
    }
    handleEscape(event) {
      event.stopPropagation();
      if (this.draft?.inReplyTo) {
        this.draft.inReplyTo = null;
      } else if (this.draft?.editing) {
        this.args.channel.resetDraft(this.currentUser);
      } else {
        event.target.blur();
      }
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "composer", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "pane", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatDraftsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "persistDraft", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "persistDraft"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "destroyDraft", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "destroyDraft"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "resetDraft", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "resetDraft"), _class.prototype)), _class));
  function _messageRecipients2(channel) {
    if (channel.isDirectMessageChannel) {
      if (channel.chatable.group && channel.title) {
        return _discourseI18n.default.t("chat.placeholder_channel", {
          channelName: `#${channel.title}`
        });
      } else {
        const directMessageRecipients = channel.chatable.users;
        if (directMessageRecipients.length === 1 && directMessageRecipients[0].id === this.currentUser.id) {
          return _discourseI18n.default.t("chat.placeholder_self");
        }
        return _discourseI18n.default.t("chat.placeholder_users", {
          commaSeparatedNames: directMessageRecipients.map(u => u.name || `@${u.username}`).join(_discourseI18n.default.t("word_connector.comma"))
        });
      }
    } else {
      return _discourseI18n.default.t("chat.placeholder_channel", {
        channelName: `#${channel.title}`
      });
    }
  }
});
define("discourse/plugins/chat/discourse/components/chat/composer/separator", ["exports", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ChatComposerSeparator = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    <div class="chat-composer-separator"></div>
  
  */
  {
    "id": "veyKKlKC",
    "block": "[[[1,\"\\n  \"],[10,0],[14,0,\"chat-composer-separator\"],[12],[13],[1,\"\\n\"]],[],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/composer/separator.js",
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = ChatComposerSeparator;
});
define("discourse/plugins/chat/discourse/components/chat/composer/thread", ["exports", "@ember/object", "@ember/service", "discourse-common/utils/decorators", "discourse-i18n", "discourse/plugins/chat/discourse/models/chat-message", "discourse/plugins/chat/discourse/components/chat-composer"], function (_exports, _object, _service, _decorators, _discourseI18n, _chatMessage, _chatComposer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatComposerThread = _exports.default = (_dec = (0, _service.inject)("chat-channel-composer"), _dec2 = (0, _service.inject)("chat-thread-composer"), _dec3 = (0, _service.inject)("chat-thread-pane"), _dec4 = (0, _decorators.debounce)(2000), (_class = class ChatComposerThread extends _chatComposer.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "channelComposer", _descriptor, this);
      _initializerDefineProperty(this, "composer", _descriptor2, this);
      _initializerDefineProperty(this, "pane", _descriptor3, this);
      _initializerDefineProperty(this, "currentUser", _descriptor4, this);
      _initializerDefineProperty(this, "chatDraftsManager", _descriptor5, this);
      _defineProperty(this, "context", "thread");
      _defineProperty(this, "composerId", "thread-composer");
    }
    persistDraft() {
      this.chatDraftsManager.add(this.draft, this.args.thread.channel.id, this.args.thread.id);
    }
    destroyDraft() {
      this.chatDraftsManager.remove(this.args.thread.channel.id, this.args.thread.id);
    }
    resetDraft() {
      this.args.thread.resetDraft(this.currentUser);
    }
    get draft() {
      return this.args.thread.draft;
    }
    get disabled() {
      return !this.chat.userCanInteractWithChat || !this.args.thread.channel.canModifyMessages(this.currentUser);
    }
    get presenceChannelName() {
      const thread = this.args.thread;
      return `/chat-reply/${thread.channel.id}/thread/${thread.id}`;
    }
    get placeholder() {
      return _discourseI18n.default.t("chat.placeholder_thread");
    }
    lastUserMessage(user) {
      return this.args.thread.messagesManager.findLastUserMessage(user);
    }
    handleEscape(event) {
      if (this.draft.editing) {
        event.stopPropagation();
        this.args.thread.draft = _chatMessage.default.createDraftMessage(this.args.thread.channel, {
          user: this.currentUser,
          thread: this.args.thread
        });
        return;
      }
      if (this.isFocused) {
        event.stopPropagation();
        this.composer.blur();
      } else {
        this.pane.close().then(() => {
          this.channelComposer.focus();
        });
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "channelComposer", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "composer", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "pane", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "chatDraftsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "persistDraft", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "persistDraft"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "destroyDraft", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "destroyDraft"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "resetDraft", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "resetDraft"), _class.prototype)), _class));
});
define("discourse/plugins/chat/discourse/components/chat/drawer-routes/channel-thread", ["exports", "@glimmer/component", "@ember/helper", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/render-modifiers/modifiers/did-update", "@ember/service", "discourse/lib/ajax-error", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/navbar", "discourse/plugins/chat/discourse/components/chat-thread", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _object, _didInsert, _didUpdate, _service, _ajaxError, _discourseI18n, _navbar, _chatThread, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatDrawerRoutesChannelThread = _exports.default = (_class = (_class2 = class ChatDrawerRoutesChannelThread extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor2, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor3, this);
      _initializerDefineProperty(this, "chatHistory", _descriptor4, this);
    }
    get backButton() {
      const link1 = {
        models: this.chat.activeChannel?.routeModels
      };
      if (this.chatHistory.previousRoute?.name === "chat.channel.threads") {
        link1.title = _discourseI18n.default.t("chat.return_to_threads_list");
        link1.route = "chat.channel.threads";
      } else if (this.chatHistory.previousRoute?.name === "chat.threads") {
        link1.title = _discourseI18n.default.t("chat.my_threads.title");
        link1.route = "chat.threads";
        link1.models = [];
      } else {
        link1.title = _discourseI18n.default.t("chat.return_to_channel");
        link1.route = "chat.channel";
      }
      return link1;
    }
    get threadTitle() {
      return this.chat.activeChannel?.activeThread?.title ?? _discourseI18n.default.t("chat.thread.label");
    }
    async fetchChannelAndThread() {
      if (!this.args.params?.channelId || !this.args.params?.threadId) {
        return;
      }
      try {
        const channel1 = await this.chatChannelsManager.find(this.args.params.channelId);
        this.chat.activeChannel = channel1;
        channel1.threadsManager.find(channel1.id, this.args.params.threadId).then(thread1 => {
          this.chat.activeChannel.activeThread = thread1;
        });
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <Navbar @onClick={{this.chat.toggleDrawer}} as |navbar|>
        <navbar.BackButton
          @title={{this.backButton.title}}
          @route={{this.backButton.route}}
          @routeModels={{this.backButton.models}}
        />
        <navbar.Title @title={{this.threadTitle}} @icon="discourse-threads" />
        <navbar.Actions as |action|>
          <action.ToggleDrawerButton />
          <action.FullPageButton />
          <action.CloseDrawerButton />
        </navbar.Actions>
      </Navbar>
  
      {{#if this.chatStateManager.isDrawerExpanded}}
        <div
          class="chat-drawer-content"
          {{didInsert this.fetchChannelAndThread}}
          {{didUpdate this.fetchChannelAndThread @params.channelId}}
          {{didUpdate this.fetchChannelAndThread @params.threadId}}
        >
          {{#each (array this.chat.activeChannel.activeThread) as |thread|}}
            {{#if thread}}
              <ChatThread
                @thread={{thread}}
                @targetMessageId={{@params.messageId}}
              />
            {{/if}}
          {{/each}}
        </div>
      {{/if}}
    
  */
  {
    "id": "+K4E20f5",
    "block": "[[[1,\"\\n    \"],[8,[32,0],null,[[\"@onClick\"],[[30,0,[\"chat\",\"toggleDrawer\"]]]],[[\"default\"],[[[[1,\"\\n      \"],[8,[30,1,[\"BackButton\"]],null,[[\"@title\",\"@route\",\"@routeModels\"],[[30,0,[\"backButton\",\"title\"]],[30,0,[\"backButton\",\"route\"]],[30,0,[\"backButton\",\"models\"]]]],null],[1,\"\\n      \"],[8,[30,1,[\"Title\"]],null,[[\"@title\",\"@icon\"],[[30,0,[\"threadTitle\"]],\"discourse-threads\"]],null],[1,\"\\n      \"],[8,[30,1,[\"Actions\"]],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,2,[\"ToggleDrawerButton\"]],null,null,null],[1,\"\\n        \"],[8,[30,2,[\"FullPageButton\"]],null,null,null],[1,\"\\n        \"],[8,[30,2,[\"CloseDrawerButton\"]],null,null,null],[1,\"\\n      \"]],[2]]]]],[1,\"\\n    \"]],[1]]]]],[1,\"\\n\\n\"],[41,[30,0,[\"chatStateManager\",\"isDrawerExpanded\"]],[[[1,\"      \"],[11,0],[24,0,\"chat-drawer-content\"],[4,[32,1],[[30,0,[\"fetchChannelAndThread\"]]],null],[4,[32,2],[[30,0,[\"fetchChannelAndThread\"]],[30,3,[\"channelId\"]]],null],[4,[32,2],[[30,0,[\"fetchChannelAndThread\"]],[30,3,[\"threadId\"]]],null],[12],[1,\"\\n\"],[42,[28,[31,2],[[28,[31,2],[[28,[32,3],[[30,0,[\"chat\",\"activeChannel\",\"activeThread\"]]],null]],null]],null],null,[[[41,[30,4],[[[1,\"            \"],[8,[32,4],null,[[\"@thread\",\"@targetMessageId\"],[[30,4],[30,3,[\"messageId\"]]]],null],[1,\"\\n\"]],[]],null]],[4]],null],[1,\"      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"navbar\",\"action\",\"@params\",\"thread\"],false,[\"if\",\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/drawer-routes/channel-thread.js",
    "scope": () => [_navbar.default, _didInsert.default, _didUpdate.default, _helper.array, _chatThread.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatHistory", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "fetchChannelAndThread", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "fetchChannelAndThread"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/drawer-routes/channel-threads", ["exports", "@glimmer/component", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/service", "discourse/helpers/replace-emoji", "discourse/lib/ajax-error", "discourse-common/helpers/html-safe", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/navbar", "discourse/plugins/chat/discourse/components/chat-thread-list", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _didInsert, _service, _replaceEmoji, _ajaxError, _htmlSafe, _discourseI18n, _navbar, _chatThreadList, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatDrawerRoutesChannelThreads = _exports.default = (_class = (_class2 = class ChatDrawerRoutesChannelThreads extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor2, this);
      _defineProperty(this, "backLinkTitle", _discourseI18n.default.t("chat.return_to_list"));
    }
    get title() {
      return (0, _htmlSafe.default)(_discourseI18n.default.t("chat.threads.list") + " - " + (0, _replaceEmoji.default)(this.chat.activeChannel.title));
    }
    async fetchChannel() {
      if (!this.args.params?.channelId) {
        return;
      }
      try {
        const channel1 = await this.chatChannelsManager.find(this.args.params.channelId);
        this.chat.activeChannel = channel1;
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.chat.activeChannel}}
        <Navbar @onClick={{this.chat.toggleDrawer}} as |navbar|>
          <navbar.BackButton
            @title={{this.backLinkTitle}}
            @route="chat.channel"
            @routeModels={{this.chat.activeChannel.routeModels}}
          />
          <navbar.Title @title={{this.title}} @icon="discourse-threads" />
          <navbar.Actions as |action|>
            <action.ToggleDrawerButton />
            <action.FullPageButton />
            <action.CloseDrawerButton />
          </navbar.Actions>
        </Navbar>
      {{/if}}
  
      <div class="chat-drawer-content" {{didInsert this.fetchChannel}}>
        {{#if this.chat.activeChannel}}
          <ChatThreadList
            @channel={{this.chat.activeChannel}}
            @includeHeader={{false}}
          />
        {{/if}}
      </div>
    
  */
  {
    "id": "pvb2+2ix",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"chat\",\"activeChannel\"]],[[[1,\"      \"],[8,[32,0],null,[[\"@onClick\"],[[30,0,[\"chat\",\"toggleDrawer\"]]]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"BackButton\"]],null,[[\"@title\",\"@route\",\"@routeModels\"],[[30,0,[\"backLinkTitle\"]],\"chat.channel\",[30,0,[\"chat\",\"activeChannel\",\"routeModels\"]]]],null],[1,\"\\n        \"],[8,[30,1,[\"Title\"]],null,[[\"@title\",\"@icon\"],[[30,0,[\"title\"]],\"discourse-threads\"]],null],[1,\"\\n        \"],[8,[30,1,[\"Actions\"]],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,2,[\"ToggleDrawerButton\"]],null,null,null],[1,\"\\n          \"],[8,[30,2,[\"FullPageButton\"]],null,null,null],[1,\"\\n          \"],[8,[30,2,[\"CloseDrawerButton\"]],null,null,null],[1,\"\\n        \"]],[2]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n    \"],[11,0],[24,0,\"chat-drawer-content\"],[4,[32,1],[[30,0,[\"fetchChannel\"]]],null],[12],[1,\"\\n\"],[41,[30,0,[\"chat\",\"activeChannel\"]],[[[1,\"        \"],[8,[32,2],null,[[\"@channel\",\"@includeHeader\"],[[30,0,[\"chat\",\"activeChannel\"]],false]],null],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n  \"]],[\"navbar\",\"action\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/drawer-routes/channel-threads.js",
    "scope": () => [_navbar.default, _didInsert.default, _chatThreadList.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "fetchChannel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "fetchChannel"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/drawer-routes/channel", ["exports", "@glimmer/component", "@ember/helper", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/render-modifiers/modifiers/did-update", "@ember/service", "discourse/plugins/chat/discourse/components/chat/navbar", "discourse/plugins/chat/discourse/components/chat-channel", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _object, _didInsert, _didUpdate, _service, _navbar, _chatChannel, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatDrawerRoutesChannel = _exports.default = (_class = (_class2 = class ChatDrawerRoutesChannel extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor2, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor3, this);
    }
    fetchChannel() {
      if (!this.args.params?.channelId) {
        return;
      }
      return this.chatChannelsManager.find(this.args.params.channelId).then(channel1 => {
        this.chat.activeChannel = channel1;
      });
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <Navbar @onClick={{this.chat.toggleDrawer}} as |navbar|>
        <navbar.BackButton />
        <navbar.ChannelTitle @channel={{this.chat.activeChannel}} />
        <navbar.Actions as |action|>
          <action.ThreadsListButton @channel={{this.chat.activeChannel}} />
          <action.ToggleDrawerButton />
          <action.FullPageButton />
          <action.CloseDrawerButton />
        </navbar.Actions>
      </Navbar>
  
      {{#if this.chatStateManager.isDrawerExpanded}}
        <div
          class="chat-drawer-content"
          {{didInsert this.fetchChannel}}
          {{didUpdate this.fetchChannel @params.channelId}}
        >
          {{#if this.chat.activeChannel}}
            {{#each (array this.chat.activeChannel) as |channel|}}
              {{#if channel}}
                <ChatChannel
                  @targetMessageId={{readonly @params.messageId}}
                  @channel={{channel}}
                />
              {{/if}}
            {{/each}}
          {{/if}}
        </div>
      {{/if}}
    
  */
  {
    "id": "E3hq54z9",
    "block": "[[[1,\"\\n    \"],[8,[32,0],null,[[\"@onClick\"],[[30,0,[\"chat\",\"toggleDrawer\"]]]],[[\"default\"],[[[[1,\"\\n      \"],[8,[30,1,[\"BackButton\"]],null,null,null],[1,\"\\n      \"],[8,[30,1,[\"ChannelTitle\"]],null,[[\"@channel\"],[[30,0,[\"chat\",\"activeChannel\"]]]],null],[1,\"\\n      \"],[8,[30,1,[\"Actions\"]],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,2,[\"ThreadsListButton\"]],null,[[\"@channel\"],[[30,0,[\"chat\",\"activeChannel\"]]]],null],[1,\"\\n        \"],[8,[30,2,[\"ToggleDrawerButton\"]],null,null,null],[1,\"\\n        \"],[8,[30,2,[\"FullPageButton\"]],null,null,null],[1,\"\\n        \"],[8,[30,2,[\"CloseDrawerButton\"]],null,null,null],[1,\"\\n      \"]],[2]]]]],[1,\"\\n    \"]],[1]]]]],[1,\"\\n\\n\"],[41,[30,0,[\"chatStateManager\",\"isDrawerExpanded\"]],[[[1,\"      \"],[11,0],[24,0,\"chat-drawer-content\"],[4,[32,1],[[30,0,[\"fetchChannel\"]]],null],[4,[32,2],[[30,0,[\"fetchChannel\"]],[30,3,[\"channelId\"]]],null],[12],[1,\"\\n\"],[41,[30,0,[\"chat\",\"activeChannel\"]],[[[42,[28,[31,2],[[28,[31,2],[[28,[32,3],[[30,0,[\"chat\",\"activeChannel\"]]],null]],null]],null],null,[[[41,[30,4],[[[1,\"              \"],[8,[32,4],null,[[\"@targetMessageId\",\"@channel\"],[[28,[31,3],[[30,3,[\"messageId\"]]],null],[30,4]]],null],[1,\"\\n\"]],[]],null]],[4]],null]],[]],null],[1,\"      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"navbar\",\"action\",\"@params\",\"channel\"],false,[\"if\",\"each\",\"-track-array\",\"readonly\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/drawer-routes/channel.js",
    "scope": () => [_navbar.default, _didInsert.default, _didUpdate.default, _helper.array, _chatChannel.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "fetchChannel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "fetchChannel"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/drawer-routes/channels", ["exports", "@glimmer/component", "@ember/service", "discourse-common/helpers/i18n", "discourse/plugins/chat/discourse/components/channels-list", "discourse/plugins/chat/discourse/components/chat/navbar", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _i18n, _channelsList, _navbar, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatDrawerRoutesChannels = _exports.default = (_class = (_class2 = class ChatDrawerRoutesChannels extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor2, this);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <Navbar @onClick={{this.chat.toggleDrawer}} as |navbar|>
        <navbar.Title @title={{i18n "chat.heading"}} />
        <navbar.Actions as |action|>
          <action.ToggleDrawerButton />
          <action.FullPageButton />
          <action.CloseDrawerButton />
        </navbar.Actions>
      </Navbar>
  
      {{#if this.chatStateManager.isDrawerExpanded}}
        <div class="chat-drawer-content">
          <ChannelsList />
        </div>
      {{/if}}
    
  */
  {
    "id": "mLeFOuLH",
    "block": "[[[1,\"\\n    \"],[8,[32,0],null,[[\"@onClick\"],[[30,0,[\"chat\",\"toggleDrawer\"]]]],[[\"default\"],[[[[1,\"\\n      \"],[8,[30,1,[\"Title\"]],null,[[\"@title\"],[[28,[32,1],[\"chat.heading\"],null]]],null],[1,\"\\n      \"],[8,[30,1,[\"Actions\"]],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,2,[\"ToggleDrawerButton\"]],null,null,null],[1,\"\\n        \"],[8,[30,2,[\"FullPageButton\"]],null,null,null],[1,\"\\n        \"],[8,[30,2,[\"CloseDrawerButton\"]],null,null,null],[1,\"\\n      \"]],[2]]]]],[1,\"\\n    \"]],[1]]]]],[1,\"\\n\\n\"],[41,[30,0,[\"chatStateManager\",\"isDrawerExpanded\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-drawer-content\"],[12],[1,\"\\n        \"],[8,[32,2],null,null,null],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"navbar\",\"action\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/drawer-routes/channels.js",
    "scope": () => [_navbar.default, _i18n.default, _channelsList.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/drawer-routes/threads", ["exports", "@glimmer/component", "@ember/service", "discourse-common/helpers/i18n", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/navbar", "discourse/plugins/chat/discourse/components/user-threads", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _i18n, _discourseI18n, _navbar, _userThreads, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatDrawerRoutesThreads = _exports.default = (_class = (_class2 = class ChatDrawerRoutesThreads extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor2, this);
      _defineProperty(this, "backButtonTitle", _discourseI18n.default.t("chat.return_to_list"));
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <Navbar @onClick={{this.chat.toggleDrawer}} as |navbar|>
        <navbar.BackButton @title={{this.backButtonTitle}} />
        <navbar.Title
          @title={{i18n "chat.my_threads.title"}}
          @icon="discourse-threads"
          as |title|
        >
          <title.SubTitle @title={{this.chat.activeChannel.title}} />
        </navbar.Title>
        <navbar.Actions as |action|>
          <action.ThreadsListButton />
          <action.ToggleDrawerButton />
          <action.FullPageButton />
          <action.CloseDrawerButton />
        </navbar.Actions>
      </Navbar>
  
      {{#if this.chatStateManager.isDrawerExpanded}}
        <div class="chat-drawer-content">
          <UserThreads />
        </div>
      {{/if}}
    
  */
  {
    "id": "TihsSBn7",
    "block": "[[[1,\"\\n    \"],[8,[32,0],null,[[\"@onClick\"],[[30,0,[\"chat\",\"toggleDrawer\"]]]],[[\"default\"],[[[[1,\"\\n      \"],[8,[30,1,[\"BackButton\"]],null,[[\"@title\"],[[30,0,[\"backButtonTitle\"]]]],null],[1,\"\\n      \"],[8,[30,1,[\"Title\"]],null,[[\"@title\",\"@icon\"],[[28,[32,1],[\"chat.my_threads.title\"],null],\"discourse-threads\"]],[[\"default\"],[[[[1,\"\\n        \"],[8,[30,2,[\"SubTitle\"]],null,[[\"@title\"],[[30,0,[\"chat\",\"activeChannel\",\"title\"]]]],null],[1,\"\\n      \"]],[2]]]]],[1,\"\\n      \"],[8,[30,1,[\"Actions\"]],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,3,[\"ThreadsListButton\"]],null,null,null],[1,\"\\n        \"],[8,[30,3,[\"ToggleDrawerButton\"]],null,null,null],[1,\"\\n        \"],[8,[30,3,[\"FullPageButton\"]],null,null,null],[1,\"\\n        \"],[8,[30,3,[\"CloseDrawerButton\"]],null,null,null],[1,\"\\n      \"]],[3]]]]],[1,\"\\n    \"]],[1]]]]],[1,\"\\n\\n\"],[41,[30,0,[\"chatStateManager\",\"isDrawerExpanded\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-drawer-content\"],[12],[1,\"\\n        \"],[8,[32,2],null,null,null],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"navbar\",\"title\",\"action\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/drawer-routes/threads.js",
    "scope": () => [_navbar.default, _i18n.default, _userThreads.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/form", ["exports", "@glimmer/component", "discourse/plugins/chat/discourse/components/chat/form/section", "@ember/template-factory", "@ember/component"], function (_exports, _component, _section, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatForm extends _component.default {
    get yieldableArgs() {
      return {
        section: _section.default
      };
    }
  }
  _exports.default = ChatForm;
  _class = ChatForm;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-form">
        {{yield this.yieldableArgs}}
      </div>
    
  */
  {
    "id": "3+vq4mln",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-form\"],[12],[1,\"\\n      \"],[18,1,[[30,0,[\"yieldableArgs\"]]]],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"&default\"],false,[\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/form.js",
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/form/row", ["exports", "@ember/routing", "discourse/helpers/concat-class", "discourse-common/helpers/d-icon", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _routing, _concatClass, _dIcon, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ChatFormRow = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    {{#if @route}}
      <LinkTo
        @route={{@route}}
        @models={{@routeModels}}
        class={{concatClass "chat-form__row -link" (if @separator "-separator")}}
      >
        <div class="chat-form__row-content">
          {{@label}}
          {{icon "chevron-right" class="chat-form__row-icon"}}
        </div>
      </LinkTo>
    {{else}}
      <div class={{concatClass "chat-form__row" (if @separator "-separator")}}>
        <div class="chat-form__row-content">
          {{#if @label}}
            <span class="chat-form__row-label">{{@label}}</span>
          {{/if}}
  
          {{#if (has-block)}}
            <span class="chat-form__row-label">
              {{yield}}
            </span>
          {{/if}}
  
          {{#if (has-block "action")}}
            <div class="chat-form__row-action">{{yield to="action"}}</div>
          {{/if}}
        </div>
  
        {{#if (has-block "description")}}
          <div class="chat-form__row-description">
            {{yield to="description"}}
          </div>
        {{/if}}
      </div>
    {{/if}}
  
  */
  {
    "id": "32OcXMVo",
    "block": "[[[1,\"\\n\"],[41,[30,1],[[[1,\"    \"],[8,[32,0],[[16,0,[28,[32,1],[\"chat-form__row -link\",[52,[30,2],\"-separator\"]],null]]],[[\"@route\",\"@models\"],[[30,1],[30,3]]],[[\"default\"],[[[[1,\"\\n      \"],[10,0],[14,0,\"chat-form__row-content\"],[12],[1,\"\\n        \"],[1,[30,4]],[1,\"\\n        \"],[1,[28,[32,2],[\"chevron-right\"],[[\"class\"],[\"chat-form__row-icon\"]]]],[1,\"\\n      \"],[13],[1,\"\\n    \"]],[]]]]],[1,\"\\n\"]],[]],[[[1,\"    \"],[10,0],[15,0,[28,[32,1],[\"chat-form__row\",[52,[30,2],\"-separator\"]],null]],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-form__row-content\"],[12],[1,\"\\n\"],[41,[30,4],[[[1,\"          \"],[10,1],[14,0,\"chat-form__row-label\"],[12],[1,[30,4]],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[48,[30,5]],[[[1,\"          \"],[10,1],[14,0,\"chat-form__row-label\"],[12],[1,\"\\n            \"],[18,5,null],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[48,[30,6]],[[[1,\"          \"],[10,0],[14,0,\"chat-form__row-action\"],[12],[18,6,null],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n\\n\"],[41,[48,[30,7]],[[[1,\"        \"],[10,0],[14,0,\"chat-form__row-description\"],[12],[1,\"\\n          \"],[18,7,null],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n\"]],[]]]],[\"@route\",\"@separator\",\"@routeModels\",\"@label\",\"&default\",\"&action\",\"&description\"],false,[\"if\",\"has-block\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/form/row.js",
    "scope": () => [_routing.LinkTo, _concatClass.default, _dIcon.default],
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = ChatFormRow;
});
define("discourse/plugins/chat/discourse/components/chat/form/section", ["exports", "@glimmer/component", "discourse/plugins/chat/discourse/components/chat/form/row", "@ember/template-factory", "@ember/component"], function (_exports, _component, _row, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatFormSection extends _component.default {
    get yieldableArgs() {
      return {
        row: _row.default
      };
    }
  }
  _exports.default = ChatFormSection;
  _class = ChatFormSection;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-form__section" ...attributes>
        {{#if @title}}
          <div class="chat-form__section-title">
            {{@title}}
          </div>
        {{/if}}
  
        <div class="chat-form__section-content">
          {{yield this.yieldableArgs}}
        </div>
      </div>
    
  */
  {
    "id": "wa01zsEX",
    "block": "[[[1,\"\\n    \"],[11,0],[24,0,\"chat-form__section\"],[17,1],[12],[1,\"\\n\"],[41,[30,2],[[[1,\"        \"],[10,0],[14,0,\"chat-form__section-title\"],[12],[1,\"\\n          \"],[1,[30,2]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[10,0],[14,0,\"chat-form__section-content\"],[12],[1,\"\\n        \"],[18,3,[[30,0,[\"yieldableArgs\"]]]],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"&attrs\",\"@title\",\"&default\"],false,[\"if\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/form/section.js",
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/header/icon", ["exports", "@glimmer/component", "@ember/service", "discourse/helpers/concat-class", "discourse-common/helpers/d-icon", "discourse-common/lib/get-url", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/header/icon/unread-indicator", "discourse/plugins/chat/discourse/lib/get-user-chat-separate-sidebar-mode", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _concatClass, _dIcon, _getUrl, _discourseI18n, _unreadIndicator, _getUserChatSeparateSidebarMode, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatHeaderIcon = _exports.default = (_class = (_class2 = class ChatHeaderIcon extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
      _initializerDefineProperty(this, "site", _descriptor2, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor3, this);
      _initializerDefineProperty(this, "router", _descriptor4, this);
    }
    get showUnreadIndicator() {
      if (this.chatStateManager.isFullPageActive && this.site.desktopView) {
        return false;
      }
      return !this.currentUserInDnD;
    }
    get currentUserInDnD() {
      return this.args.currentUserInDnD || this.currentUser.isInDoNotDisturb();
    }
    get chatSeparateSidebarMode() {
      return (0, _getUserChatSeparateSidebarMode.getUserChatSeparateSidebarMode)(this.currentUser);
    }
    get isActive() {
      return this.args.isActive || this.chatStateManager.isFullPageActive || this.chatStateManager.isDrawerActive;
    }
    get title() {
      if (this.chatStateManager.isFullPageActive && !this.chatSeparateSidebarMode.never && !this.site.mobileView) {
        return _discourseI18n.default.t("sidebar.panels.forum.label");
      }
      return _discourseI18n.default.t("chat.title_capitalized");
    }
    get icon() {
      if (this.chatStateManager.isFullPageActive && !this.chatSeparateSidebarMode.never && !this.site.mobileView) {
        return "random";
      }
      return "d-chat";
    }
    get href() {
      if (this.site.mobileView && this.chatStateManager.isFullPageActive) {
        return (0, _getUrl.default)("/chat");
      }
      if (this.chatStateManager.isFullPageActive && !this.chatSeparateSidebarMode.never) {
        return (0, _getUrl.default)(this.chatStateManager.lastKnownAppURL || "/");
      }
      if (this.chatStateManager.isDrawerActive) {
        return (0, _getUrl.default)("/chat");
      }
      return (0, _getUrl.default)(this.chatStateManager.lastKnownChatURL || "/chat");
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <a
        href={{this.href}}
        tabindex="0"
        class={{concatClass "icon" "btn-flat" (if this.isActive "active")}}
        title={{this.title}}
      >
        {{~icon this.icon~}}
        {{#if this.showUnreadIndicator}}
          <ChatHeaderIconUnreadIndicator
            @urgentCount={{@urgentCount}}
            @unreadCount={{@unreadCount}}
            @indicatorPreference={{@indicatorPreference}}
          />
        {{/if}}
      </a>
    
  */
  {
    "id": "ZfeE18XD",
    "block": "[[[1,\"\\n    \"],[10,3],[15,6,[30,0,[\"href\"]]],[14,\"tabindex\",\"0\"],[15,0,[28,[32,0],[\"icon\",\"btn-flat\",[52,[30,0,[\"isActive\"]],\"active\"]],null]],[15,\"title\",[30,0,[\"title\"]]],[12],[1,[28,[32,1],[[30,0,[\"icon\"]]],null]],[41,[30,0,[\"showUnreadIndicator\"]],[[[1,\"        \"],[8,[32,2],null,[[\"@urgentCount\",\"@unreadCount\",\"@indicatorPreference\"],[[30,1],[30,2],[30,3]]],null],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@urgentCount\",\"@unreadCount\",\"@indicatorPreference\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/header/icon.js",
    "scope": () => [_concatClass.default, _dIcon.default, _unreadIndicator.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/header/icon/unread-indicator", ["exports", "@glimmer/component", "@ember/service", "discourse/plugins/chat/discourse/controllers/preferences-chat", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _preferencesChat, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2, _hasAnyIndicatorPreference;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const MAX_UNREAD_COUNT = 99;
  let ChatHeaderIconUnreadIndicator = _exports.default = (_class = (_hasAnyIndicatorPreference = /*#__PURE__*/new WeakSet(), (_class2 = class ChatHeaderIconUnreadIndicator extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _hasAnyIndicatorPreference);
      _initializerDefineProperty(this, "chatTrackingStateManager", _descriptor, this);
      _initializerDefineProperty(this, "currentUser", _descriptor2, this);
    }
    get urgentCount() {
      return this.args.urgentCount || this.chatTrackingStateManager.allChannelUrgentCount;
    }
    get mentionCount() {
      return this.args.mentionCount || this.chatTrackingStateManager.allChannelMentionCount;
    }
    get unreadCount() {
      return this.args.unreadCount || this.chatTrackingStateManager.publicChannelUnreadCount;
    }
    get indicatorPreference() {
      return this.args.indicatorPreference || this.currentUser.user_option.chat_header_indicator_preference;
    }
    get showUrgentIndicator() {
      if (this.onlyMentions) {
        return this.mentionCount > 0;
      }
      return this.urgentCount > 0 && _classPrivateMethodGet(this, _hasAnyIndicatorPreference, _hasAnyIndicatorPreference2).call(this, [_preferencesChat.HEADER_INDICATOR_PREFERENCE_ALL_NEW, _preferencesChat.HEADER_INDICATOR_PREFERENCE_DM_AND_MENTIONS]);
    }
    get showUnreadIndicator() {
      return this.unreadCount > 0 && _classPrivateMethodGet(this, _hasAnyIndicatorPreference, _hasAnyIndicatorPreference2).call(this, [_preferencesChat.HEADER_INDICATOR_PREFERENCE_ALL_NEW]);
    }
    get urgentCountLabel() {
      let totalCount1 = this.onlyMentions ? this.mentionCount : this.urgentCount;
      return totalCount1 > MAX_UNREAD_COUNT ? `${MAX_UNREAD_COUNT}+` : totalCount1;
    }
    get onlyMentions() {
      return _classPrivateMethodGet(this, _hasAnyIndicatorPreference, _hasAnyIndicatorPreference2).call(this, [_preferencesChat.HEADER_INDICATOR_PREFERENCE_ONLY_MENTIONS]);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.showUrgentIndicator}}
        <div class="chat-channel-unread-indicator -urgent">
          <div class="chat-channel-unread-indicator__number">
            {{this.urgentCountLabel}}
          </div>
        </div>
      {{else if this.showUnreadIndicator}}
        <div class="chat-channel-unread-indicator"></div>
      {{/if}}
    
  */
  {
    "id": "DCGuCxLO",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"showUrgentIndicator\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-channel-unread-indicator -urgent\"],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-channel-unread-indicator__number\"],[12],[1,\"\\n          \"],[1,[30,0,[\"urgentCountLabel\"]]],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],[[[41,[30,0,[\"showUnreadIndicator\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-channel-unread-indicator\"],[12],[13],[1,\"\\n    \"]],[]],null]],[]]],[1,\"  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/header/icon/unread-indicator.js",
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatTrackingStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  function _hasAnyIndicatorPreference2(preferences1) {
    if (!this.currentUser || this.indicatorPreference === _preferencesChat.HEADER_INDICATOR_PREFERENCE_NEVER) {
      return false;
    }
    return preferences1.includes(this.indicatorPreference);
  }
});
define("discourse/plugins/chat/discourse/components/chat/list/empty-state", ["exports", "@glimmer/component", "@ember/template-factory", "@ember/component"], function (_exports, _component, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class EmptyState extends _component.default {}
  _exports.default = EmptyState;
  _class = EmptyState;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="c-list-empty-state" ...attributes>
        {{yield}}
      </div>
    
  */
  {
    "id": "7XwB1TCv",
    "block": "[[[1,\"\\n    \"],[11,0],[24,0,\"c-list-empty-state\"],[17,1],[12],[1,\"\\n      \"],[18,2,null],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"&attrs\",\"&default\"],false,[\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/list/empty-state.js",
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/list/index", ["exports", "@glimmer/component", "@ember/helper", "@ember/object", "ember-modifier", "discourse/components/conditional-loading-spinner", "discourse/lib/is-element-in-viewport", "discourse-common/config/environment", "discourse-common/lib/debounce", "discourse/plugins/chat/discourse/components/chat/list/empty-state", "discourse/plugins/chat/discourse/components/chat/list/item", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _object, _emberModifier, _conditionalLoadingSpinner, _isElementInViewport, _environment, _debounce, _emptyState, _item, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let List = _exports.default = (_class = (_class2 = class List extends _component.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "loadMore", (0, _emberModifier.modifier)(element1 => {
        this.intersectionObserver = new IntersectionObserver(this.loadCollection);
        this.intersectionObserver.observe(element1);
        return () => {
          this.intersectionObserver.disconnect();
        };
      }));
      _defineProperty(this, "fill", (0, _emberModifier.modifier)(element1 => {
        this.resizeObserver = new ResizeObserver(() => {
          if ((0, _isElementInViewport.default)(element1)) {
            this.loadCollection();
          }
        });
        this.resizeObserver.observe(element1);
        return () => {
          this.resizeObserver.disconnect();
        };
      }));
    }
    get itemComponent() {
      return this.args.itemComponent ?? _item.default;
    }
    get emptyStateComponent() {
      return _emptyState.default;
    }
    loadCollection() {
      (0, _debounce.default)(this, this.debouncedLoadCollection, _environment.INPUT_DELAY);
    }
    async debouncedLoadCollection() {
      await this.args.collection.load({
        limit: 10
      });
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="c-list">
        <div {{this.fill}} ...attributes>
          {{#each @collection.items as |item|}}
            {{yield (hash Item=(component this.itemComponent item=item))}}
          {{else}}
            {{#if @collection.fetchedOnce}}
              {{yield (hash EmptyState=this.emptyStateComponent)}}
            {{/if}}
          {{/each}}
        </div>
  
        <div {{this.loadMore}}>
          <br />
        </div>
  
        <ConditionalLoadingSpinner @condition={{@collection.loading}} />
      </div>
    
  */
  {
    "id": "pZYJQ9vz",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"c-list\"],[12],[1,\"\\n      \"],[11,0],[17,1],[4,[30,0,[\"fill\"]],null,null],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[30,2,[\"items\"]]],null]],null],null,[[[1,\"          \"],[18,4,[[28,[32,0],null,[[\"Item\"],[[50,[30,0,[\"itemComponent\"]],0,null,[[\"item\"],[[30,3]]]]]]]]],[1,\"\\n\"]],[3]],[[[41,[30,2,[\"fetchedOnce\"]],[[[1,\"            \"],[18,4,[[28,[32,0],null,[[\"EmptyState\"],[[30,0,[\"emptyStateComponent\"]]]]]]],[1,\"\\n\"]],[]],null]],[]]],[1,\"      \"],[13],[1,\"\\n\\n      \"],[11,0],[4,[30,0,[\"loadMore\"]],null,null],[12],[1,\"\\n        \"],[10,\"br\"],[12],[13],[1,\"\\n      \"],[13],[1,\"\\n\\n      \"],[8,[32,1],null,[[\"@condition\"],[[30,2,[\"loading\"]]]],null],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"&attrs\",\"@collection\",\"item\",\"&default\"],false,[\"each\",\"-track-array\",\"yield\",\"component\",\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/list/index.js",
    "scope": () => [_helper.hash, _conditionalLoadingSpinner.default],
    "isStrictMode": true
  }), _class2), _class2), (_applyDecoratedDescriptor(_class.prototype, "loadCollection", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "loadCollection"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/list/item", ["exports", "@glimmer/component", "@ember/template-factory", "@ember/component"], function (_exports, _component, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class Item extends _component.default {}
  _exports.default = Item;
  _class = Item;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{yield @item}}
    
  */
  {
    "id": "RlURXGnU",
    "block": "[[[1,\"\\n    \"],[18,2,[[30,1]]],[1,\"\\n  \"]],[\"@item\",\"&default\"],false,[\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/list/item.js",
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/add-members", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse/lib/ajax-error", "discourse-i18n", "truth-helpers/helpers/gte", "discourse/plugins/chat/discourse/components/chat/message-creator/members-count", "discourse/plugins/chat/discourse/components/chat/message-creator/members-selector", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _dButton, _ajaxError, _discourseI18n, _gte, _membersCount, _membersSelector, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let AddMembers = _exports.default = (_class = (_class2 = class AddMembers extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatApi", _descriptor2, this);
      _initializerDefineProperty(this, "router", _descriptor3, this);
      _initializerDefineProperty(this, "toasts", _descriptor4, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor5, this);
      _initializerDefineProperty(this, "loadingSlider", _descriptor6, this);
    }
    get membersCount() {
      return this.args.members?.length + (this.args.channel?.membershipsCount ?? 0);
    }
    async saveGroupMembers() {
      try {
        this.loadingSlider.transitionStarted();
        await this.chatApi.addMembersToChannel(this.args.channel.id, this.args.members.mapBy("model.username"));
        this.toasts.success({
          data: {
            message: _discourseI18n.default.t("saved")
          }
        });
        this.router.transitionTo("chat.channel", ...this.args.channel.routeModels);
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      } finally {
        this.loadingSlider.transitionEnded();
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-message-creator__add-members-container">
        <div class="chat-message-creator__add-members">
          <MembersCount
            @count={{this.membersCount}}
            @max={{this.siteSettings.chat_max_direct_message_users}}
          />
  
          <MembersSelector
            @channel={{@channel}}
            @members={{@members}}
            @onChange={{@onChangeMembers}}
            @close={{@close}}
            @cancel={{@cancel}}
            @maxReached={{gte
              this.membersCount
              this.siteSettings.chat_max_direct_message_users
            }}
          />
  
          {{#if @members.length}}
            <div class="chat-message-creator__add-members-footer-container">
              <div class="chat-message-creator__add-members-footer">
                <DButton class="btn-flat" @label="cancel" @action={{@cancel}} />
  
                <DButton
                  class="btn-primary add-to-channel"
                  @label="chat.direct_message_creator.add_to_channel"
                  @action={{this.saveGroupMembers}}
                />
              </div>
            </div>
          {{/if}}
        </div>
      </div>
    
  */
  {
    "id": "d4SQ7xTO",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-message-creator__add-members-container\"],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-message-creator__add-members\"],[12],[1,\"\\n        \"],[8,[32,0],null,[[\"@count\",\"@max\"],[[30,0,[\"membersCount\"]],[30,0,[\"siteSettings\",\"chat_max_direct_message_users\"]]]],null],[1,\"\\n\\n        \"],[8,[32,1],null,[[\"@channel\",\"@members\",\"@onChange\",\"@close\",\"@cancel\",\"@maxReached\"],[[30,1],[30,2],[30,3],[30,4],[30,5],[28,[32,2],[[30,0,[\"membersCount\"]],[30,0,[\"siteSettings\",\"chat_max_direct_message_users\"]]],null]]],null],[1,\"\\n\\n\"],[41,[30,2,[\"length\"]],[[[1,\"          \"],[10,0],[14,0,\"chat-message-creator__add-members-footer-container\"],[12],[1,\"\\n            \"],[10,0],[14,0,\"chat-message-creator__add-members-footer\"],[12],[1,\"\\n              \"],[8,[32,3],[[24,0,\"btn-flat\"]],[[\"@label\",\"@action\"],[\"cancel\",[30,5]]],null],[1,\"\\n\\n              \"],[8,[32,3],[[24,0,\"btn-primary add-to-channel\"]],[[\"@label\",\"@action\"],[\"chat.direct_message_creator.add_to_channel\",[30,0,[\"saveGroupMembers\"]]]],null],[1,\"\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@channel\",\"@members\",\"@onChangeMembers\",\"@close\",\"@cancel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/add-members.js",
    "scope": () => [_membersCount.default, _membersSelector.default, _gte.default, _dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "toasts", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "loadingSlider", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "saveGroupMembers", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "saveGroupMembers"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/channel", ["exports", "@glimmer/component", "@ember/service", "discourse/helpers/concat-class", "truth-helpers/helpers/gt", "discourse/plugins/chat/discourse/components/channel-title", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _concatClass, _gt, _channelTitle, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let Channel = _exports.default = (_class = (_class2 = class Channel extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
    }
    get isUrgent() {
      return this.args.item.model.isDirectMessageChannel || this.args.item.model.isCategoryChannel && this.args.item.model.tracking.mentionCount > 0;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-message-creator__chatable -category-channel">
        <ChannelTitle @channel={{@item.model}} />
  
        {{#if (gt @item.tracking.unreadCount 0)}}
  
          <div
            class={{concatClass "unread-indicator" (if this.isUrgent "-urgent")}}
          ></div>
        {{/if}}
      </div>
    
  */
  {
    "id": "UqGCg8ta",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-message-creator__chatable -category-channel\"],[12],[1,\"\\n      \"],[8,[32,0],null,[[\"@channel\"],[[30,1,[\"model\"]]]],null],[1,\"\\n\\n\"],[41,[28,[32,1],[[30,1,[\"tracking\",\"unreadCount\"]],0],null],[[[1,\"\\n        \"],[10,0],[15,0,[28,[32,2],[\"unread-indicator\",[52,[30,0,[\"isUrgent\"]],\"-urgent\"]],null]],[12],[13],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@item\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/channel.js",
    "scope": () => [_channelTitle.default, _gt.default, _concatClass.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/constants", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MODES = void 0;
  const MODES = _exports.MODES = {
    search: "SEARCH",
    new_group: "NEW_GROUP",
    add_members: "ADD_MEMBERS"
  };
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/index", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/object", "discourse/plugins/chat/discourse/components/chat/message-creator/add-members", "discourse/plugins/chat/discourse/components/chat/message-creator/constants", "discourse/plugins/chat/discourse/components/chat/message-creator/new-group", "discourse/plugins/chat/discourse/components/chat/message-creator/search", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _object, _addMembers, _constants, _newGroup, _search, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessageCreator = _exports.default = (_class = (_class2 = class ChatMessageCreator extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "mode", _descriptor, this);
      _initializerDefineProperty(this, "members", _descriptor2, this);
    }
    get componentForMode() {
      switch (this.args.mode ?? this.mode) {
        case _constants.MODES.search:
          return _search.default;
        case _constants.MODES.new_group:
          return _newGroup.default;
        case _constants.MODES.add_members:
          return _addMembers.default;
      }
    }
    changeMode(mode1, members1 = []) {
      this.mode = mode1;
      this.changeMembers(members1);
    }
    changeMembers(members1) {
      this.members = members1;
    }
    cancelAction() {
      return this.args.onCancel?.() || this.changeMode(_constants.MODES.search);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-message-creator-container">
        <div class="chat-message-creator">
          <this.componentForMode
            @channel={{@channel}}
            @onChangeMode={{this.changeMode}}
            @onChangeMembers={{this.changeMembers}}
            @close={{@onClose}}
            @cancel={{this.cancelAction}}
            @members={{this.members}}
          />
        </div>
      </div>
    
  */
  {
    "id": "Ql0IvG1V",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-message-creator-container\"],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-message-creator\"],[12],[1,\"\\n        \"],[8,[30,0,[\"componentForMode\"]],null,[[\"@channel\",\"@onChangeMode\",\"@onChangeMembers\",\"@close\",\"@cancel\",\"@members\"],[[30,1],[30,0,[\"changeMode\"]],[30,0,[\"changeMembers\"]],[30,2],[30,0,[\"cancelAction\"]],[30,0,[\"members\"]]]],null],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@channel\",\"@onClose\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/index.js",
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "mode", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return _constants.MODES.search;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "members", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _applyDecoratedDescriptor(_class.prototype, "changeMode", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "changeMode"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "changeMembers", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "changeMembers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cancelAction", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "cancelAction"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/lib/chatables-loader", ["exports", "@ember/application", "@ember/service", "discourse/lib/ajax", "discourse/lib/ajax-error", "discourse-common/utils/decorators", "discourse/plugins/chat/discourse/models/chat-chatable"], function (_exports, _application, _service, _ajax, _ajaxError, _decorators, _chatChatable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _preloadedChannels, _injectTracking;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const MAX_RESULTS = 10;
  let ChatablesLoader = _exports.default = (_class = (_preloadedChannels = /*#__PURE__*/new WeakSet(), _injectTracking = /*#__PURE__*/new WeakSet(), class ChatablesLoader {
    constructor(context) {
      _classPrivateMethodInitSpec(this, _injectTracking);
      _classPrivateMethodInitSpec(this, _preloadedChannels);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor, this);
      _initializerDefineProperty(this, "loadingSlider", _descriptor2, this);
      (0, _application.setOwner)(this, (0, _application.getOwner)(context));
    }
    async search(term, options = {
      includeUsers: true,
      includeCategoryChannels: true,
      includeDirectMessageChannels: true,
      excludedUserIds: null,
      preloadChannels: false
    }) {
      this.request?.abort();
      if (!term && options.preloadChannels) {
        return _classPrivateMethodGet(this, _preloadedChannels, _preloadedChannels2).call(this);
      }
      if (!term) {
        return [];
      }
      try {
        this.loadingSlider.transitionStarted();
        this.request = (0, _ajax.ajax)("/chat/api/chatables", {
          data: {
            term,
            include_users: options.includeUsers,
            include_category_channels: options.includeCategoryChannels,
            include_direct_message_channels: options.includeDirectMessageChannels,
            excluded_memberships_channel_id: options.excludedMembershipsChannelId
          }
        });
        const results = await this.request;
        this.loadingSlider.transitionEnded();
        return [...results.users, ...results.direct_message_channels, ...results.category_channels].map(item => {
          const chatable = _chatChatable.default.create(item);
          chatable.tracking = _classPrivateMethodGet(this, _injectTracking, _injectTracking2).call(this, chatable);
          return chatable;
        }).slice(0, MAX_RESULTS);
      } catch (e) {
        (0, _ajaxError.popupAjaxError)(e);
      }
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "loadingSlider", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "search", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "search"), _class.prototype)), _class);
  function _preloadedChannels2() {
    return this.chatChannelsManager.allChannels.map(channel => {
      let chatable;
      if (channel.chatable?.users?.length === 1) {
        chatable = _chatChatable.default.createUser(channel.chatable.users[0]);
        chatable.tracking = _classPrivateMethodGet(this, _injectTracking, _injectTracking2).call(this, chatable);
      } else {
        chatable = _chatChatable.default.createChannel(channel);
        chatable.tracking = channel.tracking;
      }
      return chatable;
    }).filter(Boolean).slice(0, MAX_RESULTS);
  }
  function _injectTracking2(chatable) {
    return this.chatChannelsManager.allChannels.find(channel => channel.id === chatable.model.id)?.tracking;
  }
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/lib/iterate-list", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getNext = getNext;
  _exports.getPrevious = getPrevious;
  function getNext(list, current = null) {
    if (list.length === 0) {
      return null;
    }
    list = list.filterBy("enabled");
    if (current?.identifier) {
      const currentIndex = list.mapBy("identifier").indexOf(current?.identifier);
      if (currentIndex < list.length - 1) {
        return list.objectAt(currentIndex + 1);
      } else {
        return list[0];
      }
    } else {
      return list[0];
    }
  }
  function getPrevious(list, current = null) {
    if (list.length === 0) {
      return null;
    }
    list = list.filterBy("enabled");
    if (current?.identifier) {
      const currentIndex = list.mapBy("identifier").indexOf(current?.identifier);
      if (currentIndex > 0) {
        return list.objectAt(currentIndex - 1);
      } else {
        return list.objectAt(list.length - 1);
      }
    } else {
      return list.objectAt(list.length - 1);
    }
  }
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/list-action", ["exports", "discourse/components/d-button", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _dButton, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ListAction = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    <DButton
      class="btn btn-flat"
      @icon={{@item.icon}}
      @translatedLabel={{@item.label}}
    />
  
  */
  {
    "id": "7f0HHQiz",
    "block": "[[[1,\"\\n  \"],[8,[32,0],[[24,0,\"btn btn-flat\"]],[[\"@icon\",\"@translatedLabel\"],[[30,1,[\"icon\"]],[30,1,[\"label\"]]]],null],[1,\"\\n\"]],[\"@item\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/list-action.js",
    "scope": () => [_dButton.default],
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = ListAction;
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/list-handler", ["exports", "@glimmer/component", "ember-modifier", "discourse/plugins/chat/discourse/components/chat/message-creator/lib/iterate-list", "@ember/template-factory", "@ember/component"], function (_exports, _component, _emberModifier, _iterateList, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  class ListHandler extends _component.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "handleKeydown", (0, _emberModifier.modifier)(element1 => {
        const handler1 = event1 => {
          if (event1.key === "ArrowDown") {
            event1.preventDefault();
            event1.stopPropagation();
            this.args.onHighlight((0, _iterateList.getNext)(this.args.items, this.args.highlightedItem));
          } else if (event1.key === "ArrowUp") {
            event1.preventDefault();
            event1.stopPropagation();
            this.args.onHighlight((0, _iterateList.getPrevious)(this.args.items, this.args.highlightedItem));
          } else if (event1.key === "Enter" && this.args.highlightedItem) {
            event1.preventDefault();
            event1.stopPropagation();
            if (event1.shiftKey && this.args.onShifSelect) {
              this.args.onShifSelect(this.args.highlightedItem);
            } else {
              this.args.onSelect(this.args.highlightedItem);
            }
          }
        };
        element1.addEventListener("keydown", handler1);
        return () => {
          element1.removeEventListener("keydown", handler1);
        };
      }));
    }
  }
  _exports.default = ListHandler;
  _class = ListHandler;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <span style="display: contents" {{this.handleKeydown}} ...attributes>
        {{yield}}
      </span>
    
  */
  {
    "id": "wm/F9PG4",
    "block": "[[[1,\"\\n    \"],[11,1],[24,5,\"display: contents\"],[17,1],[4,[30,0,[\"handleKeydown\"]],null,null],[12],[1,\"\\n      \"],[18,2,null],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"&attrs\",\"&default\"],false,[\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/list-handler.js",
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/list", ["exports", "@glimmer/component", "@ember/helper", "@ember/modifier", "@ember/object", "discourse/helpers/concat-class", "discourse-i18n", "truth-helpers/helpers/eq", "truth-helpers/helpers/not", "discourse/plugins/chat/discourse/components/chat/message-creator/channel", "discourse/plugins/chat/discourse/components/chat/message-creator/list-action", "discourse/plugins/chat/discourse/components/chat/message-creator/user", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _modifier, _object, _concatClass, _discourseI18n, _eq, _not, _channel, _listAction, _user, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let List = _exports.default = (_class = (_class2 = class List extends _component.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "cantAddMoreMembersLabel", _discourseI18n.default.t("chat.new_message_modal.cant_add_more_members"));
    }
    componentForItem(type1) {
      switch (type1) {
        case "list-action":
          return _listAction.default;
        case "user":
          return _user.default;
        case "channel":
          return _channel.default;
      }
    }
    handleEnter(item1, event1) {
      if (event1.key !== "Enter") {
        return;
      }
      if (event1.shiftKey && this.args.onShiftSelect) {
        this.args.onShiftSelect?.(item1);
      } else {
        this.args.onSelect?.(item1);
      }
    }
    handleClick(item1, event1) {
      if (event1.shiftKey && this.args.onShiftSelect) {
        this.args.onShiftSelect?.(item1);
      } else {
        this.args.onSelect?.(item1);
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @items}}
        <div class="chat-message-creator__list-container">
          {{#if @maxReached}}
            <div
              class="chat-message-creator__warning-max-members"
            >{{this.cantAddMoreMembersLabel}}</div>
          {{else}}
            <ul class="chat-message-creator__list">
              {{#each @items as |item|}}
                <li
                  class={{concatClass
                    "chat-message-creator__list-item"
                    (if
                      (eq item.identifier @highlightedItem.identifier)
                      "-highlighted"
                    )
                  }}
                  {{on "click" (fn this.handleClick item)}}
                  {{on "keypress" (fn this.handleEnter item)}}
                  {{on "mousemove" (fn @onHighlight item)}}
                  {{on "mouseleave" (fn @onHighlight null)}}
                  role="button"
                  tabindex="0"
                  data-identifier={{item.identifier}}
                  id={{item.id}}
                  data-disabled={{not item.enabled}}
                >
                  {{component (this.componentForItem item.type) item=item}}
                </li>
              {{/each}}
            </ul>
          {{/if}}
        </div>
      {{/if}}
    
  */
  {
    "id": "dHl2LAXK",
    "block": "[[[1,\"\\n\"],[41,[30,1],[[[1,\"      \"],[10,0],[14,0,\"chat-message-creator__list-container\"],[12],[1,\"\\n\"],[41,[30,2],[[[1,\"          \"],[10,0],[14,0,\"chat-message-creator__warning-max-members\"],[12],[1,[30,0,[\"cantAddMoreMembersLabel\"]]],[13],[1,\"\\n\"]],[]],[[[1,\"          \"],[10,\"ul\"],[14,0,\"chat-message-creator__list\"],[12],[1,\"\\n\"],[42,[28,[31,2],[[28,[31,2],[[30,1]],null]],null],null,[[[1,\"              \"],[11,\"li\"],[16,0,[28,[32,0],[\"chat-message-creator__list-item\",[52,[28,[32,1],[[30,3,[\"identifier\"]],[30,4,[\"identifier\"]]],null],\"-highlighted\"]],null]],[24,\"role\",\"button\"],[24,\"tabindex\",\"0\"],[16,\"data-identifier\",[30,3,[\"identifier\"]]],[16,1,[30,3,[\"id\"]]],[16,\"data-disabled\",[28,[32,2],[[30,3,[\"enabled\"]]],null]],[4,[32,3],[\"click\",[28,[32,4],[[30,0,[\"handleClick\"]],[30,3]],null]],null],[4,[32,3],[\"keypress\",[28,[32,4],[[30,0,[\"handleEnter\"]],[30,3]],null]],null],[4,[32,3],[\"mousemove\",[28,[32,4],[[30,5],[30,3]],null]],null],[4,[32,3],[\"mouseleave\",[28,[32,4],[[30,5],null],null]],null],[12],[1,\"\\n                \"],[46,[28,[30,0,[\"componentForItem\"]],[[30,3,[\"type\"]]],null],null,[[\"item\"],[[30,3]]],null],[1,\"\\n              \"],[13],[1,\"\\n\"]],[3]],null],[1,\"          \"],[13],[1,\"\\n\"]],[]]],[1,\"      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@items\",\"@maxReached\",\"item\",\"@highlightedItem\",\"@onHighlight\"],false,[\"if\",\"each\",\"-track-array\",\"component\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/list.js",
    "scope": () => [_concatClass.default, _eq.default, _not.default, _modifier.on, _helper.fn],
    "isStrictMode": true
  }), _class2), _class2), (_applyDecoratedDescriptor(_class.prototype, "handleEnter", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "handleEnter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleClick", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "handleClick"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/member", ["exports", "@ember/helper", "discourse/components/d-button", "discourse/helpers/concat-class", "discourse-common/helpers/d-icon", "discourse/plugins/chat/discourse/components/chat-user-avatar", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _helper, _dButton, _concatClass, _dIcon, _chatUserAvatar, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const Member = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    <DButton
      class={{concatClass
        "chat-message-creator__member btn-default"
        (if @highlighted "-highlighted")
      }}
      @action={{fn @onSelect @member}}
    >
      <ChatUserAvatar
        @user={{@member.model}}
        @interactive={{false}}
        @showPresence={{false}}
      />
      <span class="chat-message-creator__member-username">
        {{@member.model.username}}
      </span>
      {{icon "times"}}
    </DButton>
  
  */
  {
    "id": "Ose8MKIY",
    "block": "[[[1,\"\\n  \"],[8,[32,0],[[16,0,[28,[32,1],[\"chat-message-creator__member btn-default\",[52,[30,1],\"-highlighted\"]],null]]],[[\"@action\"],[[28,[32,2],[[30,2],[30,3]],null]]],[[\"default\"],[[[[1,\"\\n    \"],[8,[32,3],null,[[\"@user\",\"@interactive\",\"@showPresence\"],[[30,3,[\"model\"]],false,false]],null],[1,\"\\n    \"],[10,1],[14,0,\"chat-message-creator__member-username\"],[12],[1,\"\\n      \"],[1,[30,3,[\"model\",\"username\"]]],[1,\"\\n    \"],[13],[1,\"\\n    \"],[1,[28,[32,4],[\"times\"],null]],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[\"@highlighted\",\"@onSelect\",\"@member\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/member.js",
    "scope": () => [_dButton.default, _concatClass.default, _helper.fn, _chatUserAvatar.default, _dIcon.default],
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = Member;
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/members-count", ["exports", "@glimmer/component", "discourse/helpers/concat-class", "discourse-i18n", "truth-helpers/helpers/eq", "@ember/template-factory", "@ember/component"], function (_exports, _component, _concatClass, _discourseI18n, _eq, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class MembersCount extends _component.default {
    get countLabel() {
      return _discourseI18n.default.t("chat.direct_message_creator.members_counter", {
        count: this.args.count,
        max: this.args.max
      });
    }
  }
  _exports.default = MembersCount;
  _class = MembersCount;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div
        class={{concatClass
          "chat-message-creator__members-count"
          (if (eq @count @max) "-reached-limit")
        }}
      >
        {{this.countLabel}}
      </div>
    
  */
  {
    "id": "/dZu/Rv3",
    "block": "[[[1,\"\\n    \"],[10,0],[15,0,[28,[32,0],[\"chat-message-creator__members-count\",[52,[28,[32,1],[[30,1],[30,2]],null],\"-reached-limit\"]],null]],[12],[1,\"\\n      \"],[1,[30,0,[\"countLabel\"]]],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@count\",\"@max\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/members-count.js",
    "scope": () => [_concatClass.default, _eq.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/members-selector", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse-common/config/environment", "discourse-common/lib/debounce", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/message-creator/lib/chatables-loader", "discourse/plugins/chat/discourse/components/chat/message-creator/list", "discourse/plugins/chat/discourse/components/chat/message-creator/list-handler", "discourse/plugins/chat/discourse/components/chat/message-creator/members", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _object, _service, _dButton, _environment, _debounce, _discourseI18n, _chatablesLoader, _list, _listHandler, _members, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let MembersSelector = _exports.default = (_class = (_class2 = class MembersSelector extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "siteSettings", _descriptor, this);
      _initializerDefineProperty(this, "chatables", _descriptor2, this);
      _initializerDefineProperty(this, "filter", _descriptor3, this);
      _initializerDefineProperty(this, "highlightedMember", _descriptor4, this);
      _initializerDefineProperty(this, "highlightedChatable", _descriptor5, this);
      _defineProperty(this, "placeholder", _discourseI18n.default.t("chat.direct_message_creator.group_name"));
    }
    get items() {
      return this.chatables.filter(c1 => !this.highlightedMemberIds.includes(c1.model.id));
    }
    get highlightedMemberIds() {
      return this.args.members.map(u1 => u1.model.id);
    }
    highlightMember(member1) {
      this.highlightedMember = member1;
    }
    highlightChatable(chatable1) {
      this.highlightedChatable = chatable1;
    }
    selectChatable(chatable1) {
      if (!chatable1.enabled) {
        return;
      }
      if (this.args.members.length + (this.args.channel?.membershipsCount ?? 0) >= this.siteSettings.chat_max_direct_message_users) {
        return;
      }
      if (this.highlightedMemberIds.includes(chatable1.model.id)) {
        this.unselectMember(chatable1);
      } else {
        this.args.onChange?.([...this.args.members, chatable1]);
        this.highlightedChatable = this.items[0];
      }
      this.filter = "";
      this.focusFilterAction?.();
      this.highlightedMember = null;
    }
    registerFocusFilterAction(actionFn1) {
      this.focusFilterAction = actionFn1;
    }
    onFilter(event1) {
      this.searchHandler = (0, _debounce.default)(this, this.fetch, event1.target.value, _environment.INPUT_DELAY);
    }
    async fetch(term1) {
      this.highlightedMember = null;
      const loader1 = new _chatablesLoader.default(this);
      this.chatables = await loader1.search(term1, {
        includeCategoryChannels: false,
        includeDirectMessageChannels: false,
        excludedMembershipsChannelId: this.args.channel?.id
      });
      this.highlightedChatable = this.items[0];
    }
    unselectMember(removedMember1) {
      this.args.onChange?.(this.args.members.filter(member1 => member1 !== removedMember1));
      this.highlightedMember = null;
      this.highlightedChatable = this.items[0];
      this.focusFilterAction?.();
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <ListHandler
        @items={{this.items}}
        @highlightedItem={{this.highlightedChatable}}
        @onHighlight={{this.highlightChatable}}
        @onSelect={{this.selectChatable}}
      >
        <div class="chat-message-creator__add-members-header-container">
          <div class="chat-message-creator__add-members-header">
            <Members
              @filter={{this.filter}}
              @members={{@members}}
              @highlightedMember={{this.highlightedMember}}
              @onFilter={{this.onFilter}}
              @registerFocusFilterAction={{this.registerFocusFilterAction}}
              @onHighlightMember={{this.highlightMember}}
              @onSelectMember={{this.unselectMember}}
            />
  
            <DButton
              class="btn-flat chat-message-creator__add-members__close-btn"
              @action={{@cancel}}
              @icon="times"
            />
          </div>
        </div>
  
        <List
          @items={{this.items}}
          @highlightedItem={{this.highlightedChatable}}
          @onSelect={{this.selectChatable}}
          @onHighlight={{this.highlightChatable}}
          @maxReached={{@maxReached}}
        />
  
      </ListHandler>
    
  */
  {
    "id": "4xpFidq9",
    "block": "[[[1,\"\\n    \"],[8,[32,0],null,[[\"@items\",\"@highlightedItem\",\"@onHighlight\",\"@onSelect\"],[[30,0,[\"items\"]],[30,0,[\"highlightedChatable\"]],[30,0,[\"highlightChatable\"]],[30,0,[\"selectChatable\"]]]],[[\"default\"],[[[[1,\"\\n      \"],[10,0],[14,0,\"chat-message-creator__add-members-header-container\"],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-message-creator__add-members-header\"],[12],[1,\"\\n          \"],[8,[32,1],null,[[\"@filter\",\"@members\",\"@highlightedMember\",\"@onFilter\",\"@registerFocusFilterAction\",\"@onHighlightMember\",\"@onSelectMember\"],[[30,0,[\"filter\"]],[30,1],[30,0,[\"highlightedMember\"]],[30,0,[\"onFilter\"]],[30,0,[\"registerFocusFilterAction\"]],[30,0,[\"highlightMember\"]],[30,0,[\"unselectMember\"]]]],null],[1,\"\\n\\n          \"],[8,[32,2],[[24,0,\"btn-flat chat-message-creator__add-members__close-btn\"]],[[\"@action\",\"@icon\"],[[30,2],\"times\"]],null],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\\n      \"],[8,[32,3],null,[[\"@items\",\"@highlightedItem\",\"@onSelect\",\"@onHighlight\",\"@maxReached\"],[[30,0,[\"items\"]],[30,0,[\"highlightedChatable\"]],[30,0,[\"selectChatable\"]],[30,0,[\"highlightChatable\"]],[30,3]]],null],[1,\"\\n\\n    \"]],[]]]]],[1,\"\\n  \"]],[\"@members\",\"@cancel\",\"@maxReached\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/members-selector.js",
    "scope": () => [_listHandler.default, _members.default, _dButton.default, _list.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatables", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "filter", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "highlightedMember", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "highlightedChatable", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "highlightMember", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "highlightMember"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "highlightChatable", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "highlightChatable"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "selectChatable", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "selectChatable"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "registerFocusFilterAction", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "registerFocusFilterAction"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onFilter", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetch", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "fetch"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "unselectMember", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "unselectMember"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/members", ["exports", "@glimmer/component", "@ember/component", "@ember/modifier", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "discourse-common/helpers/d-icon", "discourse-i18n", "truth-helpers/helpers/eq", "discourse/plugins/chat/discourse/components/chat/message-creator/lib/iterate-list", "discourse/plugins/chat/discourse/components/chat/message-creator/member", "@ember/template-factory"], function (_exports, _component, _component2, _modifier, _object, _didInsert, _dIcon, _discourseI18n, _eq, _iterateList, _member, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let Members = _exports.default = (_class = (_class2 = class Members extends _component.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "addMoreMembersLabel", _discourseI18n.default.t("chat.new_message_modal.user_search_placeholder"));
    }
    onFilter() {
      this.args.onFilter(...arguments);
    }
    registerFocusFilterAction(element1) {
      this.args.registerFocusFilterAction(() => element1.focus());
    }
    handleKeypress(event1) {
      if (event1.key === "Backspace" && event1.target.value === "") {
        event1.preventDefault();
        event1.stopPropagation();
        if (!this.args.highlightedMember) {
          this.args.onHighlightMember(this.args.members.lastObject);
        } else {
          this.args.onSelectMember(this.args.highlightedMember);
        }
        return;
      }
      if (event1.key === "ArrowLeft" && event1.target.value === "") {
        event1.preventDefault();
        event1.stopPropagation();
        this.args.onHighlightMember((0, _iterateList.getPrevious)(this.args.members, this.args.highlightedMember));
        return;
      }
      if (event1.key === "ArrowRight" && event1.target.value === "") {
        event1.preventDefault();
        event1.stopPropagation();
        this.args.onHighlightMember((0, _iterateList.getNext)(this.args.members, this.args.highlightedMember));
        return;
      }
      if (event1.key === "Enter" && this.args.highlightedMember) {
        event1.preventDefault();
        event1.stopPropagation();
        this.args.onSelectMember(this.args.highlightedMember);
        return;
      }
      this.highlightedMember = null;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-message-creator__members-container">
        <div class="chat-message-creator__members">
          {{icon "search"}}
  
          {{#each @members as |member|}}
            <Member
              @member={{member}}
              @onSelect={{@onSelectMember}}
              @highlighted={{eq member @highlightedMember}}
            />
          {{/each}}
  
          <Input
            placeholder={{this.addMoreMembersLabel}}
            class="chat-message-creator__members-input"
            @value={{@filter}}
            autofocus={{true}}
            {{on "input" this.onFilter}}
            {{on "keydown" this.handleKeypress}}
            {{didInsert this.registerFocusFilterAction}}
          />
        </div>
      </div>
    
  */
  {
    "id": "x7ZQj8X9",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-message-creator__members-container\"],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-message-creator__members\"],[12],[1,\"\\n        \"],[1,[28,[32,0],[\"search\"],null]],[1,\"\\n\\n\"],[42,[28,[31,1],[[28,[31,1],[[30,1]],null]],null],null,[[[1,\"          \"],[8,[32,1],null,[[\"@member\",\"@onSelect\",\"@highlighted\"],[[30,2],[30,3],[28,[32,2],[[30,2],[30,4]],null]]],null],[1,\"\\n\"]],[2]],null],[1,\"\\n        \"],[8,[32,3],[[16,\"placeholder\",[30,0,[\"addMoreMembersLabel\"]]],[24,0,\"chat-message-creator__members-input\"],[16,\"autofocus\",true],[4,[32,4],[\"input\",[30,0,[\"onFilter\"]]],null],[4,[32,4],[\"keydown\",[30,0,[\"handleKeypress\"]]],null],[4,[32,5],[[30,0,[\"registerFocusFilterAction\"]]],null]],[[\"@value\"],[[30,5]]],null],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@members\",\"member\",\"@onSelectMember\",\"@highlightedMember\",\"@filter\"],false,[\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/members.js",
    "scope": () => [_dIcon.default, _member.default, _eq.default, _component2.Input, _modifier.on, _didInsert.default],
    "isStrictMode": true
  }), _class2), _class2), (_applyDecoratedDescriptor(_class.prototype, "onFilter", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "registerFocusFilterAction", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "registerFocusFilterAction"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleKeypress", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "handleKeypress"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/new-group", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/component", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse/lib/ajax-error", "discourse-i18n", "truth-helpers/helpers/gte", "discourse/plugins/chat/discourse/components/chat/message-creator/members-count", "discourse/plugins/chat/discourse/components/chat/message-creator/members-selector", "@ember/template-factory"], function (_exports, _component, _tracking, _component2, _object, _service, _dButton, _ajaxError, _discourseI18n, _gte, _membersCount, _membersSelector, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let NewGroup = _exports.default = (_class = (_class2 = class NewGroup extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor3, this);
      _initializerDefineProperty(this, "newGroupTitle", _descriptor4, this);
      _defineProperty(this, "placeholder", _discourseI18n.default.t("chat.direct_message_creator.group_name"));
    }
    get membersCount() {
      return this.args.members?.length;
    }
    async createGroup() {
      try {
        const channel1 = await this.chat.upsertDmChannelForUsernames(this.args.members.mapBy("model.username"), this.newGroupTitle);
        if (!channel1) {
          return;
        }
        this.args.close?.();
        this.router.transitionTo("chat.channel", ...channel1.routeModels);
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-message-creator__new-group-container">
        <div class="chat-message-creator__new-group">
          <div class="chat-message-creator__new-group-header-container">
            <div class="chat-message-creator__new-group-header">
              <Input
                name="channel-name"
                class="chat-message-creator__new-group-header__input"
                placeholder={{this.placeholder}}
                @value={{this.newGroupTitle}}
              />
  
              <MembersCount
                @count={{this.membersCount}}
                @max={{this.siteSettings.chat_max_direct_message_users}}
              />
            </div>
          </div>
  
          <MembersSelector
            @members={{@members}}
            @channel={{@channel}}
            @onChange={{@onChangeMembers}}
            @close={{@close}}
            @cancel={{@cancel}}
            @maxReached={{gte
              this.membersCount
              this.siteSettings.chat_max_direct_message_users
            }}
          />
  
          {{#if @members.length}}
            <div class="chat-message-creator__new-group-footer-container">
              <div class="chat-message-creator__new-group-footer">
                <DButton
                  class="btn-primary btn-flat"
                  @label="cancel"
                  @action={{@cancel}}
                />
                <DButton
                  class="btn-primary create-chat-group"
                  @label="chat.new_message_modal.create_new_group_chat"
                  @action={{this.createGroup}}
                />
  
              </div>
            </div>
          {{/if}}
        </div>
      </div>
    
  */
  {
    "id": "yxxBrHYi",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-message-creator__new-group-container\"],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-message-creator__new-group\"],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-message-creator__new-group-header-container\"],[12],[1,\"\\n          \"],[10,0],[14,0,\"chat-message-creator__new-group-header\"],[12],[1,\"\\n            \"],[8,[32,0],[[24,3,\"channel-name\"],[24,0,\"chat-message-creator__new-group-header__input\"],[16,\"placeholder\",[30,0,[\"placeholder\"]]]],[[\"@value\"],[[30,0,[\"newGroupTitle\"]]]],null],[1,\"\\n\\n            \"],[8,[32,1],null,[[\"@count\",\"@max\"],[[30,0,[\"membersCount\"]],[30,0,[\"siteSettings\",\"chat_max_direct_message_users\"]]]],null],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\\n        \"],[8,[32,2],null,[[\"@members\",\"@channel\",\"@onChange\",\"@close\",\"@cancel\",\"@maxReached\"],[[30,1],[30,2],[30,3],[30,4],[30,5],[28,[32,3],[[30,0,[\"membersCount\"]],[30,0,[\"siteSettings\",\"chat_max_direct_message_users\"]]],null]]],null],[1,\"\\n\\n\"],[41,[30,1,[\"length\"]],[[[1,\"          \"],[10,0],[14,0,\"chat-message-creator__new-group-footer-container\"],[12],[1,\"\\n            \"],[10,0],[14,0,\"chat-message-creator__new-group-footer\"],[12],[1,\"\\n              \"],[8,[32,4],[[24,0,\"btn-primary btn-flat\"]],[[\"@label\",\"@action\"],[\"cancel\",[30,5]]],null],[1,\"\\n              \"],[8,[32,4],[[24,0,\"btn-primary create-chat-group\"]],[[\"@label\",\"@action\"],[\"chat.new_message_modal.create_new_group_chat\",[30,0,[\"createGroup\"]]]],null],[1,\"\\n\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@members\",\"@channel\",\"@onChangeMembers\",\"@close\",\"@cancel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/new-group.js",
    "scope": () => [_component2.Input, _membersCount.default, _membersSelector.default, _gte.default, _dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "newGroupTitle", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _applyDecoratedDescriptor(_class.prototype, "createGroup", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "createGroup"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/search-input", ["exports", "@glimmer/component", "@ember/component", "@ember/modifier", "discourse-common/helpers/d-icon", "discourse-i18n", "@ember/template-factory"], function (_exports, _component, _component2, _modifier, _dIcon, _discourseI18n, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  class ChatMessageCreatorSearchInput extends _component.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "filterPlaceholder", _discourseI18n.default.t("chat.new_message_modal.filter"));
    }
  }
  _exports.default = ChatMessageCreatorSearchInput;
  _class = ChatMessageCreatorSearchInput;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-message-creator__search-input-container">
        <div class="chat-message-creator__search-input">
          {{icon
            "search"
            class="chat-message-creator__search-input__search-icon"
          }}
          <Input
            class="chat-message-creator__search-input__input"
            placeholder={{this.filterPlaceholder}}
            {{on "input" @onFilter}}
          />
        </div>
      </div>
    
  */
  {
    "id": "DPkuk7ht",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-message-creator__search-input-container\"],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-message-creator__search-input\"],[12],[1,\"\\n        \"],[1,[28,[32,0],[\"search\"],[[\"class\"],[\"chat-message-creator__search-input__search-icon\"]]]],[1,\"\\n        \"],[8,[32,1],[[24,0,\"chat-message-creator__search-input__input\"],[16,\"placeholder\",[30,0,[\"filterPlaceholder\"]]],[4,[32,2],[\"input\",[30,1]],null]],null,null],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@onFilter\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/search-input.js",
    "scope": () => [_dIcon.default, _component2.Input, _modifier.on],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/search", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/helper", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/service", "discourse/components/d-button", "discourse/lib/ajax-error", "discourse-common/config/environment", "discourse-common/lib/debounce", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/message-creator/constants", "discourse/plugins/chat/discourse/components/chat/message-creator/lib/chatables-loader", "discourse/plugins/chat/discourse/components/chat/message-creator/list", "discourse/plugins/chat/discourse/components/chat/message-creator/list-handler", "discourse/plugins/chat/discourse/components/chat/message-creator/search-input", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _helper, _object, _didInsert, _service, _dButton, _ajaxError, _environment, _debounce, _discourseI18n, _constants, _chatablesLoader, _list, _listHandler, _searchInput, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessageCreatorSearch = _exports.default = (_class = (_class2 = class ChatMessageCreatorSearch extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      _initializerDefineProperty(this, "chatables", _descriptor3, this);
      _initializerDefineProperty(this, "highlightedChatable", _descriptor4, this);
      _initializerDefineProperty(this, "term", _descriptor5, this);
      _initializerDefineProperty(this, "loading", _descriptor6, this);
    }
    get items() {
      const items1 = [];
      if (this.loading) {
        return items1;
      }
      if (!this.term?.length) {
        items1.push({
          identifier: "new-group",
          type: "list-action",
          label: _discourseI18n.default.t("chat.new_message_modal.new_group_chat"),
          enabled: true,
          icon: "users",
          id: "new-group-chat"
        });
      }
      return [...items1, ...this.chatables];
    }
    prefillAddMembers(item1) {
      this.args.onChangeMode(_constants.MODES.new_group, [item1]);
    }
    highlightChatable(chatable1) {
      this.highlightedChatable = chatable1;
    }
    async selectChatable(item1) {
      switch (item1.type) {
        case "list-action":
          this.args.onChangeMode(_constants.MODES.new_group);
          break;
        case "user":
          if (!item1.enabled) {
            return;
          }
          await this.startOneToOneChannel(item1.model.username);
          break;
        default:
          this.router.transitionTo("chat.channel", ...item1.model.routeModels);
          this.args.close();
          break;
      }
    }
    onFilter(event1) {
      this.chatables = [];
      this.term = event1?.target?.value;
      this.searchHandler = (0, _debounce.default)(this, this.fetch, event1.target.value, _environment.INPUT_DELAY);
    }
    async fetch() {
      const loader1 = new _chatablesLoader.default(this);
      this.chatables = await loader1.search(this.term, {
        preloadChannels: !this.term
      });
      this.highlightedChatable = this.items[0];
    }
    async startOneToOneChannel(username1) {
      try {
        const channel1 = await this.chat.upsertDmChannelForUsernames([username1]);
        if (!channel1) {
          return;
        }
        this.args.close?.();
        this.router.transitionTo("chat.channel", ...channel1.routeModels);
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <ListHandler
        @items={{this.items}}
        @highlightedItem={{this.highlightedChatable}}
        @onHighlight={{this.highlightChatable}}
        @onSelect={{this.selectChatable}}
        @onShifSelect={{this.prefillAddMembers}}
      >
        <div class="chat-message-creator__search-container">
          <div class="chat-message-creator__search">
            <div
              class="chat-message-creator__section"
              {{didInsert (fn this.fetch null)}}
            >
              <SearchInput @filter={{this.term}} @onFilter={{this.onFilter}} />
  
              <DButton
                class="btn-flat chat-message-creator__search-input__cancel-button"
                @icon="times"
                @action={{@close}}
              />
            </div>
  
            <List
              @items={{this.items}}
              @highlightedItem={{this.highlightedChatable}}
              @onSelect={{this.selectChatable}}
              @onHighlight={{this.highlightChatable}}
              @onShiftSelect={{this.prefillAddMembers}}
            />
          </div>
        </div>
      </ListHandler>
    
  */
  {
    "id": "36xoI+zY",
    "block": "[[[1,\"\\n    \"],[8,[32,0],null,[[\"@items\",\"@highlightedItem\",\"@onHighlight\",\"@onSelect\",\"@onShifSelect\"],[[30,0,[\"items\"]],[30,0,[\"highlightedChatable\"]],[30,0,[\"highlightChatable\"]],[30,0,[\"selectChatable\"]],[30,0,[\"prefillAddMembers\"]]]],[[\"default\"],[[[[1,\"\\n      \"],[10,0],[14,0,\"chat-message-creator__search-container\"],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-message-creator__search\"],[12],[1,\"\\n          \"],[11,0],[24,0,\"chat-message-creator__section\"],[4,[32,1],[[28,[32,2],[[30,0,[\"fetch\"]],null],null]],null],[12],[1,\"\\n            \"],[8,[32,3],null,[[\"@filter\",\"@onFilter\"],[[30,0,[\"term\"]],[30,0,[\"onFilter\"]]]],null],[1,\"\\n\\n            \"],[8,[32,4],[[24,0,\"btn-flat chat-message-creator__search-input__cancel-button\"]],[[\"@icon\",\"@action\"],[\"times\",[30,1]]],null],[1,\"\\n          \"],[13],[1,\"\\n\\n          \"],[8,[32,5],null,[[\"@items\",\"@highlightedItem\",\"@onSelect\",\"@onHighlight\",\"@onShiftSelect\"],[[30,0,[\"items\"]],[30,0,[\"highlightedChatable\"]],[30,0,[\"selectChatable\"]],[30,0,[\"highlightChatable\"]],[30,0,[\"prefillAddMembers\"]]]],null],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"]],[]]]]],[1,\"\\n  \"]],[\"@close\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/search.js",
    "scope": () => [_listHandler.default, _didInsert.default, _helper.fn, _searchInput.default, _dButton.default, _list.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatables", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "highlightedChatable", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "term", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "loading", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "prefillAddMembers", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "prefillAddMembers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "highlightChatable", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "highlightChatable"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "selectChatable", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "selectChatable"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onFilter", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetch", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "fetch"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message-creator/user", ["exports", "@glimmer/component", "@ember/service", "discourse/helpers/user-status", "discourse-i18n", "truth-helpers/helpers/gt", "discourse/plugins/chat/discourse/components/chat-user-avatar", "discourse/plugins/chat/discourse/components/chat-user-display-name", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _userStatus, _discourseI18n, _gt, _chatUserAvatar, _chatUserDisplayName, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatableUser = _exports.default = (_class = (_class2 = class ChatableUser extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
      _defineProperty(this, "disabledUserLabel", _discourseI18n.default.t("chat.new_message_modal.disabled_user"));
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-message-creator__chatable -user">
        <ChatUserAvatar @user={{@item.model}} @interactive={{false}} />
        <ChatUserDisplayName @user={{@item.model}} />
  
        {{#if (gt @item.tracking.unreadCount 0)}}
          <div class="unread-indicator -urgent"></div>
        {{/if}}
  
        {{userStatus @item.model currentUser=this.currentUser}}
  
        {{#unless @item.enabled}}
          <span class="chat-message-creator__chatable -disabled-chat">
            {{this.disabledUserLabel}}
          </span>
        {{/unless}}
      </div>
    
  */
  {
    "id": "7ayJWEql",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-message-creator__chatable -user\"],[12],[1,\"\\n      \"],[8,[32,0],null,[[\"@user\",\"@interactive\"],[[30,1,[\"model\"]],false]],null],[1,\"\\n      \"],[8,[32,1],null,[[\"@user\"],[[30,1,[\"model\"]]]],null],[1,\"\\n\\n\"],[41,[28,[32,2],[[30,1,[\"tracking\",\"unreadCount\"]],0],null],[[[1,\"        \"],[10,0],[14,0,\"unread-indicator -urgent\"],[12],[13],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[1,[28,[32,3],[[30,1,[\"model\"]]],[[\"currentUser\"],[[30,0,[\"currentUser\"]]]]]],[1,\"\\n\\n\"],[41,[51,[30,1,[\"enabled\"]]],[[[1,\"        \"],[10,1],[14,0,\"chat-message-creator__chatable -disabled-chat\"],[12],[1,\"\\n          \"],[1,[30,0,[\"disabledUserLabel\"]]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@item\"],false,[\"if\",\"unless\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message-creator/user.js",
    "scope": () => [_chatUserAvatar.default, _chatUserDisplayName.default, _gt.default, _userStatus.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/message/avatar", ["exports", "discourse/plugins/chat/discourse/components/chat-emoji-avatar", "discourse/plugins/chat/discourse/components/chat-user-avatar", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _chatEmojiAvatar, _chatUserAvatar, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const Avatar = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    <div class="chat-message-avatar">
      {{#if @message.chatWebhookEvent.emoji}}
        <ChatEmojiAvatar @emoji={{@message.chatWebhookEvent.emoji}} />
      {{else}}
        <ChatUserAvatar @user={{@message.user}} @avatarSize="medium" />
      {{/if}}
    </div>
  
  */
  {
    "id": "J6c4vyrh",
    "block": "[[[1,\"\\n  \"],[10,0],[14,0,\"chat-message-avatar\"],[12],[1,\"\\n\"],[41,[30,1,[\"chatWebhookEvent\",\"emoji\"]],[[[1,\"      \"],[8,[32,0],null,[[\"@emoji\"],[[30,1,[\"chatWebhookEvent\",\"emoji\"]]]],null],[1,\"\\n\"]],[]],[[[1,\"      \"],[8,[32,1],null,[[\"@user\",\"@avatarSize\"],[[30,1,[\"user\"]],\"medium\"]],null],[1,\"\\n\"]],[]]],[1,\"  \"],[13],[1,\"\\n\"]],[\"@message\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message/avatar.js",
    "scope": () => [_chatEmojiAvatar.default, _chatUserAvatar.default],
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = Avatar;
});
define("discourse/plugins/chat/discourse/components/chat/message/error", ["exports", "@ember/helper", "discourse/components/d-button", "discourse-common/helpers/i18n", "truth-helpers/helpers/eq", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _helper, _dButton, _i18n, _eq, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const Error = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    {{#if @message.error}}
      <div class="chat-message-error">
        {{#if (eq @message.error "network_error")}}
          <DButton
            class="chat-message-error__retry-btn"
            @action={{fn @onRetry @message}}
            @icon="exclamation-circle"
          >
            <span class="chat-message-error__retry-btn-title">
              {{i18n "chat.retry_staged_message.title"}}
            </span>
            <span class="chat-message-error__retry-btn-action">
              {{i18n "chat.retry_staged_message.action"}}
            </span>
          </DButton>
        {{else}}
          {{@message.error}}
        {{/if}}
      </div>
    {{/if}}
  
  */
  {
    "id": "3/xt4be5",
    "block": "[[[1,\"\\n\"],[41,[30,1,[\"error\"]],[[[1,\"    \"],[10,0],[14,0,\"chat-message-error\"],[12],[1,\"\\n\"],[41,[28,[32,0],[[30,1,[\"error\"]],\"network_error\"],null],[[[1,\"        \"],[8,[32,1],[[24,0,\"chat-message-error__retry-btn\"]],[[\"@action\",\"@icon\"],[[28,[32,2],[[30,2],[30,1]],null],\"exclamation-circle\"]],[[\"default\"],[[[[1,\"\\n          \"],[10,1],[14,0,\"chat-message-error__retry-btn-title\"],[12],[1,\"\\n            \"],[1,[28,[32,3],[\"chat.retry_staged_message.title\"],null]],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,1],[14,0,\"chat-message-error__retry-btn-action\"],[12],[1,\"\\n            \"],[1,[28,[32,3],[\"chat.retry_staged_message.action\"],null]],[1,\"\\n          \"],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n\"]],[]],[[[1,\"        \"],[1,[30,1,[\"error\"]]],[1,\"\\n\"]],[]]],[1,\"    \"],[13],[1,\"\\n\"]],[]],null]],[\"@message\",\"@onRetry\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message/error.js",
    "scope": () => [_eq.default, _dButton.default, _helper.fn, _i18n.default],
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = Error;
});
define("discourse/plugins/chat/discourse/components/chat/message/info", ["exports", "@glimmer/component", "@ember/render-modifiers/modifiers/did-insert", "@ember/render-modifiers/modifiers/will-destroy", "@ember/routing", "@ember/service", "discourse/components/bookmark-icon", "discourse/components/user-status-message", "discourse/helpers/concat-class", "discourse/lib/settings", "discourse-common/helpers/d-icon", "discourse-common/helpers/i18n", "discourse-common/utils/decorators", "discourse/plugins/chat/discourse/helpers/format-chat-date", "@ember/template-factory", "@ember/component"], function (_exports, _component, _didInsert, _willDestroy, _routing, _service, _bookmarkIcon, _userStatusMessage, _concatClass, _settings, _dIcon, _i18n, _decorators, _formatChatDate, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2, _user, _message;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
  function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
  function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessageInfo = _exports.default = (_class = (_user = /*#__PURE__*/new WeakMap(), _message = /*#__PURE__*/new WeakMap(), (_class2 = class ChatMessageInfo extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateFieldInitSpec(this, _message, {
        get: _get_message,
        set: void 0
      });
      _classPrivateFieldInitSpec(this, _user, {
        get: _get_user,
        set: void 0
      });
      _initializerDefineProperty(this, "siteSettings", _descriptor, this);
    }
    trackStatus() {
      _classPrivateFieldGet(this, _user)?.trackStatus?.();
    }
    stopTrackingStatus() {
      _classPrivateFieldGet(this, _user)?.stopTrackingStatus?.();
    }
    get usernameClasses() {
      const user1 = _classPrivateFieldGet(this, _user);
      const classes1 = this.prioritizeName ? ["is-full-name"] : ["is-username"];
      if (!user1) {
        return classes1;
      }
      if (user1.staff) {
        classes1.push("is-staff");
      }
      if (user1.admin) {
        classes1.push("is-admin");
      }
      if (user1.moderator) {
        classes1.push("is-moderator");
      }
      if (user1.new_user) {
        classes1.push("is-new-user");
      }
      if (user1.primary_group_name) {
        classes1.push("group--" + user1.primary_group_name);
      }
      return classes1.join(" ");
    }
    get name() {
      return this.prioritizeName ? _classPrivateFieldGet(this, _user)?.get("name") : _classPrivateFieldGet(this, _user)?.get("username");
    }
    get isFlagged() {
      return _classPrivateFieldGet(this, _message)?.reviewableId || _classPrivateFieldGet(this, _message)?.userFlagStatus === 0;
    }
    get prioritizeName() {
      return this.siteSettings.display_name_on_posts && (0, _settings.prioritizeNameInUx)(_classPrivateFieldGet(this, _user)?.get("name"));
    }
    get showStatus() {
      return !!_classPrivateFieldGet(this, _user)?.get("status");
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @show}}
        <div
          class="chat-message-info"
          {{didInsert this.trackStatus}}
          {{willDestroy this.stopTrackingStatus}}
        >
          {{#if @message.chatWebhookEvent}}
            {{#if @message.chatWebhookEvent.username}}
              <span
                class={{concatClass
                  "chat-message-info__username"
                  this.usernameClasses
                }}
              >
                {{@message.chatWebhookEvent.username}}
              </span>
            {{/if}}
  
            <span class="chat-message-info__bot-indicator">
              {{i18n "chat.bot"}}
            </span>
          {{else}}
            <span
              role="button"
              class={{concatClass
                "chat-message-info__username"
                this.usernameClasses
                "clickable"
              }}
              data-user-card={{@message.user.username}}
            >
              <span class="chat-message-info__username__name">{{this.name}}</span>
              {{#if this.showStatus}}
                <div class="chat-message-info__status">
                  <UserStatusMessage @status={{@message.user.status}} />
                </div>
              {{/if}}
            </span>
          {{/if}}
  
          <span class="chat-message-info__date">
            {{formatChatDate @message}}
          </span>
  
          {{#if @message.bookmark}}
            <span class="chat-message-info__bookmark">
              <BookmarkIcon @bookmark={{@message.bookmark}} />
            </span>
          {{/if}}
  
          {{#if this.isFlagged}}
            <span class="chat-message-info__flag">
              {{#if @message.reviewableId}}
                <LinkTo @route="review.show" @model={{@message.reviewableId}}>
                  {{dIcon "flag" title="chat.flagged"}}
                </LinkTo>
              {{else}}
                {{dIcon "flag" title="chat.you_flagged"}}
              {{/if}}
            </span>
          {{/if}}
        </div>
      {{/if}}
    
  */
  {
    "id": "qvsE2np1",
    "block": "[[[1,\"\\n\"],[41,[30,1],[[[1,\"      \"],[11,0],[24,0,\"chat-message-info\"],[4,[32,0],[[30,0,[\"trackStatus\"]]],null],[4,[32,1],[[30,0,[\"stopTrackingStatus\"]]],null],[12],[1,\"\\n\"],[41,[30,2,[\"chatWebhookEvent\"]],[[[41,[30,2,[\"chatWebhookEvent\",\"username\"]],[[[1,\"            \"],[10,1],[15,0,[28,[32,2],[\"chat-message-info__username\",[30,0,[\"usernameClasses\"]]],null]],[12],[1,\"\\n              \"],[1,[30,2,[\"chatWebhookEvent\",\"username\"]]],[1,\"\\n            \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n          \"],[10,1],[14,0,\"chat-message-info__bot-indicator\"],[12],[1,\"\\n            \"],[1,[28,[32,3],[\"chat.bot\"],null]],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],[[[1,\"          \"],[10,1],[14,\"role\",\"button\"],[15,0,[28,[32,2],[\"chat-message-info__username\",[30,0,[\"usernameClasses\"]],\"clickable\"],null]],[15,\"data-user-card\",[30,2,[\"user\",\"username\"]]],[12],[1,\"\\n            \"],[10,1],[14,0,\"chat-message-info__username__name\"],[12],[1,[30,0,[\"name\"]]],[13],[1,\"\\n\"],[41,[30,0,[\"showStatus\"]],[[[1,\"              \"],[10,0],[14,0,\"chat-message-info__status\"],[12],[1,\"\\n                \"],[8,[32,4],null,[[\"@status\"],[[30,2,[\"user\",\"status\"]]]],null],[1,\"\\n              \"],[13],[1,\"\\n\"]],[]],null],[1,\"          \"],[13],[1,\"\\n\"]],[]]],[1,\"\\n        \"],[10,1],[14,0,\"chat-message-info__date\"],[12],[1,\"\\n          \"],[1,[28,[32,5],[[30,2]],null]],[1,\"\\n        \"],[13],[1,\"\\n\\n\"],[41,[30,2,[\"bookmark\"]],[[[1,\"          \"],[10,1],[14,0,\"chat-message-info__bookmark\"],[12],[1,\"\\n            \"],[8,[32,6],null,[[\"@bookmark\"],[[30,2,[\"bookmark\"]]]],null],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"isFlagged\"]],[[[1,\"          \"],[10,1],[14,0,\"chat-message-info__flag\"],[12],[1,\"\\n\"],[41,[30,2,[\"reviewableId\"]],[[[1,\"              \"],[8,[32,7],null,[[\"@route\",\"@model\"],[\"review.show\",[30,2,[\"reviewableId\"]]]],[[\"default\"],[[[[1,\"\\n                \"],[1,[28,[32,8],[\"flag\"],[[\"title\"],[\"chat.flagged\"]]]],[1,\"\\n              \"]],[]]]]],[1,\"\\n\"]],[]],[[[1,\"              \"],[1,[28,[32,8],[\"flag\"],[[\"title\"],[\"chat.you_flagged\"]]]],[1,\"\\n\"]],[]]],[1,\"          \"],[13],[1,\"\\n\"]],[]],null],[1,\"      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@show\",\"@message\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message/info.js",
    "scope": () => [_didInsert.default, _willDestroy.default, _concatClass.default, _i18n.default, _userStatusMessage.default, _formatChatDate.default, _bookmarkIcon.default, _routing.LinkTo, _dIcon.default],
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "trackStatus", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "trackStatus"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "stopTrackingStatus", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "stopTrackingStatus"), _class.prototype)), _class);
  function _get_user() {
    return _classPrivateFieldGet(this, _message)?.user;
  }
  function _get_message() {
    return this.args.message;
  }
});
define("discourse/plugins/chat/discourse/components/chat/message/left-gutter", ["exports", "@glimmer/component", "@ember/routing", "@ember/service", "discourse/components/bookmark-icon", "discourse-common/helpers/d-icon", "truth-helpers/helpers/eq", "discourse/plugins/chat/discourse/helpers/format-chat-date", "@ember/template-factory", "@ember/component"], function (_exports, _component, _routing, _service, _bookmarkIcon, _dIcon, _eq, _formatChatDate, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessageLeftGutter = _exports.default = (_class = (_class2 = class ChatMessageLeftGutter extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "site", _descriptor, this);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat-message-left-gutter">
        {{#if @message.reviewableId}}
          <LinkTo
            @route="review.show"
            @model={{@message.reviewableId}}
            class="chat-message-left-gutter__flag"
          >
            {{dIcon "flag" title="chat.flagged"}}
          </LinkTo>
        {{else if (eq @message.userFlagStatus 0)}}
          <div class="chat-message-left-gutter__flag">
            {{dIcon "flag" title="chat.you_flagged"}}
          </div>
        {{else if this.site.desktopView}}
          <span class="chat-message-left-gutter__date">
            {{formatChatDate @message "tiny"}}
          </span>
        {{/if}}
        {{#if @message.bookmark}}
          <span class="chat-message-left-gutter__bookmark">
            <BookmarkIcon @bookmark={{@message.bookmark}} />
          </span>
        {{/if}}
      </div>
    
  */
  {
    "id": "v+HF60wY",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-message-left-gutter\"],[12],[1,\"\\n\"],[41,[30,1,[\"reviewableId\"]],[[[1,\"        \"],[8,[32,0],[[24,0,\"chat-message-left-gutter__flag\"]],[[\"@route\",\"@model\"],[\"review.show\",[30,1,[\"reviewableId\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[1,[28,[32,1],[\"flag\"],[[\"title\"],[\"chat.flagged\"]]]],[1,\"\\n        \"]],[]]]]],[1,\"\\n\"]],[]],[[[41,[28,[32,2],[[30,1,[\"userFlagStatus\"]],0],null],[[[1,\"        \"],[10,0],[14,0,\"chat-message-left-gutter__flag\"],[12],[1,\"\\n          \"],[1,[28,[32,1],[\"flag\"],[[\"title\"],[\"chat.you_flagged\"]]]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],[[[41,[30,0,[\"site\",\"desktopView\"]],[[[1,\"        \"],[10,1],[14,0,\"chat-message-left-gutter__date\"],[12],[1,\"\\n          \"],[1,[28,[32,3],[[30,1],\"tiny\"],null]],[1,\"\\n        \"],[13],[1,\"\\n      \"]],[]],null]],[]]]],[]]],[41,[30,1,[\"bookmark\"]],[[[1,\"        \"],[10,1],[14,0,\"chat-message-left-gutter__bookmark\"],[12],[1,\"\\n          \"],[8,[32,4],null,[[\"@bookmark\"],[[30,1,[\"bookmark\"]]]],null],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@message\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/message/left-gutter.js",
    "scope": () => [_routing.LinkTo, _dIcon.default, _eq.default, _formatChatDate.default, _bookmarkIcon.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/modal/archive-channel", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/service", "@ember/template", "@ember/utils", "discourse/components/d-button", "discourse/components/d-modal", "discourse/lib/ajax-error", "discourse-common/helpers/i18n", "discourse-common/lib/later", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat-to-topic-selector", "discourse/plugins/chat/discourse/models/chat-channel", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _object, _service, _template, _utils, _dButton, _dModal, _ajaxError, _i18n, _later, _discourseI18n, _chatToTopicSelector, _chatChannel, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _class2, _data;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatModalArchiveChannel = _exports.default = (_class = (_data = /*#__PURE__*/new WeakSet(), (_class2 = class ChatModalArchiveChannel extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _data);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor2, this);
      _initializerDefineProperty(this, "selection", _descriptor3, this);
      _initializerDefineProperty(this, "saving", _descriptor4, this);
      _initializerDefineProperty(this, "topicTitle", _descriptor5, this);
      _initializerDefineProperty(this, "categoryId", _descriptor6, this);
      _initializerDefineProperty(this, "tags", _descriptor7, this);
      _initializerDefineProperty(this, "selectedTopicId", _descriptor8, this);
      _initializerDefineProperty(this, "flash", _descriptor9, this);
      _initializerDefineProperty(this, "flashType", _descriptor10, this);
    }
    get channel() {
      return this.args.model.channel;
    }
    get newTopic() {
      return this.selection === _chatToTopicSelector.NEW_TOPIC_SELECTION;
    }
    get existingTopic() {
      return this.selection === _chatToTopicSelector.EXISTING_TOPIC_SELECTION;
    }
    get buttonDisabled() {
      if (this.saving) {
        return true;
      }
      if (this.newTopic && (!this.topicTitle || this.topicTitle.length < this.siteSettings.min_topic_title_length || this.topicTitle.length > this.siteSettings.max_topic_title_length)) {
        return true;
      }
      if (this.existingTopic && (0, _utils.isEmpty)(this.selectedTopicId)) {
        return true;
      }
      return false;
    }
    get instructionLabels() {
      const labels1 = {};
      labels1[_chatToTopicSelector.NEW_TOPIC_SELECTION] = _discourseI18n.default.t("chat.selection.new_topic.instructions_channel_archive");
      labels1[_chatToTopicSelector.EXISTING_TOPIC_SELECTION] = _discourseI18n.default.t("chat.selection.existing_topic.instructions_channel_archive");
      return labels1;
    }
    get instructionsText() {
      return (0, _template.htmlSafe)(_discourseI18n.default.t("chat.channel_archive.instructions", {
        channelTitle: this.channel.escapedTitle
      }));
    }
    archiveChannel() {
      this.saving = true;
      return this.chatApi.createChannelArchive(this.channel.id, _classPrivateMethodGet(this, _data, _data2).call(this)).then(() => {
        this.flash = _discourseI18n.default.t("chat.channel_archive.process_started");
        this.flashType = "success";
        this.channel.status = _chatChannel.CHANNEL_STATUSES.archived;
        (0, _later.default)(() => {
          this.args.closeModal();
        }, 3000);
      }).catch(_ajaxError.popupAjaxError).finally(() => this.saving = false);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <DModal
        @closeModal={{@closeModal}}
        class="chat-modal-archive-channel"
        @inline={{@inline}}
        @title={{i18n "chat.channel_archive.title"}}
        @flash={{this.flash}}
        @flashType={{this.flashType}}
      >
        <:body>
          <p class="chat-modal-archive-channel__instructions">
            {{this.instructionsText}}
          </p>
          <ChatToTopicSelector
            @selection={{this.selection}}
            @topicTitle={{this.topicTitle}}
            @categoryId={{this.categoryId}}
            @tags={{this.tags}}
            @selectedTopicId={{this.selectedTopicId}}
            @instructionLabels={{this.instructionLabels}}
            @allowNewMessage={{false}}
          />
        </:body>
        <:footer>
          <DButton
            @disabled={{this.buttonDisabled}}
            @action={{this.archiveChannel}}
            @label="chat.channel_archive.title"
            id="chat-confirm-archive-channel"
            class="btn-primary"
          />
        </:footer>
      </DModal>
    
  */
  {
    "id": "wt8JowZh",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[24,0,\"chat-modal-archive-channel\"]],[[\"@closeModal\",\"@inline\",\"@title\",\"@flash\",\"@flashType\"],[[30,1],[30,2],[28,[32,1],[\"chat.channel_archive.title\"],null],[30,0,[\"flash\"]],[30,0,[\"flashType\"]]]],[[\"body\",\"footer\"],[[[[1,\"\\n        \"],[10,2],[14,0,\"chat-modal-archive-channel__instructions\"],[12],[1,\"\\n          \"],[1,[30,0,[\"instructionsText\"]]],[1,\"\\n        \"],[13],[1,\"\\n        \"],[8,[32,2],null,[[\"@selection\",\"@topicTitle\",\"@categoryId\",\"@tags\",\"@selectedTopicId\",\"@instructionLabels\",\"@allowNewMessage\"],[[30,0,[\"selection\"]],[30,0,[\"topicTitle\"]],[30,0,[\"categoryId\"]],[30,0,[\"tags\"]],[30,0,[\"selectedTopicId\"]],[30,0,[\"instructionLabels\"]],false]],null],[1,\"\\n      \"]],[]],[[[1,\"\\n        \"],[8,[32,3],[[24,1,\"chat-confirm-archive-channel\"],[24,0,\"btn-primary\"]],[[\"@disabled\",\"@action\",\"@label\"],[[30,0,[\"buttonDisabled\"]],[30,0,[\"archiveChannel\"]],\"chat.channel_archive.title\"]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n  \"]],[\"@closeModal\",\"@inline\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/modal/archive-channel.js",
    "scope": () => [_dModal.default, _i18n.default, _chatToTopicSelector.default, _dButton.default],
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "selection", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return _chatToTopicSelector.NEW_TOPIC_SELECTION;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "saving", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "topicTitle", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "categoryId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "tags", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "selectedTopicId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "flash", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "flashType", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "archiveChannel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "archiveChannel"), _class.prototype)), _class);
  function _data2() {
    const data1 = {
      type: this.selection
    };
    if (this.newTopic) {
      data1.title = this.topicTitle;
      data1.category_id = this.categoryId;
      data1.tags = this.tags;
    }
    if (this.existingTopic) {
      data1.topic_id = this.selectedTopicId;
    }
    return data1;
  }
});
define("discourse/plugins/chat/discourse/components/chat/modal/channel-summary", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/service", "discourse/components/conditional-loading-section", "discourse/components/d-modal", "discourse/components/d-modal-cancel", "discourse/lib/ajax-error", "discourse-common/helpers/i18n", "discourse-i18n", "select-kit/components/combo-box", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _object, _service, _conditionalLoadingSection, _dModal, _dModalCancel, _ajaxError, _i18n, _discourseI18n, _comboBox, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatModalChannelSummary = _exports.default = (_class = (_class2 = class ChatModalChannelSummary extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "sinceHours", _descriptor2, this);
      _initializerDefineProperty(this, "loading", _descriptor3, this);
      _initializerDefineProperty(this, "summary", _descriptor4, this);
      _defineProperty(this, "availableSummaries", {});
      _defineProperty(this, "sinceOptions", [1, 3, 6, 12, 24, 72, 168].map(hours1 => {
        return {
          name: _discourseI18n.default.t("chat.summarization.since", {
            count: hours1
          }),
          value: hours1
        };
      }));
    }
    get channelId() {
      return this.args.model.channelId;
    }
    summarize(since1) {
      this.sinceHours = since1;
      this.loading = true;
      if (this.availableSummaries[since1]) {
        this.summary = this.availableSummaries[since1];
        this.loading = false;
        return;
      }
      return this.chatApi.summarize(this.channelId, {
        since: since1
      }).then(data1 => {
        this.availableSummaries[this.sinceHours] = data1.summary;
        this.summary = this.availableSummaries[this.sinceHours];
      }).catch(_ajaxError.popupAjaxError).finally(() => this.loading = false);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <DModal
        @closeModal={{@closeModal}}
        class="chat-modal-channel-summary"
        @title={{i18n "chat.summarization.title"}}
      >
        <:body>
          <span>{{i18n "chat.summarization.description"}}</span>
          <ComboBox
            @value={{this.sinceHours}}
            @content={{this.sinceOptions}}
            @onChange={{this.summarize}}
            @valueProperty="value"
            class="summarization-since"
          />
          <ConditionalLoadingSection @isLoading={{this.loading}}>
            <p class="summary-area">{{this.summary}}</p>
          </ConditionalLoadingSection>
        </:body>
        <:footer>
          <DModalCancel @close={{@closeModal}} />
        </:footer>
      </DModal>
    
  */
  {
    "id": "rKnw3XAV",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[24,0,\"chat-modal-channel-summary\"]],[[\"@closeModal\",\"@title\"],[[30,1],[28,[32,1],[\"chat.summarization.title\"],null]]],[[\"body\",\"footer\"],[[[[1,\"\\n        \"],[10,1],[12],[1,[28,[32,1],[\"chat.summarization.description\"],null]],[13],[1,\"\\n        \"],[8,[32,2],[[24,0,\"summarization-since\"]],[[\"@value\",\"@content\",\"@onChange\",\"@valueProperty\"],[[30,0,[\"sinceHours\"]],[30,0,[\"sinceOptions\"]],[30,0,[\"summarize\"]],\"value\"]],null],[1,\"\\n        \"],[8,[32,3],null,[[\"@isLoading\"],[[30,0,[\"loading\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[10,2],[14,0,\"summary-area\"],[12],[1,[30,0,[\"summary\"]]],[13],[1,\"\\n        \"]],[]]]]],[1,\"\\n      \"]],[]],[[[1,\"\\n        \"],[8,[32,4],null,[[\"@close\"],[[30,1]]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n  \"]],[\"@closeModal\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/modal/channel-summary.js",
    "scope": () => [_dModal.default, _i18n.default, _comboBox.default, _conditionalLoadingSection.default, _dModalCancel.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "sinceHours", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "loading", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "summary", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "summarize", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "summarize"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/modal/create-channel", ["exports", "@ember/component", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/runloop", "@ember/service", "@ember/template", "@ember/utils", "discourse/lib/ajax", "discourse/lib/ajax-error", "discourse/lib/utilities", "discourse-common/lib/debounce", "discourse-i18n", "@ember/template-factory"], function (_exports, _component, _component2, _tracking, _object, _runloop, _service, _template, _utils, _ajax, _ajaxError, _utilities, _debounce, _discourseI18n, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _generateSlugHandler, _createChannel, _buildCategorySlug, _updateAutoJoinConfirmWarning, _updatePermissionsHint, _generateSlug, _debouncedGenerateSlug;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
  function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
  function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
  function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <DModal
    @closeModal={{@closeModal}}
    class="chat-modal-create-channel"
    @inline={{@inline}}
    @title={{i18n "chat.create_channel.title"}}
    @flash={{this.flash}}
    @tagName="form"
    {{on "submit" this.onSave}}
  >
    <:body>
      <div class="chat-modal-create-channel__control -name">
        <label for="name" class="chat-modal-create-channel__label">
          {{i18n "chat.create_channel.name"}}
        </label>
        <Input
          name="name"
          class="chat-modal-create-channel__input"
          @type="text"
          @value={{this.name}}
          {{on "input" (action this.onNameChange value="target.value")}}
        />
      </div>
  
      <div class="chat-modal-create-channel__control -slug">
        <label for="slug" class="chat-modal-create-channel__label">
          {{i18n "chat.create_channel.slug"}}&nbsp;
          <span>
            {{d-icon "info-circle"}}
            <DTooltip>
              {{i18n "chat.channel_edit_name_slug_modal.slug_description"}}
            </DTooltip>
          </span>
        </label>
        <Input
          name="slug"
          class="chat-modal-create-channel__input"
          @type="text"
          @value={{this.slug}}
          placeholder={{this.autoGeneratedSlug}}
        />
      </div>
  
      <div class="chat-modal-create-channel__control -description">
        <label for="description" class="chat-modal-create-channel__label">
          {{i18n "chat.create_channel.description"}}
        </label>
        <Input
          name="description"
          class="chat-modal-create-channel__input"
          @type="textarea"
          @value={{this.description}}
        />
      </div>
  
      <div class="chat-modal-create-channel__control">
        <label class="chat-modal-create-channel__label">
          {{i18n "chat.create_channel.choose_category.label"}}
        </label>
        <CategoryChooser
          @value={{this.categoryId}}
          @onChange={{action this.onCategoryChange}}
          @options={{hash
            formName="chatable_id"
            none="chat.create_channel.choose_category.none"
          }}
        />
  
        {{#if this.categoryPermissionsHint}}
          <div
            class={{concat-class
              "chat-modal-create-channel__hint"
              (if this.loadingPermissionHint "loading-permissions")
            }}
          >
            {{this.categoryPermissionsHint}}
          </div>
        {{/if}}
      </div>
  
      {{#if this.autoJoinAvailable}}
        <div class="chat-modal-create-channel__control -auto-join">
          <label class="chat-modal-create-channel__label">
            <Input
              name="auto_join_users"
              @type="checkbox"
              @checked={{this.autoJoinUsers}}
            />
            <div class="auto-join-channel">
              <span class="chat-modal-create-channel__label-title">
                {{i18n "chat.settings.auto_join_users_label"}}
              </span>
              <p class="chat-modal-create-channel__label-description">
                {{#if this.categoryName}}
                  {{i18n
                    "chat.settings.auto_join_users_info"
                    category=this.categoryName
                  }}
                {{else}}
                  {{i18n "chat.settings.auto_join_users_info_no_category"}}
                {{/if}}
              </p>
            </div>
          </label>
        </div>
      {{/if}}
  
      <div class="chat-modal-create-channel__control -threading-toggle">
        <label class="chat-modal-create-channel__label">
          <Input
            name="threading_enabled"
            @type="checkbox"
            @checked={{this.threadingEnabled}}
          />
          <div class="threading-channel">
            <span class="chat-modal-create-channel__label-title">
              {{i18n "chat.create_channel.threading.label"}}
            </span>
            <p class="chat-modal-create-channel__label-description">
              {{i18n "chat.settings.channel_threading_description"}}
            </p>
          </div>
        </label>
      </div>
    </:body>
    <:footer>
      <button
        class="btn btn-primary create"
        disabled={{this.createDisabled}}
        type="submit"
      >
        {{i18n "chat.create_channel.create"}}
      </button>
    </:footer>
  </DModal>
  */
  {
    "id": "d48yUZBc",
    "block": "[[[8,[39,0],[[24,0,\"chat-modal-create-channel\"],[4,[38,2],[\"submit\",[30,0,[\"onSave\"]]],null]],[[\"@closeModal\",\"@inline\",\"@title\",\"@flash\",\"@tagName\"],[[30,1],[30,2],[28,[37,1],[\"chat.create_channel.title\"],null],[30,0,[\"flash\"]],\"form\"]],[[\"body\",\"footer\"],[[[[1,\"\\n    \"],[10,0],[14,0,\"chat-modal-create-channel__control -name\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,\"for\",\"name\"],[14,0,\"chat-modal-create-channel__label\"],[12],[1,\"\\n        \"],[1,[28,[35,1],[\"chat.create_channel.name\"],null]],[1,\"\\n      \"],[13],[1,\"\\n      \"],[8,[39,3],[[24,3,\"name\"],[24,0,\"chat-modal-create-channel__input\"],[4,[38,2],[\"input\",[28,[37,4],[[30,0],[30,0,[\"onNameChange\"]]],[[\"value\"],[\"target.value\"]]]],null]],[[\"@type\",\"@value\"],[\"text\",[30,0,[\"name\"]]]],null],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[10,0],[14,0,\"chat-modal-create-channel__control -slug\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,\"for\",\"slug\"],[14,0,\"chat-modal-create-channel__label\"],[12],[1,\"\\n        \"],[1,[28,[35,1],[\"chat.create_channel.slug\"],null]],[1,\" \\n        \"],[10,1],[12],[1,\"\\n          \"],[1,[28,[35,5],[\"info-circle\"],null]],[1,\"\\n          \"],[8,[39,6],null,null,[[\"default\"],[[[[1,\"\\n            \"],[1,[28,[35,1],[\"chat.channel_edit_name_slug_modal.slug_description\"],null]],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n      \"],[8,[39,3],[[24,3,\"slug\"],[24,0,\"chat-modal-create-channel__input\"],[16,\"placeholder\",[30,0,[\"autoGeneratedSlug\"]]]],[[\"@type\",\"@value\"],[\"text\",[30,0,[\"slug\"]]]],null],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[10,0],[14,0,\"chat-modal-create-channel__control -description\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,\"for\",\"description\"],[14,0,\"chat-modal-create-channel__label\"],[12],[1,\"\\n        \"],[1,[28,[35,1],[\"chat.create_channel.description\"],null]],[1,\"\\n      \"],[13],[1,\"\\n      \"],[8,[39,3],[[24,3,\"description\"],[24,0,\"chat-modal-create-channel__input\"]],[[\"@type\",\"@value\"],[\"textarea\",[30,0,[\"description\"]]]],null],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[10,0],[14,0,\"chat-modal-create-channel__control\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,0,\"chat-modal-create-channel__label\"],[12],[1,\"\\n        \"],[1,[28,[35,1],[\"chat.create_channel.choose_category.label\"],null]],[1,\"\\n      \"],[13],[1,\"\\n      \"],[8,[39,7],null,[[\"@value\",\"@onChange\",\"@options\"],[[30,0,[\"categoryId\"]],[28,[37,4],[[30,0],[30,0,[\"onCategoryChange\"]]],null],[28,[37,8],null,[[\"formName\",\"none\"],[\"chatable_id\",\"chat.create_channel.choose_category.none\"]]]]],null],[1,\"\\n\\n\"],[41,[30,0,[\"categoryPermissionsHint\"]],[[[1,\"        \"],[10,0],[15,0,[28,[37,10],[\"chat-modal-create-channel__hint\",[52,[30,0,[\"loadingPermissionHint\"]],\"loading-permissions\"]],null]],[12],[1,\"\\n          \"],[1,[30,0,[\"categoryPermissionsHint\"]]],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n\\n\"],[41,[30,0,[\"autoJoinAvailable\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-modal-create-channel__control -auto-join\"],[12],[1,\"\\n        \"],[10,\"label\"],[14,0,\"chat-modal-create-channel__label\"],[12],[1,\"\\n          \"],[8,[39,3],[[24,3,\"auto_join_users\"]],[[\"@type\",\"@checked\"],[\"checkbox\",[30,0,[\"autoJoinUsers\"]]]],null],[1,\"\\n          \"],[10,0],[14,0,\"auto-join-channel\"],[12],[1,\"\\n            \"],[10,1],[14,0,\"chat-modal-create-channel__label-title\"],[12],[1,\"\\n              \"],[1,[28,[35,1],[\"chat.settings.auto_join_users_label\"],null]],[1,\"\\n            \"],[13],[1,\"\\n            \"],[10,2],[14,0,\"chat-modal-create-channel__label-description\"],[12],[1,\"\\n\"],[41,[30,0,[\"categoryName\"]],[[[1,\"                \"],[1,[28,[35,1],[\"chat.settings.auto_join_users_info\"],[[\"category\"],[[30,0,[\"categoryName\"]]]]]],[1,\"\\n\"]],[]],[[[1,\"                \"],[1,[28,[35,1],[\"chat.settings.auto_join_users_info_no_category\"],null]],[1,\"\\n\"]],[]]],[1,\"            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n    \"],[10,0],[14,0,\"chat-modal-create-channel__control -threading-toggle\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,0,\"chat-modal-create-channel__label\"],[12],[1,\"\\n        \"],[8,[39,3],[[24,3,\"threading_enabled\"]],[[\"@type\",\"@checked\"],[\"checkbox\",[30,0,[\"threadingEnabled\"]]]],null],[1,\"\\n        \"],[10,0],[14,0,\"threading-channel\"],[12],[1,\"\\n          \"],[10,1],[14,0,\"chat-modal-create-channel__label-title\"],[12],[1,\"\\n            \"],[1,[28,[35,1],[\"chat.create_channel.threading.label\"],null]],[1,\"\\n          \"],[13],[1,\"\\n          \"],[10,2],[14,0,\"chat-modal-create-channel__label-description\"],[12],[1,\"\\n            \"],[1,[28,[35,1],[\"chat.settings.channel_threading_description\"],null]],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[]],[[[1,\"\\n    \"],[10,\"button\"],[14,0,\"btn btn-primary create\"],[15,\"disabled\",[30,0,[\"createDisabled\"]]],[14,4,\"submit\"],[12],[1,\"\\n      \"],[1,[28,[35,1],[\"chat.create_channel.create\"],null]],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[]]]]]],[\"@closeModal\",\"@inline\"],false,[\"d-modal\",\"i18n\",\"on\",\"input\",\"action\",\"d-icon\",\"d-tooltip\",\"category-chooser\",\"hash\",\"if\",\"concat-class\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/chat/modal/create-channel.hbs",
    "isStrictMode": false
  });
  const DEFAULT_HINT = (0, _template.htmlSafe)(_discourseI18n.default.t("chat.create_channel.choose_category.default_hint", {
    link: "/categories",
    category: "category"
  }));
  let ChatModalCreateChannel = _exports.default = (_class = (_generateSlugHandler = /*#__PURE__*/new WeakMap(), _createChannel = /*#__PURE__*/new WeakSet(), _buildCategorySlug = /*#__PURE__*/new WeakSet(), _updateAutoJoinConfirmWarning = /*#__PURE__*/new WeakSet(), _updatePermissionsHint = /*#__PURE__*/new WeakSet(), _generateSlug = /*#__PURE__*/new WeakSet(), _debouncedGenerateSlug = /*#__PURE__*/new WeakSet(), class ChatModalCreateChannel extends _component2.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _debouncedGenerateSlug);
      // intentionally not showing AJAX error for this, we will autogenerate
      // the slug server-side if they leave it blank
      _classPrivateMethodInitSpec(this, _generateSlug);
      _classPrivateMethodInitSpec(this, _updatePermissionsHint);
      _classPrivateMethodInitSpec(this, _updateAutoJoinConfirmWarning);
      _classPrivateMethodInitSpec(this, _buildCategorySlug);
      _classPrivateMethodInitSpec(this, _createChannel);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "dialog", _descriptor2, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor3, this);
      _initializerDefineProperty(this, "chatApi", _descriptor4, this);
      _initializerDefineProperty(this, "router", _descriptor5, this);
      _initializerDefineProperty(this, "currentUser", _descriptor6, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor7, this);
      _initializerDefineProperty(this, "site", _descriptor8, this);
      _initializerDefineProperty(this, "flash", _descriptor9, this);
      _initializerDefineProperty(this, "name", _descriptor10, this);
      _initializerDefineProperty(this, "category", _descriptor11, this);
      _initializerDefineProperty(this, "categoryId", _descriptor12, this);
      _initializerDefineProperty(this, "autoGeneratedSlug", _descriptor13, this);
      _initializerDefineProperty(this, "categoryPermissionsHint", _descriptor14, this);
      _initializerDefineProperty(this, "autoJoinWarning", _descriptor15, this);
      _initializerDefineProperty(this, "loadingPermissionHint", _descriptor16, this);
      _classPrivateFieldInitSpec(this, _generateSlugHandler, {
        writable: true,
        value: null
      });
    }
    willDestroy() {
      super.willDestroy(...arguments);
      (0, _runloop.cancel)(_classPrivateFieldGet(this, _generateSlugHandler));
    }
    get autoJoinAvailable() {
      return this.siteSettings.max_chat_auto_joined_users > 0;
    }
    get categorySelected() {
      return (0, _utils.isPresent)(this.category);
    }
    get createDisabled() {
      return !this.categorySelected || (0, _utils.isBlank)(this.name);
    }
    get categoryName() {
      return this.categorySelected && (0, _utils.isPresent)(this.name) ? (0, _utilities.escapeExpression)(this.name) : null;
    }
    onShow() {
      this.categoryPermissionsHint = DEFAULT_HINT;
    }
    onCategoryChange(categoryId) {
      const category = categoryId ? this.site.categories.findBy("id", categoryId) : null;
      _classPrivateMethodGet(this, _updatePermissionsHint, _updatePermissionsHint2).call(this, category);
      const name = this.name || category?.name || "";
      this.categoryId = categoryId;
      this.category = category;
      this.name = name;
      _classPrivateMethodGet(this, _debouncedGenerateSlug, _debouncedGenerateSlug2).call(this, name);
    }
    onNameChange(name) {
      _classPrivateMethodGet(this, _debouncedGenerateSlug, _debouncedGenerateSlug2).call(this, name);
    }
    onSave(event) {
      event.preventDefault();
      if (this.createDisabled) {
        return;
      }
      const formData = new FormData(event.currentTarget);
      const data = Object.fromEntries(formData.entries());
      data.auto_join_users = data.auto_join_users === "on";
      data.slug ??= this.autoGeneratedSlug;
      data.threading_enabled = data.threading_enabled === "on";
      if (data.auto_join_users) {
        this.dialog.yesNoConfirm({
          message: this.autoJoinWarning,
          didConfirm: () => _classPrivateMethodGet(this, _createChannel, _createChannel2).call(this, data)
        });
      } else {
        _classPrivateMethodGet(this, _createChannel, _createChannel2).call(this, data);
      }
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "dialog", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "flash", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "name", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "category", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "categoryId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "autoGeneratedSlug", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "categoryPermissionsHint", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "autoJoinWarning", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "loadingPermissionHint", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "onShow", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onShow"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onCategoryChange", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onCategoryChange"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onNameChange", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onNameChange"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onSave", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onSave"), _class.prototype)), _class);
  async function _createChannel2(data) {
    try {
      const channel = await this.chatApi.createChannel(data);
      this.args.closeModal();
      this.chatChannelsManager.follow(channel);
      this.router.transitionTo("chat.channel", ...channel.routeModels);
    } catch (e) {
      this.flash = (0, _ajaxError.extractError)(e);
    }
  }
  function _buildCategorySlug2(category) {
    const parent = category.parentCategory;
    if (parent) {
      return `${_classPrivateMethodGet(this, _buildCategorySlug, _buildCategorySlug2).call(this, parent)}/${category.slug}`;
    } else {
      return category.slug;
    }
  }
  function _updateAutoJoinConfirmWarning2(category, catPermissions) {
    const allowedGroups = catPermissions.allowed_groups;
    let warning;
    if (catPermissions.private) {
      switch (allowedGroups.length) {
        case 1:
          warning = _discourseI18n.default.t("chat.create_channel.auto_join_users.warning_1_group", {
            count: catPermissions.members_count,
            group: (0, _utilities.escapeExpression)(allowedGroups[0])
          });
          break;
        case 2:
          warning = _discourseI18n.default.t("chat.create_channel.auto_join_users.warning_2_groups", {
            count: catPermissions.members_count,
            group1: (0, _utilities.escapeExpression)(allowedGroups[0]),
            group2: (0, _utilities.escapeExpression)(allowedGroups[1])
          });
          break;
        default:
          warning = _discourseI18n.default.messageFormat("chat.create_channel.auto_join_users.warning_multiple_groups_MF", {
            groupCount: allowedGroups.length - 1,
            userCount: catPermissions.members_count,
            groupName: (0, _utilities.escapeExpression)(allowedGroups[0])
          });
          break;
      }
    } else {
      warning = _discourseI18n.default.t("chat.create_channel.auto_join_users.public_category_warning", {
        category: (0, _utilities.escapeExpression)(category.name)
      });
    }
    this.autoJoinWarning = warning;
  }
  function _updatePermissionsHint2(category) {
    if (category) {
      const fullSlug = _classPrivateMethodGet(this, _buildCategorySlug, _buildCategorySlug2).call(this, category);
      this.loadingPermissionHint = true;
      return this.chatApi.categoryPermissions(category.id).then(catPermissions => {
        _classPrivateMethodGet(this, _updateAutoJoinConfirmWarning, _updateAutoJoinConfirmWarning2).call(this, category, catPermissions);
        const allowedGroups = catPermissions.allowed_groups;
        const settingLink = `/c/${(0, _utilities.escapeExpression)(fullSlug)}/edit/security`;
        let hint;
        switch (allowedGroups.length) {
          case 1:
            hint = _discourseI18n.default.t("chat.create_channel.choose_category.hint_1_group", {
              settingLink,
              group: (0, _utilities.escapeExpression)(allowedGroups[0])
            });
            break;
          case 2:
            hint = _discourseI18n.default.t("chat.create_channel.choose_category.hint_2_groups", {
              settingLink,
              group1: (0, _utilities.escapeExpression)(allowedGroups[0]),
              group2: (0, _utilities.escapeExpression)(allowedGroups[1])
            });
            break;
          default:
            hint = _discourseI18n.default.t("chat.create_channel.choose_category.hint_multiple_groups", {
              settingLink,
              group: (0, _utilities.escapeExpression)(allowedGroups[0]),
              count: allowedGroups.length - 1
            });
            break;
        }
        this.categoryPermissionsHint = (0, _template.htmlSafe)(hint);
      }).finally(() => {
        this.loadingPermissionHint = false;
      });
    } else {
      this.categoryPermissionsHint = DEFAULT_HINT;
      this.autoJoinWarning = "";
    }
  }
  function _generateSlug2(name) {
    return (0, _ajax.ajax)("/slugs.json", {
      type: "POST",
      data: {
        name
      }
    }).then(response => {
      this.autoGeneratedSlug = response.slug;
    });
  }
  function _debouncedGenerateSlug2(name) {
    (0, _runloop.cancel)(_classPrivateFieldGet(this, _generateSlugHandler));
    this.autoGeneratedSlug = "";
    if (!name) {
      return;
    }
    _classPrivateFieldSet(this, _generateSlugHandler, (0, _debounce.default)(this, _classPrivateMethodGet(this, _generateSlug, _generateSlug2), name, 300));
  }
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatModalCreateChannel);
});
define("discourse/plugins/chat/discourse/components/chat/modal/delete-channel", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/service", "@ember/template", "@ember/utils", "discourse/components/d-button", "discourse/components/d-modal", "discourse/components/text-field", "discourse/lib/ajax-error", "discourse-common/helpers/i18n", "discourse-common/lib/later", "discourse-i18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _object, _service, _template, _utils, _dButton, _dModal, _textField, _ajaxError, _i18n, _later, _discourseI18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatModalDeleteChannel = _exports.default = (_class = (_class2 = class ChatModalDeleteChannel extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      _initializerDefineProperty(this, "channelNameConfirmation", _descriptor3, this);
      _initializerDefineProperty(this, "deleting", _descriptor4, this);
      _initializerDefineProperty(this, "confirmed", _descriptor5, this);
      _initializerDefineProperty(this, "flash", _descriptor6, this);
      _initializerDefineProperty(this, "flashType", _descriptor7, this);
    }
    get channel() {
      return this.args.model.channel;
    }
    get buttonDisabled() {
      if (this.deleting || this.confirmed) {
        return true;
      }
      if ((0, _utils.isEmpty)(this.channelNameConfirmation) || this.channelNameConfirmation.toLowerCase() !== this.channel.title.toLowerCase()) {
        return true;
      }
      return false;
    }
    get instructionsText() {
      return (0, _template.htmlSafe)(_discourseI18n.default.t("chat.channel_delete.instructions", {
        name: this.channel.escapedTitle
      }));
    }
    deleteChannel() {
      this.deleting = true;
      return this.chatApi.destroyChannel(this.channel.id, this.channelNameConfirmation).then(() => {
        this.confirmed = true;
        this.flash = _discourseI18n.default.t("chat.channel_delete.process_started");
        this.flashType = "success";
        (0, _later.default)(() => {
          this.args.closeModal();
          this.router.transitionTo("chat");
        }, 3000);
      }).catch(_ajaxError.popupAjaxError).finally(() => this.deleting = false);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <DModal
        @closeModal={{@closeModal}}
        class="chat-modal-delete-channel"
        @inline={{@inline}}
        @title={{i18n "chat.channel_delete.title"}}
        @flash={{this.flash}}
        @flashType={{this.flashType}}
      >
        <:body>
          <p class="chat-modal-delete-channel__instructions">
            {{this.instructionsText}}
          </p>
  
          <TextField
            @value={{this.channelNameConfirmation}}
            @id="channel-delete-confirm-name"
            @placeholderKey="chat.channel_delete.confirm_channel_name"
            @autocorrect="off"
            @autocapitalize="off"
          />
        </:body>
        <:footer>
          <DButton
            @disabled={{this.buttonDisabled}}
            @action={{this.deleteChannel}}
            @label="chat.channel_delete.confirm"
            id="chat-confirm-delete-channel"
            class="btn-danger"
          />
          <DButton @label="cancel" @action={{@closeModal}} class="btn-flat" />
        </:footer>
      </DModal>
    
  */
  {
    "id": "rC8Dnbms",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[24,0,\"chat-modal-delete-channel\"]],[[\"@closeModal\",\"@inline\",\"@title\",\"@flash\",\"@flashType\"],[[30,1],[30,2],[28,[32,1],[\"chat.channel_delete.title\"],null],[30,0,[\"flash\"]],[30,0,[\"flashType\"]]]],[[\"body\",\"footer\"],[[[[1,\"\\n        \"],[10,2],[14,0,\"chat-modal-delete-channel__instructions\"],[12],[1,\"\\n          \"],[1,[30,0,[\"instructionsText\"]]],[1,\"\\n        \"],[13],[1,\"\\n\\n        \"],[8,[32,2],null,[[\"@value\",\"@id\",\"@placeholderKey\",\"@autocorrect\",\"@autocapitalize\"],[[30,0,[\"channelNameConfirmation\"]],\"channel-delete-confirm-name\",\"chat.channel_delete.confirm_channel_name\",\"off\",\"off\"]],null],[1,\"\\n      \"]],[]],[[[1,\"\\n        \"],[8,[32,3],[[24,1,\"chat-confirm-delete-channel\"],[24,0,\"btn-danger\"]],[[\"@disabled\",\"@action\",\"@label\"],[[30,0,[\"buttonDisabled\"]],[30,0,[\"deleteChannel\"]],\"chat.channel_delete.confirm\"]],null],[1,\"\\n        \"],[8,[32,3],[[24,0,\"btn-flat\"]],[[\"@label\",\"@action\"],[\"cancel\",[30,1]]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n  \"]],[\"@closeModal\",\"@inline\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/modal/delete-channel.js",
    "scope": () => [_dModal.default, _i18n.default, _textField.default, _dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "channelNameConfirmation", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "deleting", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "confirmed", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "flash", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "flashType", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "deleteChannel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "deleteChannel"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/modal/edit-channel-description", ["exports", "@ember/component", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/service", "discourse/lib/ajax-error", "@ember/template-factory"], function (_exports, _component, _component2, _tracking, _object, _service, _ajaxError, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <DModal
    @closeModal={{@closeModal}}
    class="chat-modal-edit-channel-description"
    @inline={{@inline}}
    @title={{i18n "chat.channel_edit_description_modal.title"}}
    @flash={{this.flash}}
  >
    <:body>
      <span class="chat-modal-edit-channel-description__description">{{i18n
          "chat.channel_edit_description_modal.description"
        }}</span>
      <CharCounter
        @value={{this.editedDescription}}
        @max={{this.descriptionMaxLength}}
      >
        <textarea
          {{on
            "input"
            (action this.onChangeChatChannelDescription value="target.value")
          }}
          class="chat-modal-edit-channel-description__description-input"
          placeholder={{i18n
            "chat.channel_edit_description_modal.input_placeholder"
          }}
        >{{this.editedDescription}}</textarea>
      </CharCounter>
    </:body>
    <:footer>
      <DButton
        @action={{this.onSaveChatChannelDescription}}
        @label="save"
        @disabled={{this.isSaveDisabled}}
        class="btn-primary create"
      />
      <DModalCancel @close={{@closeModal}} />
    </:footer>
  </DModal>
  */
  {
    "id": "TZprB0qD",
    "block": "[[[8,[39,0],[[24,0,\"chat-modal-edit-channel-description\"]],[[\"@closeModal\",\"@inline\",\"@title\",\"@flash\"],[[30,1],[30,2],[28,[37,1],[\"chat.channel_edit_description_modal.title\"],null],[30,0,[\"flash\"]]]],[[\"body\",\"footer\"],[[[[1,\"\\n    \"],[10,1],[14,0,\"chat-modal-edit-channel-description__description\"],[12],[1,[28,[35,1],[\"chat.channel_edit_description_modal.description\"],null]],[13],[1,\"\\n    \"],[8,[39,2],null,[[\"@value\",\"@max\"],[[30,0,[\"editedDescription\"]],[30,0,[\"descriptionMaxLength\"]]]],[[\"default\"],[[[[1,\"\\n      \"],[11,\"textarea\"],[24,0,\"chat-modal-edit-channel-description__description-input\"],[16,\"placeholder\",[28,[37,1],[\"chat.channel_edit_description_modal.input_placeholder\"],null]],[4,[38,3],[\"input\",[28,[37,4],[[30,0],[30,0,[\"onChangeChatChannelDescription\"]]],[[\"value\"],[\"target.value\"]]]],null],[12],[1,[30,0,[\"editedDescription\"]]],[13],[1,\"\\n    \"]],[]]]]],[1,\"\\n  \"]],[]],[[[1,\"\\n    \"],[8,[39,5],[[24,0,\"btn-primary create\"]],[[\"@action\",\"@label\",\"@disabled\"],[[30,0,[\"onSaveChatChannelDescription\"]],\"save\",[30,0,[\"isSaveDisabled\"]]]],null],[1,\"\\n    \"],[8,[39,6],null,[[\"@close\"],[[30,1]]],null],[1,\"\\n  \"]],[]]]]]],[\"@closeModal\",\"@inline\"],false,[\"d-modal\",\"i18n\",\"char-counter\",\"on\",\"action\",\"d-button\",\"d-modal-cancel\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/chat/modal/edit-channel-description.hbs",
    "isStrictMode": false
  });
  const DESCRIPTION_MAX_LENGTH = 280;
  let ChatModalEditChannelDescription = _exports.default = (_class = class ChatModalEditChannelDescription extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "editedDescription", _descriptor2, this);
      _initializerDefineProperty(this, "flash", _descriptor3, this);
    }
    get channel() {
      return this.args.model;
    }
    get isSaveDisabled() {
      return this.channel.description === this.editedDescription || this.editedDescription?.length > DESCRIPTION_MAX_LENGTH;
    }
    get descriptionMaxLength() {
      return DESCRIPTION_MAX_LENGTH;
    }
    async onSaveChatChannelDescription() {
      try {
        const result = await this.chatApi.updateChannel(this.channel.id, {
          description: this.editedDescription
        });
        this.channel.description = result.channel.description;
        this.args.closeModal();
      } catch (error) {
        this.flash = (0, _ajaxError.extractError)(error);
      }
    }
    onChangeChatChannelDescription(description) {
      this.flash = null;
      this.editedDescription = description;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "editedDescription", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.channel.description || "";
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "flash", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "onSaveChatChannelDescription", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onSaveChatChannelDescription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onChangeChatChannelDescription", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onChangeChatChannelDescription"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatModalEditChannelDescription);
});
define("discourse/plugins/chat/discourse/components/chat/modal/edit-channel-name", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/component", "@ember/modifier", "@ember/object", "@ember/runloop", "@ember/service", "discourse/components/d-button", "discourse/components/d-modal", "discourse/components/d-modal-cancel", "discourse/lib/ajax", "discourse/lib/ajax-error", "discourse-common/helpers/i18n", "discourse-common/lib/debounce", "float-kit/components/d-tooltip", "discourse/plugins/chat/discourse/lib/slugify-channel", "@ember/template-factory"], function (_exports, _component, _tracking, _component2, _modifier, _object, _runloop, _service, _dButton, _dModal, _dModalCancel, _ajax, _ajaxError, _i18n, _debounce, _dTooltip, _slugifyChannel, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class2, _generateSlugHandler, _debouncedGenerateSlug, _generateSlug;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
  function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
  function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
  function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
  function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const SLUG_MAX_LENGTH = 100;
  let ChatModalEditChannelName = _exports.default = (_class = (_generateSlugHandler = /*#__PURE__*/new WeakMap(), _debouncedGenerateSlug = /*#__PURE__*/new WeakSet(), _generateSlug = /*#__PURE__*/new WeakSet(), (_class2 = class ChatModalEditChannelName extends _component.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _generateSlug);
      _classPrivateMethodInitSpec(this, _debouncedGenerateSlug);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor3, this);
      _initializerDefineProperty(this, "editedName", _descriptor4, this);
      _initializerDefineProperty(this, "editedSlug", _descriptor5, this);
      _initializerDefineProperty(this, "autoGeneratedSlug", _descriptor6, this);
      _initializerDefineProperty(this, "flash", _descriptor7, this);
      _classPrivateFieldInitSpec(this, _generateSlugHandler, {
        writable: true,
        value: null
      });
    }
    get channel() {
      return this.args.model;
    }
    get isSaveDisabled() {
      return this.channel.title === this.editedName && this.channel.slug === this.editedSlug || this.editedName?.length > this.siteSettings.max_topic_title_length || this.editedSlug?.length > SLUG_MAX_LENGTH;
    }
    async onSave() {
      try {
        const result1 = await this.chatApi.updateChannel(this.channel.id, {
          name: this.editedName,
          slug: this.editedSlug || this.autoGeneratedSlug || this.channel.slug
        });
        this.channel.title = result1.channel.title;
        this.channel.slug = result1.channel.slug;
        await this.args.closeModal();
        await this.router.replaceWith("chat.channel", ...this.channel.routeModels);
      } catch (error1) {
        this.flash = (0, _ajaxError.extractError)(error1);
      }
    }
    onChangeChatChannelName(event1) {
      this.flash = null;
      _classPrivateMethodGet(this, _debouncedGenerateSlug, _debouncedGenerateSlug2).call(this, event1?.target?.value);
    }
    onChangeChatChannelSlug() {
      this.flash = null;
      _classPrivateMethodGet(this, _debouncedGenerateSlug, _debouncedGenerateSlug2).call(this, this.editedName);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <DModal
        @closeModal={{@closeModal}}
        class="chat-modal-edit-channel-name"
        @inline={{@inline}}
        @title={{i18n "chat.channel_edit_name_slug_modal.title"}}
        @flash={{this.flash}}
      >
        <:body>
          <div class="edit-channel-control">
            <label for="channel-name" class="edit-channel-label">
              {{i18n "chat.channel_edit_name_slug_modal.name"}}
            </label>
            <Input
              name="channel-name"
              class="chat-channel-edit-name-slug-modal__name-input"
              placeholder={{i18n
                "chat.channel_edit_name_slug_modal.input_placeholder"
              }}
              @type="text"
              @value={{this.editedName}}
              {{on "input" this.onChangeChatChannelName}}
            />
          </div>
  
          <div class="edit-channel-control">
            <label for="channel-slug" class="edit-channel-label">
              {{i18n "chat.channel_edit_name_slug_modal.slug"}}&nbsp;
              <DTooltip
                @icon="info-circle"
                @content={{i18n
                  "chat.channel_edit_name_slug_modal.slug_description"
                }}
              />
            </label>
            <Input
              name="channel-slug"
              class="chat-channel-edit-name-slug-modal__slug-input"
              placeholder={{this.autoGeneratedSlug}}
              {{on "input" this.onChangeChatChannelSlug}}
              @type="text"
              @value={{this.editedSlug}}
            />
          </div>
        </:body>
        <:footer>
          <DButton
            @action={{this.onSave}}
            @label="save"
            @disabled={{this.isSaveDisabled}}
            class="btn-primary create"
          />
          <DModalCancel @close={{@closeModal}} />
        </:footer>
      </DModal>
    
  */
  {
    "id": "QeXyydzv",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[24,0,\"chat-modal-edit-channel-name\"]],[[\"@closeModal\",\"@inline\",\"@title\",\"@flash\"],[[30,1],[30,2],[28,[32,1],[\"chat.channel_edit_name_slug_modal.title\"],null],[30,0,[\"flash\"]]]],[[\"body\",\"footer\"],[[[[1,\"\\n        \"],[10,0],[14,0,\"edit-channel-control\"],[12],[1,\"\\n          \"],[10,\"label\"],[14,\"for\",\"channel-name\"],[14,0,\"edit-channel-label\"],[12],[1,\"\\n            \"],[1,[28,[32,1],[\"chat.channel_edit_name_slug_modal.name\"],null]],[1,\"\\n          \"],[13],[1,\"\\n          \"],[8,[32,2],[[24,3,\"channel-name\"],[24,0,\"chat-channel-edit-name-slug-modal__name-input\"],[16,\"placeholder\",[28,[32,1],[\"chat.channel_edit_name_slug_modal.input_placeholder\"],null]],[4,[32,3],[\"input\",[30,0,[\"onChangeChatChannelName\"]]],null]],[[\"@type\",\"@value\"],[\"text\",[30,0,[\"editedName\"]]]],null],[1,\"\\n        \"],[13],[1,\"\\n\\n        \"],[10,0],[14,0,\"edit-channel-control\"],[12],[1,\"\\n          \"],[10,\"label\"],[14,\"for\",\"channel-slug\"],[14,0,\"edit-channel-label\"],[12],[1,\"\\n            \"],[1,[28,[32,1],[\"chat.channel_edit_name_slug_modal.slug\"],null]],[1,\" \\n            \"],[8,[32,4],null,[[\"@icon\",\"@content\"],[\"info-circle\",[28,[32,1],[\"chat.channel_edit_name_slug_modal.slug_description\"],null]]],null],[1,\"\\n          \"],[13],[1,\"\\n          \"],[8,[32,2],[[24,3,\"channel-slug\"],[24,0,\"chat-channel-edit-name-slug-modal__slug-input\"],[16,\"placeholder\",[30,0,[\"autoGeneratedSlug\"]]],[4,[32,3],[\"input\",[30,0,[\"onChangeChatChannelSlug\"]]],null]],[[\"@type\",\"@value\"],[\"text\",[30,0,[\"editedSlug\"]]]],null],[1,\"\\n        \"],[13],[1,\"\\n      \"]],[]],[[[1,\"\\n        \"],[8,[32,5],[[24,0,\"btn-primary create\"]],[[\"@action\",\"@label\",\"@disabled\"],[[30,0,[\"onSave\"]],\"save\",[30,0,[\"isSaveDisabled\"]]]],null],[1,\"\\n        \"],[8,[32,6],null,[[\"@close\"],[[30,1]]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n  \"]],[\"@closeModal\",\"@inline\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/modal/edit-channel-name.js",
    "scope": () => [_dModal.default, _i18n.default, _component2.Input, _modifier.on, _dTooltip.default, _dButton.default, _dModalCancel.default],
    "isStrictMode": true
  }), _class2), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "editedName", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.channel.title;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "editedSlug", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.channel.slug;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "autoGeneratedSlug", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.channel.slug ?? (0, _slugifyChannel.default)(this.channel);
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "flash", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "onSave", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onSave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onChangeChatChannelName", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onChangeChatChannelName"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onChangeChatChannelSlug", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onChangeChatChannelSlug"), _class.prototype)), _class);
  function _debouncedGenerateSlug2(name1) {
    (0, _runloop.cancel)(_classPrivateFieldGet(this, _generateSlugHandler));
    this.autoGeneratedSlug = "";
    if (!name1) {
      return;
    }
    _classPrivateFieldSet(this, _generateSlugHandler, (0, _debounce.default)(this, _classPrivateMethodGet(this, _generateSlug, _generateSlug2), name1, 300));
  }
  async function _generateSlug2(name1) {
    try {
      await (0, _ajax.ajax)("/slugs.json", {
        type: "POST",
        data: {
          name: name1
        }
      }).then(response1 => {
        this.autoGeneratedSlug = response1.slug;
      });
    } catch (error1) {
      // eslint-disable-next-line no-console
      console.log(error1);
    }
  }
});
define("discourse/plugins/chat/discourse/components/chat/modal/move-message-to-channel", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/service", "@ember/template", "@ember/utils", "discourse/components/d-button", "discourse/components/d-modal", "discourse/lib/ajax-error", "discourse-common/helpers/i18n", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat-channel-chooser", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _object, _service, _template, _utils, _dButton, _dModal, _ajaxError, _i18n, _discourseI18n, _chatChannelChooser, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatModalMoveMessageToChannel = _exports.default = (_class = (_class2 = class ChatModalMoveMessageToChannel extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatApi", _descriptor2, this);
      _initializerDefineProperty(this, "router", _descriptor3, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor4, this);
      _initializerDefineProperty(this, "destinationChannelId", _descriptor5, this);
    }
    get sourceChannel() {
      return this.args.model.sourceChannel;
    }
    get selectedMessageIds() {
      return this.args.model.selectedMessageIds;
    }
    get selectedMessageCount() {
      return this.selectedMessageIds?.length;
    }
    get disableMoveButton() {
      return (0, _utils.isBlank)(this.destinationChannelId);
    }
    get availableChannels() {
      return (this.args.model.availableChannels || this.chatChannelsManager.publicMessageChannels).rejectBy("id", this.sourceChannel.id);
    }
    get instructionsText() {
      return (0, _template.htmlSafe)(_discourseI18n.default.t("chat.move_to_channel.instructions", {
        channelTitle: this.sourceChannel.escapedTitle,
        count: this.selectedMessageCount
      }));
    }
    moveMessages() {
      return this.chatApi.moveChannelMessages(this.sourceChannel.id, {
        message_ids: this.selectedMessageIds,
        destination_channel_id: this.destinationChannelId
      }).then(response1 => {
        this.args.closeModal();
        this.router.transitionTo("chat.channel.near-message", "-", response1.destination_channel_id, response1.first_moved_message_id);
      }).catch(_ajaxError.popupAjaxError);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <DModal
        @closeModal={{@closeModal}}
        class="chat-modal-move-message-to-channel"
        @inline={{@inline}}
        @title={{i18n "chat.move_to_channel.title"}}
      >
        <:body>
          {{#if this.selectedMessageCount}}
            <p>{{this.instructionsText}}</p>
          {{/if}}
  
          <ChatChannelChooser
            @content={{this.availableChannels}}
            @value={{this.destinationChannelId}}
            @nameProperty="title"
            class="chat-modal-move-message-to-channel__channel-chooser"
          />
        </:body>
        <:footer>
          <DButton
            @icon="sign-out-alt"
            @disabled={{this.disableMoveButton}}
            @action={{this.moveMessages}}
            @label="chat.move_to_channel.confirm_move"
            class="btn-primary"
          />
          <DButton @label="cancel" @action={{@closeModal}} class="btn-flat" />
        </:footer>
      </DModal>
    
  */
  {
    "id": "El4/l4po",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[24,0,\"chat-modal-move-message-to-channel\"]],[[\"@closeModal\",\"@inline\",\"@title\"],[[30,1],[30,2],[28,[32,1],[\"chat.move_to_channel.title\"],null]]],[[\"body\",\"footer\"],[[[[1,\"\\n\"],[41,[30,0,[\"selectedMessageCount\"]],[[[1,\"          \"],[10,2],[12],[1,[30,0,[\"instructionsText\"]]],[13],[1,\"\\n\"]],[]],null],[1,\"\\n        \"],[8,[32,2],[[24,0,\"chat-modal-move-message-to-channel__channel-chooser\"]],[[\"@content\",\"@value\",\"@nameProperty\"],[[30,0,[\"availableChannels\"]],[30,0,[\"destinationChannelId\"]],\"title\"]],null],[1,\"\\n      \"]],[]],[[[1,\"\\n        \"],[8,[32,3],[[24,0,\"btn-primary\"]],[[\"@icon\",\"@disabled\",\"@action\",\"@label\"],[\"sign-out-alt\",[30,0,[\"disableMoveButton\"]],[30,0,[\"moveMessages\"]],\"chat.move_to_channel.confirm_move\"]],null],[1,\"\\n        \"],[8,[32,3],[[24,0,\"btn-flat\"]],[[\"@label\",\"@action\"],[\"cancel\",[30,1]]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n  \"]],[\"@closeModal\",\"@inline\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/modal/move-message-to-channel.js",
    "scope": () => [_dModal.default, _i18n.default, _chatChannelChooser.default, _dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "destinationChannelId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "moveMessages", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "moveMessages"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/modal/new-message", ["exports", "@glimmer/component", "@ember/service", "discourse/components/d-modal", "discourse/plugins/chat/discourse/components/chat/message-creator", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _dModal, _messageCreator, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatModalNewMessage = _exports.default = (_class = (_class2 = class ChatModalNewMessage extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor2, this);
    }
    get shouldRender() {
      return this.siteSettings.enable_public_channels || this.chat.userCanDirectMessage;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.shouldRender}}
        <DModal
          @closeModal={{@closeModal}}
          class="chat-modal-new-message"
          @title="chat.new_message_modal.title"
          @inline={{@inline}}
          @hideHeader={{true}}
        >
          <MessageCreator @onClose={{@closeModal}} @channel={{@model}} />
        </DModal>
      {{/if}}
    
  */
  {
    "id": "93ffwj30",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"shouldRender\"]],[[[1,\"      \"],[8,[32,0],[[24,0,\"chat-modal-new-message\"]],[[\"@closeModal\",\"@title\",\"@inline\",\"@hideHeader\"],[[30,1],\"chat.new_message_modal.title\",[30,2],true]],[[\"default\"],[[[[1,\"\\n        \"],[8,[32,1],null,[[\"@onClose\",\"@channel\"],[[30,1],[30,3]]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@closeModal\",\"@inline\",\"@model\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/modal/new-message.js",
    "scope": () => [_dModal.default, _messageCreator.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/modal/thread-settings", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/component", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse/components/d-modal", "discourse/lib/ajax-error", "discourse-common/helpers/i18n", "@ember/template-factory"], function (_exports, _component, _tracking, _component2, _object, _service, _dButton, _dModal, _ajaxError, _i18n, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatModalThreadSettings = _exports.default = (_class = (_class2 = class ChatModalThreadSettings extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "editedTitle", _descriptor2, this);
      _initializerDefineProperty(this, "saving", _descriptor3, this);
    }
    get buttonDisabled() {
      return this.saving;
    }
    get thread() {
      return this.args.model;
    }
    saveThread() {
      this.saving = true;
      this.chatApi.editThread(this.thread.channel.id, this.thread.id, {
        title: this.editedTitle
      }).then(() => {
        this.thread.title = this.editedTitle;
        this.args.closeModal();
      }).catch(_ajaxError.popupAjaxError).finally(() => {
        this.saving = false;
      });
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <DModal
        @closeModal={{@closeModal}}
        class="chat-modal-thread-settings"
        @inline={{@inline}}
        @title={{i18n "chat.thread.settings"}}
      >
        <:body>
          <label for="thread-title" class="thread-title-label">
            {{i18n "chat.thread.title"}}
          </label>
          <Input
            name="thread-title"
            class="chat-modal-thread-settings__title-input"
            @type="text"
            @value={{this.editedTitle}}
          />
        </:body>
        <:footer>
          <DButton
            @disabled={{this.buttonDisabled}}
            @action={{this.saveThread}}
            @label="save"
            class="btn-primary"
          />
        </:footer>
      </DModal>
    
  */
  {
    "id": "DemsKV13",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[24,0,\"chat-modal-thread-settings\"]],[[\"@closeModal\",\"@inline\",\"@title\"],[[30,1],[30,2],[28,[32,1],[\"chat.thread.settings\"],null]]],[[\"body\",\"footer\"],[[[[1,\"\\n        \"],[10,\"label\"],[14,\"for\",\"thread-title\"],[14,0,\"thread-title-label\"],[12],[1,\"\\n          \"],[1,[28,[32,1],[\"chat.thread.title\"],null]],[1,\"\\n        \"],[13],[1,\"\\n        \"],[8,[32,2],[[24,3,\"thread-title\"],[24,0,\"chat-modal-thread-settings__title-input\"]],[[\"@type\",\"@value\"],[\"text\",[30,0,[\"editedTitle\"]]]],null],[1,\"\\n      \"]],[]],[[[1,\"\\n        \"],[8,[32,3],[[24,0,\"btn-primary\"]],[[\"@disabled\",\"@action\",\"@label\"],[[30,0,[\"buttonDisabled\"]],[30,0,[\"saveThread\"]],\"save\"]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n  \"]],[\"@closeModal\",\"@inline\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/modal/thread-settings.js",
    "scope": () => [_dModal.default, _i18n.default, _component2.Input, _dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "editedTitle", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.thread.title || "";
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "saving", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "saveThread", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "saveThread"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/modal/toggle-channel-status", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "@ember/template", "discourse/components/d-button", "discourse/components/d-modal", "discourse/lib/ajax-error", "discourse-common/helpers/i18n", "discourse-i18n", "discourse/plugins/chat/discourse/models/chat-channel", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _template, _dButton, _dModal, _ajaxError, _i18n, _discourseI18n, _chatChannel, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatModalToggleChannelStatus = _exports.default = (_class = (_class2 = class ChatModalToggleChannelStatus extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
    }
    get channel() {
      return this.args.model;
    }
    get buttonLabel() {
      if (this.channel?.isClosed) {
        return "chat.channel_settings.open_channel";
      } else {
        return "chat.channel_settings.close_channel";
      }
    }
    get instructions() {
      if (this.channel?.isClosed) {
        return (0, _template.htmlSafe)(_discourseI18n.default.t("chat.channel_open.instructions"));
      } else {
        return (0, _template.htmlSafe)(_discourseI18n.default.t("chat.channel_close.instructions"));
      }
    }
    get modalTitle() {
      if (this.channel?.isClosed) {
        return "chat.channel_open.title";
      } else {
        return "chat.channel_close.title";
      }
    }
    onStatusChange() {
      const status1 = this.channel.isClosed ? _chatChannel.CHANNEL_STATUSES.open : _chatChannel.CHANNEL_STATUSES.closed;
      return this.chatApi.updateChannelStatus(this.channel.id, status1).then(() => {
        this.args.closeModal();
        this.router.transitionTo("chat.channel", ...this.channel.routeModels);
      }).catch(_ajaxError.popupAjaxError);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <DModal
        @closeModal={{@closeModal}}
        class="chat-modal-toggle-channel-status"
        @inline={{@inline}}
        @title={{i18n this.modalTitle}}
      >
        <:body>
          <p
            class="chat-modal-toggle-channel-status__instructions"
          >{{this.instructions}}</p>
        </:body>
        <:footer>
          <DButton
            @action={{this.onStatusChange}}
            @label={{this.buttonLabel}}
            id="chat-channel-toggle-btn"
            class="btn-primary"
          />
        </:footer>
      </DModal>
    
  */
  {
    "id": "Giqdp62A",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[24,0,\"chat-modal-toggle-channel-status\"]],[[\"@closeModal\",\"@inline\",\"@title\"],[[30,1],[30,2],[28,[32,1],[[30,0,[\"modalTitle\"]]],null]]],[[\"body\",\"footer\"],[[[[1,\"\\n        \"],[10,2],[14,0,\"chat-modal-toggle-channel-status__instructions\"],[12],[1,[30,0,[\"instructions\"]]],[13],[1,\"\\n      \"]],[]],[[[1,\"\\n        \"],[8,[32,2],[[24,1,\"chat-channel-toggle-btn\"],[24,0,\"btn-primary\"]],[[\"@action\",\"@label\"],[[30,0,[\"onStatusChange\"]],[30,0,[\"buttonLabel\"]]]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n  \"]],[\"@closeModal\",\"@inline\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/modal/toggle-channel-status.js",
    "scope": () => [_dModal.default, _i18n.default, _dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "onStatusChange", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onStatusChange"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/actions", ["exports", "@glimmer/component", "@ember/helper", "discourse/plugins/chat/discourse/components/chat/navbar/close-drawer-button", "discourse/plugins/chat/discourse/components/chat/navbar/close-thread-button", "discourse/plugins/chat/discourse/components/chat/navbar/close-threads-button", "discourse/plugins/chat/discourse/components/chat/navbar/full-page-button", "discourse/plugins/chat/discourse/components/chat/navbar/new-channel-button", "discourse/plugins/chat/discourse/components/chat/navbar/open-drawer-button", "discourse/plugins/chat/discourse/components/chat/navbar/thread-settings-button", "discourse/plugins/chat/discourse/components/chat/navbar/thread-tracking-dropdown", "discourse/plugins/chat/discourse/components/chat/navbar/threads-list-button", "discourse/plugins/chat/discourse/components/chat/navbar/toggle-drawer-button", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _closeDrawerButton, _closeThreadButton, _closeThreadsButton, _fullPageButton, _newChannelButton, _openDrawerButton, _threadSettingsButton, _threadTrackingDropdown, _threadsListButton, _toggleDrawerButton, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatNavbarActions extends _component.default {
    get openDrawerButtonComponent() {
      return _openDrawerButton.default;
    }
    get newChannelButtonComponent() {
      return _newChannelButton.default;
    }
    get threadTrackingDropdownComponent() {
      return _threadTrackingDropdown.default;
    }
    get closeThreadButtonComponent() {
      return _closeThreadButton.default;
    }
    get closeThreadsButtonComponent() {
      return _closeThreadsButton.default;
    }
    get threadSettingsButtonComponent() {
      return _threadSettingsButton.default;
    }
    get threadsListButtonComponent() {
      return _threadsListButton.default;
    }
    get closeDrawerButtonComponent() {
      return _closeDrawerButton.default;
    }
    get toggleDrawerButtonComponent() {
      return _toggleDrawerButton.default;
    }
    get chatNavbarFullPageButtonComponent() {
      return _fullPageButton.default;
    }
  }
  _exports.default = ChatNavbarActions;
  _class = ChatNavbarActions;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <nav class="c-navbar__actions">
        {{yield
          (hash
            OpenDrawerButton=this.openDrawerButtonComponent
            NewChannelButton=this.newChannelButtonComponent
            ThreadTrackingDropdown=this.threadTrackingDropdownComponent
            CloseThreadButton=this.closeThreadButtonComponent
            CloseThreadsButton=this.closeThreadsButtonComponent
            ThreadSettingsButton=this.threadSettingsButtonComponent
            ThreadsListButton=this.threadsListButtonComponent
            CloseDrawerButton=this.closeDrawerButtonComponent
            ToggleDrawerButton=this.toggleDrawerButtonComponent
            FullPageButton=this.chatNavbarFullPageButtonComponent
          )
        }}
      </nav>
    
  */
  {
    "id": "/nIuE8aR",
    "block": "[[[1,\"\\n    \"],[10,\"nav\"],[14,0,\"c-navbar__actions\"],[12],[1,\"\\n      \"],[18,1,[[28,[32,0],null,[[\"OpenDrawerButton\",\"NewChannelButton\",\"ThreadTrackingDropdown\",\"CloseThreadButton\",\"CloseThreadsButton\",\"ThreadSettingsButton\",\"ThreadsListButton\",\"CloseDrawerButton\",\"ToggleDrawerButton\",\"FullPageButton\"],[[30,0,[\"openDrawerButtonComponent\"]],[30,0,[\"newChannelButtonComponent\"]],[30,0,[\"threadTrackingDropdownComponent\"]],[30,0,[\"closeThreadButtonComponent\"]],[30,0,[\"closeThreadsButtonComponent\"]],[30,0,[\"threadSettingsButtonComponent\"]],[30,0,[\"threadsListButtonComponent\"]],[30,0,[\"closeDrawerButtonComponent\"]],[30,0,[\"toggleDrawerButtonComponent\"]],[30,0,[\"chatNavbarFullPageButtonComponent\"]]]]]]],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"&default\"],false,[\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/actions.js",
    "scope": () => [_helper.hash],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/back-button", ["exports", "@glimmer/component", "@ember/routing", "discourse-common/helpers/d-icon", "I18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _routing, _dIcon, _I18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatNavbarBackButton extends _component.default {
    get icon() {
      return this.args.icon ?? "chevron-left";
    }
    get title() {
      return this.args.title ?? _I18n.default.t("chat.browse.back");
    }
  }
  _exports.default = ChatNavbarBackButton;
  _class = ChatNavbarBackButton;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @routeModels}}
        <LinkTo
          @route={{@route}}
          @models={{@routeModels}}
          class="c-navbar__back-button no-text btn-flat btn"
          title={{this.title}}
        >
          {{#if (has-block)}}
            {{yield}}
          {{else}}
            {{icon this.icon}}
          {{/if}}
        </LinkTo>
      {{else}}
        <LinkTo
          @route="chat"
          class="c-navbar__back-button no-text btn-flat btn"
          title={{this.title}}
        >
          {{#if (has-block)}}
            {{yield}}
          {{else}}
            {{icon this.icon}}
          {{/if}}
        </LinkTo>
      {{/if}}
    
  */
  {
    "id": "qVK5pZx5",
    "block": "[[[1,\"\\n\"],[41,[30,1],[[[1,\"      \"],[8,[32,0],[[24,0,\"c-navbar__back-button no-text btn-flat btn\"],[16,\"title\",[30,0,[\"title\"]]]],[[\"@route\",\"@models\"],[[30,2],[30,1]]],[[\"default\"],[[[[1,\"\\n\"],[41,[48,[30,3]],[[[1,\"          \"],[18,3,null],[1,\"\\n\"]],[]],[[[1,\"          \"],[1,[28,[32,1],[[30,0,[\"icon\"]]],null]],[1,\"\\n\"]],[]]],[1,\"      \"]],[]]]]],[1,\"\\n\"]],[]],[[[1,\"      \"],[8,[32,0],[[24,0,\"c-navbar__back-button no-text btn-flat btn\"],[16,\"title\",[30,0,[\"title\"]]]],[[\"@route\"],[\"chat\"]],[[\"default\"],[[[[1,\"\\n\"],[41,[48,[30,3]],[[[1,\"          \"],[18,3,null],[1,\"\\n\"]],[]],[[[1,\"          \"],[1,[28,[32,1],[[30,0,[\"icon\"]]],null]],[1,\"\\n\"]],[]]],[1,\"      \"]],[]]]]],[1,\"\\n\"]],[]]],[1,\"  \"]],[\"@routeModels\",\"@route\",\"&default\"],false,[\"if\",\"has-block\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/back-button.js",
    "scope": () => [_routing.LinkTo, _dIcon.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/channel-title", ["exports", "@glimmer/component", "@ember/routing", "discourse/plugins/chat/discourse/components/channel-title", "@ember/template-factory", "@ember/component"], function (_exports, _component, _routing, _channelTitle, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatNavbarChannelTitle extends _component.default {}
  _exports.default = ChatNavbarChannelTitle;
  _class = ChatNavbarChannelTitle;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @channel}}
        <LinkTo
          @route="chat.channel.info.members"
          @models={{@channel.routeModels}}
          class="c-navbar__channel-title"
        >
          <ChannelTitle @channel={{@channel}} />
        </LinkTo>
      {{/if}}
    
  */
  {
    "id": "ZQRhpR+Y",
    "block": "[[[1,\"\\n\"],[41,[30,1],[[[1,\"      \"],[8,[32,0],[[24,0,\"c-navbar__channel-title\"]],[[\"@route\",\"@models\"],[\"chat.channel.info.members\",[30,1,[\"routeModels\"]]]],[[\"default\"],[[[[1,\"\\n        \"],[8,[32,1],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@channel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/channel-title.js",
    "scope": () => [_routing.LinkTo, _channelTitle.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/close-drawer-button", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "discourse/components/d-button", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _dButton, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNavbarCloseDrawerButton = _exports.default = (_class = (_class2 = class ChatNavbarCloseDrawerButton extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor2, this);
    }
    closeDrawer() {
      this.chatStateManager.didCloseDrawer();
      this.chat.activeChannel = null;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <DButton
        @icon="times"
        @action={{this.closeDrawer}}
        @title="chat.close"
        class="btn-flat no-text c-navbar__close-drawer-button"
      />
    
  */
  {
    "id": "zicjDYDB",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[24,0,\"btn-flat no-text c-navbar__close-drawer-button\"]],[[\"@icon\",\"@action\",\"@title\"],[\"times\",[30,0,[\"closeDrawer\"]],\"chat.close\"]],null],[1,\"\\n  \"]],[],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/close-drawer-button.js",
    "scope": () => [_dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "closeDrawer", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "closeDrawer"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/close-thread-button", ["exports", "@glimmer/component", "@ember/routing", "@ember/service", "discourse-common/helpers/d-icon", "discourse-common/helpers/i18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _routing, _service, _dIcon, _i18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNavbarCloseThreadButton = _exports.default = (_class = (_class2 = class ChatNavbarCloseThreadButton extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "site", _descriptor, this);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.site.desktopView}}
        <LinkTo
          class="c-navbar__close-thread-button btn-flat btn btn-icon no-text"
          @route="chat.channel"
          @models={{@thread.channel.routeModels}}
          title={{i18n "chat.thread.close"}}
        >
          {{icon "times"}}
        </LinkTo>
      {{/if}}
    
  */
  {
    "id": "x2e1SnTB",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"site\",\"desktopView\"]],[[[1,\"      \"],[8,[32,0],[[24,0,\"c-navbar__close-thread-button btn-flat btn btn-icon no-text\"],[16,\"title\",[28,[32,1],[\"chat.thread.close\"],null]]],[[\"@route\",\"@models\"],[\"chat.channel\",[30,1,[\"channel\",\"routeModels\"]]]],[[\"default\"],[[[[1,\"\\n        \"],[1,[28,[32,2],[\"times\"],null]],[1,\"\\n      \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@thread\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/close-thread-button.js",
    "scope": () => [_routing.LinkTo, _i18n.default, _dIcon.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/close-threads-button", ["exports", "@glimmer/component", "@ember/routing", "@ember/service", "discourse-common/helpers/d-icon", "I18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _routing, _service, _dIcon, _I18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNavbarCloseThreadsButton = _exports.default = (_class = (_class2 = class ChatNavbarCloseThreadsButton extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "site", _descriptor, this);
      _defineProperty(this, "closeButtonTitle", _I18n.default.t("chat.thread.close"));
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.site.desktopView}}
        <LinkTo
          class="c-navbar__close-threads-button btn-flat btn btn-icon no-text"
          @route="chat.channel"
          @models={{@channel.routeModels}}
          title={{this.closeButtonTitle}}
        >
          {{icon "times"}}
        </LinkTo>
      {{/if}}
    
  */
  {
    "id": "O5YY7Q/Y",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"site\",\"desktopView\"]],[[[1,\"      \"],[8,[32,0],[[24,0,\"c-navbar__close-threads-button btn-flat btn btn-icon no-text\"],[16,\"title\",[30,0,[\"closeButtonTitle\"]]]],[[\"@route\",\"@models\"],[\"chat.channel\",[30,1,[\"routeModels\"]]]],[[\"default\"],[[[[1,\"\\n        \"],[1,[28,[32,1],[\"times\"],null]],[1,\"\\n      \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@channel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/close-threads-button.js",
    "scope": () => [_routing.LinkTo, _dIcon.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/full-page-button", ["exports", "@glimmer/component", "@ember/object", "@ember/runloop", "@ember/service", "discourse/components/d-button", "discourse/lib/url", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _runloop, _service, _dButton, _url, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNavbarFullPageButton = _exports.default = (_class = (_class2 = class ChatNavbarFullPageButton extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor2, this);
    }
    async openInFullPage() {
      this.chatStateManager.storeAppURL();
      this.chatStateManager.prefersFullPage();
      this.chat.activeChannel = null;
      await new Promise(resolve1 => (0, _runloop.next)(resolve1));
      _url.default.routeTo(this.chatStateManager.lastKnownChatURL);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.chatStateManager.isDrawerExpanded}}
        <DButton
          @icon="discourse-expand"
          class="btn-flat no-text c-navbar__full-page-button"
          @title="chat.open_full_page"
          @action={{this.openInFullPage}}
        />
      {{/if}}
    
  */
  {
    "id": "hlvBMIWv",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"chatStateManager\",\"isDrawerExpanded\"]],[[[1,\"      \"],[8,[32,0],[[24,0,\"btn-flat no-text c-navbar__full-page-button\"]],[[\"@icon\",\"@title\",\"@action\"],[\"discourse-expand\",\"chat.open_full_page\",[30,0,[\"openInFullPage\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/full-page-button.js",
    "scope": () => [_dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openInFullPage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openInFullPage"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/index", ["exports", "@glimmer/component", "@ember/helper", "@ember/modifier", "discourse/helpers/concat-class", "discourse/helpers/noop", "discourse/plugins/chat/discourse/components/chat/navbar/actions", "discourse/plugins/chat/discourse/components/chat/navbar/back-button", "discourse/plugins/chat/discourse/components/chat/navbar/channel-title", "discourse/plugins/chat/discourse/components/chat/navbar/title", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _modifier, _concatClass, _noop, _actions, _backButton, _channelTitle, _title, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatNavbar extends _component.default {
    get buttonComponent() {
      return _backButton.default;
    }
    get titleComponent() {
      return _title.default;
    }
    get actionsComponent() {
      return _actions.default;
    }
    get channelTitleComponent() {
      return _channelTitle.default;
    }
  }
  _exports.default = ChatNavbar;
  _class = ChatNavbar;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{! template-lint-disable no-invalid-interactive }}
      <div
        class={{concatClass "c-navbar-container" (if @onClick "-clickable")}}
        {{on "click" (if @onClick @onClick (noop))}}
      >
        <nav class="c-navbar">
          {{yield
            (hash
              BackButton=this.buttonComponent
              ChannelTitle=this.channelTitleComponent
              Title=this.titleComponent
              Actions=this.actionsComponent
            )
          }}
        </nav>
      </div>
    
  */
  {
    "id": "rwNYu4xG",
    "block": "[[[1,\"\\n\"],[1,\"    \"],[11,0],[16,0,[28,[32,0],[\"c-navbar-container\",[52,[30,1],\"-clickable\"]],null]],[4,[32,1],[\"click\",[52,[30,1],[30,1],[28,[32,2],null,null]]],null],[12],[1,\"\\n      \"],[10,\"nav\"],[14,0,\"c-navbar\"],[12],[1,\"\\n        \"],[18,2,[[28,[32,3],null,[[\"BackButton\",\"ChannelTitle\",\"Title\",\"Actions\"],[[30,0,[\"buttonComponent\"]],[30,0,[\"channelTitleComponent\"]],[30,0,[\"titleComponent\"]],[30,0,[\"actionsComponent\"]]]]]]],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@onClick\",\"&default\"],false,[\"if\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/index.js",
    "scope": () => [_concatClass.default, _modifier.on, _noop.default, _helper.hash],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/new-channel-button", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse/helpers/concat-class", "discourse/plugins/chat/discourse/components/chat/modal/create-channel", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _dButton, _concatClass, _createChannel, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNavbarNewChannelButton = _exports.default = (_class = (_class2 = class ChatNavbarNewChannelButton extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatStateManager", _descriptor, this);
      _initializerDefineProperty(this, "currentUser", _descriptor2, this);
      _initializerDefineProperty(this, "modal", _descriptor3, this);
      _initializerDefineProperty(this, "site", _descriptor4, this);
    }
    createChannel() {
      this.modal.show(_createChannel.default);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.currentUser.staff}}
        <DButton
          @action={{this.createChannel}}
          @icon="plus"
          @label={{if this.site.desktopView "chat.create_channel.title"}}
          class={{concatClass
            "c-navbar__new-channel-button"
            (if this.site.mobileView "btn-flat")
          }}
        />
      {{/if}}
    
  */
  {
    "id": "BJYKFxNi",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"currentUser\",\"staff\"]],[[[1,\"      \"],[8,[32,0],[[16,0,[28,[32,1],[\"c-navbar__new-channel-button\",[52,[30,0,[\"site\",\"mobileView\"]],\"btn-flat\"]],null]]],[[\"@action\",\"@icon\",\"@label\"],[[30,0,[\"createChannel\"]],\"plus\",[52,[30,0,[\"site\",\"desktopView\"]],\"chat.create_channel.title\"]]],null],[1,\"\\n\"]],[]],null],[1,\"  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/new-channel-button.js",
    "scope": () => [_dButton.default, _concatClass.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "createChannel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "createChannel"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/open-drawer-button", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse/lib/url", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _dButton, _url, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNavbarOpenDrawerButton = _exports.default = (_class = (_class2 = class ChatNavbarOpenDrawerButton extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatStateManager", _descriptor, this);
      _initializerDefineProperty(this, "site", _descriptor2, this);
    }
    async openDrawer() {
      this.chatStateManager.prefersDrawer();
      _url.default.routeTo(this.chatStateManager.lastKnownAppURL).then(() => {
        _url.default.routeTo(this.chatStateManager.lastKnownChatURL);
      });
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.site.desktopView}}
        <DButton
          @icon="discourse-compress"
          @title="chat.close_full_page"
          class="c-navbar__open-drawer-button btn-flat"
          @action={{this.openDrawer}}
        />
      {{/if}}
    
  */
  {
    "id": "nLyI9zmn",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"site\",\"desktopView\"]],[[[1,\"      \"],[8,[32,0],[[24,0,\"c-navbar__open-drawer-button btn-flat\"]],[[\"@icon\",\"@title\",\"@action\"],[\"discourse-compress\",\"chat.close_full_page\",[30,0,[\"openDrawer\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/open-drawer-button.js",
    "scope": () => [_dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openDrawer", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openDrawer"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/sub-title", ["exports", "@glimmer/component", "discourse/plugins/chat/discourse/components/chat/navbar/sub-title", "@ember/template-factory", "@ember/component"], function (_exports, _component, _subTitle, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatNavbarSubTitle extends _component.default {
    get subTitleComponent() {
      return _subTitle.default;
    }
  }
  _exports.default = ChatNavbarSubTitle;
  _class = ChatNavbarSubTitle;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="c-navbar__sub-title">
        {{#if (has-block)}}
          {{yield}}
        {{else}}
          {{@title}}
        {{/if}}
      </div>
    
  */
  {
    "id": "5TC5a5Cp",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"c-navbar__sub-title\"],[12],[1,\"\\n\"],[41,[48,[30,2]],[[[1,\"        \"],[18,2,null],[1,\"\\n\"]],[]],[[[1,\"        \"],[1,[30,1]],[1,\"\\n\"]],[]]],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@title\",\"&default\"],false,[\"if\",\"has-block\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/sub-title.js",
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/thread-settings-button", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse/plugins/chat/discourse/components/chat/modal/thread-settings", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _dButton, _threadSettings, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNavbarThreadSettingsButton = _exports.default = (_class = (_class2 = class ChatNavbarThreadSettingsButton extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
      _initializerDefineProperty(this, "modal", _descriptor2, this);
    }
    get canChangeThreadSettings() {
      if (!this.args.thread) {
        return false;
      }
      return this.currentUser.staff || this.currentUser.id === this.args.thread.originalMessage.user.id;
    }
    openThreadSettings() {
      this.modal.show(_threadSettings.default, {
        model: this.args.thread
      });
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.canChangeThreadSettings}}
        <DButton
          @action={{this.openThreadSettings}}
          @icon="cog"
          @title="chat.thread.settings"
          class="btn-flat c-navbar__thread-settings-button"
        />
      {{/if}}
    
  */
  {
    "id": "Opl4Cf1A",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"canChangeThreadSettings\"]],[[[1,\"      \"],[8,[32,0],[[24,0,\"btn-flat c-navbar__thread-settings-button\"]],[[\"@action\",\"@icon\",\"@title\"],[[30,0,[\"openThreadSettings\"]],\"cog\",\"chat.thread.settings\"]],null],[1,\"\\n\"]],[]],null],[1,\"  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/thread-settings-button.js",
    "scope": () => [_dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openThreadSettings", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openThreadSettings"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/thread-tracking-dropdown", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/service", "discourse/helpers/concat-class", "discourse/lib/ajax-error", "discourse/lib/notification-levels", "discourse/plugins/chat/discourse/components/chat-thread-tracking-dropdown", "discourse/plugins/chat/discourse/models/user-chat-thread-membership", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _object, _service, _concatClass, _ajaxError, _notificationLevels, _chatThreadTrackingDropdown, _userChatThreadMembership, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNavbarThreadTrackingDropdown = _exports.default = (_class = (_class2 = class ChatNavbarThreadTrackingDropdown extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "persistedNotificationLevel", _descriptor2, this);
    }
    get threadNotificationLevel() {
      return this.membership?.notificationLevel || _notificationLevels.NotificationLevels.REGULAR;
    }
    get membership() {
      return this.args.thread.currentUserMembership;
    }
    async updateThreadNotificationLevel(newNotificationLevel1) {
      this.persistedNotificationLevel = false;
      let currentNotificationLevel1;
      if (this.membership) {
        currentNotificationLevel1 = this.membership.notificationLevel;
        this.membership.notificationLevel = newNotificationLevel1;
      } else {
        this.args.thread.currentUserMembership = _userChatThreadMembership.default.create({
          notification_level: newNotificationLevel1,
          last_read_message_id: null
        });
      }
      try {
        const response1 = await this.chatApi.updateCurrentUserThreadNotificationsSettings(this.args.thread.channel.id, this.args.thread.id, {
          notificationLevel: newNotificationLevel1
        });
        this.membership.last_read_message_id = response1.membership.last_read_message_id;
        this.persistedNotificationLevel = true;
      } catch (error1) {
        this.membership.notificationLevel = currentNotificationLevel1;
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <ThreadTrackingDropdown
        @value={{this.threadNotificationLevel}}
        @onChange={{this.updateThreadNotificationLevel}}
        @class={{concatClass
          "c-navbar__thread-tracking-dropdown"
          (if this.persistedNotificationLevel "-persisted")
        }}
      />
    
  */
  {
    "id": "y/h2GPtP",
    "block": "[[[1,\"\\n    \"],[8,[32,0],null,[[\"@value\",\"@onChange\",\"@class\"],[[30,0,[\"threadNotificationLevel\"]],[30,0,[\"updateThreadNotificationLevel\"]],[28,[32,1],[\"c-navbar__thread-tracking-dropdown\",[52,[30,0,[\"persistedNotificationLevel\"]],\"-persisted\"]],null]]],null],[1,\"\\n  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/thread-tracking-dropdown.js",
    "scope": () => [_chatThreadTrackingDropdown.default, _concatClass.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "persistedNotificationLevel", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "updateThreadNotificationLevel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "updateThreadNotificationLevel"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/threads-list-button", ["exports", "@glimmer/component", "@ember/routing", "@ember/service", "discourse/helpers/concat-class", "discourse-common/helpers/d-icon", "I18n", "discourse/plugins/chat/discourse/components/chat/thread/header-unread-indicator", "@ember/template-factory", "@ember/component"], function (_exports, _component, _routing, _service, _concatClass, _dIcon, _I18n, _headerUnreadIndicator, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNavbarThreadsListButton = _exports.default = (_class = (_class2 = class ChatNavbarThreadsListButton extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
      _defineProperty(this, "threadsListLabel", _I18n.default.t("chat.threads.list"));
    }
    get showThreadsListButton() {
      return this.args.channel?.threadingEnabled && this.router.currentRoute.name !== "chat.channel.threads" && this.router.currentRoute.name !== "chat.channel.thread" && this.router.currentRoute.name !== "chat.channel.thread.index";
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.showThreadsListButton}}
        <LinkTo
          @route="chat.channel.threads"
          @models={{@channel.routeModels}}
          title={{this.threadsListLabel}}
          class={{concatClass
            "c-navbar__threads-list-button"
            "btn"
            "no-text"
            "btn-flat"
            (if @channel.threadsManager.unreadThreadCount "has-unreads")
          }}
        >
          {{icon "discourse-threads"}}
          <ThreadHeaderUnreadIndicator @channel={{@channel}} />
        </LinkTo>
      {{/if}}
    
  */
  {
    "id": "HA85r+jQ",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"showThreadsListButton\"]],[[[1,\"      \"],[8,[32,0],[[16,\"title\",[30,0,[\"threadsListLabel\"]]],[16,0,[28,[32,1],[\"c-navbar__threads-list-button\",\"btn\",\"no-text\",\"btn-flat\",[52,[30,1,[\"threadsManager\",\"unreadThreadCount\"]],\"has-unreads\"]],null]]],[[\"@route\",\"@models\"],[\"chat.channel.threads\",[30,1,[\"routeModels\"]]]],[[\"default\"],[[[[1,\"\\n        \"],[1,[28,[32,2],[\"discourse-threads\"],null]],[1,\"\\n        \"],[8,[32,3],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"  \"]],[\"@channel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/threads-list-button.js",
    "scope": () => [_routing.LinkTo, _concatClass.default, _dIcon.default, _headerUnreadIndicator.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/title", ["exports", "@glimmer/component", "@ember/helper", "discourse-common/helpers/d-icon", "discourse/plugins/chat/discourse/components/chat/navbar/sub-title", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _dIcon, _subTitle, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatNavbarTitle extends _component.default {
    get subTitleComponent() {
      return _subTitle.default;
    }
  }
  _exports.default = ChatNavbarTitle;
  _class = ChatNavbarTitle;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div title={{@title}} class="c-navbar__title">
        {{#if (has-block)}}
          {{#if @icon}}
            {{icon @icon}}
          {{/if}}
          {{@title}}
          {{yield (hash SubTitle=this.subTitleComponent)}}
        {{else}}
          {{#if @icon}}
            {{icon @icon}}
          {{/if}}
          {{@title}}
        {{/if}}
      </div>
    
  */
  {
    "id": "x03onRkI",
    "block": "[[[1,\"\\n    \"],[10,0],[15,\"title\",[30,1]],[14,0,\"c-navbar__title\"],[12],[1,\"\\n\"],[41,[48,[30,3]],[[[41,[30,2],[[[1,\"          \"],[1,[28,[32,0],[[30,2]],null]],[1,\"\\n\"]],[]],null],[1,\"        \"],[1,[30,1]],[1,\"\\n        \"],[18,3,[[28,[32,1],null,[[\"SubTitle\"],[[30,0,[\"subTitleComponent\"]]]]]]],[1,\"\\n\"]],[]],[[[41,[30,2],[[[1,\"          \"],[1,[28,[32,0],[[30,2]],null]],[1,\"\\n\"]],[]],null],[1,\"        \"],[1,[30,1]],[1,\"\\n\"]],[]]],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@title\",\"@icon\",\"&default\"],false,[\"if\",\"has-block\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/title.js",
    "scope": () => [_dIcon.default, _helper.hash],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/navbar/toggle-drawer-button", ["exports", "@glimmer/component", "@ember/service", "discourse/components/d-button", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _dButton, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNavbarToggleDrawerButton = _exports.default = (_class = (_class2 = class ChatNavbarToggleDrawerButton extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor2, this);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <DButton
        @icon={{if
          this.chatStateManager.isDrawerExpanded
          "angle-double-down"
          "angle-double-up"
        }}
        @action={{this.chat.toggleDrawer}}
        @title={{if
          this.chatStateManager.isDrawerExpanded
          "chat.collapse"
          "chat.expand"
        }}
        class="btn-flat no-text c-navbar__toggle-drawer-button"
      />
    
  */
  {
    "id": "NabQDrml",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[24,0,\"btn-flat no-text c-navbar__toggle-drawer-button\"]],[[\"@icon\",\"@action\",\"@title\"],[[52,[30,0,[\"chatStateManager\",\"isDrawerExpanded\"]],\"angle-double-down\",\"angle-double-up\"],[30,0,[\"chat\",\"toggleDrawer\"]],[52,[30,0,[\"chatStateManager\",\"isDrawerExpanded\"]],\"chat.collapse\",\"chat.expand\"]]],null],[1,\"\\n  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/navbar/toggle-drawer-button.js",
    "scope": () => [_dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/notices/mention_without_membership", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/modifier", "@ember/object", "@ember/service", "discourse/lib/ajax-error", "discourse-common/helpers/d-icon", "discourse-common/helpers/i18n", "discourse/plugins/chat/discourse/modifiers/chat/later-fn", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _modifier, _object, _service, _ajaxError, _dIcon, _i18n, _laterFn, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let MentionWithoutMembership = _exports.default = (_dec = (0, _service.inject)("chat-api"), (_class = (_class2 = class MentionWithoutMembership extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "invitationsSent", _descriptor2, this);
    }
    get userIds() {
      return this.args.notice.data.user_ids;
    }
    async sendInvitations(event1) {
      // preventDefault to avoid a refresh
      event1.preventDefault();
      try {
        await this.chatApi.invite(this.args.channel.id, this.userIds, {
          messageId: this.args.notice.data.messageId
        });
        this.invitationsSent = true;
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="mention-without-membership-notice">
        {{#if this.invitationsSent}}
          <span
            class="mention-without-membership-notice__invitation-sent"
            {{laterFn @clearNotice 3000}}
          >
            {{dIcon "check"}}
            <span>
              {{i18n
                "chat.mention_warning.invitations_sent"
                count=this.userIds.length
              }}
            </span>
          </span>
        {{else}}
          <p class="mention-without-membership-notice__body -without-membership">
            <span
              class="mention-without-membership-notice__body__text"
            >{{@notice.data.text}}</span>
            <a
              class="mention-without-membership-notice__body__link"
              href
              {{on "click" this.sendInvitations}}
            >
              {{i18n "chat.mention_warning.invite"}}
            </a>
          </p>
        {{/if}}
      </div>
    
  */
  {
    "id": "AEIwRYlh",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"mention-without-membership-notice\"],[12],[1,\"\\n\"],[41,[30,0,[\"invitationsSent\"]],[[[1,\"        \"],[11,1],[24,0,\"mention-without-membership-notice__invitation-sent\"],[4,[32,0],[[30,1],3000],null],[12],[1,\"\\n          \"],[1,[28,[32,1],[\"check\"],null]],[1,\"\\n          \"],[10,1],[12],[1,\"\\n            \"],[1,[28,[32,2],[\"chat.mention_warning.invitations_sent\"],[[\"count\"],[[30,0,[\"userIds\",\"length\"]]]]]],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]],[[[1,\"        \"],[10,2],[14,0,\"mention-without-membership-notice__body -without-membership\"],[12],[1,\"\\n          \"],[10,1],[14,0,\"mention-without-membership-notice__body__text\"],[12],[1,[30,2,[\"data\",\"text\"]]],[13],[1,\"\\n          \"],[11,3],[24,0,\"mention-without-membership-notice__body__link\"],[24,6,\"\"],[4,[32,3],[\"click\",[30,0,[\"sendInvitations\"]]],null],[12],[1,\"\\n            \"],[1,[28,[32,2],[\"chat.mention_warning.invite\"],null]],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\"]],[]]],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@clearNotice\",\"@notice\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/notices/mention_without_membership.js",
    "scope": () => [_laterFn.default, _dIcon.default, _i18n.default, _modifier.on],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "invitationsSent", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "sendInvitations", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "sendInvitations"), _class.prototype)), _class));
});
define("discourse/plugins/chat/discourse/components/chat/routes/browse", ["exports", "@glimmer/tracking", "@ember/component", "@ember/helper", "@ember/object", "@ember/render-modifiers/modifiers/did-insert", "@ember/routing", "@ember/runloop", "@ember/service", "discourse/components/d-button", "discourse-common/config/environment", "discourse-common/helpers/i18n", "discourse-common/lib/debounce", "discourse/plugins/chat/discourse/components/chat/list", "discourse/plugins/chat/discourse/components/chat/modal/new-message", "discourse/plugins/chat/discourse/components/chat/navbar", "discourse/plugins/chat/discourse/components/chat-channel-card", "discourse/plugins/chat/discourse/components/dc-filter-input", "@ember/template-factory"], function (_exports, _tracking, _component, _helper, _object, _didInsert, _routing, _runloop, _service, _dButton, _environment, _i18n, _debounce, _list, _newMessage, _navbar, _chatChannelCard, _dcFilterInput, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2, _descriptor3, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const TABS = ["all", "open", "closed", "archived"];
  let ChatRoutesBrowse = _exports.default = (_dec = (0, _object.computed)("siteSettings.chat_allow_archiving_channels"), (_class = (_class2 = class ChatRoutesBrowse extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "modal", _descriptor2, this);
      _initializerDefineProperty(this, "filter", _descriptor3, this);
    }
    get channelsCollection() {
      return this.chatApi.channels({
        filter: this.filter,
        status: this.attrs.status
      });
    }
    get tabs() {
      if (this.siteSettings.chat_allow_archiving_channels) {
        return TABS;
      } else {
        return [...TABS].removeObject("archived");
      }
    }
    showChatNewMessageModal() {
      this.modal.show(_newMessage.default);
    }
    setFilter(event1) {
      this.filter = event1.target.value;
      (0, _debounce.default)(this.debouncedLoad, _environment.INPUT_DELAY);
    }
    debouncedLoad() {
      this.channelsCollection.load({
        limit: 10
      });
    }
    focusFilterInput(input1) {
      (0, _runloop.schedule)("afterRender", () => input1?.focus());
    }
  }, (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="c-routes-browse">
        <Navbar as |navbar|>
          <navbar.BackButton />
          <navbar.Title @title={{i18n "chat.browse.title"}} />
  
          <navbar.Actions as |action|>
            <action.NewChannelButton />
          </navbar.Actions>
        </Navbar>
  
        <div class="chat-browse-view">
          <div class="chat-browse-view__actions">
            <nav>
              <ul class="nav-pills chat-browse-view__filters">
                {{#each this.tabs as |tab|}}
                  <li class={{concat "chat-browse-view__filter -" tab}}>
                    <LinkTo
                      @route={{concat "chat.browse." tab}}
                      class={{concat "chat-browse-view__filter-link -" tab}}
                    >
                      {{i18n (concat "chat.browse.filter_" tab)}}
                    </LinkTo>
                  </li>
                {{/each}}
              </ul>
            </nav>
  
            <DcFilterInput
              {{didInsert this.focusFilterInput}}
              @filterAction={{this.setFilter}}
              @icons={{hash right="search"}}
              @containerClass="filter-input"
              placeholder={{i18n "chat.browse.filter_input_placeholder"}}
            />
          </div>
  
          <div class="chat-browse-view__content_wrapper">
            <div class="chat-browse-view__content">
              <List
                @collection={{this.channelsCollection}}
                class="chat-browse-view__cards"
                as |list|
              >
                <list.Item as |channel|>
                  <ChatChannelCard @channel={{channel}} />
                </list.Item>
  
                <list.EmptyState>
                  <span class="empty-state-title">
                    {{i18n "chat.empty_state.title"}}
                  </span>
                  <div class="empty-state-body">
                    <p>{{i18n "chat.empty_state.direct_message"}}</p>
                    <DButton
                      @action={{this.showChatNewMessageModal}}
                      @label="chat.empty_state.direct_message_cta"
                    />
                  </div>
                </list.EmptyState>
              </List>
            </div>
          </div>
        </div>
      </div>
    
  */
  {
    "id": "SwXrcns3",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"c-routes-browse\"],[12],[1,\"\\n      \"],[8,[32,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"BackButton\"]],null,null,null],[1,\"\\n        \"],[8,[30,1,[\"Title\"]],null,[[\"@title\"],[[28,[32,1],[\"chat.browse.title\"],null]]],null],[1,\"\\n\\n        \"],[8,[30,1,[\"Actions\"]],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,2,[\"NewChannelButton\"]],null,null,null],[1,\"\\n        \"]],[2]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n\\n      \"],[10,0],[14,0,\"chat-browse-view\"],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-browse-view__actions\"],[12],[1,\"\\n          \"],[10,\"nav\"],[12],[1,\"\\n            \"],[10,\"ul\"],[14,0,\"nav-pills chat-browse-view__filters\"],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[30,0,[\"tabs\"]]],null]],null],null,[[[1,\"                \"],[10,\"li\"],[15,0,[28,[32,2],[\"chat-browse-view__filter -\",[30,3]],null]],[12],[1,\"\\n                  \"],[8,[32,3],[[16,0,[28,[32,2],[\"chat-browse-view__filter-link -\",[30,3]],null]]],[[\"@route\"],[[28,[32,2],[\"chat.browse.\",[30,3]],null]]],[[\"default\"],[[[[1,\"\\n                    \"],[1,[28,[32,1],[[28,[32,2],[\"chat.browse.filter_\",[30,3]],null]],null]],[1,\"\\n                  \"]],[]]]]],[1,\"\\n                \"],[13],[1,\"\\n\"]],[3]],null],[1,\"            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n\\n          \"],[8,[32,4],[[16,\"placeholder\",[28,[32,1],[\"chat.browse.filter_input_placeholder\"],null]],[4,[32,6],[[30,0,[\"focusFilterInput\"]]],null]],[[\"@filterAction\",\"@icons\",\"@containerClass\"],[[30,0,[\"setFilter\"]],[28,[32,5],null,[[\"right\"],[\"search\"]]],\"filter-input\"]],null],[1,\"\\n        \"],[13],[1,\"\\n\\n        \"],[10,0],[14,0,\"chat-browse-view__content_wrapper\"],[12],[1,\"\\n          \"],[10,0],[14,0,\"chat-browse-view__content\"],[12],[1,\"\\n            \"],[8,[32,7],[[24,0,\"chat-browse-view__cards\"]],[[\"@collection\"],[[30,0,[\"channelsCollection\"]]]],[[\"default\"],[[[[1,\"\\n              \"],[8,[30,4,[\"Item\"]],null,null,[[\"default\"],[[[[1,\"\\n                \"],[8,[32,8],null,[[\"@channel\"],[[30,5]]],null],[1,\"\\n              \"]],[5]]]]],[1,\"\\n\\n              \"],[8,[30,4,[\"EmptyState\"]],null,null,[[\"default\"],[[[[1,\"\\n                \"],[10,1],[14,0,\"empty-state-title\"],[12],[1,\"\\n                  \"],[1,[28,[32,1],[\"chat.empty_state.title\"],null]],[1,\"\\n                \"],[13],[1,\"\\n                \"],[10,0],[14,0,\"empty-state-body\"],[12],[1,\"\\n                  \"],[10,2],[12],[1,[28,[32,1],[\"chat.empty_state.direct_message\"],null]],[13],[1,\"\\n                  \"],[8,[32,9],null,[[\"@action\",\"@label\"],[[30,0,[\"showChatNewMessageModal\"]],\"chat.empty_state.direct_message_cta\"]],null],[1,\"\\n                \"],[13],[1,\"\\n              \"]],[]]]]],[1,\"\\n            \"]],[4]]]]],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"navbar\",\"action\",\"tab\",\"list\",\"channel\"],false,[\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/routes/browse.js",
    "scope": () => [_navbar.default, _i18n.default, _helper.concat, _routing.LinkTo, _dcFilterInput.default, _helper.hash, _didInsert.default, _list.default, _chatChannelCard.default, _dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "filter", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _applyDecoratedDescriptor(_class.prototype, "channelsCollection", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "channelsCollection"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "tabs", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "tabs"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "showChatNewMessageModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "showChatNewMessageModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setFilter", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "setFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "debouncedLoad", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "debouncedLoad"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "focusFilterInput", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "focusFilterInput"), _class.prototype)), _class));
});
define("discourse/plugins/chat/discourse/components/chat/routes/channel-info-members", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/helper", "@ember/modifier", "@ember/object", "@ember/routing", "@ember/service", "ember-modifier", "discourse/lib/is-element-in-viewport", "discourse/lib/url", "discourse/modifiers/auto-focus", "discourse-common/config/environment", "discourse-common/helpers/d-icon", "discourse-common/helpers/i18n", "discourse-common/lib/debounce", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/message-creator", "discourse/plugins/chat/discourse/components/chat/message-creator/constants", "discourse/plugins/chat/discourse/components/chat-user-info", "discourse/plugins/chat/discourse/components/dc-filter-input", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _helper, _modifier, _object, _routing, _service, _emberModifier, _isElementInViewport, _url, _autoFocus, _environment, _dIcon, _i18n, _debounce, _discourseI18n, _messageCreator, _constants, _chatUserInfo, _dcFilterInput, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatRouteChannelInfoMembers = _exports.default = (_class = (_class2 = class ChatRouteChannelInfoMembers extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "appEvents", _descriptor, this);
      _initializerDefineProperty(this, "chatApi", _descriptor2, this);
      _initializerDefineProperty(this, "modal", _descriptor3, this);
      _initializerDefineProperty(this, "loadingSlider", _descriptor4, this);
      _initializerDefineProperty(this, "site", _descriptor5, this);
      _initializerDefineProperty(this, "filter", _descriptor6, this);
      _initializerDefineProperty(this, "showAddMembers", _descriptor7, this);
      _defineProperty(this, "addMemberLabel", _discourseI18n.default.t("chat.members_view.add_member"));
      _defineProperty(this, "filterPlaceholder", _discourseI18n.default.t("chat.members_view.filter_placeholder"));
      _defineProperty(this, "noMembershipsFoundLabel", _discourseI18n.default.t("chat.channel.no_memberships_found"));
      _defineProperty(this, "noMembershipsLabel", _discourseI18n.default.t("chat.channel.no_memberships"));
      _defineProperty(this, "onEnter", (0, _emberModifier.modifier)((element1, [callback1]) => {
        const handler1 = event1 => {
          if (event1.key !== "Enter") {
            return;
          }
          callback1(event1);
        };
        element1.addEventListener("keydown", handler1);
        return () => {
          element1.removeEventListener("keydown", handler1);
        };
      }));
      _defineProperty(this, "fill", (0, _emberModifier.modifier)(element1 => {
        this.resizeObserver = new ResizeObserver(() => {
          if ((0, _isElementInViewport.default)(element1)) {
            this.load();
          }
        });
        this.resizeObserver.observe(element1);
        return () => {
          this.resizeObserver.disconnect();
        };
      }));
      _defineProperty(this, "loadMore", (0, _emberModifier.modifier)(element1 => {
        this.intersectionObserver = new IntersectionObserver(this.load);
        this.intersectionObserver.observe(element1);
        return () => {
          this.intersectionObserver.disconnect();
        };
      }));
    }
    get noResults() {
      return this.members.fetchedOnce && !this.members.loading;
    }
    get members() {
      const params1 = {};
      if (this.filter?.length) {
        params1.username = this.filter;
      }
      return this.chatApi.listChannelMemberships(this.args.channel.id, params1);
    }
    load() {
      (0, _debounce.default)(this, this.debouncedLoad, _environment.INPUT_DELAY);
    }
    mutFilter(event1) {
      this.filter = event1.target.value;
      this.load();
    }
    addMember() {
      this.showAddMembers = true;
    }
    hideAddMember() {
      this.showAddMembers = false;
    }
    openMemberCard(user1, event1) {
      event1.preventDefault();
      _url.default.routeTo((0, _url.userPath)(user1.username_lower));
    }
    async debouncedLoad() {
      this.loadingSlider.transitionStarted();
      await this.members.load({
        limit: 20
      });
      this.loadingSlider.transitionEnded();
    }
    get addMembersMode() {
      return _constants.MODES.add_members;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.site.mobileView}}
        <LinkTo
          class="c-back-button"
          @route="chat.channel.info.settings"
          @model={{@channel}}
        >
          {{icon "chevron-left"}}
          {{i18n "chat.members_view.back_to_settings"}}
        </LinkTo>
      {{/if}}
      {{#if this.showAddMembers}}
        <MessageCreator
          @mode={{this.addMembersMode}}
          @channel={{@channel}}
          @onClose={{this.hideAddMember}}
          @onCancel={{this.hideAddMember}}
        />
      {{else}}
        <div class="c-channel-members">
          <DcFilterInput
            {{autoFocus}}
            @filterAction={{this.mutFilter}}
            @icons={{hash right="search"}}
            @containerClass="c-channel-members__filter"
            placeholder={{this.filterPlaceholder}}
          />
  
          <ul class="c-channel-members__list" {{this.fill}}>
            {{#if @channel.chatable.group}}
              <li
                class="c-channel-members__list-item -add-member"
                role="button"
                {{on "click" this.addMember}}
                {{this.onEnter this.addMember}}
                tabindex="0"
              >
                {{icon "plus"}}
                <span>{{this.addMemberLabel}}</span>
              </li>
            {{/if}}
            {{#each this.members as |membership|}}
              <li
                class="c-channel-members__list-item -member"
                {{on "click" (fn this.openMemberCard membership.user)}}
                {{this.onEnter (fn this.openMemberCard membership.user)}}
                tabindex="0"
              >
                <ChatUserInfo
                  @user={{membership.user}}
                  @avatarSize="tiny"
                  @interactive={{false}}
                />
              </li>
            {{else}}
              {{#if this.noResults}}
                <li
                  class="c-channel-members__list-item -no-results alert alert-info"
                >
                  {{this.noMembershipsFoundLabel}}
                </li>
              {{/if}}
            {{/each}}
          </ul>
  
          <div {{this.loadMore}}>
            <br />
          </div>
        </div>
      {{/if}}
    
  */
  {
    "id": "qmJ/TaGh",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"site\",\"mobileView\"]],[[[1,\"      \"],[8,[32,0],[[24,0,\"c-back-button\"]],[[\"@route\",\"@model\"],[\"chat.channel.info.settings\",[30,1]]],[[\"default\"],[[[[1,\"\\n        \"],[1,[28,[32,1],[\"chevron-left\"],null]],[1,\"\\n        \"],[1,[28,[32,2],[\"chat.members_view.back_to_settings\"],null]],[1,\"\\n      \"]],[]]]]],[1,\"\\n\"]],[]],null],[41,[30,0,[\"showAddMembers\"]],[[[1,\"      \"],[8,[32,3],null,[[\"@mode\",\"@channel\",\"@onClose\",\"@onCancel\"],[[30,0,[\"addMembersMode\"]],[30,1],[30,0,[\"hideAddMember\"]],[30,0,[\"hideAddMember\"]]]],null],[1,\"\\n\"]],[]],[[[1,\"      \"],[10,0],[14,0,\"c-channel-members\"],[12],[1,\"\\n        \"],[8,[32,4],[[16,\"placeholder\",[30,0,[\"filterPlaceholder\"]]],[4,[32,6],null,null]],[[\"@filterAction\",\"@icons\",\"@containerClass\"],[[30,0,[\"mutFilter\"]],[28,[32,5],null,[[\"right\"],[\"search\"]]],\"c-channel-members__filter\"]],null],[1,\"\\n\\n        \"],[11,\"ul\"],[24,0,\"c-channel-members__list\"],[4,[30,0,[\"fill\"]],null,null],[12],[1,\"\\n\"],[41,[30,1,[\"chatable\",\"group\"]],[[[1,\"            \"],[11,\"li\"],[24,0,\"c-channel-members__list-item -add-member\"],[24,\"role\",\"button\"],[24,\"tabindex\",\"0\"],[4,[32,7],[\"click\",[30,0,[\"addMember\"]]],null],[4,[30,0,[\"onEnter\"]],[[30,0,[\"addMember\"]]],null],[12],[1,\"\\n              \"],[1,[28,[32,1],[\"plus\"],null]],[1,\"\\n              \"],[10,1],[12],[1,[30,0,[\"addMemberLabel\"]]],[13],[1,\"\\n            \"],[13],[1,\"\\n\"]],[]],null],[42,[28,[31,2],[[28,[31,2],[[30,0,[\"members\"]]],null]],null],null,[[[1,\"            \"],[11,\"li\"],[24,0,\"c-channel-members__list-item -member\"],[24,\"tabindex\",\"0\"],[4,[32,7],[\"click\",[28,[32,8],[[30,0,[\"openMemberCard\"]],[30,2,[\"user\"]]],null]],null],[4,[30,0,[\"onEnter\"]],[[28,[32,8],[[30,0,[\"openMemberCard\"]],[30,2,[\"user\"]]],null]],null],[12],[1,\"\\n              \"],[8,[32,9],null,[[\"@user\",\"@avatarSize\",\"@interactive\"],[[30,2,[\"user\"]],\"tiny\",false]],null],[1,\"\\n            \"],[13],[1,\"\\n\"]],[2]],[[[41,[30,0,[\"noResults\"]],[[[1,\"              \"],[10,\"li\"],[14,0,\"c-channel-members__list-item -no-results alert alert-info\"],[12],[1,\"\\n                \"],[1,[30,0,[\"noMembershipsFoundLabel\"]]],[1,\"\\n              \"],[13],[1,\"\\n\"]],[]],null]],[]]],[1,\"        \"],[13],[1,\"\\n\\n        \"],[11,0],[4,[30,0,[\"loadMore\"]],null,null],[12],[1,\"\\n          \"],[10,\"br\"],[12],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]]],[1,\"  \"]],[\"@channel\",\"membership\"],false,[\"if\",\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/routes/channel-info-members.js",
    "scope": () => [_routing.LinkTo, _dIcon.default, _i18n.default, _messageCreator.default, _dcFilterInput.default, _helper.hash, _autoFocus.default, _modifier.on, _helper.fn, _chatUserInfo.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "appEvents", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "loadingSlider", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "filter", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "showAddMembers", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "members", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "members"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "load", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "load"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "mutFilter", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "mutFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "addMember", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "addMember"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "hideAddMember", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "hideAddMember"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openMemberCard", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openMemberCard"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/routes/channel-info-settings", ["exports", "@glimmer/component", "@ember/helper", "@ember/modifier", "@ember/object", "@ember/routing", "@ember/service", "discourse/components/d-button", "discourse/components/d-toggle-switch", "discourse/helpers/category-badge", "discourse/helpers/replace-emoji", "discourse/lib/ajax-error", "discourse-common/helpers/d-icon", "discourse-common/helpers/i18n", "discourse-i18n", "select-kit/components/combo-box", "discourse/plugins/chat/discourse/components/chat/form", "discourse/plugins/chat/discourse/components/chat/modal/archive-channel", "discourse/plugins/chat/discourse/components/chat/modal/delete-channel", "discourse/plugins/chat/discourse/components/chat/modal/edit-channel-description", "discourse/plugins/chat/discourse/components/chat/modal/edit-channel-name", "discourse/plugins/chat/discourse/components/chat/modal/toggle-channel-status", "discourse/plugins/chat/discourse/components/chat-retention-reminder-text", "discourse/plugins/chat/discourse/components/toggle-channel-membership-button", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _modifier, _object, _routing, _service, _dButton, _dToggleSwitch, _categoryBadge, _replaceEmoji, _ajaxError, _dIcon, _i18n, _discourseI18n, _comboBox, _form, _archiveChannel, _deleteChannel, _editChannelDescription, _editChannelName, _toggleChannelStatus, _chatRetentionReminderText, _toggleChannelMembershipButton, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const NOTIFICATION_LEVELS = [{
    name: _discourseI18n.default.t("chat.notification_levels.never"),
    value: "never"
  }, {
    name: _discourseI18n.default.t("chat.notification_levels.mention"),
    value: "mention"
  }, {
    name: _discourseI18n.default.t("chat.notification_levels.always"),
    value: "always"
  }];
  let ChatRouteChannelInfoSettings = _exports.default = (_class = (_class2 = class ChatRouteChannelInfoSettings extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "chatGuardian", _descriptor2, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor3, this);
      _initializerDefineProperty(this, "currentUser", _descriptor4, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor5, this);
      _initializerDefineProperty(this, "dialog", _descriptor6, this);
      _initializerDefineProperty(this, "modal", _descriptor7, this);
      _initializerDefineProperty(this, "site", _descriptor8, this);
      _initializerDefineProperty(this, "toasts", _descriptor9, this);
      _initializerDefineProperty(this, "router", _descriptor10, this);
      _defineProperty(this, "notificationLevels", NOTIFICATION_LEVELS);
      _defineProperty(this, "settingsSectionTitle", _discourseI18n.default.t("chat.settings.settings_title"));
      _defineProperty(this, "channelInfoSectionTitle", _discourseI18n.default.t("chat.settings.info_title"));
      _defineProperty(this, "categoryLabel", _discourseI18n.default.t("chat.settings.category_label"));
      _defineProperty(this, "historyLabel", _discourseI18n.default.t("chat.settings.history_label"));
      _defineProperty(this, "adminSectionTitle", _discourseI18n.default.t("chat.settings.admin_title"));
      _defineProperty(this, "membersLabel", _discourseI18n.default.t("chat.channel_info.tabs.members"));
      _defineProperty(this, "descriptionSectionTitle", _discourseI18n.default.t("chat.about_view.description"));
      _defineProperty(this, "titleSectionTitle", _discourseI18n.default.t("chat.about_view.title"));
      _defineProperty(this, "descriptionPlaceholder", _discourseI18n.default.t("chat.channel_edit_description_modal.description"));
      _defineProperty(this, "toggleThreadingLabel", _discourseI18n.default.t("chat.settings.channel_threading_label"));
      _defineProperty(this, "toggleThreadingDescription", _discourseI18n.default.t("chat.settings.channel_threading_description"));
      _defineProperty(this, "muteSectionLabel", _discourseI18n.default.t("chat.settings.mute"));
      _defineProperty(this, "channelWideMentionsLabel", _discourseI18n.default.t("chat.settings.channel_wide_mentions_label"));
      _defineProperty(this, "autoJoinLabel", _discourseI18n.default.t("chat.settings.auto_join_users_label"));
      _defineProperty(this, "desktopNotificationsLevelLabel", _discourseI18n.default.t("chat.settings.desktop_notification_level"));
      _defineProperty(this, "mobileNotificationsLevelLabel", _discourseI18n.default.t("chat.settings.mobile_notification_level"));
    }
    get canEditChannel() {
      if (this.args.channel.isCategoryChannel && this.chatGuardian.canEditChatChannel()) {
        return true;
      }
      if (this.args.channel.isDirectMessageChannel && this.args.channel.chatable.group) {
        return true;
      }
      return false;
    }
    get shouldRenderDescriptionSection() {
      return this.args.channel.isCategoryChannel;
    }
    get shouldRenderStatusSection() {
      return this.args.channel.isCategoryChannel;
    }
    get shouldRenderArchiveRow() {
      return this.chatGuardian.canArchiveChannel(this.args.channel);
    }
    get toggleChannelWideMentionsAvailable() {
      return this.args.channel.isCategoryChannel && this.args.channel.isOpen;
    }
    get toggleThreadingAvailable() {
      return this.args.channel.isCategoryChannel && this.args.channel.isOpen;
    }
    get channelWideMentionsDescription() {
      return _discourseI18n.default.t("chat.settings.channel_wide_mentions_description", {
        channel: this.args.channel.title
      });
    }
    get isChannelMuted() {
      return this.args.channel.currentUserMembership.muted;
    }
    get shouldRenderChannelWideMentionsAvailable() {
      return this.args.channel.isCategoryChannel;
    }
    get shouldRenderDesktopNotificationsLevelSection() {
      return !this.isChannelMuted;
    }
    get shouldRenderMobileNotificationsLevelSection() {
      return !this.isChannelMuted;
    }
    get autoJoinAvailable() {
      return this.siteSettings.max_chat_auto_joined_users > 0 && this.args.channel.isCategoryChannel && this.args.channel.isOpen;
    }
    get shouldRenderAdminSection() {
      return this.canEditChannel && (this.toggleChannelWideMentionsAvailable || this.args.channel.isCategoryChannel);
    }
    async onToggleChannelWideMentions() {
      const newValue1 = !this.args.channel.allowChannelWideMentions;
      if (this.args.channel.allowChannelWideMentions === newValue1) {
        return;
      }
      try {
        this.args.channel.allowChannelWideMentions = newValue1;
        const result1 = await this._updateChannelProperty(this.args.channel, "allow_channel_wide_mentions", newValue1);
        this.args.channel.allowChannelWideMentions = result1.channel.allow_channel_wide_mentions;
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
    async onToggleAutoJoinUsers() {
      if (this.args.channel.autoJoinUsers) {
        return await this.onDisableAutoJoinUsers();
      }
      return await this.onEnableAutoJoinUsers();
    }
    async onDisableAutoJoinUsers() {
      if (this.args.channel.autoJoinUsers === false) {
        return;
      }
      try {
        this.args.channel.autoJoinUsers = false;
        const result1 = await this._updateChannelProperty(this.args.channel, "auto_join_users", false);
        this.args.channel.autoJoinUsers = result1.channel.auto_join_users;
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
    onEnableAutoJoinUsers() {
      if (this.args.channel.autoJoinUsers === true) {
        return;
      }
      return this.dialog.confirm({
        message: _discourseI18n.default.t("chat.settings.auto_join_users_warning", {
          category: this.args.channel.chatable.name
        }),
        didConfirm: async () => {
          try {
            const result1 = await this._updateChannelProperty(this.args.channel, "auto_join_users", true);
            this.args.channel.autoJoinUsers = result1.channel.auto_join_users;
          } catch (error1) {
            (0, _ajaxError.popupAjaxError)(error1);
          }
        }
      });
    }
    onToggleMuted() {
      const newValue1 = !this.args.channel.currentUserMembership.muted;
      this.saveNotificationSettings("muted", "muted", newValue1);
    }
    async saveNotificationSettings(frontendKey1, backendKey1, newValue1) {
      if (this.args.channel.currentUserMembership[frontendKey1] === newValue1) {
        return;
      }
      this.args.channel.currentUserMembership[frontendKey1] = newValue1;
      const settings1 = {};
      settings1[backendKey1] = newValue1;
      try {
        const result1 = await this.chatApi.updateCurrentUserChannelNotificationsSettings(this.args.channel.id, settings1);
        this.args.channel.currentUserMembership[frontendKey1] = result1.membership[backendKey1];
        this.toasts.success({
          data: {
            message: _discourseI18n.default.t("saved")
          }
        });
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
    async _updateChannelProperty(channel1, property1, value1) {
      try {
        const result1 = await this.chatApi.updateChannel(channel1.id, {
          [property1]: value1
        });
        this.toasts.success({
          data: {
            message: _discourseI18n.default.t("saved")
          }
        });
        return result1;
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
    async onToggleThreadingEnabled(value1) {
      try {
        this.args.channel.threadingEnabled = !value1;
        const result1 = await this._updateChannelProperty(this.args.channel, "threading_enabled", !value1);
        this.args.channel.threadingEnabled = result1.channel.threading_enabled;
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
    onToggleChannelState() {
      return this.modal.show(_toggleChannelStatus.default, {
        model: this.args.channel
      });
    }
    onArchiveChannel() {
      return this.modal.show(_archiveChannel.default, {
        model: {
          channel: this.args.channel
        }
      });
    }
    onDeleteChannel() {
      return this.modal.show(_deleteChannel.default, {
        model: {
          channel: this.args.channel
        }
      });
    }
    onEditChannelTitle() {
      return this.modal.show(_editChannelName.default, {
        model: this.args.channel
      });
    }
    onLeaveChannel(channel1) {
      this.chatChannelsManager.remove(channel1);
      return this.router.transitionTo("chat");
    }
    onEditChannelDescription() {
      return this.modal.show(_editChannelDescription.default, {
        model: this.args.channel
      });
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="c-channel-settings">
        <ChatForm as |form|>
          <form.section @title={{this.titleSectionTitle}} as |section|>
            <section.row>
              <:default>
                <div class="c-channel-settings__name">
                  {{replaceEmoji @channel.title}}
                </div>
  
                {{#if @channel.isCategoryChannel}}
                  <div class="c-channel-settings__slug">
                    <LinkTo
                      @route="chat.channel"
                      @models={{@channel.routeModels}}
                    >
                      /chat/c/{{@channel.slug}}/{{@channel.id}}
                    </LinkTo>
                  </div>
                {{/if}}
              </:default>
  
              <:action>
                {{#if this.canEditChannel}}
                  <DButton
                    @label="chat.channel_settings.edit"
                    @action={{this.onEditChannelTitle}}
                    class="edit-name-slug-btn btn-flat"
                  />
                {{/if}}
              </:action>
  
            </section.row>
          </form.section>
  
          {{#if this.shouldRenderDescriptionSection}}
            <form.section @title={{this.descriptionSectionTitle}} as |section|>
              <section.row>
                <:default>
                  {{#if @channel.description.length}}
                    {{@channel.description}}
                  {{else}}
                    {{this.descriptionPlaceholder}}
                  {{/if}}
                </:default>
  
                <:action>
                  {{#if this.canEditChannel}}
                    <DButton
                      @label={{if
                        @channel.description.length
                        "chat.channel_settings.edit"
                        "chat.channel_settings.add"
                      }}
                      @action={{this.onEditChannelDescription}}
                      class="edit-description-btn btn-flat"
                    />
                  {{/if}}
                </:action>
              </section.row>
            </form.section>
          {{/if}}
  
          {{#if this.site.mobileView}}
            <form.section as |section|>
              <section.row
                @label={{this.membersLabel}}
                @route="chat.channel.info.members"
                @routeModels={{@channel.routeModels}}
              />
            </form.section>
          {{/if}}
  
          {{#if @channel.isOpen}}
            <form.section @title={{this.settingsSectionTitle}} as |section|>
              <section.row @label={{this.muteSectionLabel}}>
                <:action>
                  <DToggleSwitch
                    @state={{@channel.currentUserMembership.muted}}
                    class="c-channel-settings__mute-switch"
                    {{on "click" this.onToggleMuted}}
                  />
                </:action>
              </section.row>
  
              {{#if this.shouldRenderDesktopNotificationsLevelSection}}
                <section.row @label={{this.desktopNotificationsLevelLabel}}>
                  <:action>
                    <ComboBox
                      @content={{this.notificationLevels}}
                      @value={{@channel.currentUserMembership.desktopNotificationLevel}}
                      @valueProperty="value"
                      @onChange={{fn
                        this.saveNotificationSettings
                        "desktopNotificationLevel"
                        "desktop_notification_level"
                      }}
                      class="c-channel-settings__selector c-channel-settings__desktop-notifications-selector"
                    />
                  </:action>
                </section.row>
              {{/if}}
  
              {{#if this.shouldRenderMobileNotificationsLevelSection}}
                <section.row @label={{this.mobileNotificationsLevelLabel}}>
                  <:action>
                    <ComboBox
                      @content={{this.notificationLevels}}
                      @value={{@channel.currentUserMembership.mobileNotificationLevel}}
                      @valueProperty="value"
                      @onChange={{fn
                        this.saveNotificationSettings
                        "mobileNotificationLevel"
                        "mobile_notification_level"
                      }}
                      class="c-channel-settings__selector c-channel-settings__mobile-notifications-selector"
                    />
                  </:action>
                </section.row>
              {{/if}}
            </form.section>
          {{/if}}
  
          <form.section @title={{this.channelInfoSectionTitle}} as |section|>
            {{#if @channel.isCategoryChannel}}
              <section.row @label={{this.categoryLabel}}>
                {{categoryBadge
                  @channel.chatable
                  link=true
                  allowUncategorized=true
                }}
              </section.row>
            {{/if}}
  
            <section.row @label={{this.historyLabel}}>
              <ChatRetentionReminderText @channel={{@channel}} @type="short" />
            </section.row>
          </form.section>
  
          {{#if this.shouldRenderAdminSection}}
            <form.section
              @title={{this.adminSectionTitle}}
              data-section="admin"
              as |section|
            >
              {{#if this.autoJoinAvailable}}
                <section.row @label={{this.autoJoinLabel}}>
                  <:action>
                    <DToggleSwitch
                      @state={{@channel.autoJoinUsers}}
                      class="c-channel-settings__auto-join-switch"
                      {{on
                        "click"
                        (fn this.onToggleAutoJoinUsers @channel.autoJoinUsers)
                      }}
                    />
                  </:action>
                </section.row>
              {{/if}}
  
              {{#if this.toggleChannelWideMentionsAvailable}}
                <section.row @label={{this.channelWideMentionsLabel}}>
                  <:action>
                    <DToggleSwitch
                      class="c-channel-settings__channel-wide-mentions"
                      @state={{@channel.allowChannelWideMentions}}
                      {{on
                        "click"
                        (fn
                          this.onToggleChannelWideMentions
                          @channel.allowChannelWideMentions
                        )
                      }}
                    />
                  </:action>
  
                  <:description>
                    {{this.channelWideMentionsDescription}}
                  </:description>
                </section.row>
              {{/if}}
  
              {{#if this.toggleThreadingAvailable}}
                <section.row @label={{this.toggleThreadingLabel}}>
                  <:action>
                    <DToggleSwitch
                      @state={{@channel.threadingEnabled}}
                      class="c-channel-settings__threading-switch"
                      {{on
                        "click"
                        (fn
                          this.onToggleThreadingEnabled @channel.threadingEnabled
                        )
                      }}
                    />
                  </:action>
  
                  <:description>
                    {{this.toggleThreadingDescription}}
                  </:description>
                </section.row>
              {{/if}}
  
              {{#if this.shouldRenderStatusSection}}
                {{#if this.shouldRenderArchiveRow}}
                  <section.row>
                    <:action>
                      <DButton
                        @action={{this.onArchiveChannel}}
                        @label="chat.channel_settings.archive_channel"
                        @icon="archive"
                        class="archive-btn chat-form__btn btn-flat"
                      />
                    </:action>
                  </section.row>
                {{/if}}
  
                <section.row>
                  <:action>
                    {{#if @channel.isOpen}}
                      <DButton
                        @action={{this.onToggleChannelState}}
                        @label="chat.channel_settings.close_channel"
                        @icon="lock"
                        class="close-btn chat-form__btn btn-flat"
                      />
                    {{else}}
                      <DButton
                        @action={{this.onToggleChannelState}}
                        @label="chat.channel_settings.open_channel"
                        @icon="unlock"
                        class="open-btn chat-form__btn btn-flat"
                      />
                    {{/if}}
                  </:action>
                </section.row>
  
                <section.row>
                  <:action>
                    <DButton
                      @action={{this.onDeleteChannel}}
                      @label="chat.channel_settings.delete_channel"
                      @icon="trash-alt"
                      class="delete-btn chat-form__btn btn-flat"
                    />
                  </:action>
                </section.row>
              {{/if}}
  
            </form.section>
          {{/if}}
  
          <form.section as |section|>
            <section.row>
              <:action>
                <ToggleChannelMembershipButton
                  @channel={{@channel}}
                  @onLeave={{this.onLeaveChannel}}
                  @options={{hash
                    joinClass="btn-primary"
                    leaveClass="btn-danger"
                    joinIcon="sign-in-alt"
                    leaveIcon="sign-out-alt"
                  }}
                />
              </:action>
            </section.row>
            {{#if @channel.chatable.group}}
              <div class="c-channel-settings__leave-info">
                {{icon "exclamation-triangle"}}
                {{i18n "chat.channel_settings.leave_groupchat_info"}}
              </div>
            {{/if}}
          </form.section>
        </ChatForm>
      </div>
    
  */
  {
    "id": "CJg1ImHg",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"c-channel-settings\"],[12],[1,\"\\n      \"],[8,[32,0],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,1,[\"section\"]],null,[[\"@title\"],[[30,0,[\"titleSectionTitle\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[30,2,[\"row\"]],null,null,[[\"default\",\"action\"],[[[[1,\"\\n              \"],[10,0],[14,0,\"c-channel-settings__name\"],[12],[1,\"\\n                \"],[1,[28,[32,1],[[30,3,[\"title\"]]],null]],[1,\"\\n              \"],[13],[1,\"\\n\\n\"],[41,[30,3,[\"isCategoryChannel\"]],[[[1,\"                \"],[10,0],[14,0,\"c-channel-settings__slug\"],[12],[1,\"\\n                  \"],[8,[32,2],null,[[\"@route\",\"@models\"],[\"chat.channel\",[30,3,[\"routeModels\"]]]],[[\"default\"],[[[[1,\"\\n                    /chat/c/\"],[1,[30,3,[\"slug\"]]],[1,\"/\"],[1,[30,3,[\"id\"]]],[1,\"\\n                  \"]],[]]]]],[1,\"\\n                \"],[13],[1,\"\\n\"]],[]],null],[1,\"            \"]],[]],[[[1,\"\\n\"],[41,[30,0,[\"canEditChannel\"]],[[[1,\"                \"],[8,[32,3],[[24,0,\"edit-name-slug-btn btn-flat\"]],[[\"@label\",\"@action\"],[\"chat.channel_settings.edit\",[30,0,[\"onEditChannelTitle\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"            \"]],[]]]]],[1,\"\\n        \"]],[2]]]]],[1,\"\\n\\n\"],[41,[30,0,[\"shouldRenderDescriptionSection\"]],[[[1,\"          \"],[8,[30,1,[\"section\"]],null,[[\"@title\"],[[30,0,[\"descriptionSectionTitle\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,4,[\"row\"]],null,null,[[\"default\",\"action\"],[[[[1,\"\\n\"],[41,[30,3,[\"description\",\"length\"]],[[[1,\"                  \"],[1,[30,3,[\"description\"]]],[1,\"\\n\"]],[]],[[[1,\"                  \"],[1,[30,0,[\"descriptionPlaceholder\"]]],[1,\"\\n\"]],[]]],[1,\"              \"]],[]],[[[1,\"\\n\"],[41,[30,0,[\"canEditChannel\"]],[[[1,\"                  \"],[8,[32,3],[[24,0,\"edit-description-btn btn-flat\"]],[[\"@label\",\"@action\"],[[52,[30,3,[\"description\",\"length\"]],\"chat.channel_settings.edit\",\"chat.channel_settings.add\"],[30,0,[\"onEditChannelDescription\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"              \"]],[]]]]],[1,\"\\n          \"]],[4]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"site\",\"mobileView\"]],[[[1,\"          \"],[8,[30,1,[\"section\"]],null,null,[[\"default\"],[[[[1,\"\\n            \"],[8,[30,5,[\"row\"]],null,[[\"@label\",\"@route\",\"@routeModels\"],[[30,0,[\"membersLabel\"]],\"chat.channel.info.members\",[30,3,[\"routeModels\"]]]],null],[1,\"\\n          \"]],[5]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,3,[\"isOpen\"]],[[[1,\"          \"],[8,[30,1,[\"section\"]],null,[[\"@title\"],[[30,0,[\"settingsSectionTitle\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[30,6,[\"row\"]],null,[[\"@label\"],[[30,0,[\"muteSectionLabel\"]]]],[[\"action\"],[[[[1,\"\\n                \"],[8,[32,4],[[24,0,\"c-channel-settings__mute-switch\"],[4,[32,5],[\"click\",[30,0,[\"onToggleMuted\"]]],null]],[[\"@state\"],[[30,3,[\"currentUserMembership\",\"muted\"]]]],null],[1,\"\\n              \"]],[]]]]],[1,\"\\n\\n\"],[41,[30,0,[\"shouldRenderDesktopNotificationsLevelSection\"]],[[[1,\"              \"],[8,[30,6,[\"row\"]],null,[[\"@label\"],[[30,0,[\"desktopNotificationsLevelLabel\"]]]],[[\"action\"],[[[[1,\"\\n                  \"],[8,[32,6],[[24,0,\"c-channel-settings__selector c-channel-settings__desktop-notifications-selector\"]],[[\"@content\",\"@value\",\"@valueProperty\",\"@onChange\"],[[30,0,[\"notificationLevels\"]],[30,3,[\"currentUserMembership\",\"desktopNotificationLevel\"]],\"value\",[28,[32,7],[[30,0,[\"saveNotificationSettings\"]],\"desktopNotificationLevel\",\"desktop_notification_level\"],null]]],null],[1,\"\\n                \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"shouldRenderMobileNotificationsLevelSection\"]],[[[1,\"              \"],[8,[30,6,[\"row\"]],null,[[\"@label\"],[[30,0,[\"mobileNotificationsLevelLabel\"]]]],[[\"action\"],[[[[1,\"\\n                  \"],[8,[32,6],[[24,0,\"c-channel-settings__selector c-channel-settings__mobile-notifications-selector\"]],[[\"@content\",\"@value\",\"@valueProperty\",\"@onChange\"],[[30,0,[\"notificationLevels\"]],[30,3,[\"currentUserMembership\",\"mobileNotificationLevel\"]],\"value\",[28,[32,7],[[30,0,[\"saveNotificationSettings\"]],\"mobileNotificationLevel\",\"mobile_notification_level\"],null]]],null],[1,\"\\n                \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"          \"]],[6]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n        \"],[8,[30,1,[\"section\"]],null,[[\"@title\"],[[30,0,[\"channelInfoSectionTitle\"]]]],[[\"default\"],[[[[1,\"\\n\"],[41,[30,3,[\"isCategoryChannel\"]],[[[1,\"            \"],[8,[30,7,[\"row\"]],null,[[\"@label\"],[[30,0,[\"categoryLabel\"]]]],[[\"default\"],[[[[1,\"\\n              \"],[1,[28,[32,8],[[30,3,[\"chatable\"]]],[[\"link\",\"allowUncategorized\"],[true,true]]]],[1,\"\\n            \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n          \"],[8,[30,7,[\"row\"]],null,[[\"@label\"],[[30,0,[\"historyLabel\"]]]],[[\"default\"],[[[[1,\"\\n            \"],[8,[32,9],null,[[\"@channel\",\"@type\"],[[30,3],\"short\"]],null],[1,\"\\n          \"]],[]]]]],[1,\"\\n        \"]],[7]]]]],[1,\"\\n\\n\"],[41,[30,0,[\"shouldRenderAdminSection\"]],[[[1,\"          \"],[8,[30,1,[\"section\"]],[[24,\"data-section\",\"admin\"]],[[\"@title\"],[[30,0,[\"adminSectionTitle\"]]]],[[\"default\"],[[[[1,\"\\n\"],[41,[30,0,[\"autoJoinAvailable\"]],[[[1,\"              \"],[8,[30,8,[\"row\"]],null,[[\"@label\"],[[30,0,[\"autoJoinLabel\"]]]],[[\"action\"],[[[[1,\"\\n                  \"],[8,[32,4],[[24,0,\"c-channel-settings__auto-join-switch\"],[4,[32,5],[\"click\",[28,[32,7],[[30,0,[\"onToggleAutoJoinUsers\"]],[30,3,[\"autoJoinUsers\"]]],null]],null]],[[\"@state\"],[[30,3,[\"autoJoinUsers\"]]]],null],[1,\"\\n                \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"toggleChannelWideMentionsAvailable\"]],[[[1,\"              \"],[8,[30,8,[\"row\"]],null,[[\"@label\"],[[30,0,[\"channelWideMentionsLabel\"]]]],[[\"action\",\"description\"],[[[[1,\"\\n                  \"],[8,[32,4],[[24,0,\"c-channel-settings__channel-wide-mentions\"],[4,[32,5],[\"click\",[28,[32,7],[[30,0,[\"onToggleChannelWideMentions\"]],[30,3,[\"allowChannelWideMentions\"]]],null]],null]],[[\"@state\"],[[30,3,[\"allowChannelWideMentions\"]]]],null],[1,\"\\n                \"]],[]],[[[1,\"\\n                  \"],[1,[30,0,[\"channelWideMentionsDescription\"]]],[1,\"\\n                \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"toggleThreadingAvailable\"]],[[[1,\"              \"],[8,[30,8,[\"row\"]],null,[[\"@label\"],[[30,0,[\"toggleThreadingLabel\"]]]],[[\"action\",\"description\"],[[[[1,\"\\n                  \"],[8,[32,4],[[24,0,\"c-channel-settings__threading-switch\"],[4,[32,5],[\"click\",[28,[32,7],[[30,0,[\"onToggleThreadingEnabled\"]],[30,3,[\"threadingEnabled\"]]],null]],null]],[[\"@state\"],[[30,3,[\"threadingEnabled\"]]]],null],[1,\"\\n                \"]],[]],[[[1,\"\\n                  \"],[1,[30,0,[\"toggleThreadingDescription\"]]],[1,\"\\n                \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,0,[\"shouldRenderStatusSection\"]],[[[41,[30,0,[\"shouldRenderArchiveRow\"]],[[[1,\"                \"],[8,[30,8,[\"row\"]],null,null,[[\"action\"],[[[[1,\"\\n                    \"],[8,[32,3],[[24,0,\"archive-btn chat-form__btn btn-flat\"]],[[\"@action\",\"@label\",\"@icon\"],[[30,0,[\"onArchiveChannel\"]],\"chat.channel_settings.archive_channel\",\"archive\"]],null],[1,\"\\n                  \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n              \"],[8,[30,8,[\"row\"]],null,null,[[\"action\"],[[[[1,\"\\n\"],[41,[30,3,[\"isOpen\"]],[[[1,\"                    \"],[8,[32,3],[[24,0,\"close-btn chat-form__btn btn-flat\"]],[[\"@action\",\"@label\",\"@icon\"],[[30,0,[\"onToggleChannelState\"]],\"chat.channel_settings.close_channel\",\"lock\"]],null],[1,\"\\n\"]],[]],[[[1,\"                    \"],[8,[32,3],[[24,0,\"open-btn chat-form__btn btn-flat\"]],[[\"@action\",\"@label\",\"@icon\"],[[30,0,[\"onToggleChannelState\"]],\"chat.channel_settings.open_channel\",\"unlock\"]],null],[1,\"\\n\"]],[]]],[1,\"                \"]],[]]]]],[1,\"\\n\\n              \"],[8,[30,8,[\"row\"]],null,null,[[\"action\"],[[[[1,\"\\n                  \"],[8,[32,3],[[24,0,\"delete-btn chat-form__btn btn-flat\"]],[[\"@action\",\"@label\",\"@icon\"],[[30,0,[\"onDeleteChannel\"]],\"chat.channel_settings.delete_channel\",\"trash-alt\"]],null],[1,\"\\n                \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n          \"]],[8]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n        \"],[8,[30,1,[\"section\"]],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,9,[\"row\"]],null,null,[[\"action\"],[[[[1,\"\\n              \"],[8,[32,10],null,[[\"@channel\",\"@onLeave\",\"@options\"],[[30,3],[30,0,[\"onLeaveChannel\"]],[28,[32,11],null,[[\"joinClass\",\"leaveClass\",\"joinIcon\",\"leaveIcon\"],[\"btn-primary\",\"btn-danger\",\"sign-in-alt\",\"sign-out-alt\"]]]]],null],[1,\"\\n            \"]],[]]]]],[1,\"\\n\"],[41,[30,3,[\"chatable\",\"group\"]],[[[1,\"            \"],[10,0],[14,0,\"c-channel-settings__leave-info\"],[12],[1,\"\\n              \"],[1,[28,[32,12],[\"exclamation-triangle\"],null]],[1,\"\\n              \"],[1,[28,[32,13],[\"chat.channel_settings.leave_groupchat_info\"],null]],[1,\"\\n            \"],[13],[1,\"\\n\"]],[]],null],[1,\"        \"]],[9]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"form\",\"section\",\"@channel\",\"section\",\"section\",\"section\",\"section\",\"section\",\"section\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/routes/channel-info-settings.js",
    "scope": () => [_form.default, _replaceEmoji.default, _routing.LinkTo, _dButton.default, _dToggleSwitch.default, _modifier.on, _comboBox.default, _helper.fn, _categoryBadge.default, _chatRetentionReminderText.default, _toggleChannelMembershipButton.default, _helper.hash, _dIcon.default, _i18n.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatGuardian", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "dialog", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "toasts", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "onToggleChannelWideMentions", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onToggleChannelWideMentions"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onToggleAutoJoinUsers", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onToggleAutoJoinUsers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onDisableAutoJoinUsers", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onDisableAutoJoinUsers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onEnableAutoJoinUsers", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onEnableAutoJoinUsers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onToggleMuted", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onToggleMuted"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveNotificationSettings", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "saveNotificationSettings"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_updateChannelProperty", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "_updateChannelProperty"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onToggleThreadingEnabled", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onToggleThreadingEnabled"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onToggleChannelState", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onToggleChannelState"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onArchiveChannel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onArchiveChannel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onDeleteChannel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onDeleteChannel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onEditChannelTitle", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onEditChannelTitle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onLeaveChannel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onLeaveChannel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onEditChannelDescription", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onEditChannelDescription"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/routes/channel-info", ["exports", "@glimmer/component", "@ember/object", "@ember/routing", "@ember/service", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/modal/edit-channel-name", "discourse/plugins/chat/discourse/components/chat/navbar", "discourse/plugins/chat/discourse/components/chat-channel-status", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _routing, _service, _discourseI18n, _editChannelName, _navbar, _chatChannelStatus, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatRoutesChannelInfo = _exports.default = (_class = (_class2 = class ChatRoutesChannelInfo extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatChannelInfoRouteOriginManager", _descriptor, this);
      _initializerDefineProperty(this, "site", _descriptor2, this);
      _initializerDefineProperty(this, "modal", _descriptor3, this);
      _initializerDefineProperty(this, "chatGuardian", _descriptor4, this);
      _defineProperty(this, "membersLabel", _discourseI18n.default.t("chat.channel_info.tabs.members"));
      _defineProperty(this, "settingsLabel", _discourseI18n.default.t("chat.channel_info.tabs.settings"));
      _defineProperty(this, "backToChannelLabel", _discourseI18n.default.t("chat.channel_info.back_to_all_channels"));
      _defineProperty(this, "backToAllChannelsLabel", _discourseI18n.default.t("chat.channel_info.back_to_channel"));
    }
    get showTabs() {
      return this.site.desktopView && this.args.channel.isOpen;
    }
    get canEditChannel() {
      return this.chatGuardian.canEditChatChannel() && (this.args.channel.isCategoryChannel || this.args.channel.isDirectMessageChannel && this.args.channel.chatable.group);
    }
    editChannelTitle() {
      return this.modal.show(_editChannelName.default, {
        model: this.args.channel
      });
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="c-routes-channel-info">
        <Navbar as |navbar|>
          {{#if this.chatChannelInfoRouteOriginManager.isBrowse}}
            <navbar.BackButton
              @route="chat.browse"
              @title={{this.backToAllChannelsLabel}}
            />
          {{else}}
            <navbar.BackButton
              @route="chat.channel"
              @routeModels={{@channel.routeModels}}
              @title={{this.backToChannelLabel}}
            />
          {{/if}}
          <navbar.ChannelTitle @channel={{@channel}} />
        </Navbar>
  
        <ChatChannelStatus @channel={{@channel}} />
  
        <div class="c-channel-info">
          {{#if this.showTabs}}
            <nav class="c-channel-info__nav">
              <ul class="nav nav-pills">
                <li>
                  <LinkTo
                    @route="chat.channel.info.settings"
                    @model={{@channel}}
                    @replace={{true}}
                  >
                    {{this.settingsLabel}}
                  </LinkTo>
                </li>
                <li>
                  <LinkTo
                    @route="chat.channel.info.members"
                    @model={{@channel}}
                    @replace={{true}}
                  >
                    {{this.membersLabel}}
                  </LinkTo>
                </li>
              </ul>
            </nav>
          {{/if}}
  
          {{outlet}}
        </div>
      </div>
    
  */
  {
    "id": "QPwuZiXL",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"c-routes-channel-info\"],[12],[1,\"\\n      \"],[8,[32,0],null,null,[[\"default\"],[[[[1,\"\\n\"],[41,[30,0,[\"chatChannelInfoRouteOriginManager\",\"isBrowse\"]],[[[1,\"          \"],[8,[30,1,[\"BackButton\"]],null,[[\"@route\",\"@title\"],[\"chat.browse\",[30,0,[\"backToAllChannelsLabel\"]]]],null],[1,\"\\n\"]],[]],[[[1,\"          \"],[8,[30,1,[\"BackButton\"]],null,[[\"@route\",\"@routeModels\",\"@title\"],[\"chat.channel\",[30,2,[\"routeModels\"]],[30,0,[\"backToChannelLabel\"]]]],null],[1,\"\\n\"]],[]]],[1,\"        \"],[8,[30,1,[\"ChannelTitle\"]],null,[[\"@channel\"],[[30,2]]],null],[1,\"\\n      \"]],[1]]]]],[1,\"\\n\\n      \"],[8,[32,1],null,[[\"@channel\"],[[30,2]]],null],[1,\"\\n\\n      \"],[10,0],[14,0,\"c-channel-info\"],[12],[1,\"\\n\"],[41,[30,0,[\"showTabs\"]],[[[1,\"          \"],[10,\"nav\"],[14,0,\"c-channel-info__nav\"],[12],[1,\"\\n            \"],[10,\"ul\"],[14,0,\"nav nav-pills\"],[12],[1,\"\\n              \"],[10,\"li\"],[12],[1,\"\\n                \"],[8,[32,2],null,[[\"@route\",\"@model\",\"@replace\"],[\"chat.channel.info.settings\",[30,2],true]],[[\"default\"],[[[[1,\"\\n                  \"],[1,[30,0,[\"settingsLabel\"]]],[1,\"\\n                \"]],[]]]]],[1,\"\\n              \"],[13],[1,\"\\n              \"],[10,\"li\"],[12],[1,\"\\n                \"],[8,[32,2],null,[[\"@route\",\"@model\",\"@replace\"],[\"chat.channel.info.members\",[30,2],true]],[[\"default\"],[[[[1,\"\\n                  \"],[1,[30,0,[\"membersLabel\"]]],[1,\"\\n                \"]],[]]]]],[1,\"\\n              \"],[13],[1,\"\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n        \"],[46,[28,[31,2],null,null],null,null,null],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"navbar\",\"@channel\"],false,[\"if\",\"component\",\"-outlet\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/routes/channel-info.js",
    "scope": () => [_navbar.default, _chatChannelStatus.default, _routing.LinkTo],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatChannelInfoRouteOriginManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatGuardian", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "editChannelTitle", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "editChannelTitle"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/routes/channel-thread", ["exports", "@glimmer/component", "@ember/helper", "discourse/plugins/chat/discourse/components/chat/thread/header", "discourse/plugins/chat/discourse/components/chat-thread", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _header, _chatThread, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatRoutesChannelThread extends _component.default {}
  _exports.default = ChatRoutesChannelThread;
  _class = ChatRoutesChannelThread;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="c-routes-channel-thread">
        {{#each (array @thread) as |thread|}}
          <ThreadHeader @thread={{thread}} />
  
          <Thread
            @thread={{thread}}
            @targetMessageId={{@targetMessageId}}
            @includeHeader={{true}}
          />
        {{/each}}
      </div>
    
  */
  {
    "id": "HehJynEo",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"c-routes-channel-thread\"],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[28,[32,0],[[30,1]],null]],null]],null],null,[[[1,\"        \"],[8,[32,1],null,[[\"@thread\"],[[30,2]]],null],[1,\"\\n\\n        \"],[8,[32,2],null,[[\"@thread\",\"@targetMessageId\",\"@includeHeader\"],[[30,2],[30,3],true]],null],[1,\"\\n\"]],[2]],null],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@thread\",\"thread\",\"@targetMessageId\"],false,[\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/routes/channel-thread.js",
    "scope": () => [_helper.array, _header.default, _chatThread.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/routes/channel-threads", ["exports", "@glimmer/component", "discourse/plugins/chat/discourse/components/chat/thread-list/header", "discourse/plugins/chat/discourse/components/chat-thread-list", "@ember/template-factory", "@ember/component"], function (_exports, _component, _header, _chatThreadList, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatRoutesChannelThreads extends _component.default {}
  _exports.default = ChatRoutesChannelThreads;
  _class = ChatRoutesChannelThreads;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="c-routes-channel-threads">
        <ChatThreadListHeader @channel={{@channel}} />
        <ChatThreadList @channel={{@channel}} @includeHeader={{true}} />
      </div>
    
  */
  {
    "id": "gQz7I0oz",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"c-routes-channel-threads\"],[12],[1,\"\\n      \"],[8,[32,0],null,[[\"@channel\"],[[30,1]]],null],[1,\"\\n      \"],[8,[32,1],null,[[\"@channel\",\"@includeHeader\"],[[30,1],true]],null],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@channel\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/routes/channel-threads.js",
    "scope": () => [_header.default, _chatThreadList.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/chat/routes/channel", ["exports", "@glimmer/component", "@ember/service", "discourse/plugins/chat/discourse/components/chat/navbar", "discourse/plugins/chat/discourse/components/chat-side-panel", "discourse/plugins/chat/discourse/components/full-page-chat", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _navbar, _chatSidePanel, _fullPageChat, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatRoutesChannel = _exports.default = (_class = (_class2 = class ChatRoutesChannel extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "site", _descriptor, this);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="c-routes-channel">
        <Navbar as |navbar|>
          {{#if this.site.mobileView}}
            <navbar.BackButton />
          {{/if}}
          <navbar.ChannelTitle @channel={{@channel}} />
          <navbar.Actions as |action|>
            <action.OpenDrawerButton />
            <action.ThreadsListButton @channel={{@channel}} />
          </navbar.Actions>
        </Navbar>
  
        <FullPageChat
          @channel={{@channel}}
          @targetMessageId={{@targetMessageId}}
        />
      </div>
  
      <SidePanel>
        {{outlet}}
      </SidePanel>
    
  */
  {
    "id": "qF+741y0",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"c-routes-channel\"],[12],[1,\"\\n      \"],[8,[32,0],null,null,[[\"default\"],[[[[1,\"\\n\"],[41,[30,0,[\"site\",\"mobileView\"]],[[[1,\"          \"],[8,[30,1,[\"BackButton\"]],null,null,null],[1,\"\\n\"]],[]],null],[1,\"        \"],[8,[30,1,[\"ChannelTitle\"]],null,[[\"@channel\"],[[30,2]]],null],[1,\"\\n        \"],[8,[30,1,[\"Actions\"]],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,3,[\"OpenDrawerButton\"]],null,null,null],[1,\"\\n          \"],[8,[30,3,[\"ThreadsListButton\"]],null,[[\"@channel\"],[[30,2]]],null],[1,\"\\n        \"]],[3]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n\\n      \"],[8,[32,1],null,[[\"@channel\",\"@targetMessageId\"],[[30,2],[30,4]]],null],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[8,[32,2],null,null,[[\"default\"],[[[[1,\"\\n      \"],[46,[28,[31,2],null,null],null,null,null],[1,\"\\n    \"]],[]]]]],[1,\"\\n  \"]],[\"navbar\",\"@channel\",\"action\",\"@targetMessageId\"],false,[\"if\",\"component\",\"-outlet\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/routes/channel.js",
    "scope": () => [_navbar.default, _fullPageChat.default, _chatSidePanel.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/routes/threads", ["exports", "@glimmer/component", "@ember/service", "discourse-common/helpers/i18n", "discourse/plugins/chat/discourse/components/chat/navbar", "discourse/plugins/chat/discourse/components/user-threads", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _i18n, _navbar, _userThreads, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatRoutesThreads = _exports.default = (_class = (_class2 = class ChatRoutesThreads extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "site", _descriptor, this);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="c-routes-threads">
        <Navbar as |navbar|>
          {{#if this.site.mobileView}}
            <navbar.BackButton />
          {{/if}}
          <navbar.Title
            @title={{i18n "chat.my_threads.title"}}
            @icon="discourse-threads"
          />
  
          <navbar.Actions as |action|>
            <action.OpenDrawerButton />
          </navbar.Actions>
        </Navbar>
  
        <UserThreads />
      </div>
    
  */
  {
    "id": "kCWIPot0",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"c-routes-threads\"],[12],[1,\"\\n      \"],[8,[32,0],null,null,[[\"default\"],[[[[1,\"\\n\"],[41,[30,0,[\"site\",\"mobileView\"]],[[[1,\"          \"],[8,[30,1,[\"BackButton\"]],null,null,null],[1,\"\\n\"]],[]],null],[1,\"        \"],[8,[30,1,[\"Title\"]],null,[[\"@title\",\"@icon\"],[[28,[32,1],[\"chat.my_threads.title\"],null],\"discourse-threads\"]],null],[1,\"\\n\\n        \"],[8,[30,1,[\"Actions\"]],null,null,[[\"default\"],[[[[1,\"\\n          \"],[8,[30,2,[\"OpenDrawerButton\"]],null,null,null],[1,\"\\n        \"]],[2]]]]],[1,\"\\n      \"]],[1]]]]],[1,\"\\n\\n      \"],[8,[32,2],null,null,null],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"navbar\",\"action\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/routes/threads.js",
    "scope": () => [_navbar.default, _i18n.default, _userThreads.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/scroll-to-bottom-arrow", ["exports", "discourse/components/d-button", "discourse/helpers/concat-class", "discourse-common/helpers/d-icon", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _dButton, _concatClass, _dIcon, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ScrollToBottomArrow = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    <div class="chat-scroll-to-bottom">
      <DButton
        class={{concatClass
          "btn-flat"
          "chat-scroll-to-bottom__button"
          (if @isVisible "visible")
        }}
        @action={{@onScrollToBottom}}
      >
        <span class="chat-scroll-to-bottom__arrow">
          {{dIcon "arrow-down"}}
        </span>
      </DButton>
    </div>
  
  */
  {
    "id": "xc6rAyLi",
    "block": "[[[1,\"\\n  \"],[10,0],[14,0,\"chat-scroll-to-bottom\"],[12],[1,\"\\n    \"],[8,[32,0],[[16,0,[28,[32,1],[\"btn-flat\",\"chat-scroll-to-bottom__button\",[52,[30,1],\"visible\"]],null]]],[[\"@action\"],[[30,2]]],[[\"default\"],[[[[1,\"\\n      \"],[10,1],[14,0,\"chat-scroll-to-bottom__arrow\"],[12],[1,\"\\n        \"],[1,[28,[32,2],[\"arrow-down\"],null]],[1,\"\\n      \"],[13],[1,\"\\n    \"]],[]]]]],[1,\"\\n  \"],[13],[1,\"\\n\"]],[\"@isVisible\",\"@onScrollToBottom\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/scroll-to-bottom-arrow.js",
    "scope": () => [_dButton.default, _concatClass.default, _dIcon.default],
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = ScrollToBottomArrow;
});
define("discourse/plugins/chat/discourse/components/chat/selection-manager", ["exports", "@glimmer/component", "@ember/application", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse/lib/ajax-error", "discourse/lib/utilities", "discourse-common/config/environment", "discourse-common/utils/decorators", "discourse-i18n", "truth-helpers/helpers/not", "discourse/plugins/chat/discourse/components/chat/modal/move-message-to-channel", "@ember/template-factory", "@ember/component"], function (_exports, _component, _application, _object, _service, _dButton, _ajaxError, _utilities, _environment, _decorators, _discourseI18n, _not, _moveMessageToChannel, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatSelectionManager = _exports.default = (_dec = (0, _service.inject)("composer"), _dec2 = (0, _service.inject)("chat-api"), (_class = (_class2 = class ChatSelectionManager extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "topicComposer", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      _initializerDefineProperty(this, "modal", _descriptor3, this);
      _initializerDefineProperty(this, "site", _descriptor4, this);
      _initializerDefineProperty(this, "toasts", _descriptor5, this);
      _initializerDefineProperty(this, "api", _descriptor6, this);
    }
    get enableMove() {
      return this.args.enableMove ?? false;
    }
    get anyMessagesSelected() {
      return this.args.pane.selectedMessageIds.length > 0;
    }
    async generateQuote() {
      const {
        markdown: markdown1
      } = await this.api.generateQuote(this.args.pane.channel.id, this.args.pane.selectedMessageIds);
      return new Blob([markdown1], {
        type: "text/plain"
      });
    }
    openMoveMessageModal() {
      this.modal.show(_moveMessageToChannel.default, {
        model: {
          sourceChannel: this.args.pane.channel,
          selectedMessageIds: this.args.pane.selectedMessageIds
        }
      });
    }
    async quoteMessages() {
      let quoteMarkdown1;
      try {
        const quoteMarkdownBlob1 = await this.generateQuote();
        quoteMarkdown1 = await quoteMarkdownBlob1.text();
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
      const openOpts1 = {};
      if (this.args.pane.channel.isCategoryChannel) {
        openOpts1.categoryId = this.args.pane.channel.chatableId;
      }
      if (this.site.mobileView) {
        // go to the relevant chatable (e.g. category) and open the
        // composer to insert text
        if (this.args.pane.channel.chatableUrl) {
          this.router.transitionTo(this.args.pane.channel.chatableUrl);
        }
        await this.topicComposer.focusComposer({
          fallbackToNewTopic: true,
          insertText: quoteMarkdown1,
          openOpts: openOpts1
        });
      } else {
        // open the composer and insert text, reply to the current
        // topic if there is one, use the active draft if there is one
        const container1 = (0, _application.getOwner)(this);
        const topic1 = container1.lookup("controller:topic");
        await this.topicComposer.focusComposer({
          fallbackToNewTopic: true,
          topic: topic1?.model,
          insertText: quoteMarkdown1,
          openOpts: openOpts1
        });
      }
    }
    async copyMessages() {
      try {
        if (!(0, _environment.isTesting)()) {
          // clipboard API throws errors in tests
          await (0, _utilities.clipboardCopyAsync)(this.generateQuote);
          this.toasts.success({
            duration: 3000,
            data: {
              message: _discourseI18n.default.t("chat.quote.copy_success")
            }
          });
        }
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div
        class="chat-selection-management"
        data-last-copy-successful={{this.lastCopySuccessful}}
      >
        <div class="chat-selection-management__buttons">
          <DButton
            @icon="quote-left"
            @label="chat.selection.quote_selection"
            @disabled={{not this.anyMessagesSelected}}
            @action={{this.quoteMessages}}
            id="chat-quote-btn"
          />
  
          <DButton
            @icon="copy"
            @label="chat.selection.copy"
            @disabled={{not this.anyMessagesSelected}}
            @action={{this.copyMessages}}
            id="chat-copy-btn"
          />
  
          {{#if this.enableMove}}
            <DButton
              @icon="sign-out-alt"
              @label="chat.selection.move_selection_to_channel"
              @disabled={{not this.anyMessagesSelected}}
              @action={{this.openMoveMessageModal}}
              id="chat-move-to-channel-btn"
            />
          {{/if}}
  
          <DButton
            @icon="times"
            @label="chat.selection.cancel"
            @action={{@pane.cancelSelecting}}
            id="chat-cancel-selection-btn"
            class="btn-secondary cancel-btn"
          />
        </div>
      </div>
    
  */
  {
    "id": "/CdXegRl",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat-selection-management\"],[15,\"data-last-copy-successful\",[30,0,[\"lastCopySuccessful\"]]],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-selection-management__buttons\"],[12],[1,\"\\n        \"],[8,[32,0],[[24,1,\"chat-quote-btn\"]],[[\"@icon\",\"@label\",\"@disabled\",\"@action\"],[\"quote-left\",\"chat.selection.quote_selection\",[28,[32,1],[[30,0,[\"anyMessagesSelected\"]]],null],[30,0,[\"quoteMessages\"]]]],null],[1,\"\\n\\n        \"],[8,[32,0],[[24,1,\"chat-copy-btn\"]],[[\"@icon\",\"@label\",\"@disabled\",\"@action\"],[\"copy\",\"chat.selection.copy\",[28,[32,1],[[30,0,[\"anyMessagesSelected\"]]],null],[30,0,[\"copyMessages\"]]]],null],[1,\"\\n\\n\"],[41,[30,0,[\"enableMove\"]],[[[1,\"          \"],[8,[32,0],[[24,1,\"chat-move-to-channel-btn\"]],[[\"@icon\",\"@label\",\"@disabled\",\"@action\"],[\"sign-out-alt\",\"chat.selection.move_selection_to_channel\",[28,[32,1],[[30,0,[\"anyMessagesSelected\"]]],null],[30,0,[\"openMoveMessageModal\"]]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n        \"],[8,[32,0],[[24,1,\"chat-cancel-selection-btn\"],[24,0,\"btn-secondary cancel-btn\"]],[[\"@icon\",\"@label\",\"@action\"],[\"times\",\"chat.selection.cancel\",[30,1,[\"cancelSelecting\"]]]],null],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@pane\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/selection-manager.js",
    "scope": () => [_dButton.default, _not.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "topicComposer", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "toasts", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "api", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "generateQuote", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "generateQuote"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openMoveMessageModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openMoveMessageModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "quoteMessages", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "quoteMessages"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "copyMessages", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "copyMessages"), _class.prototype)), _class));
});
define("discourse/plugins/chat/discourse/components/chat/thread-list/header", ["exports", "@glimmer/component", "@ember/service", "@ember/template", "discourse/helpers/replace-emoji", "discourse-common/helpers/i18n", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/navbar", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _template, _replaceEmoji, _i18n, _discourseI18n, _navbar, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatThreadListHeader = _exports.default = (_class = (_class2 = class ChatThreadListHeader extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
      _initializerDefineProperty(this, "site", _descriptor2, this);
      _defineProperty(this, "threadListTitle", _discourseI18n.default.t("chat.threads.list"));
    }
    get title() {
      let title1 = (0, _replaceEmoji.default)(this.threadListTitle);
      if (this.site.mobileView) {
        title1 += " - " + (0, _replaceEmoji.default)(this.args.channel.title);
      }
      return (0, _template.htmlSafe)(title1);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <Navbar as |navbar|>
        {{#if this.site.mobileView}}
          <navbar.BackButton
            @route="chat.channel"
            @routeModels={{@channel.routeModels}}
            @title={{i18n "chat.return_to_channel"}}
          />
        {{/if}}
  
        <navbar.Title @title={{this.title}} @icon="discourse-threads" />
  
        <navbar.Actions as |action|>
          <action.CloseThreadsButton @channel={{@channel}} />
        </navbar.Actions>
      </Navbar>
    
  */
  {
    "id": "nUBTwzYk",
    "block": "[[[1,\"\\n    \"],[8,[32,0],null,null,[[\"default\"],[[[[1,\"\\n\"],[41,[30,0,[\"site\",\"mobileView\"]],[[[1,\"        \"],[8,[30,1,[\"BackButton\"]],null,[[\"@route\",\"@routeModels\",\"@title\"],[\"chat.channel\",[30,2,[\"routeModels\"]],[28,[32,1],[\"chat.return_to_channel\"],null]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[8,[30,1,[\"Title\"]],null,[[\"@title\",\"@icon\"],[[30,0,[\"title\"]],\"discourse-threads\"]],null],[1,\"\\n\\n      \"],[8,[30,1,[\"Actions\"]],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,3,[\"CloseThreadsButton\"]],null,[[\"@channel\"],[[30,2]]],null],[1,\"\\n      \"]],[3]]]]],[1,\"\\n    \"]],[1]]]]],[1,\"\\n  \"]],[\"navbar\",\"@channel\",\"action\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/thread-list/header.js",
    "scope": () => [_navbar.default, _i18n.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/thread-list/item", ["exports", "@glimmer/component", "@ember/helper", "@ember/modifier", "@ember/object", "@ember/service", "discourse/helpers/concat-class", "discourse/helpers/format-date", "discourse/helpers/replace-emoji", "discourse-common/helpers/i18n", "truth-helpers/helpers/gt", "discourse/plugins/chat/discourse/components/thread-unread-indicator", "discourse/plugins/chat/discourse/components/chat-thread-participants", "discourse/plugins/chat/discourse/components/chat-user-avatar", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _modifier, _object, _service, _concatClass, _formatDate, _replaceEmoji, _i18n, _gt, _threadUnreadIndicator, _chatThreadParticipants, _chatUserAvatar, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatThreadListItem = _exports.default = (_class = (_class2 = class ChatThreadListItem extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
    }
    openThread(thread1) {
      this.router.transitionTo("chat.channel.thread", ...thread1.routeModels);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div
        class={{concatClass
          "chat-thread-list-item"
          (if (gt @thread.tracking.unreadCount 0) "-is-unread")
        }}
        data-thread-id={{@thread.id}}
        ...attributes
      >
        <div class="chat-thread-list-item__main">
          <div
            title={{i18n "chat.thread.view_thread"}}
            role="button"
            class="chat-thread-list-item__open-button"
            {{on "click" (fn this.openThread @thread) passive=true}}
          >
            <div class="chat-thread-list-item__header">
              <div class="chat-thread-list-item__title">
                {{#if @thread.title}}
                  {{replaceEmoji @thread.title}}
                {{else}}
                  {{replaceEmoji @thread.originalMessage.excerpt}}
                {{/if}}
              </div>
              <div class="chat-thread-list-item__unread-indicator">
                <ThreadUnreadIndicator @thread={{@thread}} />
              </div>
            </div>
  
            <div class="chat-thread-list-item__metadata">
              <div class="chat-thread-list-item__members">
                <ChatUserAvatar
                  @user={{@thread.originalMessage.user}}
                  @showPresence={{false}}
                  @interactive={{false}}
                />
                <ChatThreadParticipants
                  @thread={{@thread}}
                  @includeOriginalMessageUser={{false}}
                  class="chat-thread-list-item__participants"
                />
              </div>
  
              <div class="chat-thread-list-item__last-reply-timestamp">
                {{#if @thread.preview.lastReplyCreatedAt}}
                  {{formatDate
                    @thread.preview.lastReplyCreatedAt
                    leaveAgo="true"
                  }}
                {{/if}}
              </div>
            </div>
          </div>
        </div>
      </div>
    
  */
  {
    "id": "iZfquziH",
    "block": "[[[1,\"\\n    \"],[11,0],[16,0,[28,[32,0],[\"chat-thread-list-item\",[52,[28,[32,1],[[30,1,[\"tracking\",\"unreadCount\"]],0],null],\"-is-unread\"]],null]],[16,\"data-thread-id\",[30,1,[\"id\"]]],[17,2],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat-thread-list-item__main\"],[12],[1,\"\\n        \"],[11,0],[16,\"title\",[28,[32,2],[\"chat.thread.view_thread\"],null]],[24,\"role\",\"button\"],[24,0,\"chat-thread-list-item__open-button\"],[4,[32,3],[\"click\",[28,[32,4],[[30,0,[\"openThread\"]],[30,1]],null]],[[\"passive\"],[true]]],[12],[1,\"\\n          \"],[10,0],[14,0,\"chat-thread-list-item__header\"],[12],[1,\"\\n            \"],[10,0],[14,0,\"chat-thread-list-item__title\"],[12],[1,\"\\n\"],[41,[30,1,[\"title\"]],[[[1,\"                \"],[1,[28,[32,5],[[30,1,[\"title\"]]],null]],[1,\"\\n\"]],[]],[[[1,\"                \"],[1,[28,[32,5],[[30,1,[\"originalMessage\",\"excerpt\"]]],null]],[1,\"\\n\"]],[]]],[1,\"            \"],[13],[1,\"\\n            \"],[10,0],[14,0,\"chat-thread-list-item__unread-indicator\"],[12],[1,\"\\n              \"],[8,[32,6],null,[[\"@thread\"],[[30,1]]],null],[1,\"\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n\\n          \"],[10,0],[14,0,\"chat-thread-list-item__metadata\"],[12],[1,\"\\n            \"],[10,0],[14,0,\"chat-thread-list-item__members\"],[12],[1,\"\\n              \"],[8,[32,7],null,[[\"@user\",\"@showPresence\",\"@interactive\"],[[30,1,[\"originalMessage\",\"user\"]],false,false]],null],[1,\"\\n              \"],[8,[32,8],[[24,0,\"chat-thread-list-item__participants\"]],[[\"@thread\",\"@includeOriginalMessageUser\"],[[30,1],false]],null],[1,\"\\n            \"],[13],[1,\"\\n\\n            \"],[10,0],[14,0,\"chat-thread-list-item__last-reply-timestamp\"],[12],[1,\"\\n\"],[41,[30,1,[\"preview\",\"lastReplyCreatedAt\"]],[[[1,\"                \"],[1,[28,[32,9],[[30,1,[\"preview\",\"lastReplyCreatedAt\"]]],[[\"leaveAgo\"],[\"true\"]]]],[1,\"\\n\"]],[]],null],[1,\"            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@thread\",\"&attrs\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/thread-list/item.js",
    "scope": () => [_concatClass.default, _gt.default, _i18n.default, _modifier.on, _helper.fn, _replaceEmoji.default, _threadUnreadIndicator.default, _chatUserAvatar.default, _chatThreadParticipants.default, _formatDate.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openThread", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openThread"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/chat/thread/header-unread-indicator", ["exports", "@glimmer/component", "@ember/service", "I18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _I18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ThreadHeaderUnreadIndicator = _exports.default = (_class = (_class2 = class ThreadHeaderUnreadIndicator extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
      _defineProperty(this, "unreadCountLabel", _I18n.default.t("chat.unread_threads_count", {
        count: this.cappedUnreadCount
      }));
    }
    get unreadCount() {
      return this.args.channel.threadsManager.unreadThreadCount;
    }
    get showUnreadIndicator() {
      return !this.currentUser.isInDoNotDisturb() && this.unreadCount > 0;
    }
    get cappedUnreadCount() {
      return this.unreadCount > 99 ? "99+" : this.unreadCount;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.showUnreadIndicator}}
        <div
          class="chat-thread-header-unread-indicator"
          title={{this.unreadCountLabel}}
        >
          <div
            class="chat-thread-header-unread-indicator__number"
          >{{this.cappedUnreadCount}}</div>
        </div>
      {{/if}}
    
  */
  {
    "id": "6SK42Com",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"showUnreadIndicator\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-thread-header-unread-indicator\"],[15,\"title\",[30,0,[\"unreadCountLabel\"]]],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-thread-header-unread-indicator__number\"],[12],[1,[30,0,[\"cappedUnreadCount\"]]],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/thread/header-unread-indicator.js",
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/thread/header", ["exports", "@glimmer/component", "@ember/service", "discourse/helpers/replace-emoji", "discourse-common/helpers/d-icon", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/navbar", "discourse/plugins/chat/discourse/components/chat/thread/header-unread-indicator", "@ember/template-factory", "@ember/component"], function (_exports, _component, _service, _replaceEmoji, _dIcon, _discourseI18n, _navbar, _headerUnreadIndicator, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatThreadHeader = _exports.default = (_class = (_class2 = class ChatThreadHeader extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
      _initializerDefineProperty(this, "chatHistory", _descriptor2, this);
      _initializerDefineProperty(this, "site", _descriptor3, this);
    }
    get backLink() {
      const prevPage1 = this.chatHistory.previousRoute?.name;
      let route1, title1, models1;
      if (prevPage1 === "chat.channel.threads") {
        route1 = "chat.channel.threads";
        title1 = _discourseI18n.default.t("chat.return_to_threads_list");
        models1 = this.channel?.routeModels;
      } else if (prevPage1 === "chat.channel.index" && !this.site.mobileView) {
        route1 = "chat.channel.threads";
        title1 = _discourseI18n.default.t("chat.return_to_threads_list");
        models1 = this.channel?.routeModels;
      } else if (!this.currentUser.isInDoNotDisturb() && this.unreadCount > 0) {
        route1 = "chat.channel.threads";
        title1 = _discourseI18n.default.t("chat.return_to_threads_list");
        models1 = this.channel?.routeModels;
      } else if (prevPage1 === "chat.threads") {
        route1 = "chat.threads";
        title1 = _discourseI18n.default.t("chat.my_threads.title");
        models1 = [];
      } else {
        route1 = "chat.channel.index";
        title1 = _discourseI18n.default.t("chat.return_to_channel");
        models1 = this.channel?.routeModels;
      }
      return {
        route: route1,
        models: models1,
        title: title1
      };
    }
    get channel() {
      return this.args.thread?.channel;
    }
    get headerTitle() {
      return this.args.thread?.title ?? _discourseI18n.default.t("chat.thread.label");
    }
    get unreadCount() {
      return this.channel?.threadsManager?.unreadThreadCount;
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <Navbar as |navbar|>
        {{#if @thread}}
          <navbar.BackButton
            @route={{this.backLink.route}}
            @routeModels={{this.backLink.models}}
            @title={{this.backLink.title}}
          >
            <ChatThreadHeaderUnreadIndicator @channel={{this.channel}} />
            {{icon "chevron-left"}}
          </navbar.BackButton>
        {{/if}}
  
        <navbar.Title @title={{replaceEmoji this.headerTitle}} />
        <navbar.Actions as |action|>
          <action.ThreadTrackingDropdown @thread={{@thread}} />
          <action.ThreadSettingsButton @thread={{@thread}} />
          <action.CloseThreadButton @thread={{@thread}} />
        </navbar.Actions>
      </Navbar>
    
  */
  {
    "id": "FrahXW0d",
    "block": "[[[1,\"\\n    \"],[8,[32,0],null,null,[[\"default\"],[[[[1,\"\\n\"],[41,[30,2],[[[1,\"        \"],[8,[30,1,[\"BackButton\"]],null,[[\"@route\",\"@routeModels\",\"@title\"],[[30,0,[\"backLink\",\"route\"]],[30,0,[\"backLink\",\"models\"]],[30,0,[\"backLink\",\"title\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[32,1],null,[[\"@channel\"],[[30,0,[\"channel\"]]]],null],[1,\"\\n          \"],[1,[28,[32,2],[\"chevron-left\"],null]],[1,\"\\n        \"]],[]]]]],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[8,[30,1,[\"Title\"]],null,[[\"@title\"],[[28,[32,3],[[30,0,[\"headerTitle\"]]],null]]],null],[1,\"\\n      \"],[8,[30,1,[\"Actions\"]],null,null,[[\"default\"],[[[[1,\"\\n        \"],[8,[30,3,[\"ThreadTrackingDropdown\"]],null,[[\"@thread\"],[[30,2]]],null],[1,\"\\n        \"],[8,[30,3,[\"ThreadSettingsButton\"]],null,[[\"@thread\"],[[30,2]]],null],[1,\"\\n        \"],[8,[30,3,[\"CloseThreadButton\"]],null,[[\"@thread\"],[[30,2]]],null],[1,\"\\n      \"]],[3]]]]],[1,\"\\n    \"]],[1]]]]],[1,\"\\n  \"]],[\"navbar\",\"@thread\",\"action\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/thread/header.js",
    "scope": () => [_navbar.default, _headerUnreadIndicator.default, _dIcon.default, _replaceEmoji.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatHistory", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/chat/user-card-button", ["exports", "@glimmer/component", "@ember/object", "@ember/service", "discourse/components/d-button", "@ember/template-factory", "@ember/component"], function (_exports, _component, _object, _service, _dButton, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatUserCardButton = _exports.default = (_class = (_class2 = class ChatUserCardButton extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "appEvents", _descriptor2, this);
      _initializerDefineProperty(this, "router", _descriptor3, this);
    }
    get shouldRender() {
      return this.chat.userCanDirectMessage && !this.args.user.suspended;
    }
    startChatting() {
      return this.chat.upsertDmChannelForUsernames([this.args.user.username]).then(channel1 => {
        this.router.transitionTo("chat.channel", ...channel1.routeModels);
        this.appEvents.trigger("card:close");
      });
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.shouldRender}}
        <DButton
          @action={{this.startChatting}}
          @label="chat.title_capitalized"
          @icon="d-chat"
          class="btn-primary chat-user-card-btn"
        />
      {{/if}}
    
  */
  {
    "id": "YKGgpomU",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"shouldRender\"]],[[[1,\"      \"],[8,[32,0],[[24,0,\"btn-primary chat-user-card-btn\"]],[[\"@action\",\"@label\",\"@icon\"],[[30,0,[\"startChatting\"]],\"chat.title_capitalized\",\"d-chat\"]],null],[1,\"\\n\"]],[]],null],[1,\"  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/chat/user-card-button.js",
    "scope": () => [_dButton.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "appEvents", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "startChatting", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "startChatting"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/collapser", ["exports", "@ember/component", "@ember/object", "@ember/template-factory"], function (_exports, _component, _object, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _obj;
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="chat-message-collapser-header">
    {{this.header}}
  
    {{#if this.collapsed}}
      <DButton
        @action={{this.open}}
        @icon="caret-right"
        class="chat-message-collapser-button chat-message-collapser-closed"
      />
    {{else}}
      <DButton
        @action={{this.close}}
        @icon="caret-down"
        class="chat-message-collapser-button chat-message-collapser-opened"
      />
    {{/if}}
  </div>
  
  <div
    class={{concat-class
      "chat-message-collapser-body"
      (if this.collapsed "hidden")
    }}
  >
    {{yield this.collapsed}}
  </div>
  */
  {
    "id": "hDh7V21u",
    "block": "[[[10,0],[14,0,\"chat-message-collapser-header\"],[12],[1,\"\\n  \"],[1,[30,0,[\"header\"]]],[1,\"\\n\\n\"],[41,[30,0,[\"collapsed\"]],[[[1,\"    \"],[8,[39,1],[[24,0,\"chat-message-collapser-button chat-message-collapser-closed\"]],[[\"@action\",\"@icon\"],[[30,0,[\"open\"]],\"caret-right\"]],null],[1,\"\\n\"]],[]],[[[1,\"    \"],[8,[39,1],[[24,0,\"chat-message-collapser-button chat-message-collapser-opened\"]],[[\"@action\",\"@icon\"],[[30,0,[\"close\"]],\"caret-down\"]],null],[1,\"\\n\"]],[]]],[13],[1,\"\\n\\n\"],[10,0],[15,0,[28,[37,2],[\"chat-message-collapser-body\",[52,[30,0,[\"collapsed\"]],\"hidden\"]],null]],[12],[1,\"\\n  \"],[18,1,[[30,0,[\"collapsed\"]]]],[1,\"\\n\"],[13]],[\"&default\"],false,[\"if\",\"d-button\",\"concat-class\",\"yield\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/collapser.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, _component.default.extend((_obj = {
    tagName: "",
    collapsed: false,
    header: null,
    onToggle: null,
    open() {
      this.set("collapsed", false);
      this.onToggle?.(false);
    },
    close() {
      this.set("collapsed", true);
      this.onToggle?.(true);
    }
  }, (_applyDecoratedDescriptor(_obj, "open", [_object.action], Object.getOwnPropertyDescriptor(_obj, "open"), _obj), _applyDecoratedDescriptor(_obj, "close", [_object.action], Object.getOwnPropertyDescriptor(_obj, "close"), _obj)), _obj)));
});
define("discourse/plugins/chat/discourse/components/dc-filter-input", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/component", "@ember/modifier", "ember-modifier", "discourse/helpers/concat-class", "discourse/helpers/noop", "discourse-common/helpers/d-icon", "@ember/template-factory"], function (_exports, _component, _tracking, _component2, _modifier, _emberModifier, _concatClass, _noop, _dIcon, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let DcFilterInput = _exports.default = (_class = (_class2 = class DcFilterInput extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "isFocused", _descriptor, this);
      _defineProperty(this, "focusState", (0, _emberModifier.modifier)(element1 => {
        const focusInHandler1 = () => {
          this.isFocused = true;
        };
        const focusOutHandler1 = () => {
          this.isFocused = false;
        };
        element1.addEventListener("focusin", focusInHandler1);
        element1.addEventListener("focusout", focusOutHandler1);
        return () => {
          element1.removeEventListener("focusin", focusInHandler1);
          element1.removeEventListener("focusout", focusOutHandler1);
        };
      }));
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div
        class={{concatClass
          @containerClass
          "dc-filter-input-container"
          (if this.isFocused "is-focused")
        }}
      >
        {{#if @icons.left}}
          {{icon @icons.left class="-left"}}
        {{/if}}
  
        <Input
          {{this.focusState}}
          {{on "input" (if @filterAction @filterAction (noop))}}
          @value={{@value}}
          class="dc-filter-input"
          ...attributes
        />
  
        {{yield}}
  
        {{#if @icons.right}}
          {{icon @icons.right class="-right"}}
        {{/if}}
      </div>
    
  */
  {
    "id": "uxTMiScj",
    "block": "[[[1,\"\\n    \"],[10,0],[15,0,[28,[32,0],[[30,1],\"dc-filter-input-container\",[52,[30,0,[\"isFocused\"]],\"is-focused\"]],null]],[12],[1,\"\\n\"],[41,[30,2,[\"left\"]],[[[1,\"        \"],[1,[28,[32,1],[[30,2,[\"left\"]]],[[\"class\"],[\"-left\"]]]],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[8,[32,2],[[24,0,\"dc-filter-input\"],[17,3],[4,[30,0,[\"focusState\"]],null,null],[4,[32,3],[\"input\",[52,[30,5],[30,5],[28,[32,4],null,null]]],null]],[[\"@value\"],[[30,4]]],null],[1,\"\\n\\n      \"],[18,6,null],[1,\"\\n\\n\"],[41,[30,2,[\"right\"]],[[[1,\"        \"],[1,[28,[32,1],[[30,2,[\"right\"]]],[[\"class\"],[\"-right\"]]]],[1,\"\\n\"]],[]],null],[1,\"    \"],[13],[1,\"\\n  \"]],[\"@containerClass\",\"@icons\",\"&attrs\",\"@value\",\"@filterAction\",\"&default\"],false,[\"if\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/dc-filter-input.js",
    "scope": () => [_concatClass.default, _dIcon.default, _component2.Input, _modifier.on, _noop.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "isFocused", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  })), _class);
});
define("discourse/plugins/chat/discourse/components/full-page-chat", ["exports", "@glimmer/component", "@ember/helper", "@ember/service", "discourse/plugins/chat/discourse/components/chat-channel", "@ember/template-factory", "@ember/component"], function (_exports, _component, _helper, _service, _chatChannel, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let FullPageChat = _exports.default = (_class = (_class2 = class FullPageChat extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#each (array @channel) as |channel|}}
        <ChatChannel @channel={{channel}} @targetMessageId={{@targetMessageId}} />
      {{/each}}
    
  */
  {
    "id": "r5mKnoFH",
    "block": "[[[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[28,[32,0],[[30,1]],null]],null]],null],null,[[[1,\"      \"],[8,[32,1],null,[[\"@channel\",\"@targetMessageId\"],[[30,2],[30,3]]],null],[1,\"\\n\"]],[2]],null],[1,\"  \"]],[\"@channel\",\"channel\",\"@targetMessageId\"],false,[\"each\",\"-track-array\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/full-page-chat.js",
    "scope": () => [_helper.array, _chatChannel.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/components/reviewable-chat-message", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/helper", "@ember/routing", "@ember/service", "discourse/components/reviewable-created-by", "discourse/components/reviewable-post-header", "discourse-common/helpers/html-safe", "discourse-common/helpers/i18n", "truth-helpers/helpers/or", "discourse/plugins/chat/discourse/components/channel-title", "discourse/plugins/chat/discourse/models/chat-channel", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _helper, _routing, _service, _reviewableCreatedBy, _reviewablePostHeader, _htmlSafe, _i18n, _or, _channelTitle, _chatChannel, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ReviewableChatMessage = _exports.default = (_class = (_class2 = class ReviewableChatMessage extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "store", _descriptor, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor2, this);
    }
    get channel() {
      if (!this.args.reviewable.chat_channel) {
        return;
      }
      return _chatChannel.default.create(this.args.reviewable.chat_channel);
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.channel}}
        <div class="flagged-post-header">
          <LinkTo
            @route="chat.channel.near-message"
            @models={{array
              this.channel.slugifiedTitle
              this.channel.id
              @reviewable.target_id
            }}
          >
            <ChannelTitle @channel={{this.channel}} />
          </LinkTo>
        </div>
      {{/if}}
  
      <div class="post-contents-wrapper">
        <ReviewableCreatedBy
          @user={{@reviewable.target_created_by}}
          @tagName=""
        />
        <div class="post-contents">
          <ReviewablePostHeader
            @reviewable={{@reviewable}}
            @createdBy={{@reviewable.target_created_by}}
            @tagName=""
          />
  
          <div class="post-body">
            {{htmlSafe
              (or @reviewable.payload.message_cooked @reviewable.cooked)
            }}
          </div>
  
          {{#if @reviewable.payload.transcript_topic_id}}
            <div class="transcript">
              <LinkTo
                @route="topic"
                @models={{array "-" @reviewable.payload.transcript_topic_id}}
                class="btn btn-small"
              >
                {{i18n "review.transcript.view"}}
              </LinkTo>
            </div>
          {{/if}}
  
          {{yield}}
        </div>
      </div>
    
  */
  {
    "id": "Lxi8Ztjm",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"channel\"]],[[[1,\"      \"],[10,0],[14,0,\"flagged-post-header\"],[12],[1,\"\\n        \"],[8,[32,0],null,[[\"@route\",\"@models\"],[\"chat.channel.near-message\",[28,[32,1],[[30,0,[\"channel\",\"slugifiedTitle\"]],[30,0,[\"channel\",\"id\"]],[30,1,[\"target_id\"]]],null]]],[[\"default\"],[[[[1,\"\\n          \"],[8,[32,2],null,[[\"@channel\"],[[30,0,[\"channel\"]]]],null],[1,\"\\n        \"]],[]]]]],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n    \"],[10,0],[14,0,\"post-contents-wrapper\"],[12],[1,\"\\n      \"],[8,[32,3],null,[[\"@user\",\"@tagName\"],[[30,1,[\"target_created_by\"]],\"\"]],null],[1,\"\\n      \"],[10,0],[14,0,\"post-contents\"],[12],[1,\"\\n        \"],[8,[32,4],null,[[\"@reviewable\",\"@createdBy\",\"@tagName\"],[[30,1],[30,1,[\"target_created_by\"]],\"\"]],null],[1,\"\\n\\n        \"],[10,0],[14,0,\"post-body\"],[12],[1,\"\\n          \"],[1,[28,[32,5],[[28,[32,6],[[30,1,[\"payload\",\"message_cooked\"]],[30,1,[\"cooked\"]]],null]],null]],[1,\"\\n        \"],[13],[1,\"\\n\\n\"],[41,[30,1,[\"payload\",\"transcript_topic_id\"]],[[[1,\"          \"],[10,0],[14,0,\"transcript\"],[12],[1,\"\\n            \"],[8,[32,0],[[24,0,\"btn btn-small\"]],[[\"@route\",\"@models\"],[\"topic\",[28,[32,1],[\"-\",[30,1,[\"payload\",\"transcript_topic_id\"]]],null]]],[[\"default\"],[[[[1,\"\\n              \"],[1,[28,[32,7],[\"review.transcript.view\"],null]],[1,\"\\n            \"]],[]]]]],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],null],[1,\"\\n        \"],[18,2,null],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@reviewable\",\"&default\"],false,[\"if\",\"yield\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/reviewable-chat-message.js",
    "scope": () => [_routing.LinkTo, _helper.array, _channelTitle.default, _reviewableCreatedBy.default, _reviewablePostHeader.default, _htmlSafe.default, _or.default, _i18n.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "channel", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "channel"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-composer-message-details", ["exports", "@ember/component", "@glimmer/component", "@glimmer/tracking", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/lib/fabricators", "@ember/template-factory"], function (_exports, _component, _component2, _tracking, _object, _service, _fabricators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<ChatComposerMessageDetails>">
    <Styleguide::Component>
      <ChatComposerMessageDetails @message={{this.message}} />
    </Styleguide::Component>
  
    <Styleguide::Controls>
      <Styleguide::Controls::Row @name="Mode">
        {{#if this.message.editing}}
          <DButton @action={{this.toggleMode}} @translatedLabel="Reply" />
        {{else}}
          <DButton @action={{this.toggleMode}} @translatedLabel="Editing" />
        {{/if}}
      </Styleguide::Controls::Row>
    </Styleguide::Controls>
  </StyleguideExample>
  */
  {
    "id": "UdTTMEaX",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<ChatComposerMessageDetails>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@message\"],[[30,0,[\"message\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\\n  \"],[8,[39,3],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"Mode\"]],[[\"default\"],[[[[1,\"\\n\"],[41,[30,0,[\"message\",\"editing\"]],[[[1,\"        \"],[8,[39,6],null,[[\"@action\",\"@translatedLabel\"],[[30,0,[\"toggleMode\"]],\"Reply\"]],null],[1,\"\\n\"]],[]],[[[1,\"        \"],[8,[39,6],null,[[\"@action\",\"@translatedLabel\"],[[30,0,[\"toggleMode\"]],\"Editing\"]],null],[1,\"\\n\"]],[]]],[1,\"    \"]],[]]]]],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/component\",\"chat-composer-message-details\",\"styleguide/controls\",\"styleguide/controls/row\",\"if\",\"d-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-composer-message-details.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatComposerMessageDetails = _exports.default = (_class = class ChatStyleguideChatComposerMessageDetails extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "site", _descriptor, this);
      _initializerDefineProperty(this, "session", _descriptor2, this);
      _initializerDefineProperty(this, "keyValueStore", _descriptor3, this);
      _initializerDefineProperty(this, "currentUser", _descriptor4, this);
    }
    get message() {
      return _fabricators.default.message({
        user: this.currentUser
      });
    }
    toggleMode() {
      if (this.message.editing) {
        this.message.editing = false;
        this.message.inReplyTo = _fabricators.default.message();
      } else {
        this.message.editing = true;
        this.message.inReplyTo = null;
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "keyValueStore", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "message", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "message"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleMode", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleMode"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatComposerMessageDetails);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-composer", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/lib/fabricators", "discourse/plugins/chat/discourse/models/chat-channel", "@ember/template-factory"], function (_exports, _component, _component2, _object, _service, _fabricators, _chatChannel, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<ChatComposer>">
    <Styleguide::Component>
      <Chat::Composer::Channel
        @channel={{this.channel}}
        @onSendMessage={{this.onSendMessage}}
      />
    </Styleguide::Component>
  
    <Styleguide::Controls>
      <Styleguide::Controls::Row @name="Disabled">
        <DToggleSwitch
          @state={{this.channel.isReadOnly}}
          {{on "click" this.toggleDisabled}}
        />
      </Styleguide::Controls::Row>
      <Styleguide::Controls::Row @name="Sending">
        <DToggleSwitch
          @state={{this.chatChannelPane.sending}}
          {{on "click" this.toggleSending}}
        />
      </Styleguide::Controls::Row>
    </Styleguide::Controls>
  </StyleguideExample>
  */
  {
    "id": "44rPT0VR",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<ChatComposer>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@channel\",\"@onSendMessage\"],[[30,0,[\"channel\"]],[30,0,[\"onSendMessage\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\\n  \"],[8,[39,3],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"Disabled\"]],[[\"default\"],[[[[1,\"\\n      \"],[8,[39,5],[[4,[38,6],[\"click\",[30,0,[\"toggleDisabled\"]]],null]],[[\"@state\"],[[30,0,[\"channel\",\"isReadOnly\"]]]],null],[1,\"\\n    \"]],[]]]]],[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"Sending\"]],[[\"default\"],[[[[1,\"\\n      \"],[8,[39,5],[[4,[38,6],[\"click\",[30,0,[\"toggleSending\"]]],null]],[[\"@state\"],[[30,0,[\"chatChannelPane\",\"sending\"]]]],null],[1,\"\\n    \"]],[]]]]],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/component\",\"chat/composer/channel\",\"styleguide/controls\",\"styleguide/controls/row\",\"d-toggle-switch\",\"on\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-composer.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatComposer = _exports.default = (_class = class ChatStyleguideChatComposer extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatChannelComposer", _descriptor, this);
      _initializerDefineProperty(this, "chatChannelPane", _descriptor2, this);
      _defineProperty(this, "channel", _fabricators.default.channel({
        id: -999
      }));
    }
    toggleDisabled() {
      if (this.channel.status === _chatChannel.CHANNEL_STATUSES.open) {
        this.channel.status = _chatChannel.CHANNEL_STATUSES.readOnly;
      } else {
        this.channel.status = _chatChannel.CHANNEL_STATUSES.open;
      }
    }
    toggleSending() {
      this.chatChannelPane.sending = !this.chatChannelPane.sending;
    }
    onSendMessage() {
      this.chatChannelComposer.reset();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatChannelComposer", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatChannelPane", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "toggleDisabled", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleDisabled"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleSending", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleSending"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onSendMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onSendMessage"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatComposer);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-header-icon", ["exports", "@ember/component", "@glimmer/component", "@glimmer/tracking", "@ember/object", "discourse/plugins/chat/discourse/controllers/preferences-chat", "@ember/template-factory"], function (_exports, _component, _component2, _tracking, _object, _preferencesChat, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::Header::Icon>">
    <Styleguide::Component>
      <header
        class="d-header"
        style="display: flex; align-items: center; justify-content: center;"
      >
        <ul class="d-header-icons">
          <li class="header-dropdown-toggle chat-header-icon">
            <Chat::Header::Icon
              @isActive={{this.isActive}}
              @currentUserInDnD={{this.currentUserInDnD}}
              @unreadCount={{this.unreadCount}}
              @urgentCount={{this.urgentCount}}
              @indicatorPreference={{this.indicatorPreference}}
            />
          </li>
        </ul>
      </header>
    </Styleguide::Component>
  
    <Styleguide::Controls>
      <Styleguide::Controls::Row @name="isActive">
        <DToggleSwitch
          @state={{this.isActive}}
          {{on "click" this.toggleIsActive}}
        />
      </Styleguide::Controls::Row>
      <Styleguide::Controls::Row @name="currentUserInDnD">
        <DToggleSwitch
          @state={{this.currentUserInDnD}}
          {{on "click" this.toggleCurrentUserInDnD}}
        />
      </Styleguide::Controls::Row>
    </Styleguide::Controls>
    <Styleguide::Controls::Row @name="Unread count">
      <input
        type="number"
        {{on "input" this.updateUnreadCount}}
        value={{this.unreadCount}}
      />
    </Styleguide::Controls::Row>
    <Styleguide::Controls::Row @name="Urgent count">
      <input
        type="number"
        {{on "input" this.updateUrgentCount}}
        value={{this.urgentCount}}
      />
    </Styleguide::Controls::Row>
    <Styleguide::Controls::Row @name="Indicator preference">
      <ComboBox
        @value={{this.indicatorPreference}}
        @content={{this.indicatorPreferences}}
        @onChange={{this.updateIndicatorPreference}}
        @valueProperty={{null}}
        @nameProperty={{null}}
      />
  
    </Styleguide::Controls::Row>
  </StyleguideExample>
  */
  {
    "id": "3vsUy2AB",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::Header::Icon>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[10,\"header\"],[14,0,\"d-header\"],[14,5,\"display: flex; align-items: center; justify-content: center;\"],[12],[1,\"\\n      \"],[10,\"ul\"],[14,0,\"d-header-icons\"],[12],[1,\"\\n        \"],[10,\"li\"],[14,0,\"header-dropdown-toggle chat-header-icon\"],[12],[1,\"\\n          \"],[8,[39,2],null,[[\"@isActive\",\"@currentUserInDnD\",\"@unreadCount\",\"@urgentCount\",\"@indicatorPreference\"],[[30,0,[\"isActive\"]],[30,0,[\"currentUserInDnD\"]],[30,0,[\"unreadCount\"]],[30,0,[\"urgentCount\"]],[30,0,[\"indicatorPreference\"]]]],null],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[]]]]],[1,\"\\n\\n  \"],[8,[39,3],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"isActive\"]],[[\"default\"],[[[[1,\"\\n      \"],[8,[39,5],[[4,[38,6],[\"click\",[30,0,[\"toggleIsActive\"]]],null]],[[\"@state\"],[[30,0,[\"isActive\"]]]],null],[1,\"\\n    \"]],[]]]]],[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"currentUserInDnD\"]],[[\"default\"],[[[[1,\"\\n      \"],[8,[39,5],[[4,[38,6],[\"click\",[30,0,[\"toggleCurrentUserInDnD\"]]],null]],[[\"@state\"],[[30,0,[\"currentUserInDnD\"]]]],null],[1,\"\\n    \"]],[]]]]],[1,\"\\n  \"]],[]]]]],[1,\"\\n  \"],[8,[39,4],null,[[\"@name\"],[\"Unread count\"]],[[\"default\"],[[[[1,\"\\n    \"],[11,\"input\"],[16,2,[30,0,[\"unreadCount\"]]],[24,4,\"number\"],[4,[38,6],[\"input\",[30,0,[\"updateUnreadCount\"]]],null],[12],[13],[1,\"\\n  \"]],[]]]]],[1,\"\\n  \"],[8,[39,4],null,[[\"@name\"],[\"Urgent count\"]],[[\"default\"],[[[[1,\"\\n    \"],[11,\"input\"],[16,2,[30,0,[\"urgentCount\"]]],[24,4,\"number\"],[4,[38,6],[\"input\",[30,0,[\"updateUrgentCount\"]]],null],[12],[13],[1,\"\\n  \"]],[]]]]],[1,\"\\n  \"],[8,[39,4],null,[[\"@name\"],[\"Indicator preference\"]],[[\"default\"],[[[[1,\"\\n    \"],[8,[39,7],null,[[\"@value\",\"@content\",\"@onChange\",\"@valueProperty\",\"@nameProperty\"],[[30,0,[\"indicatorPreference\"]],[30,0,[\"indicatorPreferences\"]],[30,0,[\"updateIndicatorPreference\"]],null,null]],null],[1,\"\\n\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/component\",\"chat/header/icon\",\"styleguide/controls\",\"styleguide/controls/row\",\"d-toggle-switch\",\"on\",\"combo-box\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-header-icon.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatHeaderIcon = _exports.default = (_class = class ChatStyleguideChatHeaderIcon extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "isActive", _descriptor, this);
      _initializerDefineProperty(this, "currentUserInDnD", _descriptor2, this);
      _initializerDefineProperty(this, "urgentCount", _descriptor3, this);
      _initializerDefineProperty(this, "unreadCount", _descriptor4, this);
      _initializerDefineProperty(this, "indicatorPreference", _descriptor5, this);
    }
    get indicatorPreferences() {
      return [_preferencesChat.HEADER_INDICATOR_PREFERENCE_ALL_NEW, _preferencesChat.HEADER_INDICATOR_PREFERENCE_DM_AND_MENTIONS, _preferencesChat.HEADER_INDICATOR_PREFERENCE_ONLY_MENTIONS, _preferencesChat.HEADER_INDICATOR_PREFERENCE_NEVER];
    }
    toggleIsActive() {
      this.isActive = !this.isActive;
    }
    toggleCurrentUserInDnD() {
      this.currentUserInDnD = !this.currentUserInDnD;
    }
    updateUnreadCount(event) {
      this.unreadCount = event.target.value;
    }
    updateUrgentCount(event) {
      this.urgentCount = event.target.value;
    }
    updateIndicatorPreference(value) {
      this.indicatorPreference = value;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "isActive", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "currentUserInDnD", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "urgentCount", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "unreadCount", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "indicatorPreference", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return _preferencesChat.HEADER_INDICATOR_PREFERENCE_ALL_NEW;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "toggleIsActive", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleIsActive"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleCurrentUserInDnD", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleCurrentUserInDnD"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateUnreadCount", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "updateUnreadCount"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateUrgentCount", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "updateUrgentCount"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateIndicatorPreference", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "updateIndicatorPreference"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatHeaderIcon);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-message", ["exports", "@ember/component", "@glimmer/component", "@ember/application", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/lib/chat-messages-manager", "discourse/plugins/chat/discourse/lib/fabricators", "@ember/template-factory"], function (_exports, _component, _component2, _application, _object, _service, _chatMessagesManager, _fabricators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<ChatMessage>">
    <Styleguide::Component>
      <ChatMessage @message={{this.message}} @context="channel" />
    </Styleguide::Component>
  
    <Styleguide::Controls>
      <Styleguide::Controls::Row @name="Last Visit">
        <DToggleSwitch
          @state={{this.message.newest}}
          {{on "click" this.toggleLastVisit}}
        />
      </Styleguide::Controls::Row>
      <Styleguide::Controls::Row @name="Deleted">
        <DToggleSwitch
          @state={{not (not this.message.deletedAt)}}
          {{on "click" this.toggleDeleted}}
        />
      </Styleguide::Controls::Row>
      <Styleguide::Controls::Row @name="Bookmark">
        <DToggleSwitch
          @state={{not (not this.message.bookmark)}}
          {{on "click" this.toggleBookmarked}}
        />
      </Styleguide::Controls::Row>
      <Styleguide::Controls::Row @name="Thread">
        <DToggleSwitch
          @state={{not (not this.message.thread)}}
          {{on "click" this.toggleThread}}
        />
      </Styleguide::Controls::Row>
      <Styleguide::Controls::Row @name="Reactions">
        <DToggleSwitch
          @state={{not (not this.message.reactions)}}
          {{on "click" this.toggleReaction}}
        />
      </Styleguide::Controls::Row>
      <Styleguide::Controls::Row @name="Upload">
        <DToggleSwitch
          @state={{not (not this.message.uploads)}}
          {{on "click" this.toggleUpload}}
        />
      </Styleguide::Controls::Row>
      <Styleguide::Controls::Row @name="Message">
        <textarea
          {{on "input" this.updateMessage}}
        >{{this.message.message}}</textarea>
      </Styleguide::Controls::Row>
    </Styleguide::Controls>
  </StyleguideExample>
  */
  {
    "id": "4ZwlpP03",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<ChatMessage>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@message\",\"@context\"],[[30,0,[\"message\"]],\"channel\"]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\\n  \"],[8,[39,3],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"Last Visit\"]],[[\"default\"],[[[[1,\"\\n      \"],[8,[39,5],[[4,[38,6],[\"click\",[30,0,[\"toggleLastVisit\"]]],null]],[[\"@state\"],[[30,0,[\"message\",\"newest\"]]]],null],[1,\"\\n    \"]],[]]]]],[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"Deleted\"]],[[\"default\"],[[[[1,\"\\n      \"],[8,[39,5],[[4,[38,6],[\"click\",[30,0,[\"toggleDeleted\"]]],null]],[[\"@state\"],[[28,[37,7],[[28,[37,7],[[30,0,[\"message\",\"deletedAt\"]]],null]],null]]],null],[1,\"\\n    \"]],[]]]]],[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"Bookmark\"]],[[\"default\"],[[[[1,\"\\n      \"],[8,[39,5],[[4,[38,6],[\"click\",[30,0,[\"toggleBookmarked\"]]],null]],[[\"@state\"],[[28,[37,7],[[28,[37,7],[[30,0,[\"message\",\"bookmark\"]]],null]],null]]],null],[1,\"\\n    \"]],[]]]]],[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"Thread\"]],[[\"default\"],[[[[1,\"\\n      \"],[8,[39,5],[[4,[38,6],[\"click\",[30,0,[\"toggleThread\"]]],null]],[[\"@state\"],[[28,[37,7],[[28,[37,7],[[30,0,[\"message\",\"thread\"]]],null]],null]]],null],[1,\"\\n    \"]],[]]]]],[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"Reactions\"]],[[\"default\"],[[[[1,\"\\n      \"],[8,[39,5],[[4,[38,6],[\"click\",[30,0,[\"toggleReaction\"]]],null]],[[\"@state\"],[[28,[37,7],[[28,[37,7],[[30,0,[\"message\",\"reactions\"]]],null]],null]]],null],[1,\"\\n    \"]],[]]]]],[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"Upload\"]],[[\"default\"],[[[[1,\"\\n      \"],[8,[39,5],[[4,[38,6],[\"click\",[30,0,[\"toggleUpload\"]]],null]],[[\"@state\"],[[28,[37,7],[[28,[37,7],[[30,0,[\"message\",\"uploads\"]]],null]],null]]],null],[1,\"\\n    \"]],[]]]]],[1,\"\\n    \"],[8,[39,4],null,[[\"@name\"],[\"Message\"]],[[\"default\"],[[[[1,\"\\n      \"],[11,\"textarea\"],[4,[38,6],[\"input\",[30,0,[\"updateMessage\"]]],null],[12],[1,[30,0,[\"message\",\"message\"]]],[13],[1,\"\\n    \"]],[]]]]],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/component\",\"chat-message\",\"styleguide/controls\",\"styleguide/controls/row\",\"d-toggle-switch\",\"on\",\"not\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-message.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatMessage = _exports.default = (_class = class ChatStyleguideChatMessage extends _component2.default {
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
      _defineProperty(this, "manager", new _chatMessagesManager.default((0, _application.getOwner)(this)));
      this.message = _fabricators.default.message({
        user: this.currentUser
      });
      this.message.cook();
    }
    toggleDeleted() {
      if (this.message.deletedAt) {
        this.message.deletedAt = null;
      } else {
        this.message.deletedAt = moment();
      }
    }
    toggleBookmarked() {
      if (this.message.bookmark) {
        this.message.bookmark = null;
      } else {
        this.message.bookmark = _fabricators.default.bookmark();
      }
    }
    toggleHighlighted() {
      this.message.highlighted = !this.message.highlighted;
    }
    toggleEdited() {
      this.message.edited = !this.message.edited;
    }
    toggleLastVisit() {
      this.message.newest = !this.message.newest;
    }
    toggleThread() {
      if (this.message.thread) {
        this.message.channel.threadingEnabled = false;
        this.message.thread = null;
      } else {
        this.message.thread = _fabricators.default.thread({
          channel: this.message.channel
        });
        this.message.thread.preview.replyCount = 1;
        this.message.channel.threadingEnabled = true;
      }
    }
    async updateMessage(event) {
      this.message.message = event.target.value;
      await this.message.cook();
    }
    toggleReaction() {
      if (this.message.reactions?.length) {
        this.message.reactions = [];
      } else {
        this.message.reactions = [_fabricators.default.reaction({
          emoji: "heart"
        }), _fabricators.default.reaction({
          emoji: "rocket",
          reacted: true
        })];
      }
    }
    toggleUpload() {
      if (this.message.uploads?.length) {
        this.message.uploads = [];
      } else {
        this.message.uploads = [_fabricators.default.upload(), _fabricators.default.upload()];
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "toggleDeleted", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleDeleted"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleBookmarked", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleBookmarked"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleHighlighted", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleHighlighted"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleEdited", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleEdited"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleLastVisit", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleLastVisit"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleThread", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleThread"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "updateMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleReaction", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleReaction"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleUpload", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleUpload"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatMessage);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-modal-archive-channel", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/components/chat/modal/archive-channel", "discourse/plugins/chat/discourse/lib/fabricators", "@ember/template-factory"], function (_exports, _component, _component2, _object, _service, _archiveChannel, _fabricators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::Modal::ArchiveChannel>">
    <Styleguide::Controls::Row>
      <DButton @translatedLabel="Open modal" @action={{this.openModal}} />
    </Styleguide::Controls::Row>
  </StyleguideExample>
  */
  {
    "id": "6txBnytZ",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::Modal::ArchiveChannel>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@translatedLabel\",\"@action\"],[\"Open modal\",[30,0,[\"openModal\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/controls/row\",\"d-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-modal-archive-channel.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatModalArchiveChannel = _exports.default = (_class = class ChatStyleguideChatModalArchiveChannel extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "modal", _descriptor, this);
      _defineProperty(this, "channel", _fabricators.default.channel());
    }
    openModal() {
      return this.modal.show(_archiveChannel.default, {
        model: {
          channel: this.channel
        }
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openModal"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatModalArchiveChannel);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-modal-channel-summary", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/components/chat/modal/channel-summary", "discourse/plugins/chat/discourse/lib/fabricators", "@ember/template-factory"], function (_exports, _component, _component2, _object, _service, _channelSummary, _fabricators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::Modal::ChannelSummary>">
    <Styleguide::Controls::Row>
      <DButton @translatedLabel="Open modal" @action={{this.openModal}} />
    </Styleguide::Controls::Row>
  </StyleguideExample>
  */
  {
    "id": "9Nkr9oRZ",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::Modal::ChannelSummary>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@translatedLabel\",\"@action\"],[\"Open modal\",[30,0,[\"openModal\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/controls/row\",\"d-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-modal-channel-summary.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatModalChannelSummary = _exports.default = (_class = class ChatStyleguideChatModalChannelSummary extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "modal", _descriptor, this);
    }
    openModal() {
      return this.modal.show(_channelSummary.default, {
        model: {
          channelId: _fabricators.default.channel().id
        }
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openModal"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatModalChannelSummary);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-modal-create-channel", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/components/chat/modal/create-channel", "@ember/template-factory"], function (_exports, _component, _component2, _object, _service, _createChannel, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::Modal::CreateChannel>">
    <Styleguide::Controls::Row>
      <DButton @translatedLabel="Open modal" @action={{this.openModal}} />
    </Styleguide::Controls::Row>
  </StyleguideExample>
  */
  {
    "id": "W0WNy+Vl",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::Modal::CreateChannel>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@translatedLabel\",\"@action\"],[\"Open modal\",[30,0,[\"openModal\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/controls/row\",\"d-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-modal-create-channel.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatModalCreateChannel = _exports.default = (_class = class ChatStyleguideChatModalCreateChannel extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "modal", _descriptor, this);
    }
    openModal() {
      return this.modal.show(_createChannel.default);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openModal"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatModalCreateChannel);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-modal-delete-channel", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/components/chat/modal/delete-channel", "discourse/plugins/chat/discourse/lib/fabricators", "@ember/template-factory"], function (_exports, _component, _component2, _object, _service, _deleteChannel, _fabricators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::Modal::DeleteChannel>">
    <Styleguide::Controls::Row>
      <DButton @translatedLabel="Open modal" @action={{this.openModal}} />
    </Styleguide::Controls::Row>
  </StyleguideExample>
  */
  {
    "id": "RePA6/AH",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::Modal::DeleteChannel>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@translatedLabel\",\"@action\"],[\"Open modal\",[30,0,[\"openModal\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/controls/row\",\"d-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-modal-delete-channel.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatModalDeleteChannel = _exports.default = (_class = class ChatStyleguideChatModalDeleteChannel extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "modal", _descriptor, this);
      _defineProperty(this, "channel", _fabricators.default.channel());
    }
    openModal() {
      return this.modal.show(_deleteChannel.default, {
        model: {
          channel: this.channel
        }
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openModal"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatModalDeleteChannel);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-modal-edit-channel-description", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/components/chat/modal/edit-channel-description", "discourse/plugins/chat/discourse/lib/fabricators", "@ember/template-factory"], function (_exports, _component, _component2, _object, _service, _editChannelDescription, _fabricators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::Modal::EditChannelDescription>">
    <Styleguide::Controls::Row>
      <DButton @translatedLabel="Open modal" @action={{this.openModal}} />
    </Styleguide::Controls::Row>
  </StyleguideExample>
  */
  {
    "id": "3ae/A2qR",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::Modal::EditChannelDescription>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@translatedLabel\",\"@action\"],[\"Open modal\",[30,0,[\"openModal\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/controls/row\",\"d-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-modal-edit-channel-description.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatModalEditChannelDescription = _exports.default = (_class = class ChatStyleguideChatModalEditChannelDescription extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "modal", _descriptor, this);
      _defineProperty(this, "channel", _fabricators.default.channel());
    }
    openModal() {
      return this.modal.show(_editChannelDescription.default, {
        model: this.channel
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openModal"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatModalEditChannelDescription);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-modal-edit-channel-name", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/components/chat/modal/edit-channel-name", "discourse/plugins/chat/discourse/lib/fabricators", "@ember/template-factory"], function (_exports, _component, _component2, _object, _service, _editChannelName, _fabricators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::Modal::EditChannelName>">
    <Styleguide::Controls::Row>
      <DButton @translatedLabel="Open modal" @action={{this.openModal}} />
    </Styleguide::Controls::Row>
  </StyleguideExample>
  */
  {
    "id": "ilAVl2Kg",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::Modal::EditChannelName>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@translatedLabel\",\"@action\"],[\"Open modal\",[30,0,[\"openModal\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/controls/row\",\"d-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-modal-edit-channel-name.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatModalEditChannelName = _exports.default = (_class = class ChatStyleguideChatModalEditChannelName extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "modal", _descriptor, this);
      _defineProperty(this, "channel", _fabricators.default.channel());
    }
    openModal() {
      return this.modal.show(_editChannelName.default, {
        model: this.channel
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openModal"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatModalEditChannelName);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-modal-move-message-to-channel", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/components/chat/modal/move-message-to-channel", "discourse/plugins/chat/discourse/lib/fabricators", "@ember/template-factory"], function (_exports, _component, _component2, _object, _service, _moveMessageToChannel, _fabricators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::Modal::MoveMessageToChannel>">
    <Styleguide::Controls::Row>
      <DButton @translatedLabel="Open modal" @action={{this.openModal}} />
    </Styleguide::Controls::Row>
  </StyleguideExample>
  */
  {
    "id": "ATPl85dR",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::Modal::MoveMessageToChannel>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@translatedLabel\",\"@action\"],[\"Open modal\",[30,0,[\"openModal\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/controls/row\",\"d-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-modal-move-message-to-channel.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatModalMoveMessageToChannel = _exports.default = (_class = class ChatStyleguideChatModalMoveMessageToChannel extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "modal", _descriptor, this);
      _defineProperty(this, "channel", _fabricators.default.channel());
      _defineProperty(this, "selectedMessageIds", [_fabricators.default.message({
        channel: this.channel
      })].mapBy("id"));
    }
    openModal() {
      return this.modal.show(_moveMessageToChannel.default, {
        model: {
          sourceChannel: this.channel,
          selectedMessageIds: [_fabricators.default.message({
            channel: this.channel
          })].mapBy("id")
        }
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openModal"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatModalMoveMessageToChannel);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-modal-new-message", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/components/chat/modal/new-message", "@ember/template-factory"], function (_exports, _component, _component2, _object, _service, _newMessage, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::Modal::NewMessage>">
    <Styleguide::Controls::Row>
      <DButton @translatedLabel="Open modal" @action={{this.openModal}} />
    </Styleguide::Controls::Row>
  </StyleguideExample>
  */
  {
    "id": "tf8RWlBH",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::Modal::NewMessage>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@translatedLabel\",\"@action\"],[\"Open modal\",[30,0,[\"openModal\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/controls/row\",\"d-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-modal-new-message.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatModalNewMessage = _exports.default = (_class = class ChatStyleguideChatModalNewMessage extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "modal", _descriptor, this);
    }
    openModal() {
      return this.modal.show(_newMessage.default);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openModal"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatModalNewMessage);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-modal-thread-settings", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/components/chat/modal/thread-settings", "discourse/plugins/chat/discourse/lib/fabricators", "@ember/template-factory"], function (_exports, _component, _component2, _object, _service, _threadSettings, _fabricators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::Modal::ThreadSettings>">
    <Styleguide::Controls::Row>
      <DButton @translatedLabel="Open modal" @action={{this.openModal}} />
    </Styleguide::Controls::Row>
  </StyleguideExample>
  */
  {
    "id": "fzsrgZZ3",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::Modal::ThreadSettings>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@translatedLabel\",\"@action\"],[\"Open modal\",[30,0,[\"openModal\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/controls/row\",\"d-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-modal-thread-settings.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatModalThreadSettings = _exports.default = (_class = class ChatStyleguideChatModalThreadSettings extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "modal", _descriptor, this);
    }
    openModal() {
      return this.modal.show(_threadSettings.default, {
        model: _fabricators.default.thread()
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openModal"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatModalThreadSettings);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-modal-toggle-channel-status", ["exports", "@ember/component", "@glimmer/component", "@ember/object", "@ember/service", "discourse/plugins/chat/discourse/components/chat/modal/toggle-channel-status", "discourse/plugins/chat/discourse/lib/fabricators", "@ember/template-factory"], function (_exports, _component, _component2, _object, _service, _toggleChannelStatus, _fabricators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::Modal::ToggleChannelStatus>">
    <Styleguide::Controls::Row>
      <DButton @translatedLabel="Open modal" @action={{this.openModal}} />
    </Styleguide::Controls::Row>
  </StyleguideExample>
  */
  {
    "id": "h5sT+PPJ",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::Modal::ToggleChannelStatus>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@translatedLabel\",\"@action\"],[\"Open modal\",[30,0,[\"openModal\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/controls/row\",\"d-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-modal-toggle-channel-status.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatModalToggleChannelStatus = _exports.default = (_class = class ChatStyleguideChatModalToggleChannelStatus extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "modal", _descriptor, this);
    }
    openModal() {
      return this.modal.show(_toggleChannelStatus.default, {
        model: _fabricators.default.channel()
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openModal", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openModal"), _class.prototype)), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatModalToggleChannelStatus);
});
define("discourse/plugins/chat/discourse/components/styleguide/chat-thread-list-item", ["exports", "@ember/component", "@glimmer/component", "@ember/service", "discourse/plugins/chat/discourse/lib/fabricators", "@ember/template-factory"], function (_exports, _component, _component2, _service, _fabricators, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <StyleguideExample @title="<Chat::ThreadList::Item>">
    <Styleguide::Component>
      <Chat::ThreadList::Item @thread={{this.thread}} />
    </Styleguide::Component>
  </StyleguideExample>
  */
  {
    "id": "lR91t83a",
    "block": "[[[8,[39,0],null,[[\"@title\"],[\"<Chat::ThreadList::Item>\"]],[[\"default\"],[[[[1,\"\\n  \"],[8,[39,1],null,null,[[\"default\"],[[[[1,\"\\n    \"],[8,[39,2],null,[[\"@thread\"],[[30,0,[\"thread\"]]]],null],[1,\"\\n  \"]],[]]]]],[1,\"\\n\"]],[]]]]]],[],false,[\"styleguide-example\",\"styleguide/component\",\"chat/thread-list/item\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/styleguide/chat-thread-list-item.hbs",
    "isStrictMode": false
  });
  let ChatStyleguideChatThreadListItem = _exports.default = (_class = class ChatStyleguideChatThreadListItem extends _component2.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
      _defineProperty(this, "thread", _fabricators.default.thread());
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, ChatStyleguideChatThreadListItem);
});
define("discourse/plugins/chat/discourse/components/styleguide/organisms/chat", ["exports", "discourse/plugins/chat/discourse/components/styleguide/chat-composer", "discourse/plugins/chat/discourse/components/styleguide/chat-composer-message-details", "discourse/plugins/chat/discourse/components/styleguide/chat-header-icon", "discourse/plugins/chat/discourse/components/styleguide/chat-message", "discourse/plugins/chat/discourse/components/styleguide/chat-modal-archive-channel", "discourse/plugins/chat/discourse/components/styleguide/chat-modal-channel-summary", "discourse/plugins/chat/discourse/components/styleguide/chat-modal-create-channel", "discourse/plugins/chat/discourse/components/styleguide/chat-modal-delete-channel", "discourse/plugins/chat/discourse/components/styleguide/chat-modal-edit-channel-description", "discourse/plugins/chat/discourse/components/styleguide/chat-modal-edit-channel-name", "discourse/plugins/chat/discourse/components/styleguide/chat-modal-move-message-to-channel", "discourse/plugins/chat/discourse/components/styleguide/chat-modal-new-message", "discourse/plugins/chat/discourse/components/styleguide/chat-modal-thread-settings", "discourse/plugins/chat/discourse/components/styleguide/chat-modal-toggle-channel-status", "discourse/plugins/chat/discourse/components/styleguide/chat-thread-list-item", "@ember/template-factory", "@ember/component", "@ember/component/template-only"], function (_exports, _chatComposer, _chatComposerMessageDetails, _chatHeaderIcon, _chatMessage, _chatModalArchiveChannel, _chatModalChannelSummary, _chatModalCreateChannel, _chatModalDeleteChannel, _chatModalEditChannelDescription, _chatModalEditChannelName, _chatModalMoveMessageToChannel, _chatModalNewMessage, _chatModalThreadSettings, _chatModalToggleChannelStatus, _chatThreadListItem, _templateFactory, _component, _templateOnly) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ChatOrganism = (0, _component.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
    <ChatMessage />
    <ChatComposer />
    <ChatThreadListItem />
    <ChatComposerMessageDetails />
    <ChatHeaderIcon />
  
    <h2>Modals</h2>
  
    <ChatModalArchiveChannel />
    <ChatModalMoveMessageToChannel />
    <ChatModalDeleteChannel />
    <ChatModalEditChannelDescription />
    <ChatModalEditChannelName />
    <ChatModalThreadSettings />
    <ChatModalCreateChannel />
    <ChatModalToggleChannelStatus />
    <ChatModalNewMessage />
    <ChatModalChannelSummary />
  
  */
  {
    "id": "0Q5u6U/P",
    "block": "[[[1,\"\\n  \"],[8,[32,0],null,null,null],[1,\"\\n  \"],[8,[32,1],null,null,null],[1,\"\\n  \"],[8,[32,2],null,null,null],[1,\"\\n  \"],[8,[32,3],null,null,null],[1,\"\\n  \"],[8,[32,4],null,null,null],[1,\"\\n\\n  \"],[10,\"h2\"],[12],[1,\"Modals\"],[13],[1,\"\\n\\n  \"],[8,[32,5],null,null,null],[1,\"\\n  \"],[8,[32,6],null,null,null],[1,\"\\n  \"],[8,[32,7],null,null,null],[1,\"\\n  \"],[8,[32,8],null,null,null],[1,\"\\n  \"],[8,[32,9],null,null,null],[1,\"\\n  \"],[8,[32,10],null,null,null],[1,\"\\n  \"],[8,[32,11],null,null,null],[1,\"\\n  \"],[8,[32,12],null,null,null],[1,\"\\n  \"],[8,[32,13],null,null,null],[1,\"\\n  \"],[8,[32,14],null,null,null],[1,\"\\n\"]],[],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/styleguide/organisms/chat.js",
    "scope": () => [_chatMessage.default, _chatComposer.default, _chatThreadListItem.default, _chatComposerMessageDetails.default, _chatHeaderIcon.default, _chatModalArchiveChannel.default, _chatModalMoveMessageToChannel.default, _chatModalDeleteChannel.default, _chatModalEditChannelDescription.default, _chatModalEditChannelName.default, _chatModalThreadSettings.default, _chatModalCreateChannel.default, _chatModalToggleChannelStatus.default, _chatModalNewMessage.default, _chatModalChannelSummary.default],
    "isStrictMode": true
  }), (0, _templateOnly.default)());
  var _default = _exports.default = ChatOrganism;
});
define("discourse/plugins/chat/discourse/components/thread-title/index", ["exports", "@glimmer/component", "@ember/routing", "@ember/template", "discourse/helpers/replace-emoji", "discourse/lib/utilities", "discourse/plugins/chat/discourse/components/thread-unread-indicator", "@ember/template-factory", "@ember/component"], function (_exports, _component, _routing, _template, _replaceEmoji, _utilities, _threadUnreadIndicator, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatThreadTitle extends _component.default {
    get title() {
      if (this.args.thread.title) {
        return (0, _replaceEmoji.default)((0, _template.htmlSafe)((0, _utilities.escapeExpression)(this.args.thread.title)));
      } else {
        return (0, _replaceEmoji.default)((0, _template.htmlSafe)(this.args.thread.originalMessage.excerpt));
      }
    }
  }
  _exports.default = ChatThreadTitle;
  _class = ChatThreadTitle;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <div class="chat__thread-title-container">
        <div class="chat__thread-title">
          <LinkTo
            class="chat__thread-title__name"
            @route="chat.channel.thread"
            @models={{@thread.routeModels}}
          >
            {{this.title}}
          </LinkTo>
  
          <ThreadUnreadIndicator @thread={{@thread}} />
        </div>
      </div>
    
  */
  {
    "id": "+bZ4ABor",
    "block": "[[[1,\"\\n    \"],[10,0],[14,0,\"chat__thread-title-container\"],[12],[1,\"\\n      \"],[10,0],[14,0,\"chat__thread-title\"],[12],[1,\"\\n        \"],[8,[32,0],[[24,0,\"chat__thread-title__name\"]],[[\"@route\",\"@models\"],[\"chat.channel.thread\",[30,1,[\"routeModels\"]]]],[[\"default\"],[[[[1,\"\\n          \"],[1,[30,0,[\"title\"]]],[1,\"\\n        \"]],[]]]]],[1,\"\\n\\n        \"],[8,[32,1],null,[[\"@thread\"],[[30,1]]],null],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[\"@thread\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/thread-title/index.js",
    "scope": () => [_routing.LinkTo, _threadUnreadIndicator.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/thread-unread-indicator/index", ["exports", "@glimmer/component", "@ember/template-factory", "@ember/component"], function (_exports, _component, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatThreadUnreadIndicator extends _component.default {
    get unreadCount() {
      return this.args.thread.tracking.unreadCount;
    }
    get showUnreadIndicator() {
      return this.unreadCount > 0;
    }
    get unreadCountLabel() {
      return this.unreadCount > 99 ? "99+" : this.unreadCount;
    }
  }
  _exports.default = ChatThreadUnreadIndicator;
  _class = ChatThreadUnreadIndicator;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if this.showUnreadIndicator}}
        <div class="chat-thread-list-item-unread-indicator">
          <div class="chat-thread-list-item-unread-indicator__number">
            {{this.unreadCountLabel}}
          </div>
        </div>
      {{/if}}
    
  */
  {
    "id": "eQU4Vn+R",
    "block": "[[[1,\"\\n\"],[41,[30,0,[\"showUnreadIndicator\"]],[[[1,\"      \"],[10,0],[14,0,\"chat-thread-list-item-unread-indicator\"],[12],[1,\"\\n        \"],[10,0],[14,0,\"chat-thread-list-item-unread-indicator__number\"],[12],[1,\"\\n          \"],[1,[30,0,[\"unreadCountLabel\"]]],[1,\"\\n        \"],[13],[1,\"\\n      \"],[13],[1,\"\\n\"]],[]],null],[1,\"  \"]],[],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/thread-unread-indicator/index.js",
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/components/toggle-channel-membership-button", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/helper", "@ember/object", "@ember/service", "discourse/components/d-button", "discourse/components/plugin-outlet", "discourse/helpers/concat-class", "discourse/lib/ajax-error", "discourse-i18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _helper, _object, _service, _dButton, _pluginOutlet, _concatClass, _ajaxError, _discourseI18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ToggleChannelMembershipButton = _exports.default = (_class = (_class2 = class ToggleChannelMembershipButton extends _component.default {
    constructor() {
      super(...arguments);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatApi", _descriptor2, this);
      _initializerDefineProperty(this, "isLoading", _descriptor3, this);
      _defineProperty(this, "options", {});
      this.options = {
        labelType: "normal",
        joinTitle: _discourseI18n.default.t("chat.channel_settings.join_channel"),
        joinIcon: "",
        joinClass: "",
        leaveTitle: _discourseI18n.default.t("chat.channel_settings.leave_channel"),
        leaveIcon: "",
        leaveClass: "",
        ...this.args.options
      };
    }
    get label() {
      if (this.options.labelType === "none") {
        return "";
      }
      if (this.options.labelType === "short") {
        if (this.args.channel.currentUserMembership.following) {
          return _discourseI18n.default.t("chat.channel_settings.leave");
        } else {
          return _discourseI18n.default.t("chat.channel_settings.join");
        }
      }
      if (this.args.channel.currentUserMembership.following) {
        return _discourseI18n.default.t("chat.channel_settings.leave_channel");
      } else {
        return _discourseI18n.default.t("chat.channel_settings.join_channel");
      }
    }
    onJoinChannel() {
      this.isLoading = true;
      return this.chat.followChannel(this.args.channel).then(() => {
        this.args.onJoin?.(this.args.channel);
      }).catch(_ajaxError.popupAjaxError).finally(() => {
        if (this.isDestroying || this.isDestroyed) {
          return;
        }
        this.isLoading = false;
      });
    }
    async onLeaveChannel() {
      this.isLoading = true;
      try {
        if (this.args.channel.chatable.group) {
          await this.chatApi.leaveChannel(this.args.channel.id);
        } else {
          await this.chat.unfollowChannel(this.args.channel);
        }
        this.args.onLeave?.(this.args.channel);
      } catch (error1) {
        (0, _ajaxError.popupAjaxError)(error1);
      } finally {
        this.isLoading = false;
      }
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      {{#if @channel.currentUserMembership.following}}
        <DButton
          @action={{this.onLeaveChannel}}
          @translatedLabel={{this.label}}
          @translatedTitle={{this.options.leaveTitle}}
          @icon={{this.options.leaveIcon}}
          @disabled={{this.isLoading}}
          class={{concatClass
            "toggle-channel-membership-button -leave"
            this.options.leaveClass
          }}
        />
      {{else}}
        <PluginOutlet
          @name="chat-join-channel-button"
          @outletArgs={{hash
            onJoinChannel=this.onJoinChannel
            channel=@channel
            icon=this.options.joinIcon
            title=this.options.joinTitle
            label=this.label
            disabled=this.isLoading
          }}
          @defaultGlimmer={{true}}
        >
          <DButton
            @action={{this.onJoinChannel}}
            @translatedLabel={{this.label}}
            @translatedTitle={{this.options.joinTitle}}
            @icon={{this.options.joinIcon}}
            @disabled={{this.isLoading}}
            class={{concatClass
              "toggle-channel-membership-button -join"
              this.options.joinClass
            }}
          />
        </PluginOutlet>
      {{/if}}
    
  */
  {
    "id": "FWAfHbQm",
    "block": "[[[1,\"\\n\"],[41,[30,1,[\"currentUserMembership\",\"following\"]],[[[1,\"      \"],[8,[32,0],[[16,0,[28,[32,1],[\"toggle-channel-membership-button -leave\",[30,0,[\"options\",\"leaveClass\"]]],null]]],[[\"@action\",\"@translatedLabel\",\"@translatedTitle\",\"@icon\",\"@disabled\"],[[30,0,[\"onLeaveChannel\"]],[30,0,[\"label\"]],[30,0,[\"options\",\"leaveTitle\"]],[30,0,[\"options\",\"leaveIcon\"]],[30,0,[\"isLoading\"]]]],null],[1,\"\\n\"]],[]],[[[1,\"      \"],[8,[32,2],null,[[\"@name\",\"@outletArgs\",\"@defaultGlimmer\"],[\"chat-join-channel-button\",[28,[32,3],null,[[\"onJoinChannel\",\"channel\",\"icon\",\"title\",\"label\",\"disabled\"],[[30,0,[\"onJoinChannel\"]],[30,1],[30,0,[\"options\",\"joinIcon\"]],[30,0,[\"options\",\"joinTitle\"]],[30,0,[\"label\"]],[30,0,[\"isLoading\"]]]]],true]],[[\"default\"],[[[[1,\"\\n        \"],[8,[32,0],[[16,0,[28,[32,1],[\"toggle-channel-membership-button -join\",[30,0,[\"options\",\"joinClass\"]]],null]]],[[\"@action\",\"@translatedLabel\",\"@translatedTitle\",\"@icon\",\"@disabled\"],[[30,0,[\"onJoinChannel\"]],[30,0,[\"label\"]],[30,0,[\"options\",\"joinTitle\"]],[30,0,[\"options\",\"joinIcon\"]],[30,0,[\"isLoading\"]]]],null],[1,\"\\n      \"]],[]]]]],[1,\"\\n\"]],[]]],[1,\"  \"]],[\"@channel\"],false,[\"if\"]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/toggle-channel-membership-button.js",
    "scope": () => [_dButton.default, _concatClass.default, _pluginOutlet.default, _helper.hash],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "isLoading", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "onJoinChannel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onJoinChannel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onLeaveChannel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onLeaveChannel"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/components/user-menu/chat-notifications-list-empty-state", ["exports", "@ember/component", "@ember/component/template-only", "@ember/template-factory"], function (_exports, _component, _templateOnly, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const __COLOCATED_TEMPLATE__ = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="empty-state">
    <span class="empty-state-title">
      {{i18n "user_menu.no_chat_notifications_title"}}
    </span>
    <div class="empty-state-body">
      <p>
        {{html-safe
          (i18n
            "user_menu.no_chat_notifications_body"
            preferencesUrl=(get-url "/my/preferences/notifications")
          )
        }}
      </p>
    </div>
  </div>
  */
  {
    "id": "O6dDc9NT",
    "block": "[[[10,0],[14,0,\"empty-state\"],[12],[1,\"\\n  \"],[10,1],[14,0,\"empty-state-title\"],[12],[1,\"\\n    \"],[1,[28,[35,0],[\"user_menu.no_chat_notifications_title\"],null]],[1,\"\\n  \"],[13],[1,\"\\n  \"],[10,0],[14,0,\"empty-state-body\"],[12],[1,\"\\n    \"],[10,2],[12],[1,\"\\n      \"],[1,[28,[35,1],[[28,[37,0],[\"user_menu.no_chat_notifications_body\"],[[\"preferencesUrl\"],[[28,[37,2],[\"/my/preferences/notifications\"],null]]]]],null]],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"],[13]],[],false,[\"i18n\",\"html-safe\",\"get-url\"]]",
    "moduleName": "discourse/plugins/chat/discourse/components/user-menu/chat-notifications-list-empty-state.hbs",
    "isStrictMode": false
  });
  var _default = _exports.default = (0, _component.setComponentTemplate)(__COLOCATED_TEMPLATE__, (0, _templateOnly.default)());
});
define("discourse/plugins/chat/discourse/components/user-menu/chat-notifications-list", ["exports", "discourse/components/user-menu/notifications-list"], function (_exports, _notificationsList) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class UserMenuChatNotificationsList extends _notificationsList.default {
    get dismissTypes() {
      return this.filterByTypes;
    }
    get emptyStateComponent() {
      return "user-menu/chat-notifications-list-empty-state";
    }
  }
  _exports.default = UserMenuChatNotificationsList;
});
define("discourse/plugins/chat/discourse/components/user-threads/index", ["exports", "@glimmer/component", "@glimmer/tracking", "@ember/service", "discourse-common/utils/decorators", "discourse/plugins/chat/discourse/components/channel-title", "discourse/plugins/chat/discourse/components/chat/list", "discourse/plugins/chat/discourse/components/chat-message-thread-indicator", "discourse/plugins/chat/discourse/components/thread-title", "discourse/plugins/chat/discourse/models/chat-channel", "discourse/plugins/chat/discourse/models/chat-thread", "@ember/template-factory", "@ember/component"], function (_exports, _component, _tracking, _service, _decorators, _channelTitle, _list, _chatMessageThreadIndicator, _threadTitle, _chatChannel, _chatThread, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _class2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let UserThreads = _exports.default = (_class = (_class2 = class UserThreads extends _component.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatApi", _descriptor2, this);
    }
    get threadsCollection() {
      return this.chatApi.userThreads(this.handleLoadedThreads);
    }
    handleLoadedThreads(result1) {
      return result1.threads.map(threadObject1 => {
        const channel1 = _chatChannel.default.create(threadObject1.channel);
        const thread1 = _chatThread.default.create(channel1, threadObject1);
        const tracking1 = result1.tracking[thread1.id];
        if (tracking1) {
          thread1.tracking.mentionCount = tracking1.mention_count;
          thread1.tracking.unreadCount = tracking1.unread_count;
        }
        return thread1;
      });
    }
  }, (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <List
        @collection={{this.threadsCollection}}
        class="c-user-threads"
        as |list|
      >
        <list.Item as |thread|>
          <div class="c-user-thread" data-id={{thread.id}}>
            <ThreadTitle @thread={{thread}} />
            <ChannelTitle @channel={{thread.channel}} />
            <ThreadIndicator
              @message={{thread.originalMessage}}
              @interactiveUser={{false}}
              @interactiveThread={{false}}
              tabindex="-1"
            />
          </div>
        </list.Item>
      </List>
    
  */
  {
    "id": "jbRMEIF1",
    "block": "[[[1,\"\\n    \"],[8,[32,0],[[24,0,\"c-user-threads\"]],[[\"@collection\"],[[30,0,[\"threadsCollection\"]]]],[[\"default\"],[[[[1,\"\\n      \"],[8,[30,1,[\"Item\"]],null,null,[[\"default\"],[[[[1,\"\\n        \"],[10,0],[14,0,\"c-user-thread\"],[15,\"data-id\",[30,2,[\"id\"]]],[12],[1,\"\\n          \"],[8,[32,1],null,[[\"@thread\"],[[30,2]]],null],[1,\"\\n          \"],[8,[32,2],null,[[\"@channel\"],[[30,2,[\"channel\"]]]],null],[1,\"\\n          \"],[8,[32,3],[[24,\"tabindex\",\"-1\"]],[[\"@message\",\"@interactiveUser\",\"@interactiveThread\"],[[30,2,[\"originalMessage\"]],false,false]],null],[1,\"\\n        \"],[13],[1,\"\\n      \"]],[2]]]]],[1,\"\\n    \"]],[1]]]]],[1,\"\\n  \"]],[\"list\",\"thread\"],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/components/user-threads/index.js",
    "scope": () => [_list.default, _threadTitle.default, _channelTitle.default, _chatMessageThreadIndicator.default],
    "isStrictMode": true
  }), _class2), _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "threadsCollection", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "threadsCollection"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleLoadedThreads", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "handleLoadedThreads"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/connectors/user-preferences-nav/chat-preferences", ["exports", "@glimmer/component", "@ember/routing", "discourse-common/helpers/d-icon", "discourse-common/helpers/i18n", "@ember/template-factory", "@ember/component"], function (_exports, _component, _routing, _dIcon, _i18n, _templateFactory, _component2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  class ChatPreferences extends _component.default {
    static shouldRender({
      model: model1
    }, {
      siteSettings: siteSettings1,
      currentUser: currentUser1
    }) {
      return siteSettings1.chat_enabled && (model1.can_chat || currentUser1?.admin);
    }
  }
  _exports.default = ChatPreferences;
  _class = ChatPreferences;
  (0, _component2.setComponentTemplate)((0, _templateFactory.createTemplateFactory)(
  /*
    
      <li class="user-nav__preferences-chat">
        <LinkTo @route="preferences.chat">
          {{dIcon "d-chat"}}
          <span>{{i18n "chat.title_capitalized"}}</span>
        </LinkTo>
      </li>
    
  */
  {
    "id": "Ni8z2x92",
    "block": "[[[1,\"\\n    \"],[10,\"li\"],[14,0,\"user-nav__preferences-chat\"],[12],[1,\"\\n      \"],[8,[32,0],null,[[\"@route\"],[\"preferences.chat\"]],[[\"default\"],[[[[1,\"\\n        \"],[1,[28,[32,1],[\"d-chat\"],null]],[1,\"\\n        \"],[10,1],[12],[1,[28,[32,2],[\"chat.title_capitalized\"],null]],[13],[1,\"\\n      \"]],[]]]]],[1,\"\\n    \"],[13],[1,\"\\n  \"]],[],false,[]]",
    "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/connectors/user-preferences-nav/chat-preferences.js",
    "scope": () => [_routing.LinkTo, _dIcon.default, _i18n.default],
    "isStrictMode": true
  }), _class);
});
define("discourse/plugins/chat/discourse/controllers/admin-plugins-chat", ["exports", "@ember/controller", "@ember/object", "@ember/object/computed", "@ember/service", "discourse/lib/ajax", "discourse/lib/ajax-error", "discourse-i18n"], function (_exports, _controller, _object, _computed, _service, _ajax, _ajaxError, _discourseI18n) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let AdminPluginsChatController = _exports.default = (_dec = (0, _computed.and)("newWebhookName", "newWebhookChannelId"), _dec2 = (0, _object.computed)("model.incoming_chat_webhooks.@each.updated_at"), _dec3 = (0, _object.computed)("selectedWebhookId"), _dec4 = (0, _object.computed)("selectedWebhook.name", "selectedWebhook.chat_channel.id"), (_class = class AdminPluginsChatController extends _controller.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "dialog", _descriptor, this);
      _defineProperty(this, "queryParams", [{
        selectedWebhookId: "id"
      }]);
      _defineProperty(this, "loading", false);
      _defineProperty(this, "creatingNew", false);
      _defineProperty(this, "newWebhookName", "");
      _defineProperty(this, "newWebhookChannelId", null);
      _defineProperty(this, "emojiPickerIsActive", false);
      _initializerDefineProperty(this, "nameAndChannelValid", _descriptor2, this);
    }
    get sortedWebhooks() {
      return this.model.incoming_chat_webhooks?.sortBy("updated_at").reverse() || [];
    }
    get selectedWebhook() {
      if (!this.selectedWebhookId) {
        return;
      }
      const id = parseInt(this.selectedWebhookId, 10);
      return this.model.incoming_chat_webhooks.findBy("id", id);
    }
    get saveEditDisabled() {
      return !this.selectedWebhook.name || !this.selectedWebhook.chat_channel.id;
    }
    createNewWebhook() {
      if (this.loading) {
        return;
      }
      this.set("loading", true);
      const data = {
        name: this.newWebhookName,
        chat_channel_id: this.newWebhookChannelId
      };
      return (0, _ajax.ajax)("/admin/plugins/chat/hooks", {
        data,
        type: "POST"
      }).then(webhook => {
        const newWebhook = _object.default.create(webhook);
        this.set("model.incoming_chat_webhooks", [newWebhook].concat(this.model.incoming_chat_webhooks));
        this.resetNewWebhook();
        this.setProperties({
          loading: false,
          selectedWebhookId: newWebhook.id
        });
      }).catch(_ajaxError.popupAjaxError);
    }
    resetNewWebhook() {
      this.setProperties({
        creatingNew: false,
        newWebhookName: "",
        newWebhookChannelId: null
      });
    }
    destroyWebhook(webhook) {
      this.dialog.deleteConfirm({
        message: _discourseI18n.default.t("chat.incoming_webhooks.confirm_destroy"),
        didConfirm: () => {
          this.set("loading", true);
          return (0, _ajax.ajax)(`/admin/plugins/chat/hooks/${webhook.id}`, {
            type: "DELETE"
          }).then(() => {
            this.model.incoming_chat_webhooks.removeObject(webhook);
            this.set("loading", false);
          }).catch(_ajaxError.popupAjaxError);
        }
      });
    }
    emojiSelected(emoji) {
      this.selectedWebhook.set("emoji", `:${emoji}:`);
      return this.set("emojiPickerIsActive", false);
    }
    saveEdit() {
      this.set("loading", true);
      const data = {
        name: this.selectedWebhook.name,
        chat_channel_id: this.selectedWebhook.chat_channel.id,
        description: this.selectedWebhook.description,
        emoji: this.selectedWebhook.emoji,
        username: this.selectedWebhook.username
      };
      return (0, _ajax.ajax)(`/admin/plugins/chat/hooks/${this.selectedWebhook.id}`, {
        data,
        type: "PUT"
      }).then(() => {
        this.selectedWebhook.set("updated_at", new Date());
        this.setProperties({
          loading: false,
          selectedWebhookId: null
        });
      }).catch(_ajaxError.popupAjaxError);
    }
    changeChatChannel(chatChannelId) {
      this.selectedWebhook.set("chat_channel", this.model.chat_channels.findBy("id", chatChannelId));
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "dialog", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "nameAndChannelValid", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "sortedWebhooks", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "sortedWebhooks"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "selectedWebhook", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "selectedWebhook"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveEditDisabled", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "saveEditDisabled"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "createNewWebhook", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "createNewWebhook"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "resetNewWebhook", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "resetNewWebhook"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "destroyWebhook", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "destroyWebhook"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "emojiSelected", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "emojiSelected"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveEdit", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "saveEdit"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "changeChatChannel", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "changeChatChannel"), _class.prototype)), _class));
});
define("discourse/plugins/chat/discourse/controllers/chat-channel-index", ["exports", "@ember/controller"], function (_exports, _controller) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class ChatChannelIndexController extends _controller.default {}
  _exports.default = ChatChannelIndexController;
});
define("discourse/plugins/chat/discourse/controllers/chat-channel-thread", ["exports", "@glimmer/tracking", "@ember/controller", "@ember/service"], function (_exports, _tracking, _controller, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelThreadController = _exports.default = (_class = class ChatChannelThreadController extends _controller.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "targetMessageId", _descriptor2, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "targetMessageId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  })), _class);
});
define("discourse/plugins/chat/discourse/controllers/chat-channel", ["exports", "@glimmer/tracking", "@ember/controller", "@ember/service"], function (_exports, _tracking, _controller, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelController = _exports.default = (_class = class ChatChannelController extends _controller.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "targetMessageId", _descriptor2, this);
      // Backwards-compatibility
      _defineProperty(this, "queryParams", ["messageId"]);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "targetMessageId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  })), _class);
});
define("discourse/plugins/chat/discourse/controllers/chat-draft-channel", ["exports", "@ember/controller", "@ember/service"], function (_exports, _controller, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatDraftChannelController = _exports.default = (_class = class ChatDraftChannelController extends _controller.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/controllers/chat-index", ["exports", "@ember/controller", "@ember/service"], function (_exports, _controller, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatIndexController = _exports.default = (_class = class ChatIndexController extends _controller.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/controllers/chat", ["exports", "@ember/controller", "@ember/service"], function (_exports, _controller, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatController = _exports.default = (_class = class ChatController extends _controller.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor2, this);
      _initializerDefineProperty(this, "router", _descriptor3, this);
    }
    get shouldUseChatSidebar() {
      if (this.site.mobileView) {
        return false;
      }
      if (this.shouldUseCoreSidebar) {
        return false;
      }
      return true;
    }
    get shouldUseCoreSidebar() {
      return this.siteSettings.navigation_menu === "sidebar";
    }
    get mainOutletModifierClasses() {
      let modifierClasses = [];
      if (this.chatStateManager.isSidePanelExpanded) {
        modifierClasses.push("has-side-panel-expanded");
      }
      if (!this.router.currentRouteName.startsWith("chat.channel.info") && !this.router.currentRouteName.startsWith("chat.browse")) {
        modifierClasses.push("chat-view");
      }
      return modifierClasses.join(" ");
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/controllers/preferences-chat", ["exports", "@ember/controller", "@ember/object", "@ember/service", "discourse/lib/ajax-error", "discourse-common/config/environment", "discourse-common/utils/decorators", "discourse-i18n", "discourse/plugins/chat/discourse/services/chat-audio-manager"], function (_exports, _controller, _object, _service, _ajaxError, _environment, _decorators, _discourseI18n, _chatAudioManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.HEADER_INDICATOR_PREFERENCE_ONLY_MENTIONS = _exports.HEADER_INDICATOR_PREFERENCE_NEVER = _exports.HEADER_INDICATOR_PREFERENCE_DM_AND_MENTIONS = _exports.HEADER_INDICATOR_PREFERENCE_ALL_NEW = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const CHAT_ATTRS = ["chat_enabled", "only_chat_push_notifications", "ignore_channel_wide_mention", "chat_sound", "chat_email_frequency", "chat_header_indicator_preference", "chat_separate_sidebar_mode"];
  const EMAIL_FREQUENCY_OPTIONS = [{
    name: _discourseI18n.default.t("chat.email_frequency.never"),
    value: "never"
  }, {
    name: _discourseI18n.default.t("chat.email_frequency.when_away"),
    value: "when_away"
  }];
  const HEADER_INDICATOR_PREFERENCE_NEVER = _exports.HEADER_INDICATOR_PREFERENCE_NEVER = "never";
  const HEADER_INDICATOR_PREFERENCE_DM_AND_MENTIONS = _exports.HEADER_INDICATOR_PREFERENCE_DM_AND_MENTIONS = "dm_and_mentions";
  const HEADER_INDICATOR_PREFERENCE_ALL_NEW = _exports.HEADER_INDICATOR_PREFERENCE_ALL_NEW = "all_new";
  const HEADER_INDICATOR_PREFERENCE_ONLY_MENTIONS = _exports.HEADER_INDICATOR_PREFERENCE_ONLY_MENTIONS = "only_mentions";
  const HEADER_INDICATOR_OPTIONS = [{
    name: _discourseI18n.default.t("chat.header_indicator_preference.all_new"),
    value: HEADER_INDICATOR_PREFERENCE_ALL_NEW
  }, {
    name: _discourseI18n.default.t("chat.header_indicator_preference.dm_and_mentions"),
    value: HEADER_INDICATOR_PREFERENCE_DM_AND_MENTIONS
  }, {
    name: _discourseI18n.default.t("chat.header_indicator_preference.only_mentions"),
    value: HEADER_INDICATOR_PREFERENCE_ONLY_MENTIONS
  }, {
    name: _discourseI18n.default.t("chat.header_indicator_preference.never"),
    value: HEADER_INDICATOR_PREFERENCE_NEVER
  }];
  const CHAT_SEPARATE_SIDEBAR_MODE_OPTIONS = [{
    name: _discourseI18n.default.t("admin.site_settings.chat_separate_sidebar_mode.always"),
    value: "always"
  }, {
    name: _discourseI18n.default.t("admin.site_settings.chat_separate_sidebar_mode.fullscreen"),
    value: "fullscreen"
  }, {
    name: _discourseI18n.default.t("admin.site_settings.chat_separate_sidebar_mode.never"),
    value: "never"
  }];
  let PreferencesChatController = _exports.default = (_class = class PreferencesChatController extends _controller.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatAudioManager", _descriptor, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor2, this);
      _defineProperty(this, "subpageTitle", _discourseI18n.default.t("chat.admin.title"));
      _defineProperty(this, "emailFrequencyOptions", EMAIL_FREQUENCY_OPTIONS);
      _defineProperty(this, "headerIndicatorOptions", HEADER_INDICATOR_OPTIONS);
      _defineProperty(this, "chatSeparateSidebarModeOptions", CHAT_SEPARATE_SIDEBAR_MODE_OPTIONS);
    }
    get chatSeparateSidebarMode() {
      const mode = this.model.get("user_option.chat_separate_sidebar_mode");
      if (mode === "default") {
        return this.siteSettings.chat_separate_sidebar_mode;
      } else {
        return mode;
      }
    }
    chatSounds() {
      return Object.keys(_chatAudioManager.CHAT_SOUNDS).map(value => {
        return {
          name: _discourseI18n.default.t(`chat.sounds.${value}`),
          value
        };
      });
    }
    onChangeChatSound(sound) {
      if (sound) {
        this.chatAudioManager.playImmediately(sound);
      }
      this.model.set("user_option.chat_sound", sound);
    }
    save() {
      this.set("saved", false);
      return this.model.save(CHAT_ATTRS).then(() => {
        this.set("saved", true);
        if (!(0, _environment.isTesting)()) {
          location.reload();
        }
      }).catch(_ajaxError.popupAjaxError);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatAudioManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "chatSounds", [_decorators.default], Object.getOwnPropertyDescriptor(_class.prototype, "chatSounds"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onChangeChatSound", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onChangeChatSound"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "save", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "save"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/helpers/chat-guardian", ["exports", "@ember/component/helper", "@ember/service", "@ember/string"], function (_exports, _helper, _service, _string) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatGuardianHelper = _exports.default = (_class = class ChatGuardianHelper extends _helper.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatGuardian", _descriptor, this);
    }
    compute(inputs) {
      const [key, ...params] = inputs;
      if (!key) {
        return;
      }
      return this.chatGuardian[(0, _string.camelize)(key)]?.(...params);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatGuardian", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/helpers/format-chat-date", ["exports", "@ember/template", "discourse/models/user", "discourse-common/lib/get-url", "discourse-i18n"], function (_exports, _template, _user, _getUrl, _discourseI18n) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = formatChatDate;
  function formatChatDate(message, mode) {
    const currentUser = _user.default.current();
    const tz = currentUser ? currentUser.user_option.timezone : moment.tz.guess();
    const date = moment(new Date(message.createdAt), tz);
    const title = date.format(_discourseI18n.default.t("dates.long_with_year"));
    const display = mode === "tiny" ? date.format(_discourseI18n.default.t("chat.dates.time_tiny")) : date.format(_discourseI18n.default.t("dates.time"));
    if (message.staged) {
      return (0, _template.htmlSafe)(`<span title='${title}' tabindex="-1" class='chat-time'>${display}</span>`);
    } else {
      const url = (0, _getUrl.default)(`/chat/c/-/${message.channel.id}/${message.id}`);
      return (0, _template.htmlSafe)(`<a title='${title}' tabindex="-1" class='chat-time' href='${url}'>${display}</a>`);
    }
  }
});
define("discourse/plugins/chat/discourse/helpers/tonable-emoji-title", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = tonableEmojiTitle;
  function tonableEmojiTitle(emoji, diversity) {
    if (!emoji.tonable || diversity === 1) {
      return `:${emoji.name}:`;
    }
    return `:${emoji.name}:t${diversity}:`;
  }
});
define("discourse/plugins/chat/discourse/helpers/tonable-emoji-url", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = tonableEmojiUrl;
  function tonableEmojiUrl(emoji, scale) {
    if (!emoji.tonable || scale === 1) {
      return emoji.url;
    }
    return emoji.url.split(".png")[0] + `/${scale}.png`;
  }
});
define("discourse/plugins/chat/discourse/initializers/chat-audio", ["exports", "discourse/lib/plugin-api"], function (_exports, _pluginApi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const MENTION = 29;
  const MESSAGE = 30;
  const CHAT_NOTIFICATION_TYPES = [MENTION, MESSAGE];
  var _default = _exports.default = {
    name: "chat-audio",
    initialize(container) {
      const chatService = container.lookup("service:chat");
      if (!chatService.userCanChat) {
        return;
      }
      const chatAudioManager = container.lookup("service:chat-audio-manager");
      chatAudioManager.setup();
      (0, _pluginApi.withPluginApi)("0.12.1", api => {
        api.registerDesktopNotificationHandler((data, siteSettings, user) => {
          if (user.isInDoNotDisturb()) {
            return;
          }
          if (!user.chat_sound) {
            return;
          }
          if (CHAT_NOTIFICATION_TYPES.includes(data.notification_type)) {
            chatAudioManager.play(user.chat_sound);
          }
        });
      });
    }
  };
});
define("discourse/plugins/chat/discourse/initializers/chat-decorators", ["exports", "jquery", "discourse/helpers/loading-spinner", "discourse/instance-initializers/onebox-decorators", "discourse/lib/hashtag-autocomplete", "discourse/lib/highlight-syntax", "discourse/lib/load-script", "discourse/lib/plugin-api", "discourse/lib/url", "discourse-common/lib/get-url", "discourse-i18n"], function (_exports, _jquery, _loadingSpinner, _oneboxDecorators, _hashtagAutocomplete, _highlightSyntax, _loadScript, _pluginApi, _url, _getUrl, _discourseI18n) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    name: "chat-decorators",
    initializeWithPluginApi(api, container) {
      const siteSettings = container.lookup("service:site-settings");
      const lightboxService = container.lookup("service:lightbox");
      const site = container.lookup("service:site");
      api.decorateChatMessage(element => (0, _oneboxDecorators.decorateGithubOneboxBody)(element), {
        id: "onebox-github-body"
      });
      api.decorateChatMessage(element => {
        element.querySelectorAll(".onebox.githubblob li.selected").forEach(line => {
          const scrollingElement = this._getScrollParent(line, "onebox");

          // most likely a very small file which doesn’t need scrolling
          if (!scrollingElement) {
            return;
          }
          const scrollBarWidth = scrollingElement.offsetHeight - scrollingElement.clientHeight;
          scrollingElement.scroll({
            top: line.offsetTop + scrollBarWidth - scrollingElement.offsetHeight / 2 + line.offsetHeight / 2
          });
        });
      }, {
        id: "onebox-github-scrolling"
      });
      api.decorateChatMessage(element => (0, _highlightSyntax.default)(element, siteSettings, container.lookup("service:session")), {
        id: "highlightSyntax"
      });
      api.decorateChatMessage(this.renderChatTranscriptDates, {
        id: "transcriptDates"
      });
      api.decorateChatMessage(this.forceLinksToOpenNewTab, {
        id: "linksNewTab"
      });
      if (siteSettings.enable_experimental_lightbox) {
        api.decorateChatMessage(element => {
          lightboxService.setupLightboxes({
            container: element,
            selector: "img:not(.emoji, .avatar, .site-icon)"
          });
        }, {
          id: "experimental-chat-lightbox"
        });
      } else {
        api.decorateChatMessage(element => this.lightbox(element.querySelectorAll("img:not(.emoji, .avatar)")), {
          id: "lightbox"
        });
      }
      api.decorateChatMessage(element => (0, _hashtagAutocomplete.decorateHashtags)(element, site), {
        id: "hashtagIcons"
      });
    },
    _getScrollParent(node, maxParentSelector) {
      if (node === null || node.classList.contains(maxParentSelector)) {
        return null;
      }
      if (node.scrollHeight > node.clientHeight) {
        return node;
      } else {
        return this._getScrollParent(node.parentNode, maxParentSelector);
      }
    },
    renderChatTranscriptDates(element) {
      element.querySelectorAll(".chat-transcript").forEach(transcriptEl => {
        const dateTimeRaw = transcriptEl.dataset["datetime"];
        const dateTimeLinkEl = transcriptEl.querySelector(".chat-transcript-datetime a");

        // we only show date for first message
        if (!dateTimeLinkEl) {
          return;
        }
        if (dateTimeLinkEl.innerText !== "") {
          // same as highlight, no need to do this for every single message every time
          // any message changes
          return;
        }
        if (this.currentUserTimezone) {
          dateTimeLinkEl.innerText = moment.tz(dateTimeRaw, this.currentUserTimezone).format(_discourseI18n.default.t("dates.long_no_year"));
        } else {
          dateTimeLinkEl.innerText = moment(dateTimeRaw).format(_discourseI18n.default.t("dates.long_no_year"));
        }
      });
    },
    forceLinksToOpenNewTab(element) {
      const links = element.querySelectorAll(".chat-message-text a:not([target='_blank'])");
      for (let linkIndex = 0; linkIndex < links.length; linkIndex++) {
        const link = links[linkIndex];
        if (!_url.default.isInternal(link.href) || !(0, _getUrl.samePrefix)(link.href)) {
          link.setAttribute("target", "_blank");
        }
      }
    },
    lightbox(images) {
      (0, _loadScript.default)("/javascripts/jquery.magnific-popup.min.js").then(function () {
        (0, _jquery.default)(images).magnificPopup({
          type: "image",
          closeOnContentClick: false,
          mainClass: "mfp-zoom-in",
          tClose: _discourseI18n.default.t("lightbox.close"),
          tLoading: _loadingSpinner.spinnerHTML,
          image: {
            verticalFit: true
          },
          gallery: {
            enabled: true
          },
          callbacks: {
            elementParse: item => {
              item.src = item.el[0].dataset.largeSrc || item.el[0].src;
            }
          }
        });
      });
    },
    initialize(container) {
      if (container.lookup("service:chat").userCanChat) {
        (0, _pluginApi.withPluginApi)("0.8.42", api => this.initializeWithPluginApi(api, container));
      }
    }
  };
});
define("discourse/plugins/chat/discourse/initializers/chat-keyboard-shortcuts", ["exports", "discourse/lib/keyboard-shortcuts", "discourse/lib/plugin-api", "discourse/plugins/chat/discourse/components/chat/modal/new-message"], function (_exports, _keyboardShortcuts, _pluginApi, _newMessage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    name: "chat-keyboard-shortcuts",
    initialize(container) {
      const chatService = container.lookup("service:chat");
      if (!chatService.userCanChat) {
        return;
      }
      const router = container.lookup("service:router");
      const appEvents = container.lookup("service:app-events");
      const modal = container.lookup("service:modal");
      const chatStateManager = container.lookup("service:chat-state-manager");
      const chatThreadPane = container.lookup("service:chat-thread-pane");
      const chatThreadListPane = container.lookup("service:chat-thread-list-pane");
      const chatChannelsManager = container.lookup("service:chat-channels-manager");
      const openQuickChannelSelector = e => {
        e.preventDefault();
        e.stopPropagation();
        modal.show(_newMessage.default);
      };
      const handleMoveUpShortcut = e => {
        e.preventDefault();
        e.stopPropagation();
        chatService.switchChannelUpOrDown("up");
      };
      const handleMoveDownShortcut = e => {
        e.preventDefault();
        e.stopPropagation();
        chatService.switchChannelUpOrDown("down");
      };
      const isChatComposer = el => el.classList.contains("chat-composer__input");
      const isInputSelection = el => {
        const inputs = ["input", "textarea", "select", "button"];
        const elementTagName = el?.tagName.toLowerCase();
        if (inputs.includes(elementTagName)) {
          return false;
        }
        return true;
      };
      const modifyComposerSelection = (event, type) => {
        if (!isChatComposer(event.target)) {
          return;
        }
        event.preventDefault();
        event.stopPropagation();
        appEvents.trigger("chat:modify-selection", event, {
          type,
          context: event.target.dataset.chatComposerContext
        });
      };
      const openInsertLinkModal = event => {
        if (!isChatComposer(event.target)) {
          return;
        }
        event.preventDefault();
        event.stopPropagation();
        appEvents.trigger("chat:open-insert-link-modal", event, {
          context: event.target.dataset.chatComposerContext
        });
      };
      const openChatDrawer = event => {
        if (!isInputSelection(event.target)) {
          return;
        }
        event.preventDefault();
        event.stopPropagation();
        chatStateManager.prefersDrawer();
        router.transitionTo(chatStateManager.lastKnownChatURL || "chat");
      };
      const closeChat = event => {
        // TODO (joffrey): removes this when we move from magnific popup
        // there's no proper way to prevent propagation in mfp
        if (event.srcElement?.classList?.value?.includes("mfp-wrap")) {
          return;
        }
        if (chatStateManager.isDrawerActive) {
          event.preventDefault();
          event.stopPropagation();
          appEvents.trigger("chat:toggle-close", event);
          return;
        }
        if (chatThreadPane.isOpened) {
          event.preventDefault();
          event.stopPropagation();
          chatThreadPane.close();
          return;
        }
        if (chatThreadListPane.isOpened) {
          event.preventDefault();
          event.stopPropagation();
          chatThreadListPane.close();
          return;
        }
      };
      const markAllChannelsRead = event => {
        event.preventDefault();
        event.stopPropagation();
        if (chatStateManager.isActive) {
          chatChannelsManager.markAllChannelsRead();
        }
      };
      (0, _pluginApi.withPluginApi)("0.12.1", api => {
        api.addKeyboardShortcut(`${_keyboardShortcuts.PLATFORM_KEY_MODIFIER}+k`, openQuickChannelSelector, {
          global: true,
          help: {
            category: "chat",
            name: "chat.keyboard_shortcuts.open_quick_channel_selector",
            definition: {
              keys1: ["meta", "k"],
              keysDelimiter: "plus"
            }
          }
        });
        api.addKeyboardShortcut("alt+up", handleMoveUpShortcut, {
          global: true,
          help: {
            category: "chat",
            name: "chat.keyboard_shortcuts.switch_channel_arrows",
            definition: {
              keys1: ["alt", "&uarr;"],
              keys2: ["alt", "&darr;"],
              keysDelimiter: "plus",
              shortcutsDelimiter: "slash"
            }
          }
        });
        api.addKeyboardShortcut("alt+down", handleMoveDownShortcut, {
          global: true
        });
        api.addKeyboardShortcut(`${_keyboardShortcuts.PLATFORM_KEY_MODIFIER}+b`, event => modifyComposerSelection(event, "bold"), {
          global: true,
          help: {
            category: "chat",
            name: "chat.keyboard_shortcuts.composer_bold",
            definition: {
              keys1: ["meta", "b"],
              keysDelimiter: "plus"
            }
          }
        });
        api.addKeyboardShortcut(`${_keyboardShortcuts.PLATFORM_KEY_MODIFIER}+i`, event => modifyComposerSelection(event, "italic"), {
          global: true,
          help: {
            category: "chat",
            name: "chat.keyboard_shortcuts.composer_italic",
            definition: {
              keys1: ["meta", "i"],
              keysDelimiter: "plus"
            }
          }
        });
        api.addKeyboardShortcut(`${_keyboardShortcuts.PLATFORM_KEY_MODIFIER}+e`, event => modifyComposerSelection(event, "code"), {
          global: true,
          help: {
            category: "chat",
            name: "chat.keyboard_shortcuts.composer_code",
            definition: {
              keys1: ["meta", "e"],
              keysDelimiter: "plus"
            }
          }
        });
        api.addKeyboardShortcut(`${_keyboardShortcuts.PLATFORM_KEY_MODIFIER}+l`, event => openInsertLinkModal(event), {
          global: true,
          help: {
            category: "chat",
            name: "chat.keyboard_shortcuts.open_insert_link_modal",
            definition: {
              keys1: ["meta", "l"],
              keysDelimiter: "plus"
            }
          }
        });
        api.addKeyboardShortcut(`-`, event => openChatDrawer(event), {
          global: true,
          help: {
            category: "chat",
            name: "chat.keyboard_shortcuts.drawer_open",
            definition: {
              keys1: ["-"]
            }
          }
        });
        api.addKeyboardShortcut("esc", event => closeChat(event), {
          global: true,
          help: {
            category: "chat",
            name: "chat.keyboard_shortcuts.drawer_close",
            definition: {
              keys1: ["esc"]
            }
          }
        });
        api.addKeyboardShortcut(`shift+esc`, event => markAllChannelsRead(event), {
          global: true,
          help: {
            category: "chat",
            name: "chat.keyboard_shortcuts.mark_all_channels_read",
            definition: {
              keys1: ["shift", "esc"],
              keysDelimiter: "plus"
            }
          }
        });
      });
    }
  };
});
define("discourse/plugins/chat/discourse/initializers/chat-plugin-decorators", ["exports", "discourse/lib/local-dates", "discourse/lib/plugin-api"], function (_exports, _localDates, _pluginApi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    name: "chat-plugin-decorators",
    initializeWithPluginApi(api, siteSettings) {
      api.decorateChatMessage(element => {
        (0, _localDates.applyLocalDates)(element.querySelectorAll(".discourse-local-date"), siteSettings);
      }, {
        id: "local-dates"
      });
      if (siteSettings.spoiler_enabled) {
        const applySpoiler = requirejs("discourse/plugins/spoiler-alert/lib/apply-spoiler").default;
        api.decorateChatMessage(element => {
          element.querySelectorAll(".spoiler").forEach(spoiler => {
            spoiler.classList.remove("spoiler");
            spoiler.classList.add("spoiled");
            applySpoiler(spoiler);
          });
        }, {
          id: "spoiler"
        });
      }
    },
    initialize(container) {
      if (container.lookup("service:chat").userCanChat) {
        const siteSettings = container.lookup("service:site-settings");
        (0, _pluginApi.withPluginApi)("0.8.42", api => {
          this.initializeWithPluginApi(api, siteSettings);
        });
      }
    }
  };
});
define("discourse/plugins/chat/discourse/initializers/chat-setup", ["exports", "discourse/lib/plugin-api", "discourse-common/lib/get-owner", "discourse-common/lib/icon-library", "discourse-common/utils/decorators", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat-message", "discourse/plugins/chat/discourse/lib/chat-composer-buttons", "discourse/plugins/chat/discourse/lib/hashtag-types/channel", "discourse/plugins/chat/discourse/components/styleguide/organisms/chat"], function (_exports, _pluginApi, _getOwner, _iconLibrary, _decorators, _discourseI18n, _chatMessage, _chatComposerButtons, _channel, _chat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _obj;
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let _lastForcedRefreshAt;
  const MIN_REFRESH_DURATION_MS = 180000; // 3 minutes

  (0, _iconLibrary.replaceIcon)("d-chat", "comment");
  var _default = _exports.default = (_obj = {
    name: "chat-setup",
    before: "hashtag-css-generator",
    initialize(container) {
      this.router = container.lookup("service:router");
      this.chatService = container.lookup("service:chat");
      this.chatHistory = container.lookup("service:chat-history");
      this.site = container.lookup("service:site");
      this.siteSettings = container.lookup("service:site-settings");
      this.currentUser = container.lookup("service:current-user");
      this.appEvents = container.lookup("service:app-events");
      this.appEvents.on("discourse:focus-changed", this, "_handleFocusChanged");
      if (!this.chatService.userCanChat) {
        return;
      }
      (0, _pluginApi.withPluginApi)("0.12.1", api => {
        api.onPageChange(path => {
          const route = this.router.recognize(path);
          if (route.name.startsWith("chat.")) {
            this.chatHistory.visit(route);
          }
        });
        api.registerHashtagType("channel", new _channel.default(container));
        api.registerChatComposerButton({
          id: "chat-upload-btn",
          icon: "far-image",
          label: "chat.upload",
          position: "dropdown",
          action: "uploadClicked",
          dependentKeys: ["canAttachUploads"],
          displayed() {
            return this.canAttachUploads;
          }
        });
        if (this.siteSettings.discourse_local_dates_enabled) {
          api.registerChatComposerButton({
            label: "discourse_local_dates.title",
            id: "local-dates",
            class: "chat-local-dates-btn",
            icon: "calendar-alt",
            position: "dropdown",
            action() {
              this.insertDiscourseLocalDate();
            }
          });
        }
        api.registerChatComposerButton({
          label: "chat.emoji",
          id: "emoji",
          class: "chat-emoji-btn",
          icon: "far-smile",
          position: this.site.desktopView ? "inline" : "dropdown",
          context: "channel",
          action() {
            const chatEmojiPickerManager = container.lookup("service:chat-emoji-picker-manager");
            chatEmojiPickerManager.open({
              context: "channel"
            });
          }
        });
        api.registerChatComposerButton({
          label: "chat.emoji",
          id: "channel-emoji",
          class: "chat-emoji-btn",
          icon: "discourse-emojis",
          position: "dropdown",
          context: "thread",
          action() {
            const chatEmojiPickerManager = container.lookup("service:chat-emoji-picker-manager");
            chatEmojiPickerManager.open({
              context: "thread"
            });
          }
        });
        const summarizationAllowedGroups = this.siteSettings.custom_summarization_allowed_groups.split("|").map(id => parseInt(id, 10));
        const canSummarize = this.siteSettings.summarization_strategy && this.currentUser && this.currentUser.groups.some(g => summarizationAllowedGroups.includes(g.id));
        if (canSummarize) {
          api.registerChatComposerButton({
            translatedLabel: "chat.summarization.title",
            id: "channel-summary",
            icon: "discourse-sparkles",
            position: "dropdown",
            action: "showChannelSummaryModal"
          });
        }

        // we want to decorate the chat quote dates regardless
        // of whether the current user has chat enabled
        api.decorateCookedElement(elem => {
          const currentUser = (0, _getOwner.getOwnerWithFallback)(this).lookup("service:current-user");
          const currentUserTimezone = currentUser?.user_option?.timezone;
          const chatTranscriptElements = elem.querySelectorAll(".chat-transcript");
          chatTranscriptElements.forEach(el => {
            const dateTimeRaw = el.dataset["datetime"];
            const dateTimeEl = el.querySelector(".chat-transcript-datetime a, .chat-transcript-datetime span");
            if (currentUserTimezone) {
              dateTimeEl.innerText = moment.tz(dateTimeRaw, currentUserTimezone).format(_discourseI18n.default.t("dates.long_no_year"));
            } else {
              dateTimeEl.innerText = moment(dateTimeRaw).format(_discourseI18n.default.t("dates.long_no_year"));
            }
            dateTimeEl.dataset.dateFormatted = true;
          });
        });
        if (!this.chatService.userCanChat) {
          return;
        }
        document.body.classList.add("chat-enabled");
        const currentUser = api.getCurrentUser();

        // NOTE: chat_channels is more than a simple array, it also contains
        // tracking and membership data, see Chat::StructuredChannelSerializer
        if (currentUser?.chat_channels) {
          this.chatService.setupWithPreloadedChannels(currentUser.chat_channels);
        }
        const chatNotificationManager = container.lookup("service:chat-notification-manager");
        chatNotificationManager.start();
        if (!this._registeredDocumentTitleCountCallback) {
          api.addDocumentTitleCounter(this.documentTitleCountCallback);
          this._registeredDocumentTitleCountCallback = true;
        }
        api.addCardClickListenerSelector(".chat-drawer-outlet");
        api.addToHeaderIcons("chat-header-icon");
        api.addStyleguideSection?.({
          component: _chat.default,
          category: "organisms",
          id: "chat"
        });
        api.addChatDrawerStateCallback(({
          isDrawerActive
        }) => {
          if (isDrawerActive) {
            document.body.classList.add("chat-drawer-active");
          } else {
            document.body.classList.remove("chat-drawer-active");
          }
        });
        api.decorateChatMessage(function (chatMessage, chatChannel) {
          if (!this.currentUser) {
            return;
          }
          const highlightable = [`@${this.currentUser.username}`];
          if (chatChannel.allowChannelWideMentions) {
            highlightable.push(..._chatMessage.MENTION_KEYWORDS.map(k => `@${k}`));
          }
          chatMessage.querySelectorAll(".mention").forEach(node => {
            const mention = node.textContent.trim();
            if (highlightable.includes(mention)) {
              node.classList.add("highlighted", "valid-mention");
            }
          });
        });
      });
    },
    documentTitleCountCallback() {
      return this.chatService.getDocumentTitleCount();
    },
    teardown() {
      this.appEvents.off("discourse:focus-changed", this, "_handleFocusChanged");
      if (!this.chatService.userCanChat) {
        return;
      }
      _lastForcedRefreshAt = null;
      (0, _chatComposerButtons.clearChatComposerButtons)();
    },
    _handleFocusChanged(hasFocus) {
      if (!this.chatService.userCanChat) {
        return;
      }
      if (!hasFocus) {
        _lastForcedRefreshAt = Date.now();
        return;
      }
      _lastForcedRefreshAt = _lastForcedRefreshAt || Date.now();
      const duration = Date.now() - _lastForcedRefreshAt;
      if (duration <= MIN_REFRESH_DURATION_MS) {
        return;
      }
      _lastForcedRefreshAt = Date.now();
    }
  }, (_applyDecoratedDescriptor(_obj, "documentTitleCountCallback", [_decorators.bind], Object.getOwnPropertyDescriptor(_obj, "documentTitleCountCallback"), _obj), _applyDecoratedDescriptor(_obj, "_handleFocusChanged", [_decorators.bind], Object.getOwnPropertyDescriptor(_obj, "_handleFocusChanged"), _obj)), _obj);
});
define("discourse/plugins/chat/discourse/initializers/chat-sidebar", ["exports", "@glimmer/tracking", "@ember/service", "@ember/string", "@ember/template", "discourse/helpers/decorate-username-selector", "discourse/lib/plugin-api", "discourse/lib/text", "discourse/lib/utilities", "discourse-common/lib/avatar-utils", "discourse-common/lib/get-url", "discourse-common/utils/decorators", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat/modal/new-message", "discourse/plugins/chat/discourse/lib/init-sidebar-state"], function (_exports, _tracking, _service, _string, _template, _decorateUsernameSelector, _pluginApi, _text, _utilities, _avatarUtils, _getUrl, _decorators, _discourseI18n, _newMessage, _initSidebarState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  var _default = _exports.default = {
    name: "chat-sidebar",
    initialize(container) {
      this.chatService = container.lookup("service:chat");
      if (!this.chatService.userCanChat) {
        return;
      }
      this.siteSettings = container.lookup("service:site-settings");
      (0, _pluginApi.withPluginApi)("1.8.0", api => {
        api.addSidebarPanel(BaseCustomSidebarPanel => class ChatSidebarPanel extends BaseCustomSidebarPanel {
          constructor(...args) {
            super(...args);
            _defineProperty(this, "key", _initSidebarState.CHAT_PANEL);
            _defineProperty(this, "switchButtonLabel", _discourseI18n.default.t("sidebar.panels.chat.label"));
            _defineProperty(this, "switchButtonIcon", "d-chat");
            _defineProperty(this, "switchButtonDefaultUrl", (0, _getUrl.default)("/chat"));
          }
        });
        (0, _initSidebarState.initSidebarState)(api, api.getCurrentUser());
      });
      (0, _pluginApi.withPluginApi)("1.3.0", api => {
        api.addSidebarSection((BaseCustomSidebarSection, BaseCustomSidebarSectionLink) => {
          const SidebarChatMyThreadsSectionLink = class SidebarChatMyThreadsSectionLink extends BaseCustomSidebarSectionLink {
            constructor() {
              super(...arguments);
              _defineProperty(this, "route", "chat.threads");
              _defineProperty(this, "text", _discourseI18n.default.t("chat.my_threads.title"));
              _defineProperty(this, "title", _discourseI18n.default.t("chat.my_threads.title"));
              _defineProperty(this, "name", "user-threads");
              _defineProperty(this, "prefixType", "icon");
              _defineProperty(this, "prefixValue", "discourse-threads");
              _defineProperty(this, "suffixType", "icon");
              _defineProperty(this, "suffixCSSClass", "unread");
              if (container.isDestroyed) {
                return;
              }
              this.chatChannelsManager = container.lookup("service:chat-channels-manager");
            }
            get suffixValue() {
              return this.chatChannelsManager.publicMessageChannels.some(channel => channel.unreadThreadsCount > 0) ? "circle" : "";
            }
          };
          const SidebarChatMyThreadsSection = class SidebarChatMyThreadsSection extends BaseCustomSidebarSection {
            constructor(...args) {
              super(...args);
              // we only show `My Threads` link
              _defineProperty(this, "hideSectionHeader", true);
              _defineProperty(this, "name", "user-threads");
              // sidebar API doesn’t let you have undefined values
              // even if you don't show the section’s header
              _defineProperty(this, "title", "");
            }
            get links() {
              return [new SidebarChatMyThreadsSectionLink()];
            }
          };
          return SidebarChatMyThreadsSection;
        }, _initSidebarState.CHAT_PANEL);
        if (this.siteSettings.enable_public_channels) {
          api.addSidebarSection((BaseCustomSidebarSection, BaseCustomSidebarSectionLink) => {
            var _class4, _descriptor, _descriptor2;
            const SidebarChatChannelsSectionLink = class extends BaseCustomSidebarSectionLink {
              constructor({
                channel,
                chatService
              }) {
                super(...arguments);
                this.channel = channel;
                this.chatService = chatService;
              }
              get name() {
                return (0, _string.dasherize)(this.channel.slugifiedTitle);
              }
              get classNames() {
                const classes = [];
                if (this.channel.currentUserMembership.muted) {
                  classes.push("sidebar-section-link--muted");
                }
                if (this.channel.id === this.chatService.activeChannel?.id) {
                  classes.push("sidebar-section-link--active");
                }
                classes.push(`channel-${this.channel.id}`);
                return classes.join(" ");
              }
              get route() {
                return "chat.channel";
              }
              get models() {
                return this.channel.routeModels;
              }
              get text() {
                return (0, _template.htmlSafe)((0, _text.emojiUnescape)(this.channel.escapedTitle));
              }
              get prefixType() {
                return "icon";
              }
              get prefixValue() {
                return "d-chat";
              }
              get prefixColor() {
                return this.channel.chatable.color;
              }
              get title() {
                return this.channel.escapedDescription ? (0, _template.htmlSafe)(this.channel.escapedDescription) : `${this.channel.escapedTitle} ${_discourseI18n.default.t("chat.title")}`;
              }
              get prefixBadge() {
                return this.channel.chatable.read_restricted ? "lock" : "";
              }
              get suffixType() {
                return "icon";
              }
              get suffixValue() {
                return this.channel.tracking.unreadCount > 0 ||
                // We want to do this so we don't show a blue dot if the user is inside
                // the channel and a new unread thread comes in.
                this.chatService.activeChannel?.id !== this.channel.id && this.channel.unreadThreadsCountSinceLastViewed > 0 ? "circle" : "";
              }
              get suffixCSSClass() {
                return this.channel.tracking.mentionCount > 0 ? "urgent" : "unread";
              }
            };
            const SidebarChatChannelsSection = (_class4 = class _class4 extends BaseCustomSidebarSection {
              constructor() {
                super(...arguments);
                _initializerDefineProperty(this, "currentUser", _descriptor, this);
                _initializerDefineProperty(this, "currentUserCanJoinPublicChannels", _descriptor2, this);
                if (container.isDestroyed) {
                  return;
                }
                this.chatService = container.lookup("service:chat");
                this.chatChannelsManager = container.lookup("service:chat-channels-manager");
                this.router = container.lookup("service:router");
              }
              get sectionLinks() {
                return this.chatChannelsManager.publicMessageChannels.map(channel => new SidebarChatChannelsSectionLink({
                  channel,
                  chatService: this.chatService
                }));
              }
              get name() {
                return "chat-channels";
              }
              get title() {
                return _discourseI18n.default.t("chat.chat_channels");
              }
              get text() {
                return _discourseI18n.default.t("chat.chat_channels");
              }
              get actions() {
                return [{
                  id: "browseChannels",
                  title: _discourseI18n.default.t("chat.channels_list_popup.browse"),
                  action: () => this.router.transitionTo("chat.browse.open")
                }];
              }
              get actionsIcon() {
                return "pencil-alt";
              }
              get links() {
                return this.sectionLinks;
              }
              get displaySection() {
                return this.sectionLinks.length > 0 || this.currentUserCanJoinPublicChannels;
              }
            }, (_descriptor = _applyDecoratedDescriptor(_class4.prototype, "currentUser", [_service.inject], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor2 = _applyDecoratedDescriptor(_class4.prototype, "currentUserCanJoinPublicChannels", [_tracking.tracked], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return this.currentUser && (this.currentUser.staff || this.currentUser.has_joinable_public_channels);
              }
            })), _class4);
            return SidebarChatChannelsSection;
          }, _initSidebarState.CHAT_PANEL);
        }
        api.addSidebarSection((BaseCustomSidebarSection, BaseCustomSidebarSectionLink) => {
          var _class6, _class8, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
          const SidebarChatDirectMessagesSectionLink = (_class6 = class _class6 extends BaseCustomSidebarSectionLink {
            constructor({
              channel,
              chatService,
              currentUser
            }) {
              super(...arguments);
              _defineProperty(this, "route", "chat.channel");
              _defineProperty(this, "suffixType", "icon");
              _defineProperty(this, "suffixCSSClass", "urgent");
              _defineProperty(this, "hoverType", "icon");
              _defineProperty(this, "hoverValue", "times");
              _defineProperty(this, "hoverTitle", _discourseI18n.default.t("chat.direct_messages.close"));
              this.channel = channel;
              this.chatService = chatService;
              this.currentUser = currentUser;
              if (this.oneOnOneMessage) {
                const user = this.channel.chatable.users[0];
                if (user.username !== _discourseI18n.default.t("chat.deleted_chat_username")) {
                  user.trackStatus();
                }
              }
            }
            willDestroy() {
              if (this.oneOnOneMessage) {
                this.channel.chatable.users[0].stopTrackingStatus();
              }
            }
            get oneOnOneMessage() {
              return this.channel.chatable.users.length === 1;
            }
            get contentComponentArgs() {
              return this.channel.chatable.users[0].get("status");
            }
            get contentComponent() {
              if (this.oneOnOneMessage) {
                return "user-status-message";
              }
            }
            get name() {
              return this.channel.slugifiedTitle;
            }
            get classNames() {
              const classes = [];
              if (this.channel.currentUserMembership.muted) {
                classes.push("sidebar-section-link--muted");
              }
              if (this.channel.id === this.chatService.activeChannel?.id) {
                classes.push("sidebar-section-link--active");
              }
              classes.push(`channel-${this.channel.id}`);
              return classes.join(" ");
            }
            get models() {
              return this.channel.routeModels;
            }
            get title() {
              if (this.channel.chatable.group) {
                return _discourseI18n.default.t("chat.placeholder_channel", {
                  channelName: this.channel.escapedTitle
                });
              } else {
                return _discourseI18n.default.t("chat.placeholder_users", {
                  commaSeparatedNames: this.channel.escapedTitle
                });
              }
            }
            get text() {
              if (this.channel.chatable.group) {
                return this.channel.title;
              } else {
                const username = this.channel.escapedTitle.replaceAll("@", "");
                return (0, _template.htmlSafe)(`${(0, _utilities.escapeExpression)(username)}${(0, _decorateUsernameSelector.decorateUsername)((0, _utilities.escapeExpression)(username))}`);
              }
            }
            get prefixType() {
              if (this.channel.chatable.group) {
                return "text";
              } else {
                return "image";
              }
            }
            get prefixValue() {
              if (this.channel.chatable.group) {
                return this.channel.membershipsCount;
              } else {
                return (0, _avatarUtils.avatarUrl)(this.channel.chatable.users[0].avatar_template, "tiny");
              }
            }
            get prefixCSSClass() {
              const activeUsers = this.chatService.presenceChannel.users;
              const user = this.channel.chatable.users[0];
              if (!!activeUsers?.findBy("id", user?.id) || !!activeUsers?.findBy("username", user?.username)) {
                return "active";
              }
              return "";
            }
            get suffixValue() {
              return this.channel.tracking.unreadCount > 0 ? "circle" : "";
            }
            get hoverAction() {
              return event => {
                event.stopPropagation();
                event.preventDefault();
                this.chatService.unfollowChannel(this.channel);
              };
            }
          }, (_applyDecoratedDescriptor(_class6.prototype, "willDestroy", [_decorators.bind], Object.getOwnPropertyDescriptor(_class6.prototype, "willDestroy"), _class6.prototype)), _class6);
          const SidebarChatDirectMessagesSection = (_class8 = class _class8 extends BaseCustomSidebarSection {
            constructor() {
              super(...arguments);
              _initializerDefineProperty(this, "site", _descriptor3, this);
              _initializerDefineProperty(this, "modal", _descriptor4, this);
              _initializerDefineProperty(this, "router", _descriptor5, this);
              _initializerDefineProperty(this, "currentUser", _descriptor6, this);
              _initializerDefineProperty(this, "userCanDirectMessage", _descriptor7, this);
              if (container.isDestroyed) {
                return;
              }
              this.chatService = container.lookup("service:chat");
              this.chatChannelsManager = container.lookup("service:chat-channels-manager");
            }
            get sectionLinks() {
              return this.chatChannelsManager.truncatedDirectMessageChannels.map(channel => new SidebarChatDirectMessagesSectionLink({
                channel,
                chatService: this.chatService,
                currentUser: this.currentUser
              }));
            }
            get name() {
              return "chat-dms";
            }
            get title() {
              return _discourseI18n.default.t("chat.direct_messages.title");
            }
            get text() {
              return _discourseI18n.default.t("chat.direct_messages.title");
            }
            get actions() {
              if (!this.userCanDirectMessage) {
                return [];
              }
              return [{
                id: "startDm",
                title: _discourseI18n.default.t("chat.direct_messages.new"),
                action: () => {
                  this.modal.show(_newMessage.default);
                }
              }];
            }
            get actionsIcon() {
              return "plus";
            }
            get links() {
              return this.sectionLinks;
            }
            get displaySection() {
              return this.sectionLinks.length > 0 || this.userCanDirectMessage;
            }
          }, (_descriptor3 = _applyDecoratedDescriptor(_class8.prototype, "site", [_service.inject], {
            configurable: true,
            enumerable: true,
            writable: true,
            initializer: null
          }), _descriptor4 = _applyDecoratedDescriptor(_class8.prototype, "modal", [_service.inject], {
            configurable: true,
            enumerable: true,
            writable: true,
            initializer: null
          }), _descriptor5 = _applyDecoratedDescriptor(_class8.prototype, "router", [_service.inject], {
            configurable: true,
            enumerable: true,
            writable: true,
            initializer: null
          }), _descriptor6 = _applyDecoratedDescriptor(_class8.prototype, "currentUser", [_service.inject], {
            configurable: true,
            enumerable: true,
            writable: true,
            initializer: null
          }), _descriptor7 = _applyDecoratedDescriptor(_class8.prototype, "userCanDirectMessage", [_tracking.tracked], {
            configurable: true,
            enumerable: true,
            writable: true,
            initializer: function () {
              return this.chatService.userCanDirectMessage;
            }
          })), _class8);
          return SidebarChatDirectMessagesSection;
        }, "chat");
      });
    }
  };
});
define("discourse/plugins/chat/discourse/initializers/chat-user-menu", ["exports", "discourse/lib/plugin-api", "discourse/lib/utilities", "discourse-i18n", "discourse/plugins/chat/discourse/lib/slugify-channel"], function (_exports, _pluginApi, _utilities, _discourseI18n, _slugifyChannel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  var _default = _exports.default = {
    name: "chat-user-menu",
    initialize(container) {
      (0, _pluginApi.withPluginApi)("1.3.0", api => {
        const chat = container.lookup("service:chat");
        if (!chat.userCanChat) {
          return;
        }
        if (api.registerNotificationTypeRenderer) {
          api.registerNotificationTypeRenderer("chat_invitation", NotificationItemBase => {
            return class extends NotificationItemBase {
              constructor(...args) {
                super(...args);
                _defineProperty(this, "linkTitle", _discourseI18n.default.t("notifications.titles.chat_invitation"));
                _defineProperty(this, "icon", "link");
                _defineProperty(this, "description", _discourseI18n.default.t("notifications.chat_invitation"));
              }
              get linkHref() {
                const data = this.notification.data;
                const slug = (0, _slugifyChannel.default)({
                  title: data.chat_channel_title,
                  slug: data.chat_channel_slug
                });
                let url = `/chat/c/${slug || "-"}/${data.chat_channel_id}`;
                if (data.chat_message_id) {
                  url += `/${data.chat_message_id}`;
                }
                return url;
              }
              get label() {
                return (0, _utilities.formatUsername)(this.notification.data.invited_by_username);
              }
            };
          });
          api.registerNotificationTypeRenderer("chat_mention", NotificationItemBase => {
            return class extends NotificationItemBase {
              get linkHref() {
                const slug = (0, _slugifyChannel.default)({
                  title: this.notification.data.chat_channel_title,
                  slug: this.notification.data.chat_channel_slug
                });
                let notificationRoute = `/chat/c/${slug || "-"}/${this.notification.data.chat_channel_id}`;
                if (this.notification.data.chat_thread_id) {
                  notificationRoute += `/t/${this.notification.data.chat_thread_id}`;
                } else {
                  notificationRoute += `/${this.notification.data.chat_message_id}`;
                }
                return notificationRoute;
              }
              get linkTitle() {
                return _discourseI18n.default.t("notifications.titles.chat_mention");
              }
              get icon() {
                return "d-chat";
              }
              get label() {
                return (0, _utilities.formatUsername)(this.notification.data.mentioned_by_username);
              }
              get description() {
                const identifier = this.notification.data.identifier ? `@${this.notification.data.identifier}` : null;
                const i18nPrefix = this.notification.data.is_direct_message_channel ? "notifications.popup.direct_message_chat_mention" : "notifications.popup.chat_mention";
                const i18nSuffix = identifier ? "other_plain" : "direct";
                return _discourseI18n.default.t(`${i18nPrefix}.${i18nSuffix}`, {
                  identifier,
                  channel: this.notification.data.chat_channel_title
                });
              }
            };
          });
        }
        if (api.registerUserMenuTab) {
          api.registerUserMenuTab(UserMenuTab => {
            return class extends UserMenuTab {
              get id() {
                return "chat-notifications";
              }
              get panelComponent() {
                return "user-menu/chat-notifications-list";
              }
              get icon() {
                return "d-chat";
              }
              get count() {
                return this.getUnreadCountForType("chat_mention") + this.getUnreadCountForType("chat_invitation");
              }
              get notificationTypes() {
                return ["chat_invitation", "chat_mention", "chat_message", "chat_quoted"];
              }
            };
          });
        }
      });
    }
  };
});
define("discourse/plugins/chat/discourse/initializers/chat-user-options", ["exports", "discourse/lib/plugin-api"], function (_exports, _pluginApi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const CHAT_ENABLED_FIELD = "chat_enabled";
  const ONLY_CHAT_PUSH_NOTIFICATIONS_FIELD = "only_chat_push_notifications";
  const IGNORE_CHANNEL_WIDE_MENTION = "ignore_channel_wide_mention";
  const CHAT_SOUND = "chat_sound";
  const CHAT_EMAIL_FREQUENCY = "chat_email_frequency";
  const CHAT_HEADER_INDICATOR_PREFERENCE = "chat_header_indicator_preference";
  const CHAT_SEPARATE_SIDEBAR_MODE = "chat_separate_sidebar_mode";
  var _default = _exports.default = {
    name: "chat-user-options",
    initialize(container) {
      (0, _pluginApi.withPluginApi)("0.11.0", api => {
        const siteSettings = container.lookup("service:site-settings");
        if (siteSettings.chat_enabled) {
          api.addSaveableUserOptionField(CHAT_ENABLED_FIELD);
          api.addSaveableUserOptionField(ONLY_CHAT_PUSH_NOTIFICATIONS_FIELD);
          api.addSaveableUserOptionField(IGNORE_CHANNEL_WIDE_MENTION);
          api.addSaveableUserOptionField(CHAT_SOUND);
          api.addSaveableUserOptionField(CHAT_EMAIL_FREQUENCY);
          api.addSaveableUserOptionField(CHAT_HEADER_INDICATOR_PREFERENCE);
          api.addSaveableUserOptionField(CHAT_SEPARATE_SIDEBAR_MODE);
        }
      });
    }
  };
});
define("discourse/plugins/chat/discourse/lib/chat-channel-subscription-manager", ["exports", "@glimmer/tracking", "@ember/application", "@ember/service", "discourse-common/lib/object", "discourse-common/utils/decorators", "discourse/plugins/chat/discourse/models/chat-message", "discourse/plugins/chat/discourse/models/chat-thread-preview"], function (_exports, _tracking, _application, _service, _object, _decorators, _chatMessage, _chatThreadPreview) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelSubscriptionManager = _exports.default = (_class = class ChatChannelSubscriptionManager {
    constructor(context, channel, {
      onNewMessage
    } = {}) {
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
      _initializerDefineProperty(this, "chatChannelNoticesManager", _descriptor2, this);
      _initializerDefineProperty(this, "messageBus", _descriptor3, this);
      _initializerDefineProperty(this, "channel", _descriptor4, this);
      (0, _application.setOwner)(this, (0, _application.getOwner)(context));
      this.channel = channel;
      this.onNewMessage = onNewMessage;
      this.messageBus.subscribe(this.messageBusChannel, this.onMessage, this.channel.channelMessageBusLastId);
    }
    get messagesManager() {
      return this.channel.messagesManager;
    }
    get messageBusChannel() {
      return `/chat/${this.channel.id}`;
    }
    teardown() {
      this.messageBus.unsubscribe(this.messageBusChannel, this.onMessage);
      this.modelId = null;
    }
    onMessage(busData, _, __, lastMessageBusId) {
      switch (busData.type) {
        case "sent":
          this.handleSentMessage(busData);
          break;
        case "reaction":
          this.handleReactionMessage(busData);
          break;
        case "processed":
          this.handleProcessedMessage(busData);
          break;
        case "edit":
          this.handleEditMessage(busData);
          break;
        case "refresh":
          this.handleRefreshMessage(busData);
          break;
        case "delete":
          this.handleDeleteMessage(busData);
          break;
        case "bulk_delete":
          this.handleBulkDeleteMessage(busData);
          break;
        case "restore":
          this.handleRestoreMessage(busData);
          break;
        case "self_flagged":
          this.handleSelfFlaggedMessage(busData);
          break;
        case "flag":
          this.handleFlaggedMessage(busData);
          break;
        case "thread_created":
          this.handleNewThreadCreated(busData);
          break;
        case "update_thread_original_message":
          this.handleThreadOriginalMessageUpdate(busData);
          break;
        case "notice":
          this.handleNotice(busData);
          break;
      }
      this.channel.channelMessageBusLastId = lastMessageBusId;
    }
    handleSentMessage(data) {
      if (data.chat_message.user.id === this.currentUser.id && data.staged_id) {
        const stagedMessage = this.handleStagedMessage(this.channel, this.messagesManager, data);
        if (stagedMessage) {
          return;
        }
      }
      const message = _chatMessage.default.create(this.channel, data.chat_message);
      message.manager = this.channel.messagesManager;
      this.onNewMessage?.(message);
      this.channel.lastMessage = message;
    }
    handleStagedMessage(channel, messagesManager, data) {
      const stagedMessage = messagesManager.findStagedMessage(data.staged_id);
      if (!stagedMessage) {
        return;
      }
      stagedMessage.error = null;
      stagedMessage.id = data.chat_message.id;
      stagedMessage.staged = false;
      stagedMessage.excerpt = data.chat_message.excerpt;
      stagedMessage.channel = channel;
      stagedMessage.createdAt = new Date(data.chat_message.created_at);
      stagedMessage.cooked = data.chat_message.cooked;
      return stagedMessage;
    }
    handleProcessedMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message.id);
      if (message) {
        message.cooked = data.chat_message.cooked;
        message.uploads = (0, _object.cloneJSON)(data.chat_message.uploads || []);
        message.processed = true;
        message.incrementVersion();
      }
    }
    handleReactionMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message_id);
      if (message) {
        message.react(data.emoji, data.action, data.user, this.currentUser.id);
      }
    }
    handleEditMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message.id);
      if (message) {
        message.message = data.chat_message.message;
        message.cooked = data.chat_message.cooked;
        message.excerpt = data.chat_message.excerpt;
        message.uploads = (0, _object.cloneJSON)(data.chat_message.uploads || []);
        message.edited = data.chat_message.edited;
      }
    }
    handleRefreshMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message.id);
      if (message) {
        message.incrementVersion();
      }
    }
    handleBulkDeleteMessage(data) {
      data.deleted_ids.forEach(deletedId => {
        this.handleDeleteMessage({
          deleted_id: deletedId,
          deleted_at: data.deleted_at
        });
      });
    }
    handleDeleteMessage(data) {
      const deletedId = data.deleted_id;
      const targetMsg = this.messagesManager.findMessage(deletedId);
      if (!targetMsg) {
        return;
      }
      if (this.currentUser.staff || this.currentUser.id === targetMsg.user.id) {
        targetMsg.deletedAt = data.deleted_at;
        targetMsg.deletedById = data.deleted_by_id;
        targetMsg.expanded = false;
      } else {
        this.messagesManager.removeMessage(targetMsg);
      }
      if (this.channel.currentUserMembership.lastReadMessageId === targetMsg.id) {
        this.channel.currentUserMembership.lastReadMessageId = data.latest_not_deleted_message_id;
      }
    }
    handleRestoreMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message.id);
      if (message) {
        message.deletedAt = null;
      } else {
        const newMessage = _chatMessage.default.create(this.model, data.chat_message);
        newMessage.manager = this.messagesManager;
        this.messagesManager.addMessages([newMessage]);
      }
    }
    handleSelfFlaggedMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message_id);
      if (message) {
        message.userFlagStatus = data.user_flag_status;
      }
    }
    handleFlaggedMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message_id);
      if (message) {
        message.reviewableId = data.reviewable_id;
      }
    }
    handleNewThreadCreated(data) {
      this.channel.threadsManager.find(this.channel.id, data.thread_id, {
        fetchIfNotFound: true
      }).then(thread => {
        const channelOriginalMessage = this.channel.messagesManager.findMessage(thread.originalMessage.id);
        if (channelOriginalMessage) {
          channelOriginalMessage.thread = thread;
        }
      });
    }
    handleNotice(data) {
      this.chatChannelNoticesManager.handleNotice(data);
    }
    handleThreadOriginalMessageUpdate(data) {
      const message = this.messagesManager.findMessage(data.original_message_id);
      if (message?.thread) {
        message.thread.preview = _chatThreadPreview.default.create(data.preview);
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatChannelNoticesManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "messageBus", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "channel", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "onMessage", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onMessage"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/lib/chat-channel-thread-subscription-manager", ["exports", "@glimmer/tracking", "@ember/application", "@ember/service", "discourse-common/lib/object", "discourse-common/utils/decorators", "discourse/plugins/chat/discourse/models/chat-message"], function (_exports, _tracking, _application, _service, _object, _decorators, _chatMessage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelThreadSubscriptionManager = _exports.default = (_class = class ChatChannelThreadSubscriptionManager {
    constructor(context, thread, {
      onNewMessage
    } = {}) {
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
      _initializerDefineProperty(this, "messageBus", _descriptor2, this);
      _initializerDefineProperty(this, "channel", _descriptor3, this);
      (0, _application.setOwner)(this, (0, _application.getOwner)(context));
      this.thread = thread;
      this.onNewMessage = onNewMessage;
      this.messageBus.subscribe(this.messageBusChannel, this.onMessage, this.thread.channelMessageBusLastId);
    }
    get messagesManager() {
      return this.thread.messagesManager;
    }
    get messageBusChannel() {
      return `/chat/${this.thread.channel.id}/thread/${this.thread.id}`;
    }
    teardown() {
      this.messageBus.unsubscribe(this.messageBusChannel, this.onMessage);
    }
    onMessage(busData, _, __, lastMessageBusId) {
      switch (busData.type) {
        case "sent":
          this.handleSentMessage(busData);
          break;
        case "reaction":
          this.handleReactionMessage(busData);
          break;
        case "processed":
          this.handleProcessedMessage(busData);
          break;
        case "edit":
          this.handleEditMessage(busData);
          break;
        case "refresh":
          this.handleRefreshMessage(busData);
          break;
        case "delete":
          this.handleDeleteMessage(busData);
          break;
        case "bulk_delete":
          this.handleBulkDeleteMessage(busData);
          break;
        case "restore":
          this.handleRestoreMessage(busData);
          break;
        case "self_flagged":
          this.handleSelfFlaggedMessage(busData);
          break;
        case "flag":
          this.handleFlaggedMessage(busData);
          break;
        case "thread_created":
          this.handleNewThreadCreated(busData);
          break;
      }
      this.thread.threadMessageBusLastId = lastMessageBusId;
    }
    handleSentMessage(data) {
      if (data.chat_message.user.id === this.currentUser.id && data.staged_id) {
        const stagedMessage = this.handleStagedMessage(this.thread.channel, this.messagesManager, data);
        if (stagedMessage) {
          return;
        }
      }
      const message = _chatMessage.default.create(this.thread.channel, data.chat_message);
      message.thread = this.thread;
      message.manager = this.messagesManager;
      this.onNewMessage?.(message);
    }
    handleStagedMessage(channel, messagesManager, data) {
      const stagedMessage = messagesManager.findStagedMessage(data.staged_id);
      if (!stagedMessage) {
        return;
      }
      stagedMessage.error = null;
      stagedMessage.id = data.chat_message.id;
      stagedMessage.staged = false;
      stagedMessage.excerpt = data.chat_message.excerpt;
      stagedMessage.channel = channel;
      stagedMessage.createdAt = new Date(data.chat_message.created_at);
      return stagedMessage;
    }
    handleProcessedMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message.id);
      if (message) {
        message.cooked = data.chat_message.cooked;
        message.uploads = (0, _object.cloneJSON)(data.chat_message.uploads || []);
        message.processed = true;
        message.incrementVersion();
      }
    }
    handleReactionMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message_id);
      if (message) {
        message.react(data.emoji, data.action, data.user, this.currentUser.id);
      }
    }
    handleEditMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message.id);
      if (message) {
        message.excerpt = data.chat_message.excerpt;
        message.uploads = (0, _object.cloneJSON)(data.chat_message.uploads || []);
        message.edited = data.chat_message.edited;
      }
    }
    handleRefreshMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message.id);
      if (message) {
        message.incrementVersion();
      }
    }
    handleBulkDeleteMessage(data) {
      data.deleted_ids.forEach(deletedId => {
        this.handleDeleteMessage({
          deleted_id: deletedId,
          deleted_at: data.deleted_at
        });
      });
    }
    handleDeleteMessage(data) {
      const deletedId = data.deleted_id;
      const targetMsg = this.messagesManager.findMessage(deletedId);
      if (!targetMsg) {
        return;
      }
      if (this.currentUser.staff || this.currentUser.id === targetMsg.user.id) {
        targetMsg.deletedAt = data.deleted_at;
        targetMsg.deletedById = data.deleted_by_id;
        targetMsg.expanded = false;
      } else {
        this.messagesManager.removeMessage(targetMsg);
      }
      if (this.thread.currentUserMembership?.lastReadMessageId === targetMsg.id) {
        this.thread.currentUserMembership.lastReadMessageId = data.latest_not_deleted_message_id;
      }
    }
    handleRestoreMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message.id);
      if (message) {
        message.deletedAt = null;
      } else {
        const newMessage = _chatMessage.default.create(this.model, data.chat_message);
        newMessage.manager = this.messagesManager;
        this.messagesManager.addMessages([newMessage]);
      }
    }
    handleSelfFlaggedMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message_id);
      if (message) {
        message.userFlagStatus = data.user_flag_status;
      }
    }
    handleFlaggedMessage(data) {
      const message = this.messagesManager.findMessage(data.chat_message_id);
      if (message) {
        message.reviewableId = data.reviewable_id;
      }
    }
    handleNewThreadCreated(data) {
      this.thread.threadsManager.find(this.thread.id, data.thread_id, {
        fetchIfNotFound: true
      }).then(thread => {
        const channelOriginalMessage = this.thread.messagesManager.findMessage(thread.originalMessage.id);
        if (channelOriginalMessage) {
          channelOriginalMessage.thread = thread;
        }
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "messageBus", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "channel", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "onMessage", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onMessage"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/lib/chat-composer-buttons", ["exports", "discourse-i18n"], function (_exports, _discourseI18n) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.chatComposerButtons = chatComposerButtons;
  _exports.chatComposerButtonsDependentKeys = chatComposerButtonsDependentKeys;
  _exports.clearChatComposerButtons = clearChatComposerButtons;
  _exports.registerChatComposerButton = registerChatComposerButton;
  let _chatComposerButtons = {};
  function registerChatComposerButton(button) {
    if (!button.id) {
      throw new Error("Attempted to register a chat composer button with no id.");
    }
    if (_chatComposerButtons[button.id]) {
      return;
    }
    const defaultButton = {
      id: null,
      action: null,
      icon: null,
      title: null,
      translatedTitle: null,
      label: null,
      translatedLabel: null,
      ariaLabel: null,
      translatedAriaLabel: null,
      position: "inline",
      classNames: [],
      dependentKeys: [],
      displayed: true,
      disabled: false,
      priority: 0
    };
    const normalizedButton = Object.assign(defaultButton, button);
    if (!normalizedButton.icon && !normalizedButton.label && !normalizedButton.translatedLabel) {
      throw new Error(`Attempted to register a chat composer button: ${button.id} with no icon or label.`);
    }
    _chatComposerButtons[normalizedButton.id] = normalizedButton;
  }
  function computeButton(context, button, property) {
    const field = button[property];
    if (isFunction(field)) {
      return field.apply(context);
    }
    return field;
  }
  function isFunction(descriptor) {
    return descriptor && typeof descriptor === "function";
  }
  function chatComposerButtonsDependentKeys() {
    return [].concat(...Object.values(_chatComposerButtons).mapBy("dependentKeys").filter(Boolean));
  }
  function chatComposerButtons(composer, position, context) {
    return Object.values(_chatComposerButtons).filter(button => {
      let valid = computeButton(composer, button, "displayed") && computeButton(composer, button, "position") === position;
      if (button.context) {
        valid = valid && computeButton(composer, button, "context") === context;
      }
      return valid;
    }).map(button => {
      const result = {
        id: button.id
      };
      const label = computeButton(composer, button, "label");
      result.label = label ? label : computeButton(composer, button, "translatedLabel");
      const ariaLabel = computeButton(composer, button, "ariaLabel");
      if (ariaLabel) {
        result.ariaLabel = _discourseI18n.default.t(ariaLabel);
      } else {
        const translatedAriaLabel = computeButton(composer, button, "translatedAriaLabel");
        result.ariaLabel = translatedAriaLabel || result.label;
      }
      const title = computeButton(composer, button, "title");
      result.title = title ? _discourseI18n.default.t(title) : computeButton(composer, button, "translatedTitle");
      result.classNames = (computeButton(composer, button, "classNames") || []).join(" ");
      result.icon = computeButton(composer, button, "icon");
      result.disabled = computeButton(composer, button, "disabled");
      result.priority = computeButton(composer, button, "priority");
      if (isFunction(button.action)) {
        result.action = () => {
          button.action.apply(composer, [context]);
        };
      } else {
        const actionName = button.action;
        result.action = () => {
          composer[actionName](context);
        };
      }
      return result;
    });
  }
  function clearChatComposerButtons() {
    _chatComposerButtons = [];
  }
});
define("discourse/plugins/chat/discourse/lib/chat-constants", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.READ_INTERVAL_MS = _exports.PAST = _exports.FUTURE = _exports.DEFAULT_MESSAGE_PAGE_SIZE = void 0;
  const PAST = _exports.PAST = "past";
  const FUTURE = _exports.FUTURE = "future";
  const READ_INTERVAL_MS = _exports.READ_INTERVAL_MS = 1000;
  const DEFAULT_MESSAGE_PAGE_SIZE = _exports.DEFAULT_MESSAGE_PAGE_SIZE = 50;
});
define("discourse/plugins/chat/discourse/lib/chat-ios-hacks", ["exports", "@ember/runloop", "discourse/services/capabilities", "discourse-common/lib/later", "discourse/plugins/chat/discourse/lib/zoom-check"], function (_exports, _runloop, _capabilities, _later, _zoomCheck) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.bodyScrollFix = bodyScrollFix;
  _exports.stackingContextFix = stackingContextFix;
  // since -webkit-overflow-scrolling: touch can't be used anymore to disable momentum scrolling
  // we use different hacks to work around this
  // if you change any line in this method, make sure to test on iOS
  function stackingContextFix(scrollable, callback) {
    if (_capabilities.capabilities.isIOS) {
      scrollable.style.overflow = "hidden";
      scrollable.querySelectorAll(".chat-message-separator__text-container").forEach(container => container.style.zIndex = "1");
    }
    callback?.();
    if (_capabilities.capabilities.isIOS) {
      (0, _runloop.next)(() => {
        (0, _runloop.schedule)("afterRender", () => {
          scrollable.style.overflow = "auto";
          (0, _later.default)(() => {
            if (!scrollable) {
              return;
            }
            scrollable.querySelectorAll(".chat-message-separator__text-container").forEach(container => container.style.zIndex = "2");
          }, 50);
        });
      });
    }
  }
  function bodyScrollFix() {
    // when keyboard is visible this will ensure body
    // doesn’t scroll out of viewport
    if (_capabilities.capabilities.isIOS && document.documentElement.classList.contains("keyboard-visible") && !(0, _zoomCheck.default)()) {
      document.documentElement.scrollTo(0, 0);
    }
  }
});
define("discourse/plugins/chat/discourse/lib/chat-message-container", ["exports", "discourse/plugins/chat/discourse/components/chat-message"], function (_exports, _chatMessage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = chatMessageContainer;
  function chatMessageContainer(id, context) {
    let selector;
    if (context === _chatMessage.MESSAGE_CONTEXT_THREAD) {
      selector = `.chat-thread .chat-message-container[data-id="${id}"]`;
    } else {
      selector = `.chat-channel .chat-message-container[data-id="${id}"]`;
    }
    return document.querySelector(selector);
  }
});
define("discourse/plugins/chat/discourse/lib/chat-message-flag", ["exports", "@ember/application", "@ember/service", "discourse/lib/ajax-error", "discourse-common/lib/get-url", "discourse-i18n"], function (_exports, _application, _service, _ajaxError, _getUrl, _discourseI18n) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessageFlag = _exports.default = (_class = class ChatMessageFlag {
    constructor(owner) {
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      (0, _application.setOwner)(this, owner);
    }
    title() {
      return "flagging.title";
    }
    customSubmitLabel() {
      return "flagging.notify_action";
    }
    submitLabel() {
      return "chat.flagging.action";
    }
    targetsTopic() {
      return false;
    }
    editable() {
      return false;
    }
    _rewriteFlagDescriptions(flags) {
      return flags.map(flag => {
        flag.set("description", _discourseI18n.default.t(`chat.flags.${flag.name_key}`, {
          basePath: (0, _getUrl.default)("")
        }));
        return flag;
      });
    }
    flagsAvailable(flagModal) {
      let flagsAvailable = flagModal.site.flagTypes;
      flagsAvailable = flagsAvailable.filter(flag => {
        return flagModal.args.model.flagModel.availableFlags.includes(flag.name_key);
      });

      // "message user" option should be at the top
      const notifyUserIndex = flagsAvailable.indexOf(flagsAvailable.filterBy("name_key", "notify_user")[0]);
      if (notifyUserIndex !== -1) {
        const notifyUser = flagsAvailable[notifyUserIndex];
        flagsAvailable.splice(notifyUserIndex, 1);
        flagsAvailable.splice(0, 0, notifyUser);
      }
      return this._rewriteFlagDescriptions(flagsAvailable);
    }
    async create(flagModal, opts) {
      flagModal.args.closeModal();
      const channelId = flagModal.args.model.flagModel.channel.id;
      const messageId = flagModal.args.model.flagModel.id;
      try {
        await this.chatApi.flagMessage(channelId, messageId, {
          flag_type_id: flagModal.selected.id,
          message: opts.message,
          is_warning: opts.isWarning,
          take_action: opts.takeAction,
          queue_for_review: opts.queue_for_review
        });
      } catch (error) {
        (0, _ajaxError.popupAjaxError)(error);
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/lib/chat-message-interactor", ["exports", "@glimmer/tracking", "@ember/application", "@ember/object", "@ember/service", "discourse/components/modal/bookmark", "discourse/components/modal/flag", "discourse/lib/ajax-error", "discourse/lib/bookmark", "discourse/lib/utilities", "discourse/models/bookmark", "discourse-common/lib/get-url", "discourse-common/utils/decorators", "discourse-i18n", "discourse/plugins/chat/discourse/components/chat-message", "discourse/plugins/chat/discourse/lib/chat-message-flag", "discourse/plugins/chat/discourse/models/chat-message", "discourse/plugins/chat/discourse/models/chat-message-reaction"], function (_exports, _tracking, _application, _object, _service, _bookmark, _flag, _ajaxError, _bookmark2, _utilities, _bookmark3, _getUrl, _decorators, _discourseI18n, _chatMessage, _chatMessageFlag, _chatMessage2, _chatMessageReaction) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.removeChatComposerSecondaryActions = removeChatComposerSecondaryActions;
  _exports.resetRemovedChatComposerSecondaryActions = resetRemovedChatComposerSecondaryActions;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const removedSecondaryActions = new Set();
  function removeChatComposerSecondaryActions(actionIds) {
    actionIds.forEach(id => removedSecondaryActions.add(id));
  }
  function resetRemovedChatComposerSecondaryActions() {
    removedSecondaryActions.clear();
  }
  let ChatMessageInteractor = _exports.default = (_class = class ChatMessageInteractor {
    constructor(owner, message, context) {
      _initializerDefineProperty(this, "appEvents", _descriptor, this);
      _initializerDefineProperty(this, "dialog", _descriptor2, this);
      _initializerDefineProperty(this, "chat", _descriptor3, this);
      _initializerDefineProperty(this, "chatEmojiReactionStore", _descriptor4, this);
      _initializerDefineProperty(this, "chatEmojiPickerManager", _descriptor5, this);
      _initializerDefineProperty(this, "chatChannelComposer", _descriptor6, this);
      _initializerDefineProperty(this, "chatThreadComposer", _descriptor7, this);
      _initializerDefineProperty(this, "chatChannelPane", _descriptor8, this);
      _initializerDefineProperty(this, "chatThreadPane", _descriptor9, this);
      _initializerDefineProperty(this, "chatApi", _descriptor10, this);
      _initializerDefineProperty(this, "currentUser", _descriptor11, this);
      _initializerDefineProperty(this, "site", _descriptor12, this);
      _initializerDefineProperty(this, "router", _descriptor13, this);
      _initializerDefineProperty(this, "modal", _descriptor14, this);
      _initializerDefineProperty(this, "capabilities", _descriptor15, this);
      _initializerDefineProperty(this, "toasts", _descriptor16, this);
      _initializerDefineProperty(this, "message", _descriptor17, this);
      _initializerDefineProperty(this, "context", _descriptor18, this);
      _defineProperty(this, "cachedFavoritesReactions", null);
      (0, _application.setOwner)(this, owner);
      this.message = message;
      this.context = context;
      this.cachedFavoritesReactions = this.chatEmojiReactionStore.favorites;
    }
    get pane() {
      return this.context === _chatMessage.MESSAGE_CONTEXT_THREAD ? this.chatThreadPane : this.chatChannelPane;
    }
    get emojiReactions() {
      let favorites = this.cachedFavoritesReactions;

      // may be a {} if no defaults defined in some production builds
      if (!favorites || !favorites.slice) {
        return [];
      }
      return favorites.slice(0, 3).map(emoji => {
        return this.message.reactions.find(reaction => reaction.emoji === emoji) || _chatMessageReaction.default.create({
          emoji
        });
      });
    }
    get canEdit() {
      return !this.message.deletedAt && this.currentUser.id === this.message.user.id && this.message.channel?.canModifyMessages?.(this.currentUser);
    }
    get canInteractWithMessage() {
      return !this.message?.deletedAt && this.message?.channel?.canModifyMessages(this.currentUser);
    }
    get canRestoreMessage() {
      return this.message?.deletedAt && (this.currentUser.staff || this.message?.user?.id === this.currentUser.id && this.message?.deletedById === this.currentUser.id) && this.message.channel?.canModifyMessages?.(this.currentUser);
    }
    get canBookmark() {
      return this.message?.channel?.canModifyMessages?.(this.currentUser);
    }
    get canReply() {
      return this.canInteractWithMessage && this.context !== _chatMessage.MESSAGE_CONTEXT_THREAD;
    }
    get canReact() {
      return this.canInteractWithMessage;
    }
    get canFlagMessage() {
      return this.currentUser.id !== this.message?.user?.id && this.message?.userFlagStatus === undefined && this.message.channel?.canFlag && !this.message?.chatWebhookEvent && !this.message?.deletedAt;
    }
    get canRebakeMessage() {
      return this.currentUser.staff && this.message.channel?.canModifyMessages?.(this.currentUser);
    }
    get canDeleteMessage() {
      return this.canDelete && !this.message?.deletedAt && this.message.channel?.canModifyMessages?.(this.currentUser);
    }
    get canDelete() {
      return this.currentUser.id === this.message.user.id ? this.message.channel?.canDeleteSelf : this.message.channel?.canDeleteOthers;
    }
    get composer() {
      return this.context === _chatMessage.MESSAGE_CONTEXT_THREAD ? this.chatThreadComposer : this.chatChannelComposer;
    }
    get secondaryActions() {
      const buttons = [];
      buttons.push({
        id: "copyLink",
        name: _discourseI18n.default.t("chat.copy_link"),
        icon: "link"
      });
      if (this.site.mobileView) {
        buttons.push({
          id: "copyText",
          name: _discourseI18n.default.t("chat.copy_text"),
          icon: "clipboard"
        });
      }
      if (this.canEdit) {
        buttons.push({
          id: "edit",
          name: _discourseI18n.default.t("chat.edit"),
          icon: "pencil-alt"
        });
      }
      if (!this.pane.selectingMessages) {
        buttons.push({
          id: "select",
          name: _discourseI18n.default.t("chat.select"),
          icon: "tasks"
        });
      }
      if (this.canFlagMessage) {
        buttons.push({
          id: "flag",
          name: _discourseI18n.default.t("chat.flag"),
          icon: "flag"
        });
      }
      if (this.canDeleteMessage) {
        buttons.push({
          id: "delete",
          name: _discourseI18n.default.t("chat.delete"),
          icon: "trash-alt"
        });
      }
      if (this.canRestoreMessage) {
        buttons.push({
          id: "restore",
          name: _discourseI18n.default.t("chat.restore"),
          icon: "undo"
        });
      }
      if (this.canRebakeMessage) {
        buttons.push({
          id: "rebake",
          name: _discourseI18n.default.t("chat.rebake_message"),
          icon: "sync-alt"
        });
      }
      return buttons.reject(button => removedSecondaryActions.has(button.id));
    }
    select(checked = true) {
      this.message.selected = checked;
      this.pane.onSelectMessage(this.message);
    }
    bulkSelect(checked) {
      const manager = this.message.manager;
      const lastSelectedIndex = manager.findIndexOfMessage(this.pane.lastSelectedMessage.id);
      const newlySelectedIndex = manager.findIndexOfMessage(this.message.id);
      const sortedIndices = [lastSelectedIndex, newlySelectedIndex].sort((a, b) => a - b);
      for (let i = sortedIndices[0]; i <= sortedIndices[1]; i++) {
        manager.messages[i].selected = checked;
      }
    }
    copyText() {
      (0, _utilities.clipboardCopy)(this.message.message);
      this.toasts.success({
        duration: 3000,
        data: {
          message: _discourseI18n.default.t("chat.text_copied")
        }
      });
    }
    copyLink() {
      const {
        protocol,
        host
      } = window.location;
      const channelId = this.message.channel.id;
      const threadId = this.message.thread?.id;
      let url;
      if (this.context === _chatMessage.MESSAGE_CONTEXT_THREAD && threadId) {
        url = (0, _getUrl.default)(`/chat/c/-/${channelId}/t/${threadId}/${this.message.id}`);
      } else {
        url = (0, _getUrl.default)(`/chat/c/-/${channelId}/${this.message.id}`);
      }
      url = url.indexOf("/") === 0 ? protocol + "//" + host + url : url;
      (0, _utilities.clipboardCopy)(url);
      this.toasts.success({
        duration: 1500,
        data: {
          message: _discourseI18n.default.t("chat.link_copied")
        }
      });
    }
    react(emoji, reactAction) {
      if (!this.chat.userCanInteractWithChat) {
        return;
      }
      if (this.pane.reacting) {
        return;
      }
      if (this.capabilities.userHasBeenActive && this.capabilities.canVibrate) {
        navigator.vibrate(5);
      }
      if (this.site.mobileView) {
        this.chat.activeMessage = null;
      }
      if (reactAction === _chatMessageReaction.REACTIONS.add) {
        this.chatEmojiReactionStore.track(`:${emoji}:`);
      }
      this.pane.reacting = true;
      this.message.react(emoji, reactAction, this.currentUser, this.currentUser.id);
      return this.chatApi.publishReaction(this.message.channel.id, this.message.id, emoji, reactAction).catch(errResult => {
        (0, _ajaxError.popupAjaxError)(errResult);
        this.message.react(emoji, _chatMessageReaction.REACTIONS.remove, this.currentUser, this.currentUser.id);
      }).finally(() => {
        this.pane.reacting = false;
      });
    }
    toggleBookmark() {
      this.modal.show(_bookmark.default, {
        model: {
          bookmark: new _bookmark2.BookmarkFormData(this.message.bookmark || _bookmark3.default.createFor(this.currentUser, "Chat::Message", this.message.id)),
          afterSave: savedData => {
            const bookmark = _bookmark3.default.create(savedData);
            this.message.bookmark = bookmark;
            this.appEvents.trigger("bookmarks:changed", savedData, bookmark.attachedTo());
          },
          afterDelete: () => {
            this.message.bookmark = null;
          }
        }
      });
    }
    flag() {
      const model = new _chatMessage2.default(this.message.channel, this.message);
      model.username = this.message.user?.username;
      model.user_id = this.message.user?.id;
      this.modal.show(_flag.default, {
        model: {
          flagTarget: new _chatMessageFlag.default((0, _application.getOwner)(this)),
          flagModel: model,
          setHidden: () => model.set("hidden", true)
        }
      });
    }
    delete() {
      return this.chatApi.trashMessage(this.message.channel.id, this.message.id).catch(_ajaxError.popupAjaxError);
    }
    restore() {
      return this.chatApi.restoreMessage(this.message.channel.id, this.message.id).catch(_ajaxError.popupAjaxError);
    }
    rebake() {
      return this.chatApi.rebakeMessage(this.message.channel.id, this.message.id).catch(_ajaxError.popupAjaxError);
    }
    reply() {
      this.composer.replyTo(this.message);
    }
    edit() {
      this.composer.edit(this.message);
    }
    openEmojiPicker(_, {
      target
    }) {
      const pickerState = {
        didSelectEmoji: this.selectReaction,
        trigger: target,
        context: "chat-channel-message"
      };
      this.chatEmojiPickerManager.open(pickerState);
    }
    selectReaction(emoji) {
      if (!this.chat.userCanInteractWithChat) {
        return;
      }
      this.react(emoji, _chatMessageReaction.REACTIONS.add);
    }
    handleSecondaryActions(id) {
      this[id](this.message);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "appEvents", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "dialog", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatEmojiReactionStore", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "chatEmojiPickerManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "chatChannelComposer", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "chatThreadComposer", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "chatChannelPane", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "chatThreadPane", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "modal", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "toasts", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, "message", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, "context", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "react", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "react"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleBookmark", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleBookmark"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "flag", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "flag"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "delete", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "delete"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "restore", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "restore"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "rebake", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "rebake"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "reply", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "reply"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "edit", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "edit"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openEmojiPicker", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "openEmojiPicker"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "selectReaction", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "selectReaction"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleSecondaryActions", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "handleSecondaryActions"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/lib/chat-messages-loader", ["exports", "@glimmer/tracking", "@ember/application", "@ember/service", "discourse/lib/ajax-error", "discourse/plugins/chat/discourse/lib/chat-constants", "discourse/plugins/chat/discourse/models/chat-channel"], function (_exports, _tracking, _application, _service, _ajaxError, _chatConstants, _chatChannel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _apiFunction, _cleanArgs, _computeNextTargetMessage;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessagesLoader = _exports.default = (_class = (_apiFunction = /*#__PURE__*/new WeakSet(), _cleanArgs = /*#__PURE__*/new WeakSet(), _computeNextTargetMessage = /*#__PURE__*/new WeakSet(), class ChatMessagesLoader {
    constructor(owner, _model) {
      _classPrivateMethodInitSpec(this, _computeNextTargetMessage);
      _classPrivateMethodInitSpec(this, _cleanArgs);
      _classPrivateMethodInitSpec(this, _apiFunction);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "loading", _descriptor2, this);
      _initializerDefineProperty(this, "canLoadMorePast", _descriptor3, this);
      _initializerDefineProperty(this, "canLoadMoreFuture", _descriptor4, this);
      _initializerDefineProperty(this, "fetchedOnce", _descriptor5, this);
      (0, _application.setOwner)(this, owner);
      this.model = _model;
    }
    get loadedPast() {
      return this.canLoadMorePast === false && this.fetchedOnce;
    }
    async loadMore(args = {}) {
      if (this.canLoadMoreFuture === false && args.direction === _chatConstants.FUTURE) {
        return;
      }
      if (this.canLoadMorePast === false && args.direction === _chatConstants.PAST) {
        return;
      }
      const nextTargetMessage = _classPrivateMethodGet(this, _computeNextTargetMessage, _computeNextTargetMessage2).call(this, args.direction, this.model);
      args = {
        direction: args.direction,
        page_size: _chatConstants.DEFAULT_MESSAGE_PAGE_SIZE,
        target_message_id: nextTargetMessage?.id
      };
      args = _classPrivateMethodGet(this, _cleanArgs, _cleanArgs2).call(this, args);
      let result;
      try {
        this.loading = true;
        result = await _classPrivateMethodGet(this, _apiFunction, _apiFunction2).call(this, args);
        this.canLoadMoreFuture = result.meta.can_load_more_future;
        this.canLoadMorePast = result.meta.can_load_more_past;
      } catch (error) {
        (0, _ajaxError.popupAjaxError)(error);
      } finally {
        this.loading = false;
      }
      return result;
    }
    async load(args = {}) {
      this.canLoadMorePast = true;
      this.canLoadMoreFuture = true;
      this.fetchedOnce = false;
      this.loading = true;
      args.page_size ??= _chatConstants.DEFAULT_MESSAGE_PAGE_SIZE;
      args = _classPrivateMethodGet(this, _cleanArgs, _cleanArgs2).call(this, args);
      let result;
      try {
        result = await _classPrivateMethodGet(this, _apiFunction, _apiFunction2).call(this, args);
        this.canLoadMoreFuture = result.meta.can_load_more_future;
        this.canLoadMorePast = result.meta.can_load_more_past;
        this.fetchedOnce = true;
      } catch (error) {
        (0, _ajaxError.popupAjaxError)(error);
      } finally {
        this.loading = false;
      }
      return result;
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "loading", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "canLoadMorePast", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "canLoadMoreFuture", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "fetchedOnce", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  })), _class);
  function _apiFunction2(args = {}) {
    if (this.model instanceof _chatChannel.default) {
      return this.chatApi.channelMessages(this.model.id, args);
    } else {
      return this.chatApi.channelThreadMessages(this.model.channel.id, this.model.id, args);
    }
  }
  function _cleanArgs2(args) {
    return Object.keys(args).filter(k => args[k] != null).reduce((a, k) => ({
      ...a,
      [k]: args[k]
    }), {});
  }
  function _computeNextTargetMessage2(direction, model) {
    return direction === _chatConstants.PAST ? model.messagesManager.messages.find(message => !message.staged) : model.messagesManager.messages.findLast(message => !message.staged);
  }
});
define("discourse/plugins/chat/discourse/lib/chat-messages-manager", ["exports", "@glimmer/tracking", "@ember/application"], function (_exports, _tracking, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessagesManager = _exports.default = (_class = class ChatMessagesManager {
    constructor(owner) {
      _initializerDefineProperty(this, "messages", _descriptor, this);
      (0, _application.setOwner)(this, owner);
    }
    get stagedMessages() {
      return this.messages.filterBy("staged");
    }
    get selectedMessages() {
      return this.messages.filterBy("selected");
    }
    clearSelectedMessages() {
      this.selectedMessages.forEach(message => message.selected = false);
    }
    clear() {
      this.messages = [];
    }
    addMessages(messages = []) {
      this.messages = this.messages.concat(messages).uniqBy("id").sort((a, b) => a.createdAt - b.createdAt);
    }
    findMessage(messageId) {
      return this.messages.find(message => message.id === parseInt(messageId, 10));
    }
    findFirstMessageOfDay(a) {
      return this.messages.find(b => a.getFullYear() === b.createdAt.getFullYear() && a.getMonth() === b.createdAt.getMonth() && a.getDate() === b.createdAt.getDate());
    }
    removeMessage(message) {
      return this.messages.removeObject(message);
    }
    findStagedMessage(stagedMessageId) {
      return this.stagedMessages.find(message => message.id === stagedMessageId);
    }
    findIndexOfMessage(id) {
      return this.messages.findIndex(m => m.id === id);
    }
    findLastMessage() {
      return this.messages.findLast(message => !message.deletedAt);
    }
    findLastUserMessage(user) {
      return this.messages.findLast(message => message.user.id === user.id && !message.deletedAt);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "messages", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _applyDecoratedDescriptor(_class.prototype, "stagedMessages", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "stagedMessages"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "selectedMessages", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "selectedMessages"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/lib/chat-notification-levels", ["exports", "discourse/lib/notification-levels"], function (_exports, _notificationLevels) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.threadNotificationButtonLevels = void 0;
  const threadNotificationButtonLevels = _exports.threadNotificationButtonLevels = [_notificationLevels.NotificationLevels.TRACKING, _notificationLevels.NotificationLevels.REGULAR].map(_notificationLevels.buttonDetails);
});
define("discourse/plugins/chat/discourse/lib/chat-threads-manager", ["exports", "@glimmer/tracking", "@ember/application", "@ember/service", "@ember-compat/tracked-built-ins", "rsvp", "discourse/plugins/chat/discourse/models/chat-thread"], function (_exports, _tracking, _application, _service, _trackedBuiltIns, _rsvp, _chatThread) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _cache, _getFromCache, _fetchFromServer;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  /*
    The ChatThreadsManager is responsible for managing the loaded chat threads
    for a ChatChannel model.
  
    It provides helpers to facilitate using and managing loaded threads instead of constantly
    fetching them from the server.
  */
  let ChatThreadsManager = _exports.default = (_class = (_cache = /*#__PURE__*/new WeakSet(), _getFromCache = /*#__PURE__*/new WeakSet(), _fetchFromServer = /*#__PURE__*/new WeakSet(), class ChatThreadsManager {
    constructor(owner) {
      _classPrivateMethodInitSpec(this, _fetchFromServer);
      _classPrivateMethodInitSpec(this, _getFromCache);
      _classPrivateMethodInitSpec(this, _cache);
      _initializerDefineProperty(this, "chatTrackingStateManager", _descriptor, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor2, this);
      _initializerDefineProperty(this, "chatApi", _descriptor3, this);
      _initializerDefineProperty(this, "_cached", _descriptor4, this);
      _initializerDefineProperty(this, "_unreadThreadOverview", _descriptor5, this);
      (0, _application.setOwner)(this, owner);
    }
    get unreadThreadCount() {
      return this.unreadThreadOverview.size;
    }
    get unreadThreadOverview() {
      return this._unreadThreadOverview;
    }
    set unreadThreadOverview(unreadThreadOverview) {
      this._unreadThreadOverview.clear();
      for (const [threadId, lastReplyCreatedAt] of Object.entries(unreadThreadOverview)) {
        this.markThreadUnread(threadId, lastReplyCreatedAt);
      }
    }
    markThreadUnread(threadId, lastReplyCreatedAt) {
      this.unreadThreadOverview.set(parseInt(threadId, 10), new Date(lastReplyCreatedAt));
    }
    get threads() {
      return Object.values(this._cached);
    }
    async find(channelId, threadId, options = {
      fetchIfNotFound: true
    }) {
      const existingThread = _classPrivateMethodGet(this, _getFromCache, _getFromCache2).call(this, threadId);
      if (existingThread) {
        return _rsvp.default.resolve(existingThread);
      } else if (options.fetchIfNotFound) {
        return _classPrivateMethodGet(this, _fetchFromServer, _fetchFromServer2).call(this, channelId, threadId);
      } else {
        return _rsvp.default.resolve();
      }
    }
    remove(threadObject) {
      delete this._cached[threadObject.id];
    }
    add(channel, threadObject, options = {}) {
      let model;
      if (!options.replace) {
        model = _classPrivateMethodGet(this, _getFromCache, _getFromCache2).call(this, threadObject.id);
      }
      if (!model) {
        if (threadObject instanceof _chatThread.default) {
          model = threadObject;
        } else {
          model = _chatThread.default.create(channel, threadObject);
        }
        _classPrivateMethodGet(this, _cache, _cache2).call(this, model);
      }
      if (threadObject?.meta?.message_bus_last_ids?.thread_message_bus_last_id) {
        model.threadMessageBusLastId = threadObject.meta.message_bus_last_ids.thread_message_bus_last_id;
      }
      return model;
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatTrackingStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "_cached", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return new _trackedBuiltIns.TrackedObject();
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "_unreadThreadOverview", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return new _trackedBuiltIns.TrackedMap();
    }
  }), _applyDecoratedDescriptor(_class.prototype, "threads", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "threads"), _class.prototype)), _class);
  function _cache2(thread) {
    this._cached[thread.id] = thread;
  }
  function _getFromCache2(id) {
    return this._cached[id];
  }
  async function _fetchFromServer2(channelId, threadId) {
    return this.chatApi.thread(channelId, threadId).then(result => {
      return this.chatChannelsManager.find(channelId).then(channel => {
        return channel.threadsManager.add(channel, result.thread);
      });
    });
  }
});
define("discourse/plugins/chat/discourse/lib/chat-user-preferences", ["exports", "discourse/plugins/chat/discourse/controllers/preferences-chat"], function (_exports, _preferencesChat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.hasChatIndicator = hasChatIndicator;
  function hasChatIndicator(user) {
    const pref = user.user_option.chat_header_indicator_preference;
    return {
      ALL_NEW: pref === _preferencesChat.HEADER_INDICATOR_PREFERENCE_ALL_NEW,
      DM_AND_MENTIONS: pref === _preferencesChat.HEADER_INDICATOR_PREFERENCE_DM_AND_MENTIONS,
      ONLY_MENTIONS: pref === _preferencesChat.HEADER_INDICATOR_PREFERENCE_ONLY_MENTIONS,
      NEVER: pref === _preferencesChat.HEADER_INDICATOR_PREFERENCE_NEVER
    };
  }
});
define("discourse/plugins/chat/discourse/lib/check-message-visibility", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.checkMessageBottomVisibility = checkMessageBottomVisibility;
  _exports.checkMessageTopVisibility = checkMessageTopVisibility;
  function checkMessageBottomVisibility(list, message) {
    const distanceToTop = window.pageYOffset + list.getBoundingClientRect().top;
    const bounding = message.getBoundingClientRect();
    return bounding.bottom - distanceToTop <= list.clientHeight + 1;
  }
  function checkMessageTopVisibility(list, message) {
    const distanceToTop = window.pageYOffset + list.getBoundingClientRect().top;
    const bounding = message.getBoundingClientRect();
    return bounding.top - distanceToTop >= -1;
  }
});
define("discourse/plugins/chat/discourse/lib/collection", ["exports", "@glimmer/tracking", "rsvp", "discourse/lib/ajax", "discourse-common/utils/decorators"], function (_exports, _tracking, _rsvp, _ajax, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  let _Symbol$iterator;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _fetch;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Handles a paginated API response.
   */
  let Collection = _exports.default = (_class = (_fetch = /*#__PURE__*/new WeakSet(), _Symbol$iterator = Symbol.iterator, class Collection {
    constructor(resourceURL, handler, params = {}) {
      _classPrivateMethodInitSpec(this, _fetch);
      _initializerDefineProperty(this, "items", _descriptor, this);
      _initializerDefineProperty(this, "meta", _descriptor2, this);
      _initializerDefineProperty(this, "loading", _descriptor3, this);
      _initializerDefineProperty(this, "fetchedOnce", _descriptor4, this);
      this._resourceURL = resourceURL;
      this._handler = handler;
      this._params = params;
      this._fetchedAll = false;
    }
    get loadMoreURL() {
      return this.meta?.load_more_url;
    }
    get totalRows() {
      return this.meta?.total_rows;
    }
    get length() {
      return this.items?.length;
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols
    [_Symbol$iterator]() {
      let index = 0;
      return {
        next: () => {
          if (index < this.length) {
            return {
              value: this.items[index++],
              done: false
            };
          } else {
            return {
              done: true
            };
          }
        }
      };
    }

    /**
     * Loads first batch of results
     * @returns {Promise}
     */
    load(params = {}) {
      if (this.loading || this._fetchedAll || this.totalRows && this.items.length >= this.totalRows) {
        return _rsvp.Promise.resolve();
      }
      this.loading = true;
      let endpoint;
      if (this.loadMoreURL) {
        endpoint = this.loadMoreURL;
      } else {
        const filteredQueryParams = Object.entries(params).filter(([, v]) => v !== undefined);
        const queryString = new URLSearchParams(filteredQueryParams).toString();
        endpoint = this._resourceURL + (queryString ? `?${queryString}` : "");
      }
      return _classPrivateMethodGet(this, _fetch, _fetch2).call(this, endpoint).then(result => {
        const items = this._handler(result);
        if (items.length) {
          this.items = (this.items ?? []).concat(items);
        }
        if (!items.length || items.length < params.limit) {
          this._fetchedAll = true;
        }
        this.meta = result.meta;
        this.fetchedOnce = true;
      }).finally(() => {
        this.loading = false;
      });
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "items", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "meta", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return {};
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "loading", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "fetchedOnce", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "load", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "load"), _class.prototype)), _class);
  function _fetch2(url) {
    return (0, _ajax.ajax)(url, {
      type: "GET",
      data: this._params
    });
  }
});
define("discourse/plugins/chat/discourse/lib/fabricators", ["exports", "discourse/models/bookmark", "discourse/models/category", "discourse/models/group", "discourse/models/user", "discourse/plugins/chat/discourse/models/chat-channel", "discourse/plugins/chat/discourse/models/chat-direct-message", "discourse/plugins/chat/discourse/models/chat-message", "discourse/plugins/chat/discourse/models/chat-message-reaction", "discourse/plugins/chat/discourse/models/chat-thread", "discourse/plugins/chat/discourse/models/chat-thread-preview"], function (_exports, _bookmark, _category, _group, _user, _chatChannel, _chatDirectMessage, _chatMessage, _chatMessageReaction, _chatThread, _chatThreadPreview) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /*
  Fabricators are used to create fake data for testing purposes.
  The following fabricators are available in lib folder to allow
  styleguide to use them, and eventually to generate dummy data
  in a placeholder component. It should not be used for any other case.
  */

  let sequence = 0;
  function messageFabricator(args = {}) {
    const channel = args.channel || channelFabricator();
    const message = _chatMessage.default.create(channel, Object.assign({
      id: args.id || sequence++,
      user: args.user || userFabricator(),
      message: args.message || "@discobot **abc**defghijklmnopqrstuvwxyz [discourse](discourse.org) :rocket: ",
      created_at: args.created_at || moment()
    }, args));
    const excerptLength = 50;
    const text = message.message.toString();
    if (text.length <= excerptLength) {
      message.excerpt = text;
    } else {
      message.excerpt = text.slice(0, excerptLength) + "...";
    }
    return message;
  }
  function channelFabricator(args = {}) {
    const id = args.id || sequence++;
    const chatable = args.chatable || categoryFabricator();
    const channel = _chatChannel.default.create({
      id,
      chatable_type: (chatable instanceof _category.default ? _chatChannel.CHATABLE_TYPES.categoryChannel : _chatChannel.CHATABLE_TYPES.directMessageChannel) || chatable?.type || args.chatable_type,
      chatable_id: chatable?.id || args.chatable_id,
      title: args.title ? args.title : chatable instanceof _category.default ? "General" : null,
      description: args.description,
      chatable,
      status: args.status || _chatChannel.CHANNEL_STATUSES.open,
      slug: chatable?.slug || chatable instanceof _category.default ? "general" : null,
      meta: Object.assign({
        can_delete_self: true
      }, args.meta || {}),
      archive_failed: args.archive_failed ?? false,
      memberships_count: args.memberships_count ?? 0
    });
    channel.lastMessage = messageFabricator({
      channel
    });
    return channel;
  }
  function categoryFabricator(args = {}) {
    return _category.default.create({
      id: args.id || sequence++,
      color: args.color || "D56353",
      read_restricted: args.read_restricted ?? false,
      name: args.name || "General",
      slug: args.slug || "general"
    });
  }
  function directMessageFabricator(args = {}) {
    return _chatDirectMessage.default.create({
      group: args.group ?? false,
      users: args.users ?? [userFabricator(), userFabricator()]
    });
  }
  function directMessageChannelFabricator(args = {}) {
    const directMessage = args.chatable || directMessageFabricator({
      id: args.chatable_id || sequence++,
      group: args.group ?? false,
      users: args.users
    });
    return channelFabricator(Object.assign(args, {
      chatable_type: _chatChannel.CHATABLE_TYPES.directMessageChannel,
      chatable_id: directMessage.id,
      chatable: directMessage,
      memberships_count: directMessage.users.length
    }));
  }
  function userFabricator(args = {}) {
    return _user.default.create({
      id: args.id || sequence++,
      username: args.username || "hawk",
      name: args.name,
      avatar_template: "/letter_avatar_proxy/v3/letter/t/41988e/{size}.png",
      suspended_till: args.suspended_till
    });
  }
  function bookmarkFabricator(args = {}) {
    return _bookmark.default.create({
      id: args.id || sequence++
    });
  }
  function threadFabricator(args = {}) {
    const channel = args.channel || channelFabricator();
    return _chatThread.default.create(channel, {
      id: args.id || sequence++,
      title: args.title,
      original_message: args.original_message || messageFabricator({
        channel
      }),
      preview: args.preview || threadPreviewFabricator({
        channel
      })
    });
  }
  function threadPreviewFabricator(args = {}) {
    return _chatThreadPreview.default.create({
      last_reply_id: args.last_reply_id || sequence++,
      last_reply_created_at: args.last_reply_created_at || Date.now(),
      last_reply_excerpt: args.last_reply_excerpt || "This is a reply",
      participant_count: args.participant_count ?? 0,
      participant_users: args.participant_users ?? []
    });
  }
  function reactionFabricator(args = {}) {
    return _chatMessageReaction.default.create({
      count: args.count ?? 1,
      users: args.users || [userFabricator()],
      emoji: args.emoji || "heart",
      reacted: args.reacted ?? false
    });
  }
  function groupFabricator(args = {}) {
    return _group.default.create({
      name: args.name || "Engineers"
    });
  }
  function uploadFabricator() {
    return {
      extension: "jpeg",
      filesize: 126177,
      height: 800,
      human_filesize: "123 KB",
      id: 202,
      original_filename: "avatar.PNG.jpg",
      retain_hours: null,
      short_path: "/images/avatar.png",
      short_url: "upload://yoj8pf9DdIeHRRULyw7i57GAYdz.jpeg",
      thumbnail_height: 320,
      thumbnail_width: 690,
      url: "/images/avatar.png",
      width: 1920
    };
  }
  var _default = _exports.default = {
    bookmark: bookmarkFabricator,
    user: userFabricator,
    channel: channelFabricator,
    directMessageChannel: directMessageChannelFabricator,
    message: messageFabricator,
    thread: threadFabricator,
    threadPreview: threadPreviewFabricator,
    reaction: reactionFabricator,
    upload: uploadFabricator,
    category: categoryFabricator,
    directMessage: directMessageFabricator,
    group: groupFabricator
  };
});
define("discourse/plugins/chat/discourse/lib/get-reaction-text", ["exports", "discourse-i18n"], function (_exports, _discourseI18n) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MAX_DISPLAYED_USERNAMES = void 0;
  _exports.getReactionText = getReactionText;
  const MAX_DISPLAYED_USERNAMES = _exports.MAX_DISPLAYED_USERNAMES = 15;
  function filterUsernames(users, currentUser) {
    return users.filter(user => user.id !== currentUser?.id).slice(0, MAX_DISPLAYED_USERNAMES).mapBy("username");
  }
  function reactionIncludingCurrentUser(reaction, currentUser) {
    if (reaction.count === 1) {
      return _discourseI18n.default.t("chat.reactions.only_you", {
        emoji: reaction.emoji
      });
    }
    const usernames = filterUsernames(reaction.users, currentUser);
    if (reaction.count === 2) {
      return _discourseI18n.default.t("chat.reactions.you_and_single_user", {
        emoji: reaction.emoji,
        username: usernames.pop()
      });
    }

    // - 1 for "you"
    const unnamedUserCount = reaction.count - usernames.length - 1;
    if (unnamedUserCount > 0) {
      return _discourseI18n.default.t("chat.reactions.you_multiple_users_and_more", {
        emoji: reaction.emoji,
        commaSeparatedUsernames: joinUsernames(usernames),
        count: unnamedUserCount
      });
    }
    return _discourseI18n.default.t("chat.reactions.you_and_multiple_users", {
      emoji: reaction.emoji,
      username: usernames.pop(),
      commaSeparatedUsernames: joinUsernames(usernames)
    });
  }
  function reactionText(reaction, currentUser) {
    const usernames = filterUsernames(reaction.users, currentUser);
    if (reaction.count === 1) {
      return _discourseI18n.default.t("chat.reactions.single_user", {
        emoji: reaction.emoji,
        username: usernames.pop()
      });
    }
    const unnamedUserCount = reaction.count - usernames.length;
    if (unnamedUserCount > 0) {
      return _discourseI18n.default.t("chat.reactions.multiple_users_and_more", {
        emoji: reaction.emoji,
        commaSeparatedUsernames: joinUsernames(usernames),
        count: unnamedUserCount
      });
    }
    return _discourseI18n.default.t("chat.reactions.multiple_users", {
      emoji: reaction.emoji,
      username: usernames.pop(),
      commaSeparatedUsernames: joinUsernames(usernames)
    });
  }
  function joinUsernames(usernames) {
    return usernames.join(_discourseI18n.default.t("word_connector.comma"));
  }
  function getReactionText(reaction, currentUser) {
    if (reaction.count === 0) {
      return;
    }
    if (reaction.reacted) {
      return reactionIncludingCurrentUser(reaction, currentUser);
    } else {
      return reactionText(reaction, currentUser);
    }
  }
});
define("discourse/plugins/chat/discourse/lib/get-user-chat-separate-sidebar-mode", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getUserChatSeparateSidebarMode = getUserChatSeparateSidebarMode;
  function getUserChatSeparateSidebarMode(user) {
    let mode = user?.get("user_option.chat_separate_sidebar_mode");
    if (mode === "default") {
      mode = user.siteSettings.chat_separate_sidebar_mode;
    }
    return {
      never: "never" === mode,
      always: "always" === mode,
      fullscreen: "fullscreen" === mode
    };
  }
});
define("discourse/plugins/chat/discourse/lib/hashtag-types/channel", ["exports", "@ember/service", "discourse/lib/hashtag-types/base", "discourse-common/lib/icon-library"], function (_exports, _service, _base, _iconLibrary) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChannelHashtagType = _exports.default = (_class = class ChannelHashtagType extends _base.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor, this);
      _initializerDefineProperty(this, "currentUser", _descriptor2, this);
    }
    get type() {
      return "channel";
    }
    get preloadedData() {
      if (this.currentUser) {
        return this.chatChannelsManager.publicMessageChannels;
      } else {
        return [];
      }
    }
    generateColorCssClasses(channel) {
      return [`.d-icon.hashtag-color--${this.type}-${channel.id} { color: var(--category-${channel.chatable.id}-color); }`];
    }
    generateIconHTML(hashtag) {
      const hashtagId = parseInt(hashtag.id, 10);
      const colorCssClass = !this.preloadedData.mapBy("id").includes(hashtagId) ? "hashtag-missing" : `hashtag-color--${this.type}-${hashtag.id}`;
      return (0, _iconLibrary.iconHTML)(hashtag.icon, {
        class: colorCssClass
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/lib/init-sidebar-state", ["exports", "discourse/services/sidebar-state", "discourse/plugins/chat/discourse/lib/get-user-chat-separate-sidebar-mode"], function (_exports, _sidebarState, _getUserChatSeparateSidebarMode) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CHAT_PANEL = void 0;
  _exports.initSidebarState = initSidebarState;
  const CHAT_PANEL = _exports.CHAT_PANEL = "chat";
  function initSidebarState(api, user) {
    if (api.getSidebarPanel()?.key === _sidebarState.ADMIN_PANEL) {
      return;
    }
    api.setSidebarPanel(_sidebarState.MAIN_PANEL);
    const chatSeparateSidebarMode = (0, _getUserChatSeparateSidebarMode.getUserChatSeparateSidebarMode)(user);
    if (chatSeparateSidebarMode.fullscreen) {
      api.setCombinedSidebarMode();
      api.showSidebarSwitchPanelButtons();
    } else if (chatSeparateSidebarMode.always) {
      api.setSeparatedSidebarMode();
    } else {
      api.setCombinedSidebarMode();
      api.hideSidebarSwitchPanelButtons();
    }
  }
});
define("discourse/plugins/chat/discourse/lib/scroll-helpers", ["exports", "@ember/runloop", "discourse/plugins/chat/discourse/lib/chat-ios-hacks"], function (_exports, _runloop, _chatIosHacks) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.scrollListToBottom = scrollListToBottom;
  _exports.scrollListToMessage = scrollListToMessage;
  _exports.scrollListToTop = scrollListToTop;
  function scrollListToBottom(list) {
    (0, _chatIosHacks.stackingContextFix)(list, () => {
      list.scrollTo({
        top: 0,
        behavior: "auto"
      });
    });
  }
  function scrollListToTop(list) {
    (0, _chatIosHacks.stackingContextFix)(list, () => {
      list.scrollTo({
        top: -list.scrollHeight,
        behavior: "auto"
      });
    });
  }
  function scrollListToMessage(list, message, opts = {
    highlight: false,
    position: "start",
    autoExpand: false
  }) {
    if (!message) {
      return;
    }
    if (message?.deletedAt && opts.autoExpand) {
      message.expanded = true;
    }
    (0, _runloop.schedule)("afterRender", () => {
      const messageEl = list.querySelector(`.chat-message-container[data-id='${message.id}']`);
      if (!messageEl) {
        return;
      }
      if (opts.highlight) {
        message.highlight();
      }
      (0, _chatIosHacks.stackingContextFix)(list, () => {
        messageEl.scrollIntoView({
          behavior: "auto",
          block: opts.position || "center"
        });
      });
    });
  }
});
define("discourse/plugins/chat/discourse/lib/slugify-channel", ["exports", "discourse/lib/utilities"], function (_exports, _utilities) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = slugifyChannel;
  function slugifyChannel(channel) {
    if (channel.slug) {
      return channel.slug;
    }
    if (!channel.escapedTitle && !channel.title) {
      return "-";
    }
    const slug = (0, _utilities.slugify)(channel.escapedTitle || channel.title);
    const resolvedSlug = (slug.length ? slug : channel.title.trim().toLowerCase().replace(/\s|_+/g, "-")).slice(0, 100);
    if (!resolvedSlug) {
      return "-";
    }
    return resolvedSlug;
  }
});
define("discourse/plugins/chat/discourse/lib/textarea-interactor", ["exports", "@ember/application", "@ember/destroyable", "@ember/object", "@ember/runloop", "@ember/service", "discourse/mixins/textarea-text-manipulation"], function (_exports, _application, _destroyable, _object, _runloop, _service, _textareaTextManipulation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  // This class sole purpose is to provide a way to interact with the textarea
  // using the existing TextareaTextManipulation mixin without using it directly
  // in the composer component. It will make future migration easier.
  let TextareaInteractor = _exports.default = (_class = class TextareaInteractor extends _object.default.extend(_textareaTextManipulation.default) {
    constructor(owner, textarea) {
      super(...arguments);
      _initializerDefineProperty(this, "capabilities", _descriptor, this);
      _initializerDefineProperty(this, "site", _descriptor2, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor3, this);
      (0, _application.setOwner)(this, owner);
      this.textarea = textarea;
      this._textarea = textarea;
      this.element = this._textarea;
      this.ready = true;
      this.composerFocusSelector = `#${textarea.id}`;
      this.init(); // mixin init wouldn't be called otherwise
      this.composerEventPrefix = null; // we don't need app events

      // paste is using old native ember events defined on composer
      this.textarea.addEventListener("paste", this.paste);
      (0, _destroyable.registerDestructor)(this, instance => instance.teardown());
    }
    teardown() {
      this.textarea.removeEventListener("paste", this.paste);
    }
    set value(value) {
      this._textarea.value = value;
      const event = new Event("input", {
        bubbles: true,
        cancelable: true
      });
      this._textarea.dispatchEvent(event);
    }
    blur() {
      (0, _runloop.next)(() => {
        (0, _runloop.schedule)("afterRender", () => {
          this._textarea.blur();
        });
      });
    }
    focus(opts = {
      ensureAtEnd: false,
      refreshHeight: true,
      addText: null
    }) {
      (0, _runloop.next)(() => {
        (0, _runloop.schedule)("afterRender", () => {
          if (opts.refreshHeight) {
            this.refreshHeight();
          }
          if (opts.ensureAtEnd) {
            this.ensureCaretAtEnd();
          }
          if (this.capabilities.isIpadOS || this.site.mobileView) {
            return;
          }
          if (opts.addText) {
            this.addText(this.getSelected(), opts.addText);
          }
          this.focusTextArea();
        });
      });
    }
    ensureCaretAtEnd() {
      (0, _runloop.schedule)("afterRender", () => {
        this._textarea.setSelectionRange(this._textarea.value.length, this._textarea.value.length);
      });
    }
    refreshHeight() {
      (0, _runloop.schedule)("afterRender", () => {
        // this is a quirk which forces us to `auto` first or textarea
        // won't resize
        this._textarea.style.height = "auto";

        // +1 is to workaround a rounding error visible on electron
        // causing scrollbars to show when they shouldn’t
        this._textarea.style.height = this._textarea.scrollHeight + 1 + "px";
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/lib/transform-auto-links", ["exports", "discourse/lib/hashtag-autocomplete", "discourse-common/lib/get-url"], function (_exports, _hashtagAutocomplete, _getUrl) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = transformAutolinks;
  const domParser = new DOMParser();
  function transformAutolinks(cooked) {
    const html = domParser.parseFromString(cooked, "text/html");
    transformMentions(html);
    transformHashtags(html);
    return html.body.innerHTML;
  }
  function transformMentions(html) {
    (html.querySelectorAll("span.mention") || []).forEach(mentionSpan => {
      let mentionLink = document.createElement("a");
      let mentionText = document.createTextNode(mentionSpan.innerText);
      mentionLink.classList.add("mention");
      mentionLink.appendChild(mentionText);
      mentionLink.href = (0, _getUrl.default)(`/u/${mentionSpan.innerText.substring(1)}`);
      mentionSpan.replaceWith(mentionLink);
    });
  }
  function transformHashtags(html) {
    (html.querySelectorAll("span.hashtag-raw") || []).forEach(hashtagSpan => {
      // Doesn't matter what "type" of hashtag we use here, it will get replaced anyway,
      // this is just for the placeholder HTML.
      (0, _hashtagAutocomplete.generatePlaceholderHashtagHTML)("category", hashtagSpan, {
        id: -1,
        text: "...",
        relative_url: "/",
        slug: "",
        icon: "square-full"
      });
    });
  }
});
define("discourse/plugins/chat/discourse/lib/zoom-check", ["exports", "discourse-common/config/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = isZoomed;
  // return true when the browser viewport is zoomed
  function isZoomed() {
    return !(0, _environment.isTesting)() && visualViewport?.scale !== 1 && document.documentElement.clientWidth / window.innerWidth !== 1;
  }
});
define("discourse/plugins/chat/discourse/models/chat-channel-archive", ["exports", "@glimmer/tracking"], function (_exports, _tracking) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelArchive = _exports.default = (_class = class ChatChannelArchive {
    static create(args = {}) {
      return new ChatChannelArchive(args);
    }
    constructor(args = {}) {
      _initializerDefineProperty(this, "failed", _descriptor, this);
      _initializerDefineProperty(this, "completed", _descriptor2, this);
      _initializerDefineProperty(this, "messages", _descriptor3, this);
      _initializerDefineProperty(this, "topicId", _descriptor4, this);
      _initializerDefineProperty(this, "totalMessages", _descriptor5, this);
      this.failed = args.archive_failed;
      this.completed = args.archive_completed;
      this.messages = args.archived_messages;
      this.topicId = args.archive_topic_id;
      this.totalMessages = args.total_messages;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "failed", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "completed", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "messages", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "topicId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "totalMessages", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/models/chat-channel", ["exports", "@glimmer/tracking", "pretty-text/guid", "discourse/lib/utilities", "discourse/models/category", "discourse-common/lib/get-owner", "discourse/plugins/chat/discourse/lib/chat-messages-manager", "discourse/plugins/chat/discourse/lib/chat-threads-manager", "discourse/plugins/chat/discourse/lib/slugify-channel", "discourse/plugins/chat/discourse/models/chat-channel-archive", "discourse/plugins/chat/discourse/models/chat-direct-message", "discourse/plugins/chat/discourse/models/chat-message", "discourse/plugins/chat/discourse/models/chat-tracking-state", "discourse/plugins/chat/discourse/models/user-chat-channel-membership"], function (_exports, _tracking, _guid, _utilities, _category, _getOwner, _chatMessagesManager, _chatThreadsManager, _slugifyChannel, _chatChannelArchive, _chatDirectMessage, _chatMessage, _chatTrackingState, _userChatChannelMembership) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CHATABLE_TYPES = _exports.CHANNEL_STATUSES = void 0;
  _exports.channelStatusIcon = channelStatusIcon;
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _initChatable;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const CHATABLE_TYPES = _exports.CHATABLE_TYPES = {
    directMessageChannel: "DirectMessage",
    categoryChannel: "Category"
  };
  const CHANNEL_STATUSES = _exports.CHANNEL_STATUSES = {
    open: "open",
    readOnly: "read_only",
    closed: "closed",
    archived: "archived"
  };
  function channelStatusIcon(channelStatus) {
    if (channelStatus === CHANNEL_STATUSES.open) {
      return null;
    }
    switch (channelStatus) {
      case CHANNEL_STATUSES.closed:
        return "lock";
      case CHANNEL_STATUSES.readOnly:
        return "comment-slash";
      case CHANNEL_STATUSES.archived:
        return "archive";
    }
  }
  const STAFF_READONLY_STATUSES = [CHANNEL_STATUSES.readOnly, CHANNEL_STATUSES.archived];
  const READONLY_STATUSES = [CHANNEL_STATUSES.closed, CHANNEL_STATUSES.readOnly, CHANNEL_STATUSES.archived];
  let ChatChannel = _exports.default = (_class = (_initChatable = /*#__PURE__*/new WeakSet(), class ChatChannel {
    static create(args = {}) {
      return new ChatChannel(args);
    }
    constructor(args = {}) {
      _classPrivateMethodInitSpec(this, _initChatable);
      _initializerDefineProperty(this, "title", _descriptor, this);
      _initializerDefineProperty(this, "slug", _descriptor2, this);
      _initializerDefineProperty(this, "description", _descriptor3, this);
      _initializerDefineProperty(this, "status", _descriptor4, this);
      _initializerDefineProperty(this, "activeThread", _descriptor5, this);
      _initializerDefineProperty(this, "meta", _descriptor6, this);
      _initializerDefineProperty(this, "chatableId", _descriptor7, this);
      _initializerDefineProperty(this, "chatableType", _descriptor8, this);
      _initializerDefineProperty(this, "chatableUrl", _descriptor9, this);
      _initializerDefineProperty(this, "autoJoinUsers", _descriptor10, this);
      _initializerDefineProperty(this, "allowChannelWideMentions", _descriptor11, this);
      _initializerDefineProperty(this, "membershipsCount", _descriptor12, this);
      _initializerDefineProperty(this, "archive", _descriptor13, this);
      _initializerDefineProperty(this, "tracking", _descriptor14, this);
      _initializerDefineProperty(this, "threadingEnabled", _descriptor15, this);
      _initializerDefineProperty(this, "draft", _descriptor16, this);
      _defineProperty(this, "threadsManager", new _chatThreadsManager.default((0, _getOwner.getOwnerWithFallback)(this)));
      _defineProperty(this, "messagesManager", new _chatMessagesManager.default((0, _getOwner.getOwnerWithFallback)(this)));
      _initializerDefineProperty(this, "_currentUserMembership", _descriptor17, this);
      _initializerDefineProperty(this, "_lastMessage", _descriptor18, this);
      this.id = args.id;
      this.chatableId = args.chatable_id;
      this.chatableUrl = args.chatable_url;
      this.chatableType = args.chatable_type;
      this.membershipsCount = args.memberships_count;
      this.slug = args.slug;
      this.title = args.title;
      this.status = args.status;
      this.description = args.description;
      this.threadingEnabled = args.threading_enabled;
      this.autoJoinUsers = args.auto_join_users;
      this.allowChannelWideMentions = args.allow_channel_wide_mentions;
      this.chatable = _classPrivateMethodGet(this, _initChatable, _initChatable2).call(this, args.chatable || []);
      this.currentUserMembership = args.current_user_membership;
      if (args.archive_completed || args.archive_failed) {
        this.archive = _chatChannelArchive.default.create(args);
      }
      this.tracking = new _chatTrackingState.default((0, _getOwner.getOwnerWithFallback)(this));
      this.lastMessage = args.last_message;
      this.meta = args.meta;
    }
    get unreadThreadsCountSinceLastViewed() {
      return Array.from(this.threadsManager.unreadThreadOverview.values()).filter(lastReplyCreatedAt => lastReplyCreatedAt >= this.currentUserMembership.lastViewedAt).length;
    }
    get unreadThreadsCount() {
      return Array.from(this.threadsManager.unreadThreadOverview.values()).length;
    }
    updateLastViewedAt() {
      this.currentUserMembership.lastViewedAt = new Date();
    }
    get canDeleteSelf() {
      return this.meta.can_delete_self;
    }
    get canDeleteOthers() {
      return this.meta.can_delete_others;
    }
    get canFlag() {
      return this.meta.can_flag;
    }
    get userSilenced() {
      return this.meta.user_silenced;
    }
    get canModerate() {
      return this.meta.can_moderate;
    }
    get escapedTitle() {
      return (0, _utilities.escapeExpression)(this.title);
    }
    get escapedDescription() {
      return (0, _utilities.escapeExpression)(this.description);
    }
    get slugifiedTitle() {
      return this.slug || (0, _slugifyChannel.default)(this);
    }
    get routeModels() {
      return [this.slugifiedTitle, this.id];
    }
    get isDirectMessageChannel() {
      return this.chatableType === CHATABLE_TYPES.directMessageChannel;
    }
    get isCategoryChannel() {
      return this.chatableType === CHATABLE_TYPES.categoryChannel;
    }
    get isOpen() {
      return !this.status || this.status === CHANNEL_STATUSES.open;
    }
    get isReadOnly() {
      return this.status === CHANNEL_STATUSES.readOnly;
    }
    get isClosed() {
      return this.status === CHANNEL_STATUSES.closed;
    }
    get isArchived() {
      return this.status === CHANNEL_STATUSES.archived;
    }
    get isJoinable() {
      return this.isOpen && !this.isArchived;
    }
    get isFollowing() {
      return this.currentUserMembership.following;
    }
    get canJoin() {
      return this.meta.can_join_chat_channel;
    }
    async stageMessage(message) {
      message.id = (0, _guid.default)();
      message.staged = true;
      message.processed = false;
      message.draft = false;
      message.createdAt = new Date();
      message.channel = this;
      if (message.inReplyTo) {
        if (!this.threadingEnabled) {
          this.messagesManager.addMessages([message]);
        }
      } else {
        this.messagesManager.addMessages([message]);
      }
      message.manager = this.messagesManager;
    }
    resetDraft(user) {
      this.draft = _chatMessage.default.createDraftMessage(this, {
        user
      });
    }
    canModifyMessages(user) {
      if (user.staff) {
        return !STAFF_READONLY_STATUSES.includes(this.status);
      }
      return !READONLY_STATUSES.includes(this.status);
    }
    get currentUserMembership() {
      return this._currentUserMembership;
    }
    set currentUserMembership(membership) {
      if (membership instanceof _userChatChannelMembership.default) {
        this._currentUserMembership = membership;
      } else {
        this._currentUserMembership = _userChatChannelMembership.default.create(membership);
      }
    }
    get lastMessage() {
      return this._lastMessage;
    }
    set lastMessage(message) {
      if (!message) {
        this._lastMessage = null;
        return;
      }
      if (message instanceof _chatMessage.default) {
        this._lastMessage = message;
      } else {
        this._lastMessage = _chatMessage.default.create(this, message);
      }
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "title", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "slug", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "description", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "status", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "activeThread", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "meta", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "chatableId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "chatableType", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "chatableUrl", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "autoJoinUsers", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "allowChannelWideMentions", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "membershipsCount", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "archive", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "tracking", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "threadingEnabled", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "draft", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, "_currentUserMembership", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, "_lastMessage", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  function _initChatable2(chatable) {
    if (!chatable || chatable instanceof _category.default || chatable instanceof _chatDirectMessage.default) {
      return chatable;
    } else {
      if (this.isDirectMessageChannel) {
        return _chatDirectMessage.default.create({
          users: chatable?.users,
          group: chatable?.group
        });
      } else {
        return _category.default.create(chatable);
      }
    }
  }
});
define("discourse/plugins/chat/discourse/models/chat-chatable", ["exports", "@glimmer/tracking", "@ember/service", "discourse/models/category", "discourse/models/user", "discourse/plugins/chat/discourse/models/chat-channel"], function (_exports, _tracking, _service, _category, _user, _chatChannel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChatable = _exports.default = (_class = class ChatChatable {
    static create(args = {}) {
      return new ChatChatable(args);
    }
    static createUser(model) {
      return new ChatChatable({
        type: "user",
        model,
        identifier: `u-${model.id}`
      });
    }
    static createChannel(model) {
      return new ChatChatable({
        type: "channel",
        model,
        identifier: `c-${model.id}`
      });
    }
    constructor(args = {}) {
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor, this);
      _initializerDefineProperty(this, "identifier", _descriptor2, this);
      _initializerDefineProperty(this, "type", _descriptor3, this);
      _initializerDefineProperty(this, "model", _descriptor4, this);
      _initializerDefineProperty(this, "enabled", _descriptor5, this);
      _initializerDefineProperty(this, "tracking", _descriptor6, this);
      this.identifier = args.identifier;
      this.type = args.type;
      switch (this.type) {
        case "channel":
          if (args.model.chatable?.users?.length === 1) {
            this.enabled = args.model.chatable?.users[0].has_chat_enabled;
          }
          if (args.model instanceof _chatChannel.default) {
            this.model = args.model;
            break;
          }
          this.model = _chatChannel.default.create(args.model);
          break;
        case "user":
          this.enabled = args.model.has_chat_enabled;
          if (args.model instanceof _user.default) {
            this.model = args.model;
            break;
          }
          this.model = _user.default.create(args.model);
          break;
      }
    }
    get isUser() {
      return this.type === "user";
    }
    get isCategory() {
      return this instanceof _category.default;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "identifier", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "type", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "model", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "enabled", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "tracking", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/models/chat-direct-message", ["exports", "@glimmer/tracking", "discourse/models/user", "discourse/plugins/chat/discourse/models/chat-channel"], function (_exports, _tracking, _user, _chatChannel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _initUsers;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatDirectMessage = _exports.default = (_class = (_initUsers = /*#__PURE__*/new WeakSet(), class ChatDirectMessage {
    static create(args = {}) {
      return new ChatDirectMessage(args);
    }
    constructor(args = {}) {
      _classPrivateMethodInitSpec(this, _initUsers);
      _initializerDefineProperty(this, "users", _descriptor, this);
      _initializerDefineProperty(this, "group", _descriptor2, this);
      _defineProperty(this, "type", _chatChannel.CHATABLE_TYPES.directMessageChannel);
      this.group = args.group ?? false;
      this.users = _classPrivateMethodGet(this, _initUsers, _initUsers2).call(this, args.users || []);
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "users", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "group", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  })), _class);
  function _initUsers2(users) {
    return users.map(user => {
      if (!user || user instanceof _user.default) {
        return user;
      } else {
        return _user.default.create(user);
      }
    });
  }
});
define("discourse/plugins/chat/discourse/models/chat-message-reaction", ["exports", "@glimmer/tracking", "@ember-compat/tracked-built-ins", "discourse/models/user"], function (_exports, _tracking, _trackedBuiltIns, _user) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.REACTIONS = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _initUsersModels;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const REACTIONS = _exports.REACTIONS = {
    add: "add",
    remove: "remove"
  };
  let ChatMessageReaction = _exports.default = (_class = (_initUsersModels = /*#__PURE__*/new WeakSet(), class ChatMessageReaction {
    static create(args = {}) {
      return new ChatMessageReaction(args);
    }
    constructor(args = {}) {
      _classPrivateMethodInitSpec(this, _initUsersModels);
      _initializerDefineProperty(this, "count", _descriptor, this);
      _initializerDefineProperty(this, "reacted", _descriptor2, this);
      _initializerDefineProperty(this, "users", _descriptor3, this);
      _initializerDefineProperty(this, "emoji", _descriptor4, this);
      this.count = args.count;
      this.emoji = args.emoji;
      this.users = _classPrivateMethodGet(this, _initUsersModels, _initUsersModels2).call(this, args.users);
      this.reacted = args.reacted;
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "count", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "reacted", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "users", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "emoji", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  function _initUsersModels2(users = []) {
    return new _trackedBuiltIns.TrackedArray(users.map(user => {
      if (user instanceof _user.default) {
        return user;
      }
      return _user.default.create(user);
    }));
  }
});
define("discourse/plugins/chat/discourse/models/chat-message", ["exports", "@glimmer/tracking", "@ember-compat/tracked-built-ins", "discourse/lib/text", "discourse/models/bookmark", "discourse/models/user", "discourse-common/lib/get-owner", "discourse-common/lib/later", "discourse-i18n", "discourse/plugins/chat/discourse/lib/transform-auto-links", "discourse/plugins/chat/discourse/models/chat-message-reaction"], function (_exports, _tracking, _trackedBuiltIns, _text, _bookmark, _user, _getOwner, _later, _discourseI18n, _transformAutoLinks, _chatMessageReaction) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _class2, _calendarDate, _ensureCookFunctionInitialized, _markdownOptions, _initChatMessageReactionModel, _initMentionedUsers, _initUserModel, _areDatesOnSameDay, _startOfDay;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
  function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
  function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatMessage = _exports.default = (_class = (_calendarDate = /*#__PURE__*/new WeakSet(), _ensureCookFunctionInitialized = /*#__PURE__*/new WeakSet(), _markdownOptions = /*#__PURE__*/new WeakMap(), _initChatMessageReactionModel = /*#__PURE__*/new WeakSet(), _initMentionedUsers = /*#__PURE__*/new WeakSet(), _initUserModel = /*#__PURE__*/new WeakSet(), _areDatesOnSameDay = /*#__PURE__*/new WeakSet(), _startOfDay = /*#__PURE__*/new WeakSet(), (_class2 = class ChatMessage {
    static create(channel, args = {}) {
      return new ChatMessage(channel, args);
    }
    static createDraftMessage(channel, args = {}) {
      args.draft = true;
      return ChatMessage.create(channel, args);
    }
    constructor(channel, args = {}) {
      _classPrivateMethodInitSpec(this, _startOfDay);
      _classPrivateMethodInitSpec(this, _areDatesOnSameDay);
      _classPrivateMethodInitSpec(this, _initUserModel);
      _classPrivateMethodInitSpec(this, _initMentionedUsers);
      _classPrivateMethodInitSpec(this, _initChatMessageReactionModel);
      _classPrivateFieldInitSpec(this, _markdownOptions, {
        get: _get_markdownOptions,
        set: void 0
      });
      _classPrivateMethodInitSpec(this, _ensureCookFunctionInitialized);
      _classPrivateMethodInitSpec(this, _calendarDate);
      _initializerDefineProperty(this, "id", _descriptor, this);
      _initializerDefineProperty(this, "error", _descriptor2, this);
      _initializerDefineProperty(this, "selected", _descriptor3, this);
      _initializerDefineProperty(this, "channel", _descriptor4, this);
      _initializerDefineProperty(this, "staged", _descriptor5, this);
      _initializerDefineProperty(this, "processed", _descriptor6, this);
      _initializerDefineProperty(this, "draftSaved", _descriptor7, this);
      _initializerDefineProperty(this, "draft", _descriptor8, this);
      _initializerDefineProperty(this, "createdAt", _descriptor9, this);
      _initializerDefineProperty(this, "uploads", _descriptor10, this);
      _initializerDefineProperty(this, "excerpt", _descriptor11, this);
      _initializerDefineProperty(this, "reactions", _descriptor12, this);
      _initializerDefineProperty(this, "reviewableId", _descriptor13, this);
      _initializerDefineProperty(this, "user", _descriptor14, this);
      _initializerDefineProperty(this, "inReplyTo", _descriptor15, this);
      _initializerDefineProperty(this, "expanded", _descriptor16, this);
      _initializerDefineProperty(this, "bookmark", _descriptor17, this);
      _initializerDefineProperty(this, "userFlagStatus", _descriptor18, this);
      _initializerDefineProperty(this, "hidden", _descriptor19, this);
      _initializerDefineProperty(this, "version", _descriptor20, this);
      _initializerDefineProperty(this, "edited", _descriptor21, this);
      _initializerDefineProperty(this, "editing", _descriptor22, this);
      _initializerDefineProperty(this, "chatWebhookEvent", _descriptor23, this);
      _initializerDefineProperty(this, "mentionWarning", _descriptor24, this);
      _initializerDefineProperty(this, "availableFlags", _descriptor25, this);
      _initializerDefineProperty(this, "newest", _descriptor26, this);
      _initializerDefineProperty(this, "highlighted", _descriptor27, this);
      _initializerDefineProperty(this, "firstOfResults", _descriptor28, this);
      _initializerDefineProperty(this, "message", _descriptor29, this);
      _initializerDefineProperty(this, "manager", _descriptor30, this);
      _initializerDefineProperty(this, "deletedById", _descriptor31, this);
      _initializerDefineProperty(this, "_deletedAt", _descriptor32, this);
      _initializerDefineProperty(this, "_cooked", _descriptor33, this);
      _initializerDefineProperty(this, "_thread", _descriptor34, this);
      this.id = args.id;
      this.channel = channel;
      this.manager = args.manager;
      this.newest = args.newest || false;
      this.draftSaved = args.draftSaved || args.draft_saved || false;
      this.firstOfResults = args.firstOfResults || args.first_of_results || false;
      this.staged = args.staged || false;
      this.processed = args.processed || true;
      this.edited = args.edited || false;
      this.editing = args.editing || false;
      this.availableFlags = args.availableFlags || args.available_flags;
      this.hidden = args.hidden || false;
      this.chatWebhookEvent = args.chatWebhookEvent || args.chat_webhook_event;
      this.createdAt = args.created_at ? new Date(args.created_at) : new Date(args.createdAt);
      this.deletedById = args.deletedById || args.deleted_by_id;
      this._deletedAt = args.deletedAt || args.deleted_at;
      this.expanded = this.hidden || this._deletedAt ? false : args.expanded || true;
      this.excerpt = args.excerpt;
      this.reviewableId = args.reviewableId || args.reviewable_id;
      this.userFlagStatus = args.userFlagStatus || args.user_flag_status;
      this.draft = args.draft;
      this.message = args.message || "";
      this._cooked = args.cooked || "";
      this.inReplyTo = args.inReplyTo || (args.in_reply_to || args.replyToMsg ? ChatMessage.create(channel, args.in_reply_to || args.replyToMsg) : null);
      this.reactions = _classPrivateMethodGet(this, _initChatMessageReactionModel, _initChatMessageReactionModel2).call(this, args.reactions);
      this.uploads = new _trackedBuiltIns.TrackedArray(args.uploads || []);
      this.user = _classPrivateMethodGet(this, _initUserModel, _initUserModel2).call(this, args.user);
      this.bookmark = args.bookmark ? _bookmark.default.create(args.bookmark) : null;
      this.mentionedUsers = _classPrivateMethodGet(this, _initMentionedUsers, _initMentionedUsers2).call(this, args.mentioned_users);
      if (args.thread) {
        this.thread = args.thread;
      }
    }
    get persisted() {
      return !!this.id && !this.staged;
    }
    get replyable() {
      return !this.staged && !this.error;
    }
    get editable() {
      return !this.staged && !this.error;
    }
    get thread() {
      return this._thread;
    }
    set thread(thread) {
      if (!thread) {
        this._thread = null;
        return;
      }
      this._thread = this.channel.threadsManager.add(this.channel, thread, {
        replace: true
      });
    }
    get deletedAt() {
      return this._deletedAt;
    }
    set deletedAt(value) {
      this._deletedAt = value;
      this.incrementVersion();
    }
    get cooked() {
      return this._cooked;
    }
    set cooked(newCooked) {
      // some markdown is cooked differently on the server-side, e.g.
      // quotes, avatar images etc.
      if (newCooked !== this._cooked) {
        this._cooked = newCooked;
        this.incrementVersion();
      }
    }
    async cook() {
      if (this.isDestroyed || this.isDestroying) {
        return;
      }
      await _classPrivateMethodGet(this, _ensureCookFunctionInitialized, _ensureCookFunctionInitialized2).call(this);
      this.cooked = ChatMessage.cookFunction(this.message);
    }
    get read() {
      return this.channel.currentUserMembership?.lastReadMessageId >= this.id;
    }
    get firstMessageOfTheDayAt() {
      if (!this.previousMessage) {
        return _classPrivateMethodGet(this, _startOfDay, _startOfDay2).call(this, this.createdAt);
      }
      if (!_classPrivateMethodGet(this, _areDatesOnSameDay, _areDatesOnSameDay2).call(this, this.previousMessage.createdAt, this.createdAt)) {
        return _classPrivateMethodGet(this, _startOfDay, _startOfDay2).call(this, this.createdAt);
      }
    }
    get formattedFirstMessageDate() {
      if (this.firstMessageOfTheDayAt) {
        return _classPrivateMethodGet(this, _calendarDate, _calendarDate2).call(this, this.firstMessageOfTheDayAt);
      }
    }
    get index() {
      return this.manager?.messages?.indexOf(this);
    }
    get previousMessage() {
      return this.manager?.messages?.objectAt?.(this.index - 1);
    }
    get nextMessage() {
      return this.manager?.messages?.objectAt?.(this.index + 1);
    }
    highlight() {
      this.highlighted = true;
      (0, _later.default)(() => {
        if (this.isDestroying || this.isDestroyed) {
          return;
        }
        this.highlighted = false;
      }, 2000);
    }
    incrementVersion() {
      this.version++;
    }
    async parseMentions() {
      return await (0, _text.parseMentions)(this.message, _classPrivateFieldGet(this, _markdownOptions));
    }
    toJSONDraft() {
      if (this.message?.length === 0 && this.uploads?.length === 0 && !this.inReplyTo) {
        return null;
      }
      const data = {};
      if (this.uploads?.length > 0) {
        data.uploads = this.uploads;
      }
      if (this.message?.length > 0) {
        data.message = this.message;
      }
      if (this.inReplyTo) {
        data.replyToMsg = {
          id: this.inReplyTo.id,
          excerpt: this.inReplyTo.excerpt,
          user: {
            id: this.inReplyTo.user.id,
            name: this.inReplyTo.user.name,
            avatar_template: this.inReplyTo.user.avatar_template,
            username: this.inReplyTo.user.username
          }
        };
      }
      if (this.editing) {
        data.editing = true;
        data.id = this.id;
        data.excerpt = this.excerpt;
      }
      return JSON.stringify(data);
    }
    react(emoji, action, actor, currentUserId) {
      const selfReaction = actor.id === currentUserId;
      const existingReaction = this.reactions.find(reaction => reaction.emoji === emoji);
      if (existingReaction) {
        if (action === "add") {
          if (selfReaction && existingReaction.reacted) {
            return;
          }

          // we might receive a message bus event while loading a channel who would
          // already have the reaction added to the message
          if (existingReaction.users.find(user => user.id === actor.id)) {
            return;
          }
          existingReaction.count = existingReaction.count + 1;
          if (selfReaction) {
            existingReaction.reacted = true;
          }
          existingReaction.users.pushObject(actor);
        } else {
          const existingUserReaction = existingReaction.users.find(user => user.id === actor.id);
          if (!existingUserReaction) {
            return;
          }
          if (selfReaction) {
            existingReaction.reacted = false;
          }
          if (existingReaction.count === 1) {
            this.reactions.removeObject(existingReaction);
          } else {
            existingReaction.count = existingReaction.count - 1;
            existingReaction.users.removeObject(existingUserReaction);
          }
        }
      } else {
        if (action === "add") {
          this.reactions.pushObject(_chatMessageReaction.default.create({
            count: 1,
            emoji,
            reacted: selfReaction,
            users: [actor]
          }));
        }
      }
    }
  }, _defineProperty(_class2, "cookFunction", null), _class2)), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "id", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "error", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "selected", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "channel", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "staged", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "processed", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "draftSaved", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "draft", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "createdAt", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "uploads", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "excerpt", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "reactions", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "reviewableId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "user", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "inReplyTo", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "expanded", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, "bookmark", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, "userFlagStatus", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, "hidden", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, "version", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, "edited", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, "editing", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor23 = _applyDecoratedDescriptor(_class.prototype, "chatWebhookEvent", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return new _trackedBuiltIns.TrackedObject();
    }
  }), _descriptor24 = _applyDecoratedDescriptor(_class.prototype, "mentionWarning", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor25 = _applyDecoratedDescriptor(_class.prototype, "availableFlags", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor26 = _applyDecoratedDescriptor(_class.prototype, "newest", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor27 = _applyDecoratedDescriptor(_class.prototype, "highlighted", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor28 = _applyDecoratedDescriptor(_class.prototype, "firstOfResults", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor29 = _applyDecoratedDescriptor(_class.prototype, "message", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor30 = _applyDecoratedDescriptor(_class.prototype, "manager", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor31 = _applyDecoratedDescriptor(_class.prototype, "deletedById", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor32 = _applyDecoratedDescriptor(_class.prototype, "_deletedAt", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor33 = _applyDecoratedDescriptor(_class.prototype, "_cooked", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor34 = _applyDecoratedDescriptor(_class.prototype, "_thread", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "firstMessageOfTheDayAt", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "firstMessageOfTheDayAt"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "formattedFirstMessageDate", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "formattedFirstMessageDate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "index", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "index"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "previousMessage", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "previousMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "nextMessage", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "nextMessage"), _class.prototype)), _class);
  function _calendarDate2(date) {
    return moment(date).calendar(moment(), {
      sameDay: `[${_discourseI18n.default.t("chat.chat_message_separator.today")}]`,
      lastDay: `[${_discourseI18n.default.t("chat.chat_message_separator.yesterday")}]`,
      lastWeek: "LL",
      sameElse: "LL"
    });
  }
  async function _ensureCookFunctionInitialized2() {
    if (_class2.cookFunction) {
      return;
    }
    const cookFunction = await (0, _text.generateCookFunction)(_classPrivateFieldGet(this, _markdownOptions));
    _class2.cookFunction = raw => {
      return (0, _transformAutoLinks.default)(cookFunction(raw));
    };
  }
  function _get_markdownOptions() {
    const site = (0, _getOwner.getOwnerWithFallback)(this).lookup("service:site");
    return {
      featuresOverride: site.markdown_additional_options?.chat?.limited_pretty_text_features,
      markdownItRules: site.markdown_additional_options?.chat?.limited_pretty_text_markdown_rules,
      hashtagTypesInPriorityOrder: site.hashtag_configurations?.["chat-composer"],
      hashtagIcons: site.hashtag_icons
    };
  }
  function _initChatMessageReactionModel2(reactions = []) {
    return reactions.map(reaction => _chatMessageReaction.default.create(reaction));
  }
  function _initMentionedUsers2(mentionedUsers) {
    const map = new Map();
    if (mentionedUsers) {
      mentionedUsers.forEach(userData => {
        const user = _user.default.create(userData);
        map.set(user.id, user);
      });
    }
    return map;
  }
  function _initUserModel2(user) {
    if (!user || user instanceof _user.default) {
      return user;
    }
    return _user.default.create(user);
  }
  function _areDatesOnSameDay2(a, b) {
    return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();
  }
  function _startOfDay2(date) {
    return moment(date).startOf("day").format();
  }
});
define("discourse/plugins/chat/discourse/models/chat-notice", ["exports", "@glimmer/tracking"], function (_exports, _tracking) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNotice = _exports.default = (_class = class ChatNotice {
    static create(args = {}) {
      return new ChatNotice(args);
    }
    constructor(args = {}) {
      _initializerDefineProperty(this, "channelId", _descriptor, this);
      _initializerDefineProperty(this, "textContent", _descriptor2, this);
      this.channelId = args.channel_id;
      this.textContent = args.text_content;
      this.type = args.notice_type;
      this.data = args.data;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "channelId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "textContent", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/models/chat-thread-preview", ["exports", "@glimmer/tracking", "@ember-compat/tracked-built-ins"], function (_exports, _tracking, _trackedBuiltIns) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatThreadPreview = _exports.default = (_class = class ChatThreadPreview {
    static create(args = {}) {
      return new ChatThreadPreview(args);
    }
    constructor(args = {}) {
      _initializerDefineProperty(this, "replyCount", _descriptor, this);
      _initializerDefineProperty(this, "lastReplyId", _descriptor2, this);
      _initializerDefineProperty(this, "lastReplyCreatedAt", _descriptor3, this);
      _initializerDefineProperty(this, "lastReplyExcerpt", _descriptor4, this);
      _initializerDefineProperty(this, "lastReplyUser", _descriptor5, this);
      _initializerDefineProperty(this, "participantCount", _descriptor6, this);
      _initializerDefineProperty(this, "participantUsers", _descriptor7, this);
      if (!args) {
        args = {};
      }
      this.replyCount = args.reply_count || args.replyCount || 0;
      this.lastReplyId = args.last_reply_id || args.lastReplyId;
      this.lastReplyCreatedAt = new Date(args.last_reply_created_at || args.lastReplyCreatedAt);
      this.lastReplyExcerpt = args.last_reply_excerpt || args.lastReplyExcerpt;
      this.lastReplyUser = args.last_reply_user || args.lastReplyUser;
      this.participantCount = args.participant_count || args.participantCount || 0;
      this.participantUsers = new _trackedBuiltIns.TrackedArray(args.participant_users || args.participantUsers || []);
    }
    get otherParticipantCount() {
      return this.participantCount - this.participantUsers.length;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "replyCount", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "lastReplyId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "lastReplyCreatedAt", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "lastReplyExcerpt", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "lastReplyUser", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "participantCount", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "participantUsers", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/models/chat-thread", ["exports", "@glimmer/tracking", "pretty-text/guid", "discourse-common/lib/get-owner", "discourse/plugins/chat/discourse/lib/chat-messages-manager", "discourse/plugins/chat/discourse/models/chat-message", "discourse/plugins/chat/discourse/models/chat-thread-preview", "discourse/plugins/chat/discourse/models/chat-tracking-state", "discourse/plugins/chat/discourse/models/user-chat-thread-membership"], function (_exports, _tracking, _guid, _getOwner, _chatMessagesManager, _chatMessage, _chatThreadPreview, _chatTrackingState, _userChatThreadMembership) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.THREAD_STATUSES = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const THREAD_STATUSES = _exports.THREAD_STATUSES = {
    open: "open",
    readOnly: "read_only",
    closed: "closed",
    archived: "archived"
  };
  let ChatThread = _exports.default = (_class = class ChatThread {
    static create(channel, args = {}) {
      return new ChatThread(channel, args);
    }
    constructor(channel, args = {}) {
      _initializerDefineProperty(this, "id", _descriptor, this);
      _initializerDefineProperty(this, "title", _descriptor2, this);
      _initializerDefineProperty(this, "status", _descriptor3, this);
      _initializerDefineProperty(this, "draft", _descriptor4, this);
      _initializerDefineProperty(this, "staged", _descriptor5, this);
      _initializerDefineProperty(this, "channel", _descriptor6, this);
      _initializerDefineProperty(this, "originalMessage", _descriptor7, this);
      _initializerDefineProperty(this, "threadMessageBusLastId", _descriptor8, this);
      _initializerDefineProperty(this, "replyCount", _descriptor9, this);
      _initializerDefineProperty(this, "tracking", _descriptor10, this);
      _initializerDefineProperty(this, "currentUserMembership", _descriptor11, this);
      _initializerDefineProperty(this, "preview", _descriptor12, this);
      _defineProperty(this, "messagesManager", new _chatMessagesManager.default((0, _getOwner.getOwnerWithFallback)(this)));
      this.id = args.id;
      this.channel = channel;
      this.status = args.status;
      this.staged = args.staged;
      this.replyCount = args.reply_count;
      this.originalMessage = args.original_message ? _chatMessage.default.create(channel, args.original_message) : null;
      if (this.originalMessage) {
        this.originalMessage.thread = this;
      }
      this.title = args.title;
      if (args.current_user_membership) {
        this.currentUserMembership = _userChatThreadMembership.default.create(args.current_user_membership);
      }
      this.tracking = new _chatTrackingState.default((0, _getOwner.getOwnerWithFallback)(this));
      this.preview = _chatThreadPreview.default.create(args.preview);
    }
    resetDraft(user) {
      this.draft = _chatMessage.default.createDraftMessage(this.channel, {
        user,
        thread: this
      });
    }
    async stageMessage(message) {
      message.id = (0, _guid.default)();
      message.staged = true;
      message.processed = false;
      message.draft = false;
      message.createdAt = new Date();
      message.thread = this;
      this.messagesManager.addMessages([message]);
      message.manager = this.messagesManager;
    }
    get routeModels() {
      return [...this.channel.routeModels, this.id];
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "id", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "title", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "status", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "draft", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "staged", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "channel", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "originalMessage", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "threadMessageBusLastId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "replyCount", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "tracking", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "currentUserMembership", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "preview", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/models/chat-tracking-state", ["exports", "@glimmer/tracking", "@ember/application", "@ember/service"], function (_exports, _tracking, _application, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatTrackingState = _exports.default = (_class = class ChatTrackingState {
    constructor(owner, params = {}) {
      _initializerDefineProperty(this, "chatTrackingStateManager", _descriptor, this);
      _initializerDefineProperty(this, "_unreadCount", _descriptor2, this);
      _initializerDefineProperty(this, "_mentionCount", _descriptor3, this);
      (0, _application.setOwner)(this, owner);
      this._unreadCount = params.unreadCount || 0;
      this._mentionCount = params.mentionCount || 0;
    }
    reset() {
      this._unreadCount = 0;
      this._mentionCount = 0;
    }
    get unreadCount() {
      return this._unreadCount;
    }
    set unreadCount(value) {
      const valueChanged = this._unreadCount !== value;
      if (valueChanged) {
        this._unreadCount = value;
        this.chatTrackingStateManager.triggerNotificationsChanged();
      }
    }
    get mentionCount() {
      return this._mentionCount;
    }
    set mentionCount(value) {
      const valueChanged = this._mentionCount !== value;
      if (valueChanged) {
        this._mentionCount = value;
        this.chatTrackingStateManager.triggerNotificationsChanged();
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatTrackingStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "_unreadCount", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "_mentionCount", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  })), _class);
});
define("discourse/plugins/chat/discourse/models/user-chat-channel-membership", ["exports", "@glimmer/tracking", "discourse/models/user"], function (_exports, _tracking, _user) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _initUserModel;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let UserChatChannelMembership = _exports.default = (_class = (_initUserModel = /*#__PURE__*/new WeakSet(), class UserChatChannelMembership {
    static create(args = {}) {
      return new UserChatChannelMembership(args);
    }
    constructor(args = {}) {
      _classPrivateMethodInitSpec(this, _initUserModel);
      _initializerDefineProperty(this, "following", _descriptor, this);
      _initializerDefineProperty(this, "muted", _descriptor2, this);
      _initializerDefineProperty(this, "desktopNotificationLevel", _descriptor3, this);
      _initializerDefineProperty(this, "mobileNotificationLevel", _descriptor4, this);
      _initializerDefineProperty(this, "lastReadMessageId", _descriptor5, this);
      _initializerDefineProperty(this, "lastViewedAt", _descriptor6, this);
      _initializerDefineProperty(this, "user", _descriptor7, this);
      this.following = args.following;
      this.muted = args.muted;
      this.desktopNotificationLevel = args.desktop_notification_level;
      this.mobileNotificationLevel = args.mobile_notification_level;
      this.lastReadMessageId = args.last_read_message_id;
      this.lastViewedAt = new Date(args.last_viewed_at);
      this.user = _classPrivateMethodGet(this, _initUserModel, _initUserModel2).call(this, args.user);
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "following", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "muted", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "desktopNotificationLevel", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "mobileNotificationLevel", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "lastReadMessageId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "lastViewedAt", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "user", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  })), _class);
  function _initUserModel2(user) {
    if (!user || user instanceof _user.default) {
      return user;
    }
    return _user.default.create(user);
  }
});
define("discourse/plugins/chat/discourse/models/user-chat-thread-membership", ["exports", "@glimmer/tracking", "discourse/lib/notification-levels"], function (_exports, _tracking, _notificationLevels) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let UserChatThreadMembership = _exports.default = (_class = class UserChatThreadMembership {
    static create(args = {}) {
      return new UserChatThreadMembership(args);
    }
    constructor(args = {}) {
      _initializerDefineProperty(this, "lastReadMessageId", _descriptor, this);
      _initializerDefineProperty(this, "notificationLevel", _descriptor2, this);
      this.lastReadMessageId = args.last_read_message_id;
      this.notificationLevel = args.notification_level;
    }
    get isQuiet() {
      return this.notificationLevel === _notificationLevels.NotificationLevels.REGULAR || this.notificationLevel === _notificationLevels.NotificationLevels.MUTED;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "lastReadMessageId", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "notificationLevel", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  })), _class);
});
define("discourse/plugins/chat/discourse/modifiers/chat/emoji-picker-scroll-listener", ["exports", "@ember/destroyable", "@ember/service", "ember-modifier"], function (_exports, _destroyable, _service, _emberModifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let EmojiPickerScrollListener = _exports.default = (_class = class EmojiPickerScrollListener extends _emberModifier.default {
    constructor(owner, args) {
      super(owner, args);
      _initializerDefineProperty(this, "emojiPickerScrollObserver", _descriptor, this);
      _defineProperty(this, "element", null);
      (0, _destroyable.registerDestructor)(this, instance => instance.cleanup());
    }
    modify(element) {
      this.element = element;
      this.emojiPickerScrollObserver.observe(element);
    }
    cleanup() {
      this.emojiPickerScrollObserver.unobserve(this.element);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "emojiPickerScrollObserver", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/modifiers/chat/later-fn", ["exports", "@ember/destroyable", "@ember/runloop", "ember-modifier", "discourse-common/lib/later"], function (_exports, _destroyable, _runloop, _emberModifier, _later) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class ChatLaterFn extends _emberModifier.default {
    constructor(owner, args) {
      super(owner, args);
      (0, _destroyable.registerDestructor)(this, instance => instance.cleanup());
    }
    modify(element, [fn, delay]) {
      this.handler = (0, _later.default)(() => {
        fn?.(element);
      }, delay);
    }
    cleanup() {
      (0, _runloop.cancel)(this.handler);
    }
  }
  _exports.default = ChatLaterFn;
});
define("discourse/plugins/chat/discourse/modifiers/chat/on-animation-end", ["exports", "@ember/destroyable", "@ember/runloop", "ember-modifier", "discourse-common/utils/decorators"], function (_exports, _destroyable, _runloop, _emberModifier, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let ChatOnAnimationEnd = _exports.default = (_class = class ChatOnAnimationEnd extends _emberModifier.default {
    constructor(owner, args) {
      super(owner, args);
      (0, _destroyable.registerDestructor)(this, instance => instance.cleanup());
    }
    modify(element, [fn]) {
      this.element = element;
      this.fn = fn;
      this.handler = (0, _runloop.schedule)("afterRender", () => {
        this.element.addEventListener("animationend", this.handleAnimationEnd);
      });
    }
    handleAnimationEnd() {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }
      this.fn?.(this.element);
    }
    cleanup() {
      (0, _runloop.cancel)(this.handler);
      this.element?.removeEventListener("animationend", this.handleAnimationEnd);
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "handleAnimationEnd", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "handleAnimationEnd"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/modifiers/chat/on-long-press", ["exports", "@ember/destroyable", "@ember/runloop", "@ember/service", "ember-modifier", "discourse-common/lib/later", "discourse-common/utils/decorators"], function (_exports, _destroyable, _runloop, _service, _emberModifier, _later, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  function cancelEvent(event) {
    event.stopPropagation();
  }
  let ChatOnLongPress = _exports.default = (_class = class ChatOnLongPress extends _emberModifier.default {
    constructor(owner, args) {
      super(owner, args);
      _initializerDefineProperty(this, "capabilities", _descriptor, this);
      _initializerDefineProperty(this, "site", _descriptor2, this);
      (0, _destroyable.registerDestructor)(this, instance => instance.cleanup());
    }
    get enabled() {
      return this.capabilities.touch && this.site.mobileView;
    }
    modify(element, [onLongPressStart, onLongPressEnd, onLongPressCancel]) {
      if (!this.enabled) {
        return;
      }
      this.element = element;
      this.onLongPressStart = onLongPressStart || (() => {});
      this.onLongPressEnd = onLongPressEnd || (() => {});
      this.onLongPressCancel = onLongPressCancel || (() => {});
      this.element.addEventListener("touchstart", this.handleTouchStart, {
        passive: true
      });
    }
    onCancel() {
      (0, _runloop.cancel)(this.timeout);
      if (this.capabilities.touch) {
        this.element.removeEventListener("touchmove", this.onCancel, {
          passive: true
        });
        this.element.removeEventListener("touchend", this.onCancel);
        this.element.removeEventListener("touchcancel", this.onCancel);
      }
      this.onLongPressCancel(this.element);
    }
    handleTouchStart(event) {
      if (event.touches.length > 1) {
        this.onCancel();
        return;
      }
      this.onLongPressStart(this.element, event);
      this.element.addEventListener("touchmove", this.onCancel, {
        passive: true
      });
      this.element.addEventListener("touchend", this.onCancel);
      this.element.addEventListener("touchcancel", this.onCancel);
      this.timeout = (0, _later.default)(() => {
        if (this.isDestroying || this.isDestroyed) {
          return;
        }
        this.element.addEventListener("touchend", cancelEvent, {
          once: true,
          passive: true
        });
        this.onLongPressEnd(this.element, event);
      }, 400);
    }
    cleanup() {
      if (!this.enabled) {
        return;
      }
      this.element.removeEventListener("touchstart", this.handleTouchStart, {
        passive: true
      });
      this.onCancel();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "capabilities", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "onCancel", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onCancel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleTouchStart", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "handleTouchStart"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/modifiers/chat/on-resize", ["exports", "@ember/destroyable", "@ember/runloop", "ember-modifier"], function (_exports, _destroyable, _runloop, _emberModifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class ChatOnResize extends _emberModifier.default {
    constructor(owner, args) {
      super(owner, args);
      (0, _destroyable.registerDestructor)(this, instance => instance.cleanup());
    }
    modify(element, [fn, options = {}]) {
      this.resizeObserver = new ResizeObserver(entries => {
        this.throttleHandler = (0, _runloop.throttle)(this, fn, entries, options.delay ?? 0, options.immediate ?? false);
      });
      this.resizeObserver.observe(element);
    }
    cleanup() {
      (0, _runloop.cancel)(this.throttleHandler);
      this.resizeObserver?.disconnect();
    }
  }
  _exports.default = ChatOnResize;
});
define("discourse/plugins/chat/discourse/modifiers/chat/on-scroll", ["exports", "@ember/destroyable", "@ember/runloop", "ember-modifier", "discourse-common/utils/decorators"], function (_exports, _destroyable, _runloop, _emberModifier, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let ChatOnScroll = _exports.default = (_class = class ChatOnScroll extends _emberModifier.default {
    constructor(owner, args) {
      super(owner, args);
      (0, _destroyable.registerDestructor)(this, instance => instance.cleanup());
    }
    modify(element, [callback, options]) {
      this.element = element;
      this.callback = callback;
      this.options = options;
      this.element.addEventListener("scroll", this.throttledCallback, {
        passive: true
      });
    }
    throttledCallback(event) {
      this.throttledHandler = (0, _runloop.throttle)(this, this.callback, event, this.options.delay ?? 100, this.options.immediate ?? false);
    }
    cleanup() {
      (0, _runloop.cancel)(this.throttledHandler);
      this.element.removeEventListener("scroll", this.throttledCallback);
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "throttledCallback", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "throttledCallback"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/modifiers/chat/resizable-node", ["exports", "@ember/destroyable", "@ember/runloop", "ember-modifier", "discourse-common/utils/decorators"], function (_exports, _destroyable, _runloop, _emberModifier, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const MINIMUM_SIZE = 20;
  let ResizableNode = _exports.default = (_class = class ResizableNode extends _emberModifier.default {
    constructor(owner, args) {
      super(owner, args);
      _defineProperty(this, "element", null);
      _defineProperty(this, "resizerSelector", null);
      _defineProperty(this, "didResizeContainer", null);
      _defineProperty(this, "options", null);
      _defineProperty(this, "_originalWidth", 0);
      _defineProperty(this, "_originalHeight", 0);
      _defineProperty(this, "_originalX", 0);
      _defineProperty(this, "_originalY", 0);
      _defineProperty(this, "_originalPageX", 0);
      _defineProperty(this, "_originalPageY", 0);
      (0, _destroyable.registerDestructor)(this, instance => instance.cleanup());
    }
    modify(element, [resizerSelector, didResizeContainer, options = {}]) {
      this.resizerSelector = resizerSelector;
      this.element = element;
      this.didResizeContainer = didResizeContainer;
      this.options = Object.assign({
        vertical: true,
        horizontal: true,
        position: true,
        mutate: true,
        resetOnWindowResize: false
      }, options);
      this.element.querySelector(this.resizerSelector)?.addEventListener("touchstart", this._startResize);
      this.element.querySelector(this.resizerSelector)?.addEventListener("mousedown", this._startResize);
      window.addEventListener("resize", this._resizeWindow);
    }
    cleanup() {
      this.element.querySelector(this.resizerSelector)?.removeEventListener("touchstart", this._startResize);
      this.element.querySelector(this.resizerSelector)?.removeEventListener("mousedown", this._startResize);
      window.removeEventListener("resize", this._resizeWindow);
      (0, _runloop.cancel)(this._throttledResizeHandler);
    }
    _startResize(event) {
      event.preventDefault();
      this._minimumWidth = parseFloat(getComputedStyle(this.element, null).getPropertyValue("min-width").replace("px", "") || MINIMUM_SIZE);
      this._minimumHeight = parseFloat(getComputedStyle(this.element, null).getPropertyValue("min-height").replace("px", "") || MINIMUM_SIZE);
      this._originalWidth = parseFloat(getComputedStyle(this.element, null).getPropertyValue("width").replace("px", ""));
      this._originalHeight = parseFloat(getComputedStyle(this.element, null).getPropertyValue("height").replace("px", ""));
      this._originalX = this.element.getBoundingClientRect().left;
      this._originalY = this.element.getBoundingClientRect().top;
      this._originalPageX = this._eventValueForProperty(event, "pageX");
      this._originalPageY = this._eventValueForProperty(event, "pageY");
      window.addEventListener("touchmove", this._resize);
      window.addEventListener("touchend", this._stopResize);
      window.addEventListener("mousemove", this._resize);
      window.addEventListener("mouseup", this._stopResize);
    }

    /*
      The bulk of the logic is to calculate the new width and height of the element
      based on the current position on page: width is calculated by subtracting
      the difference between the current pageX and the original this._originalPageX
      from the original this._originalWidth, and rounding up to the nearest integer.
      height is calculated in a similar way using pageY and this._originalPageY.
       In this example (B) is the current element top/left and (A) is x/y of the mouse after dragging:
       A------
      |     |
      |  B--|
      |  |  |
      -------
    */
    _resize(event) {
      let width = this._originalWidth;
      let diffWidth = this._eventValueForProperty(event, "pageX") - this._originalPageX;
      if (document.documentElement.classList.contains("rtl")) {
        width = Math.ceil(width + diffWidth);
      } else {
        width = Math.ceil(width - diffWidth);
      }
      const height = Math.ceil(this._originalHeight - (this._eventValueForProperty(event, "pageY") - this._originalPageY));
      const newStyle = {};
      if (this.options.horizontal && width >= this._minimumWidth) {
        newStyle.width = width + "px";
        if (this.options.position) {
          newStyle.left = Math.ceil(this._originalX + (this._eventValueForProperty(event, "pageX") - this._originalPageX)) + "px";
        }
      }
      if (this.options.vertical && height >= this._minimumHeight) {
        newStyle.height = height + "px";
        if (this.options.position) {
          newStyle.top = Math.ceil(this._originalY + (this._eventValueForProperty(event, "pageY") - this._originalPageY)) + "px";
        }
      }
      if (this.options.mutate) {
        Object.assign(this.element.style, newStyle);
      }
      this.didResizeContainer?.(this.element, {
        width: width >= this._minimumWidth ? width : this._minimumWidth,
        height: height >= this._minimumHeight ? height : this._minimumHeight
      });
    }
    _resizeWindow() {
      if (!this.options.resetOnWindowResize) {
        return;
      }
      this._throttledResizeHandler = (0, _runloop.throttle)(this, this._throttledResize, 100);
    }
    _throttledResize() {
      const style = {};
      if (this.options.vertical) {
        style.height = "auto";
      }
      if (this.options.horizontal) {
        style.width = "auto";
      }
      Object.assign(this.element.style, style);
    }
    _stopResize() {
      window.removeEventListener("touchmove", this._resize);
      window.removeEventListener("touchend", this._stopResize);
      window.removeEventListener("mousemove", this._resize);
      window.removeEventListener("mouseup", this._stopResize);
    }
    _eventValueForProperty(event, property) {
      if (event.changedTouches) {
        return event.changedTouches[0][property];
      } else {
        return event[property];
      }
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "_startResize", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_startResize"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_resize", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_resize"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_resizeWindow", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_resizeWindow"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_throttledResize", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_throttledResize"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_stopResize", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_stopResize"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/modifiers/chat/scrollable-list", ["exports", "@ember/destroyable", "@ember/runloop", "ember-modifier", "discourse-common/lib/later", "discourse-common/utils/decorators"], function (_exports, _destroyable, _runloop, _emberModifier, _later, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const UP = "up";
  const DOWN = "down";
  let ChatScrollableList = _exports.default = (_class = class ChatScrollableList extends _emberModifier.default {
    constructor(owner, args) {
      super(owner, args);
      (0, _destroyable.registerDestructor)(this, instance => instance.cleanup());
    }
    modify(element, [options]) {
      this.element = element;
      this.options = options;
      this.lastScrollTop = this.computeInitialScrollTop();
      this.element.addEventListener("scroll", this.handleScroll, {
        passive: true
      });
      // listen for wheel events to detect scrolling even when at the top or bottom
      this.element.addEventListener("wheel", this.handleWheel, {
        passive: true
      });
    }
    handleScroll() {
      this.throttleComputeScroll();
    }
    handleWheel() {
      this.throttleComputeScroll();
    }
    computeScroll() {
      const scrollTop = this.element.scrollTop;
      this.options.onScroll?.(this.computeState());
      this.lastScrollTop = scrollTop;
    }
    throttleComputeScroll() {
      (0, _runloop.cancel)(this.scrollTimer);
      this.throttleTimer = (0, _runloop.throttle)(this, this.computeScroll, 50, true);
      this.scrollTimer = (0, _later.default)(() => {
        this.options.onScrollEnd?.(this.computeState());
      }, this.options.delay || 250);
    }
    cleanup() {
      (0, _runloop.cancel)(this.scrollTimer);
      (0, _runloop.cancel)(this.throttleTimer);
      this.element.removeEventListener("scroll", this.handleScroll);
      this.element.removeEventListener("wheel", this.handleWheel);
    }
    computeState() {
      const direction = this.computeScrollDirection();
      const distanceToBottom = this.computeDistanceToBottom();
      const distanceToTop = this.computeDistanceToTop();
      return {
        up: direction === UP,
        down: direction === DOWN,
        distanceToBottom,
        distanceToTop,
        atBottom: distanceToBottom.pixels <= 1,
        atTop: distanceToTop.pixels <= 1
      };
    }
    computeInitialScrollTop() {
      if (this.options.reverse) {
        return this.element.scrollHeight - this.element.clientHeight;
      } else {
        return this.element.scrollTop;
      }
    }
    computeScrollTop() {
      if (this.options.reverse) {
        return this.element.scrollHeight - this.element.clientHeight - this.element.scrollTop;
      } else {
        return this.element.scrollTop;
      }
    }
    computeDistanceToTop() {
      let pixels;
      const height = this.element.scrollHeight - this.element.clientHeight;
      if (this.options.reverse) {
        pixels = height - Math.abs(this.element.scrollTop);
      } else {
        pixels = Math.abs(this.element.scrollTop);
      }
      return {
        pixels,
        percentage: Math.round(pixels / height * 100)
      };
    }
    computeDistanceToBottom() {
      let pixels;
      const height = this.element.scrollHeight - this.element.clientHeight;
      if (this.options.reverse) {
        pixels = -this.element.scrollTop;
      } else {
        pixels = height - Math.abs(this.element.scrollTop);
      }
      return {
        pixels,
        percentage: Math.round(pixels / height * 100)
      };
    }
    computeScrollDirection() {
      if (this.element.scrollTop === this.lastScrollTop) {
        return null;
      }
      return this.element.scrollTop < this.lastScrollTop ? UP : DOWN;
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "handleScroll", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "handleScroll"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleWheel", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "handleWheel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "computeScroll", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "computeScroll"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/modifiers/chat/track-message-separator-date", ["exports", "@ember/destroyable", "ember-modifier"], function (_exports, _destroyable, _emberModifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const IS_PINNED_CLASS = "is-pinned";

  /*
    This modifier is used to track the date separator in the chat message list.
    The trick is to have an element with `top: -1px` which will stop fully intersecting
    as soon as it's scrolled a little bit.
  */
  class ChatTrackMessageSeparatorDate extends _emberModifier.default {
    constructor(owner, args) {
      super(owner, args);
      (0, _destroyable.registerDestructor)(this, instance => instance.cleanup());
    }
    modify(element) {
      this.intersectionObserver = new IntersectionObserver(([entry]) => {
        if (entry.isIntersecting && entry.intersectionRatio < 1 && entry.boundingClientRect.y < entry.intersectionRect.y) {
          entry.target.classList.add(IS_PINNED_CLASS);
        } else {
          entry.target.classList.remove(IS_PINNED_CLASS);
        }
      }, {
        threshold: [0, 1]
      });
      this.intersectionObserver.observe(element);
    }
    cleanup() {
      this.intersectionObserver?.disconnect();
    }
  }
  _exports.default = ChatTrackMessageSeparatorDate;
});
define("discourse/plugins/chat/discourse/modifiers/chat/track-message", ["exports", "@ember/destroyable", "ember-modifier", "discourse-common/utils/decorators"], function (_exports, _destroyable, _emberModifier, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let ChatTrackMessage = _exports.default = (_class = class ChatTrackMessage extends _emberModifier.default {
    constructor(owner, args) {
      super(owner, args);
      _defineProperty(this, "didEnterViewport", null);
      _defineProperty(this, "didLeaveViewport", null);
      (0, _destroyable.registerDestructor)(this, instance => instance.cleanup());
    }
    modify(element, [didEnterViewport, didLeaveViewport]) {
      this.didEnterViewport = didEnterViewport;
      this.didLeaveViewport = didLeaveViewport;
      this.intersectionObserver = new IntersectionObserver(this._intersectionObserverCallback, {
        root: document,
        threshold: 0
      });
      this.intersectionObserver.observe(element);
    }
    cleanup() {
      this.intersectionObserver?.disconnect();
    }
    _intersectionObserverCallback(entries) {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          this.didEnterViewport?.();
        } else {
          this.didLeaveViewport?.();
        }
      });
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "_intersectionObserverCallback", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_intersectionObserverCallback"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/pre-initializers/chat-plugin-api", ["exports", "discourse/lib/plugin-api", "discourse/plugins/chat/discourse/components/chat-message", "discourse/plugins/chat/discourse/lib/chat-composer-buttons", "discourse/plugins/chat/discourse/lib/chat-message-interactor", "discourse/plugins/chat/discourse/services/chat-state-manager"], function (_exports, _pluginApi, _chatMessage, _chatComposerButtons, _chatMessageInteractor, _chatStateManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  /**
   * Class exposing the javascript API available to plugins and themes.
   * @class PluginApi
   */
  /**
   * Callback used to decorate a chat message
   *
   * @callback PluginApi~decorateChatMessageCallback
   * @param {ChatMessage} chatMessage - model
   * @param {HTMLElement} messageContainer - DOM node
   * @param {ChatChannel} chatChannel - model
   */
  /**
   * Callback used to decorate a chat message
   *
   * @callback PluginApi~chatDrawerStateCallback
   * @param {Object} state
   * @param {boolean} state.isDrawerActive - is the chat drawer active
   * @param {boolean} state.isDrawerExpanded - is the chat drawer expanded
   */
  /**
   * Decorate a chat message
   *
   * @memberof PluginApi
   * @instance
   * @function decorateChatMessage
   * @param {PluginApi~decorateChatMessageCallback} decorator
   * @example
   *
   * api.decorateChatMessage((chatMessage, messageContainer) => {
   *   messageContainer.dataset.foo = chatMessage.id;
   * });
   */
  /**
   * Register a button in the chat composer
   *
   * @memberof PluginApi
   * @instance
   * @function registerChatComposerButton
   * @param {Object} options
   * @param {number} options.id - The id of the button
   * @param {function} options.action - An action name or an anonymous function called when the button is pressed, eg: "onFooClicked" or `() => { console.log("clicked") }`
   * @param {string} options.icon - A valid font awesome icon name, eg: "far fa-image"
   * @param {string} options.label - Text displayed on the button, a translatable key, eg: "foo.bar"
   * @param {string} options.translatedLabel - Text displayed on the button, a string, eg: "Add gifs"
   * @param {string} [options.position] - Can be "inline" or "dropdown", defaults to "inline"
   * @param {string} [options.title] - Title attribute of the button, a translatable key, eg: "foo.bar"
   * @param {string} [options.translatedTitle] - Title attribute of the button, a string, eg: "Add gifs"
   * @param {string} [options.ariaLabel] - aria-label attribute of the button, a translatable key, eg: "foo.bar"
   * @param {string} [options.translatedAriaLabel] - aria-label attribute of the button, a string, eg: "Add gifs"
   * @param {string} [options.classNames] - Additional names to add to the button’s class attribute, eg: ["foo", "bar"]
   * @param {boolean} [options.displayed] - Hide or show the button
   * @param {boolean} [options.disabled] - Sets the disabled attribute on the button
   * @param {number} [options.priority] - An integer defining the order of the buttons, higher comes first, eg: `700`
   * @param {Array.<string>} [options.dependentKeys] - List of property names which should trigger a refresh of the buttons when changed, eg: `["foo.bar", "bar.baz"]`
   * @example
   *
   * api.registerChatComposerButton({
   *   id: "foo",
   *   displayed() {
   *     return this.site.mobileView && this.canAttachUploads;
   *   }
   * });
   */
  /**
   * Callback when the sate of the chat drawer changes
   *
   * @memberof PluginApi
   * @instance
   * @function addChatDrawerStateCallback
   * @param {PluginApi~chatDrawerStateCallback} callback
   * @example
   *
   * api.addChatDrawerStateCallback(({isDrawerExpanded, isDrawerActive}) => {
   *   if (isDrawerActive && isDrawerExpanded) {
   *     // do something
   *   }
   * });
   */
  /**
   * Send a chat message, message or uploads must be provided
   *
   * @memberof PluginApi
   * @instance
   * @function sendChatMessage
   * @param {number} channelId - The id of the channel
   * @param {Object} options
   * @param {string} [options.message] - The content of the message to send
   * @param {string} [options.uploads] - A list of uploads to send
   * @param {number} [options.threadId] - The thread id where the message should be sent
   *
   * @example
   *
   * api.sendChatMessage(
   *   1,
   *  { message: "Hello world", threadId: 2 }
   * );
   */
  /**
   * Removes secondary actions from the chat composer
   *
   * @memberof PluginApi
   * @instance
   * @function removeChatComposerSecondaryActions
   * @param {...string} [1] - List of secondary action ids to remove, eg: `"copyLink", "select"
   * @example
   *
   * api.removeChatComposerSecondaryActions("copyLink", "select");
   */
  var _default = _exports.default = {
    name: "chat-plugin-api",
    after: "inject-discourse-objects",
    initialize() {
      (0, _pluginApi.withPluginApi)("1.2.0", api => {
        const apiPrototype = Object.getPrototypeOf(api);
        if (!apiPrototype.hasOwnProperty("decorateChatMessage")) {
          Object.defineProperty(apiPrototype, "decorateChatMessage", {
            value(decorator) {
              (0, _chatMessage.addChatMessageDecorator)(decorator);
            }
          });
        }
        if (!apiPrototype.hasOwnProperty("registerChatComposerButton")) {
          Object.defineProperty(apiPrototype, "registerChatComposerButton", {
            value(button) {
              (0, _chatComposerButtons.registerChatComposerButton)(button);
            }
          });
        }
        if (!apiPrototype.hasOwnProperty("addChatDrawerStateCallback")) {
          Object.defineProperty(apiPrototype, "addChatDrawerStateCallback", {
            value(callback) {
              (0, _chatStateManager.addChatDrawerStateCallback)(callback);
            }
          });
        }
        if (!apiPrototype.hasOwnProperty("sendChatMessage")) {
          Object.defineProperty(apiPrototype, "sendChatMessage", {
            async value(channelId, options = {}) {
              return this.container.lookup("service:chat-api").sendMessage(channelId, {
                thread_id: options.threadId,
                message: options.message,
                uploads: options.uploads
              });
            }
          });
        }
        if (!apiPrototype.hasOwnProperty("removeChatComposerSecondaryActions")) {
          Object.defineProperty(apiPrototype, "removeChatComposerSecondaryActions", {
            value(...actionIds) {
              (0, _chatMessageInteractor.removeChatComposerSecondaryActions)(actionIds);
            }
          });
        }
      });
    },
    teardown() {
      (0, _chatMessage.resetChatMessageDecorators)();
    }
  };
});
define("discourse/plugins/chat/discourse/preferences-chat-route-map", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = {
    resource: "user.preferences",
    map() {
      this.route("chat");
    }
  };
});
define("discourse/plugins/chat/discourse/routes/admin-plugins-chat", ["exports", "@ember/object", "discourse/lib/ajax", "discourse/routes/discourse", "discourse/plugins/chat/discourse/models/chat-channel"], function (_exports, _object, _ajax, _discourse, _chatChannel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class AdminPluginsChatRoute extends _discourse.default {
    model() {
      if (!this.currentUser?.admin) {
        return {
          model: null
        };
      }
      return (0, _ajax.ajax)("/admin/plugins/chat.json").then(model => {
        model.incoming_chat_webhooks = model.incoming_chat_webhooks.map(webhook => _object.default.create(webhook));
        model.chat_channels = model.chat_channels.map(channel => {
          return _chatChannel.default.create(channel);
        });
        return model;
      });
    }
  }
  _exports.default = AdminPluginsChatRoute;
});
define("discourse/plugins/chat/discourse/routes/chat-browse-archived", ["exports", "@ember/service", "discourse/routes/discourse"], function (_exports, _service, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatBrowseIndexRoute = _exports.default = (_class = class ChatBrowseIndexRoute extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor2, this);
    }
    afterModel() {
      if (!this.siteSettings.chat_allow_archiving_channels) {
        this.router.replaceWith("chat.browse");
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/routes/chat-browse-index", ["exports", "@ember/service", "discourse/lib/utilities", "discourse/routes/discourse"], function (_exports, _service, _utilities, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatBrowseIndexRoute = _exports.default = (_class = class ChatBrowseIndexRoute extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor2, this);
      _initializerDefineProperty(this, "router", _descriptor3, this);
    }
    beforeModel() {
      if (!this.siteSettings.enable_public_channels) {
        return this.router.transitionTo(`discovery.${(0, _utilities.defaultHomepage)()}`);
      }
    }
    activate() {
      this.chat.activeChannel = null;
    }
    afterModel() {
      this.router.replaceWith("chat.browse.open");
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/routes/chat-channel-decorator", ["exports", "@ember/service"], function (_exports, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = withChatChannel;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  function withChatChannel(extendedClass) {
    var _class, _descriptor, _descriptor2, _descriptor3;
    return _class = class WithChatChannel extends extendedClass {
      constructor(...args) {
        super(...args);
        _initializerDefineProperty(this, "chatChannelsManager", _descriptor, this);
        _initializerDefineProperty(this, "chat", _descriptor2, this);
        _initializerDefineProperty(this, "router", _descriptor3, this);
      }
      async model(params) {
        return this.chatChannelsManager.find(params.channelId);
      }
      titleToken() {
        if (!this.currentModel) {
          return;
        }
        if (this.currentModel.isDirectMessageChannel) {
          return `${this.currentModel.title}`;
        } else {
          return `#${this.currentModel.title}`;
        }
      }
      afterModel(model) {
        super.afterModel?.(...arguments);
        this.chat.activeChannel = model;
        if (!model) {
          return this.router.replaceWith("chat");
        }
        let {
          channelTitle
        } = this.paramsFor(this.routeName);
        if (channelTitle && channelTitle !== model.slugifiedTitle) {
          if (this.routeName === "chat.channel.info") {
            return this.router.replaceWith("chat.channel.info", ...model.routeModels);
          }
          const messageId = this.paramsFor("chat.channel.near-message").messageId;
          const threadId = this.paramsFor("chat.channel.thread").threadId;
          if (threadId) {
            const threadMessageId = this.paramsFor("chat.channel.thread.near-message").messageId;
            if (threadMessageId) {
              this.router.replaceWith("chat.channel.thread.near-message", ...model.routeModels, threadId, threadMessageId);
            } else {
              this.router.replaceWith("chat.channel.thread", ...model.routeModels, threadId);
            }
          } else if (messageId) {
            this.router.replaceWith("chat.channel.near-message", ...model.routeModels, messageId);
          } else {
            this.router.replaceWith("chat.channel", ...model.routeModels);
          }
        } else {
          this.controllerFor("chat-channel").set("targetMessageId", null);
        }
      }
    }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null
    }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null
    }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null
    })), _class;
  }
});
define("discourse/plugins/chat/discourse/routes/chat-channel-info-index", ["exports", "@ember/service", "discourse/routes/discourse"], function (_exports, _service, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelInfoIndexRoute = _exports.default = (_class = class ChatChannelInfoIndexRoute extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
    }
    afterModel() {
      this.router.replaceWith("chat.channel.info.settings");
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/routes/chat-channel-info-members", ["exports", "@ember/service", "discourse/routes/discourse"], function (_exports, _service, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelInfoMembersRoute = _exports.default = (_class = class ChatChannelInfoMembersRoute extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
    }
    afterModel(model) {
      if (!model.isOpen) {
        return this.router.replaceWith("chat.channel.info.settings");
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/routes/chat-channel-info", ["exports", "@ember/service", "discourse/routes/discourse", "discourse/plugins/chat/discourse/services/chat-channel-info-route-origin-manager", "discourse/plugins/chat/discourse/routes/chat-channel-decorator"], function (_exports, _service, _discourse, _chatChannelInfoRouteOriginManager, _chatChannelDecorator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelInfoRoute = _exports.default = (0, _chatChannelDecorator.default)(_class = (_class2 = class ChatChannelInfoRoute extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatChannelInfoRouteOriginManager", _descriptor, this);
    }
    activate(transition) {
      const name = transition?.from?.name;
      if (name) {
        this.chatChannelInfoRouteOriginManager.origin = name.startsWith("chat.browse") ? _chatChannelInfoRouteOriginManager.ORIGINS.browse : _chatChannelInfoRouteOriginManager.ORIGINS.channel;
      }
    }
    deactivate() {
      this.chatChannelInfoRouteOriginManager.origin = null;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "chatChannelInfoRouteOriginManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class;
});
define("discourse/plugins/chat/discourse/routes/chat-channel-legacy", ["exports", "@ember/service", "discourse/routes/discourse"], function (_exports, _service, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelLegacyRoute = _exports.default = (_class = class ChatChannelLegacyRoute extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
    }
    redirect() {
      const {
        channelTitle,
        channelId,
        messageId
      } = this.paramsFor(this.routeName);
      this.router.replaceWith("chat.channel", channelTitle, channelId, {
        queryParams: {
          messageId
        }
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/routes/chat-channel-near-message", ["exports", "@ember/service", "discourse/routes/discourse"], function (_exports, _service, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  // This route is only here as a convenience method for a clean `/c/:channelTitle/:channelId/:messageId` URL.
  // It's not a real route, it just redirects to the real route after setting a param on the controller.
  let ChatChannelNearMessage = _exports.default = (_class = class ChatChannelNearMessage extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
    }
    beforeModel() {
      const channel = this.modelFor("chat-channel");
      const {
        messageId
      } = this.paramsFor(this.routeName);
      this.controllerFor("chat-channel").set("messageId", null);
      if (messageId || this.controllerFor("chat-channel").get("targetMessageId")) {
        this.controllerFor("chat-channel").set("targetMessageId", messageId);
      }
      this.router.replaceWith("chat.channel", ...channel.routeModels);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/routes/chat-channel-thread-near-message", ["exports", "@ember/service", "discourse/routes/discourse"], function (_exports, _service, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  // This route is only here as a convenience method for a clean `/c/:channelTitle/:channelId/t/:threadId/:messageId` URL.
  // It's not a real route, it just redirects to the real route after setting a param on the controller.
  let ChatChannelThreadNearMessage = _exports.default = (_class = class ChatChannelThreadNearMessage extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
    }
    beforeModel() {
      const thread = this.modelFor("chat-channel-thread");
      const {
        messageId
      } = this.paramsFor(this.routeName);
      if (messageId || this.controllerFor("chat-channel-thread").get("targetMessageId")) {
        this.controllerFor("chat-channel-thread").set("targetMessageId", messageId);
      }
      this.router.replaceWith("chat.channel.thread", ...thread.routeModels);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/routes/chat-channel-thread", ["exports", "@ember/object", "@ember/service", "discourse/routes/discourse"], function (_exports, _object, _service, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelThread = _exports.default = (_class = class ChatChannelThread extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor2, this);
      _initializerDefineProperty(this, "chat", _descriptor3, this);
      _initializerDefineProperty(this, "chatThreadPane", _descriptor4, this);
    }
    model(params, transition) {
      const channel = this.modelFor("chat.channel");
      return channel.threadsManager.find(channel.id, params.threadId).catch(() => {
        transition.abort();
        this.chatStateManager.closeSidePanel();
        this.router.transitionTo("chat.channel", ...channel.routeModels);
        return;
      });
    }
    afterModel(model) {
      this.chat.activeChannel.activeThread = model;
    }
    willTransition(transition) {
      if (transition.targetName === "chat.channel.index" || transition.targetName === "chat.channel.near-message" || transition.targetName === "chat.index" || !transition.targetName.startsWith("chat")) {
        this.chatStateManager.closeSidePanel();
      }
    }
    beforeModel(transition) {
      const channel = this.modelFor("chat.channel");
      if (!channel.threadingEnabled) {
        transition.abort();
        this.router.transitionTo("chat.channel", ...channel.routeModels);
        return;
      }
      const {
        messageId
      } = this.paramsFor(this.routeName + ".near-message");
      if (!messageId && this.controllerFor("chat-channel-thread").get("targetMessageId")) {
        this.controllerFor("chat-channel-thread").set("targetMessageId", null);
      }
      this.chatStateManager.openSidePanel();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatThreadPane", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "willTransition", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "willTransition"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/routes/chat-channel-threads", ["exports", "@ember/object", "@ember/service", "discourse/routes/discourse"], function (_exports, _object, _service, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelThreads = _exports.default = (_class = class ChatChannelThreads extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
      _initializerDefineProperty(this, "chatThreadListPane", _descriptor2, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor3, this);
    }
    beforeModel(transition) {
      const channel = this.modelFor("chat.channel");
      if (!channel.threadingEnabled) {
        transition.abort();
        this.router.transitionTo("chat.channel", ...channel.routeModels);
        return;
      }
      this.chatStateManager.openSidePanel();
    }
    willTransition(transition) {
      if (transition.targetName === "chat.channel.index" || transition.targetName === "chat.channel.near-message" || transition.targetName === "chat.index" || !transition.targetName.startsWith("chat")) {
        this.chatStateManager.closeSidePanel();
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatThreadListPane", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "willTransition", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "willTransition"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/routes/chat-channel", ["exports", "@ember/service", "discourse/routes/discourse", "discourse/plugins/chat/discourse/routes/chat-channel-decorator"], function (_exports, _service, _discourse, _chatChannelDecorator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _class2, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelRoute = _exports.default = (0, _chatChannelDecorator.default)(_class = (_class2 = class ChatChannelRoute extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "site", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
    }
    redirect(model) {
      if (this.site.mobileView) {
        return;
      }
      const messageId = this.paramsFor("chat.channel.near-message").messageId;
      const threadId = this.paramsFor("chat.channel.thread").threadId;
      if (!messageId && !threadId && model.threadsManager.unreadThreadCount > 0) {
        this.router.transitionTo("chat.channel.threads", ...model.routeModels);
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class;
});
define("discourse/plugins/chat/discourse/routes/chat-draft-channel", ["exports", "@ember/service", "discourse/routes/discourse"], function (_exports, _service, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatDraftChannelRoute = _exports.default = (_class = class ChatDraftChannelRoute extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
    }
    beforeModel() {
      if (!this.chat.userCanDirectMessage) {
        this.router.transitionTo("chat");
      }
    }
    activate() {
      this.chat.activeChannel = null;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/routes/chat-index", ["exports", "@ember/service", "discourse/routes/discourse"], function (_exports, _service, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatIndexRoute = _exports.default = (_class = class ChatIndexRoute extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor2, this);
      _initializerDefineProperty(this, "router", _descriptor3, this);
    }
    activate() {
      this.chat.activeChannel = null;
    }
    redirect() {
      // Always want the channel index on mobile.
      if (this.site.mobileView) {
        return;
      }

      // We are on desktop. Check for a channel to enter and transition if so
      const id = this.chat.getIdealFirstChannelId();
      if (id) {
        return this.chatChannelsManager.find(id).then(c => {
          return this.router.replaceWith("chat.channel", ...c.routeModels);
        });
      } else {
        return this.router.replaceWith("chat.browse");
      }
    }
    model() {
      if (this.site.mobileView) {
        return this.chatChannelsManager.channels;
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/routes/chat-threads", ["exports", "@ember/service", "discourse/routes/discourse"], function (_exports, _service, _discourse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelThreads = _exports.default = (_class = class ChatChannelThreads extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor2, this);
    }
    activate() {
      this.chat.activeChannel = null;
      this.chatStateManager.closeSidePanel();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/routes/chat", ["exports", "@ember/runloop", "@ember/service", "discourse/lib/plugin-api", "discourse/lib/utilities", "discourse/mixins/scroll-top", "discourse/routes/discourse", "discourse-i18n", "discourse/plugins/chat/discourse/lib/get-user-chat-separate-sidebar-mode", "discourse/plugins/chat/discourse/lib/init-sidebar-state"], function (_exports, _runloop, _service, _pluginApi, _utilities, _scrollTop, _discourse, _discourseI18n, _getUserChatSeparateSidebarMode, _initSidebarState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatRoute = _exports.default = (_class = class ChatRoute extends _discourse.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor3, this);
      _initializerDefineProperty(this, "currentUser", _descriptor4, this);
    }
    titleToken() {
      return _discourseI18n.default.t("chat.title_capitalized");
    }
    beforeModel(transition) {
      if (!this.chat.userCanChat) {
        return this.router.transitionTo(`discovery.${(0, _utilities.defaultHomepage)()}`);
      }
      const INTERCEPTABLE_ROUTES = ["chat.channel", "chat.threads", "chat.channel.thread", "chat.channel.thread.index", "chat.channel.thread.near-message", "chat.channel.threads", "chat.channel.index", "chat.channel.near-message", "chat.channel-legacy", "chat", "chat.index"];
      if (transition.from &&
      // don't intercept when directly loading chat
      this.chatStateManager.isDrawerPreferred && INTERCEPTABLE_ROUTES.includes(transition.targetName)) {
        transition.abort();
        let url = transition.intent.url;
        if (transition.targetName.startsWith("chat.channel")) {
          url ??= this.router.urlFor(transition.targetName, ...transition.intent.contexts);
        } else {
          url ??= this.router.urlFor(transition.targetName);
        }
        this.appEvents.trigger("chat:open-url", url);
        return;
      }
      this.appEvents.trigger("chat:toggle-close");
    }
    activate() {
      (0, _pluginApi.withPluginApi)("1.8.0", api => {
        api.setSidebarPanel(_initSidebarState.CHAT_PANEL);
        const chatSeparateSidebarMode = (0, _getUserChatSeparateSidebarMode.getUserChatSeparateSidebarMode)(this.currentUser);
        if (chatSeparateSidebarMode.never) {
          api.setCombinedSidebarMode();
          api.hideSidebarSwitchPanelButtons();
        } else {
          api.setSeparatedSidebarMode();
        }
      });
      this.chatStateManager.storeAppURL();
      this.chat.updatePresence();
      (0, _runloop.schedule)("afterRender", () => {
        document.body.classList.add("has-full-page-chat");
        document.documentElement.classList.add("has-full-page-chat");
        (0, _scrollTop.scrollTop)();
      });
    }
    deactivate(transition) {
      (0, _pluginApi.withPluginApi)("1.8.0", api => {
        (0, _initSidebarState.initSidebarState)(api, this.currentUser);
      });
      if (transition) {
        const url = this.router.urlFor(transition.from.name);
        this.chatStateManager.storeChatURL(url);
      }
      this.chat.activeChannel = null;
      this.chat.updatePresence();
      (0, _runloop.schedule)("afterRender", () => {
        document.body.classList.remove("has-full-page-chat");
        document.documentElement.classList.remove("has-full-page-chat");
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/routes/preferences-chat", ["exports", "@ember/service", "discourse/lib/utilities", "discourse/routes/restricted-user"], function (_exports, _service, _utilities, _restrictedUser) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let PreferencesChatRoute = _exports.default = (_class = class PreferencesChatRoute extends _restrictedUser.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor3, this);
      _initializerDefineProperty(this, "currentUser", _descriptor4, this);
      _defineProperty(this, "showFooter", true);
    }
    setupController(controller, user) {
      if (!this.siteSettings.chat_enabled || !user.can_chat && !this.currentUser?.admin) {
        return this.router.transitionTo(`discovery.${(0, _utilities.defaultHomepage)()}`);
      }
      controller.set("model", user);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/services/chat-admin-api", ["exports", "@ember/service", "discourse/lib/ajax"], function (_exports, _service, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
  function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
  function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  var _basePath = /*#__PURE__*/new WeakMap();
  var _post = /*#__PURE__*/new WeakSet();
  class ChatAdminApi extends _service.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _post);
      _classPrivateFieldInitSpec(this, _basePath, {
        get: _get_basePath,
        set: void 0
      });
    }
    async exportMessages() {
      await _classPrivateMethodGet(this, _post, _post2).call(this, `/export/messages`);
    }
  }
  _exports.default = ChatAdminApi;
  function _get_basePath() {
    return "/chat/admin";
  }
  function _post2(endpoint, data = {}) {
    return (0, _ajax.ajax)(`${_classPrivateFieldGet(this, _basePath)}${endpoint}`, {
      type: "POST",
      data
    });
  }
});
define("discourse/plugins/chat/discourse/services/chat-api", ["exports", "@ember/service", "discourse/lib/ajax", "discourse/plugins/chat/discourse/models/user-chat-channel-membership", "discourse/plugins/chat/discourse/lib/collection"], function (_exports, _service, _ajax, _userChatChannelMembership, _collection) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _basePath, _getRequest, _putRequest, _postRequest, _deleteRequest;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
  function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
  function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Chat API service. Provides methods to interact with the chat API.
   *
   * @module ChatApi
   * @implements {@ember/service}
   */
  let ChatApi = _exports.default = (_class = (_basePath = /*#__PURE__*/new WeakMap(), _getRequest = /*#__PURE__*/new WeakSet(), _putRequest = /*#__PURE__*/new WeakSet(), _postRequest = /*#__PURE__*/new WeakSet(), _deleteRequest = /*#__PURE__*/new WeakSet(), class ChatApi extends _service.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _deleteRequest);
      _classPrivateMethodInitSpec(this, _postRequest);
      _classPrivateMethodInitSpec(this, _putRequest);
      _classPrivateMethodInitSpec(this, _getRequest);
      _classPrivateFieldInitSpec(this, _basePath, {
        get: _get_basePath,
        set: void 0
      });
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor2, this);
    }
    channel(channelId) {
      return _classPrivateMethodGet(this, _getRequest, _getRequest2).call(this, `/channels/${channelId}`);
    }
    channelThreadMessages(channelId, threadId, params = {}) {
      return _classPrivateMethodGet(this, _getRequest, _getRequest2).call(this, `/channels/${channelId}/threads/${threadId}/messages?${new URLSearchParams(params).toString()}`);
    }
    channelMessages(channelId, params = {}) {
      return _classPrivateMethodGet(this, _getRequest, _getRequest2).call(this, `/channels/${channelId}/messages?${new URLSearchParams(params).toString()}`);
    }

    /**
     * Flags a message in a channel.
     * @param {number} channelId - The ID of the channel.
     * @param {number} messageId - The ID of the message to flag.
     * @param {object} params - Params of the flag.
     * @param {integer} params.flag_type_id
     * @param {string} [params.message]
     * @param {boolean} [params.is_warning]
     * @param {boolean} [params.queue_for_review]
     * @param {boolean} [params.take_action]
     * @returns {Promise}
     *
     * @example
     *
     *    this.chatApi.flagMessage(5, 1);
     */
    flagMessage(channelId, messageId, params = {}) {
      return _classPrivateMethodGet(this, _postRequest, _postRequest2).call(this, `/channels/${channelId}/messages/${messageId}/flags`, params);
    }

    /**
     * Get a thread in a channel by its ID.
     * @param {number} channelId - The ID of the channel.
     * @param {number} threadId - The ID of the thread.
     * @returns {Promise}
     *
     * @example
     *
     *    this.chatApi.thread(5, 1).then(thread => { ... })
     */
    thread(channelId, threadId) {
      return _classPrivateMethodGet(this, _getRequest, _getRequest2).call(this, `/channels/${channelId}/threads/${threadId}`);
    }

    /**
     * Loads all threads for a channel.
     * For now we only get the 50 threads ordered
     * by the last message sent by the user then the
     * thread creation date, later we will paginate
     * and add filters.
     * @param {number} channelId - The ID of the channel.
     * @returns {Promise}
     */
    threads(channelId, handler) {
      return new _collection.default(`${_classPrivateFieldGet(this, _basePath)}/channels/${channelId}/threads`, handler);
    }

    /**
     * List all accessible category channels of the current user.
     * @returns {Collection}
     *
     * @example
     *
     *    this.chatApi.channels.then(channels => { ... })
     */
    channels(params = {}) {
      return new _collection.default(`${_classPrivateFieldGet(this, _basePath)}/channels`, response => {
        return response.channels.map(channel => this.chatChannelsManager.store(channel));
      }, params);
    }

    /**
     * Moves messages from one channel to another.
     * @param {number} channelId - The ID of the original channel.
     * @param {object} data - Params of the move.
     * @param {Array.<number>} data.message_ids - IDs of the moved messages.
     * @param {number} data.destination_channel_id - ID of the channel where the messages are moved to.
     * @returns {Promise}
     *
     * @example
     *
     *   this.chatApi
     *     .moveChannelMessages(1, {
     *       message_ids: [2, 3],
     *       destination_channel_id: 4,
     *     }).then(() => { ... })
     */
    moveChannelMessages(channelId, data = {}) {
      return _classPrivateMethodGet(this, _postRequest, _postRequest2).call(this, `/channels/${channelId}/messages/moves`, {
        move: data
      });
    }

    /**
     * Destroys a channel.
     * @param {number} channelId - The ID of the channel.
     * @returns {Promise}
     *
     * @example
     *
     *    this.chatApi.destroyChannel(1).then(() => { ... })
     */
    destroyChannel(channelId) {
      return _classPrivateMethodGet(this, _deleteRequest, _deleteRequest2).call(this, `/channels/${channelId}`);
    }

    /**
     * Creates a channel.
     * @param {object} data - Params of the channel.
     * @param {string} data.name - The name of the channel.
     * @param {string} data.chatable_id - The category of the channel.
     * @param {string} data.description - The description of the channel.
     * @param {boolean} [data.auto_join_users] - Should users join this channel automatically.
     * @returns {Promise}
     *
     * @example
     *
     *    this.chatApi
     *      .createChannel({ name: "foo", chatable_id: 1, description "bar" })
     *      .then((channel) => { ... })
     */
    createChannel(data = {}) {
      return _classPrivateMethodGet(this, _postRequest, _postRequest2).call(this, "/channels", {
        channel: data
      }).then(response => this.chatChannelsManager.store(response.channel));
    }

    /**
     * Lists chat permissions for a category.
     * @param {number} categoryId - ID of the category.
     * @returns {Promise}
     */
    categoryPermissions(categoryId) {
      return _classPrivateMethodGet(this, _getRequest, _getRequest2).call(this, `/category-chatables/${categoryId}/permissions`);
    }

    /**
     * Sends a message.
     * @param {number} channelId - ID of the channel.
     * @param {object} data - Params of the message.
     * @param {string} data.message - The raw content of the message in markdown.
     * @param {string} data.cooked - The cooked content of the message.
     * @param {number} [data.in_reply_to_id] - The ID of the replied-to message.
     * @param {number} [data.staged_id] - The staged ID of the message before it was persisted.
     * @param {number} [data.thread_id] - The ID of the thread where this message should be posted.
     * @param {Array.<number>} [data.upload_ids] - Array of upload ids linked to the message.
     * @returns {Promise}
     */
    sendMessage(channelId, data = {}) {
      return (0, _ajax.ajax)(`/chat/${channelId}`, {
        ignoreUnsent: false,
        type: "POST",
        data
      });
    }

    /**
     * Trashes (soft deletes) a chat message.
     * @param {number} channelId - ID of the channel.
     * @param {number} messageId - ID of the message.
     * @returns {Promise}
     */
    trashMessage(channelId, messageId) {
      return _classPrivateMethodGet(this, _deleteRequest, _deleteRequest2).call(this, `/channels/${channelId}/messages/${messageId}`);
    }

    /**
     * Creates a channel archive.
     * @param {number} channelId - The ID of the channel.
     * @param {object} data - Params of the archive.
     * @param {string} data.selection - "new_topic" or "existing_topic".
     * @param {string} [data.title] - Title of the topic when creating a new topic.
     * @param {string} [data.category_id] - ID of the category used when creating a new topic.
     * @param {Array.<string>} [data.tags] - tags used when creating a new topic.
     * @param {string} [data.topic_id] - ID of the topic when using an existing topic.
     * @returns {Promise}
     */
    createChannelArchive(channelId, data = {}) {
      return _classPrivateMethodGet(this, _postRequest, _postRequest2).call(this, `/channels/${channelId}/archives`, {
        archive: data
      });
    }

    /**
     * Updates a channel.
     * @param {number} channelId - The ID of the channel.
     * @param {object} data - Params of the archive.
     * @param {string} [data.description] - Description of the channel.
     * @param {string} [data.name] - Name of the channel.
     * @returns {Promise}
     */
    updateChannel(channelId, data = {}) {
      return _classPrivateMethodGet(this, _putRequest, _putRequest2).call(this, `/channels/${channelId}`, {
        channel: data
      });
    }

    /**
     * Creates a thread.
     * @param {number} channelId - The ID of the channel.
     * @param {number} originalMessageId - The ID of the original message.
     * @param {object} data - Params of the thread.
     * @param {string} [data.title] - Title of the thread.
     * @returns {Promise}
     */
    createThread(channelId, originalMessageId, data = {}) {
      return _classPrivateMethodGet(this, _postRequest, _postRequest2).call(this, `/channels/${channelId}/threads`, {
        title: data.title,
        original_message_id: originalMessageId
      });
    }

    /**
     * Updates the status of a channel.
     * @param {number} channelId - The ID of the channel.
     * @param {string} status - The new status, can be "open" or "closed".
     * @returns {Promise}
     */
    updateChannelStatus(channelId, status) {
      return _classPrivateMethodGet(this, _putRequest, _putRequest2).call(this, `/channels/${channelId}/status`, {
        status
      });
    }

    /**
     * Lists members of a channel.
     * @param {number} channelId - The ID of the channel.
     * @returns {Collection}
     */
    listChannelMemberships(channelId, params = {}) {
      return new _collection.default(`${_classPrivateFieldGet(this, _basePath)}/channels/${channelId}/memberships`, response => {
        return response.memberships.map(membership => _userChatChannelMembership.default.create(membership));
      }, params);
    }

    /**
     * Lists public and direct message channels of the current user.
     * @returns {Promise}
     */
    listCurrentUserChannels() {
      return _classPrivateMethodGet(this, _getRequest, _getRequest2).call(this, "/me/channels");
    }

    /**
     * Makes current user follow a channel.
     * @param {number} channelId - The ID of the channel.
     * @returns {Promise}
     */
    followChannel(channelId) {
      return _classPrivateMethodGet(this, _postRequest, _postRequest2).call(this, `/channels/${channelId}/memberships/me`).then(result => _userChatChannelMembership.default.create(result.membership));
    }

    /**
     * Makes current user unfollow a channel.
     * @param {number} channelId - The ID of the channel.
     * @returns {Promise}
     */
    unfollowChannel(channelId) {
      return _classPrivateMethodGet(this, _deleteRequest, _deleteRequest2).call(this, `/channels/${channelId}/memberships/me/follows`).then(result => _userChatChannelMembership.default.create(result.membership));
    }

    /**
     * Destroys the membership of current user on a channel.
     *
     * @param {number} channelId - The ID of the channel.
     * @returns {Promise}
     */
    leaveChannel(channelId) {
      return _classPrivateMethodGet(this, _deleteRequest, _deleteRequest2).call(this, `/channels/${channelId}/memberships/me`);
    }

    /**
     * Get the list of tracked threads for the current user.
     *
     * @returns {Promise}
     */
    userThreads(handler) {
      return new _collection.default(`${_classPrivateFieldGet(this, _basePath)}/me/threads`, handler);
    }

    /**
     * Update notifications settings of current user for a channel.
     * @param {number} channelId - The ID of the channel.
     * @param {object} data - The settings to modify.
     * @param {boolean} [data.muted] - Mutes the channel.
     * @param {string} [data.desktop_notification_level] - Notifications level on desktop: never, mention or always.
     * @param {string} [data.mobile_notification_level] - Notifications level on mobile: never, mention or always.
     * @returns {Promise}
     */
    updateCurrentUserChannelNotificationsSettings(channelId, data = {}) {
      return _classPrivateMethodGet(this, _putRequest, _putRequest2).call(this, `/channels/${channelId}/notifications-settings/me`, {
        notifications_settings: data
      });
    }

    /**
     * Update notifications settings of current user for a thread.
     * @param {number} channelId - The ID of the channel.
     * @param {number} threadId - The ID of the thread.
     * @param {object} data - The settings to modify.
     * @param {boolean} [data.notification_level] - The new notification level, c.f. Chat::NotificationLevels. Threads only support
     *  "regular" and "tracking" for now.
     * @returns {Promise}
     */
    updateCurrentUserThreadNotificationsSettings(channelId, threadId, data) {
      return _classPrivateMethodGet(this, _putRequest, _putRequest2).call(this, `/channels/${channelId}/threads/${threadId}/notifications-settings/me`, {
        notification_level: data.notificationLevel
      });
    }

    /**
     * Saves a draft for the channel, which includes message contents and uploads.
     * @param {number} channelId - The ID of the channel.
     * @param {object} data - The draft data, see ChatMessage.toJSONDraft() for more details.
     * @returns {Promise}
     */
    saveDraft(channelId, data, options = {}) {
      let endpoint = `/chat/api/channels/${channelId}`;
      if (options.threadId) {
        endpoint += `/threads/${options.threadId}`;
      }
      endpoint += "/drafts";
      return (0, _ajax.ajax)(endpoint, {
        type: "POST",
        data: {
          data
        },
        ignoreUnsent: false
      }).then(() => {
        this.chat.markNetworkAsReliable();
      }).catch(error => {
        // we ignore a draft which can't be saved because it's too big
        // and only deal with network error for now
        if (!error.jqXHR?.responseJSON?.errors?.length) {
          this.chat.markNetworkAsUnreliable();
        }
      });
    }

    /**
     * Adds or removes an emoji reaction for a message inside a channel.
     * @param {number} channelId - The ID of the channel.
     * @param {number} messageId - The ID of the message to react on.
     * @param {string} emoji - The text version of the emoji without colons, e.g. tada
     * @param {string} reaction - Either "add" or "remove"
     * @returns {Promise}
     */
    publishReaction(channelId, messageId, emoji, reactAction) {
      return (0, _ajax.ajax)(`/chat/${channelId}/react/${messageId}`, {
        type: "PUT",
        data: {
          react_action: reactAction,
          emoji
        }
      });
    }

    /**
     * Restores a single deleted chat message in a channel.
     *
     * @param {number} channelId - The ID of the channel for the message being restored.
     * @param {number} messageId - The ID of the message being restored.
     */
    restoreMessage(channelId, messageId) {
      return _classPrivateMethodGet(this, _putRequest, _putRequest2).call(this, `/channels/${channelId}/messages/${messageId}/restore`);
    }

    /**
     * Rebakes the cooked HTML of a single message in a channel.
     *
     * @param {number} channelId - The ID of the channel for the message being restored.
     * @param {number} messageId - The ID of the message being restored.
     */
    rebakeMessage(channelId, messageId) {
      return (0, _ajax.ajax)(`/chat/${channelId}/${messageId}/rebake`, {
        type: "PUT"
      });
    }

    /**
     * Saves an edit to a message's contents in a channel.
     *
     * @param {number} channelId - The ID of the channel for the message being edited.
     * @param {number} messageId - The ID of the message being edited.
     * @param {object} data - Params of the edit.
     * @param {string} data.new_message - The edited content of the message.
     * @param {Array<number>} data.upload_ids - The uploads attached to the message after editing.
     */
    editMessage(channelId, messageId, data) {
      return _classPrivateMethodGet(this, _putRequest, _putRequest2).call(this, `/channels/${channelId}/messages/${messageId}`, data);
    }

    /**
     * Marks messages for all of a user's chat channel memberships as read.
     *
     * @returns {Promise}
     */
    markAllChannelsAsRead() {
      return _classPrivateMethodGet(this, _putRequest, _putRequest2).call(this, `/channels/read`);
    }

    /**
     * Lists all possible chatables.
     *
     * @param {term} string - The term to search for. # prefix will scope to channels, @ to users.
     *
     * @returns {Promise}
     */
    chatables(args = {}) {
      return _classPrivateMethodGet(this, _getRequest, _getRequest2).call(this, "/chatables", args);
    }

    /**
     * Marks messages for a single user chat channel membership as read. If no
     * message ID is provided, then the latest message for the channel is fetched
     * on the server and used for the last read message.
     *
     * @param {number} channelId - The ID of the channel for the message being marked as read.
     * @param {number} [messageId] - The ID of the message being marked as read.
     * @returns {Promise}
     */
    markChannelAsRead(channelId, messageId = null) {
      return _classPrivateMethodGet(this, _putRequest, _putRequest2).call(this, `/channels/${channelId}/read/${messageId}`);
    }

    /**
     * Marks all messages and mentions in a thread as read. This is quite
     * far-reaching for now, and is not granular since there is no membership/
     * read state per-user for threads. In future this will be expanded to
     * also pass message ID in the same way as markChannelAsRead
     *
     * @param {number} channelId - The ID of the channel for the thread being marked as read.
     * @param {number} threadId - The ID of the thread being marked as read.
     * @returns {Promise}
     */
    markThreadAsRead(channelId, threadId) {
      return _classPrivateMethodGet(this, _putRequest, _putRequest2).call(this, `/channels/${channelId}/threads/${threadId}/read`);
    }

    /**
     * Updates settings of a thread.
     *
     * @param {number} channelId - The ID of the channel for the thread being edited.
     * @param {number} threadId - The ID of the thread being edited.
     * @param {object} data - Params of the edit.
     * @param {string} data.title - The new title for the thread.
     */
    editThread(channelId, threadId, data) {
      return _classPrivateMethodGet(this, _putRequest, _putRequest2).call(this, `/channels/${channelId}/threads/${threadId}`, data);
    }

    /**
     * Generate a quote for a list of messages.
     *
     * @param {number} channelId - The ID of the channel containing the messages.
     * @param {Array<number>} messageIds - The IDs of the messages to quote.
     */
    generateQuote(channelId, messageIds) {
      return (0, _ajax.ajax)(`/chat/${channelId}/quote`, {
        type: "POST",
        data: {
          message_ids: messageIds
        }
      });
    }

    /**
     * Invite users to a channel.
     *
     * @param {number} channelId - The ID of the channel.
     * @param {Array<number>} userIds - The IDs of the users to invite.
     * @param {object} options
     * @param {number} options.chat_message_id - A message ID to display in the invite.
     */
    invite(channelId, userIds, options = {}) {
      return _classPrivateMethodGet(this, _postRequest, _postRequest2).call(this, `/channels/${channelId}/invites`, {
        user_ids: userIds,
        message_id: options.messageId
      });
    }

    /**
     * Summarize a channel.
     *
     * @param {number} channelId - The ID of the channel to summarize.
     * @param {object} options
     * @param {number} options.since - Number of hours ago the summary should start (1, 3, 6, 12, 24, 72, 168).
     */
    summarize(channelId, options = {}) {
      return _classPrivateMethodGet(this, _getRequest, _getRequest2).call(this, `/channels/${channelId}/summarize`, options);
    }

    /**
     * Add members to a channel.
     *
     * @param {number} channelId - The ID of the channel.
     * @param {Array<string>} usernames - The usernames of the users to add.
     */
    addMembersToChannel(channelId, usernames) {
      return _classPrivateMethodGet(this, _postRequest, _postRequest2).call(this, `/channels/${channelId}/memberships`, {
        usernames
      });
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  function _get_basePath() {
    return "/chat/api";
  }
  function _getRequest2(endpoint, data = {}) {
    return (0, _ajax.ajax)(`${_classPrivateFieldGet(this, _basePath)}${endpoint}`, {
      type: "GET",
      data
    });
  }
  function _putRequest2(endpoint, data = {}) {
    return (0, _ajax.ajax)(`${_classPrivateFieldGet(this, _basePath)}${endpoint}`, {
      type: "PUT",
      data
    });
  }
  function _postRequest2(endpoint, data = {}) {
    return (0, _ajax.ajax)(`${_classPrivateFieldGet(this, _basePath)}${endpoint}`, {
      type: "POST",
      data
    });
  }
  function _deleteRequest2(endpoint, data = {}) {
    return (0, _ajax.ajax)(`${_classPrivateFieldGet(this, _basePath)}${endpoint}`, {
      type: "DELETE",
      data
    });
  }
});
define("discourse/plugins/chat/discourse/services/chat-audio-manager", ["exports", "@ember/service", "discourse-common/config/environment", "discourse-common/lib/get-url", "discourse-common/utils/decorators"], function (_exports, _service, _environment, _getUrl, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.CHAT_SOUNDS = void 0;
  var _dec, _class;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const AUDIO_DEBOUNCE_DELAY = 3000;
  const CHAT_SOUNDS = _exports.CHAT_SOUNDS = {
    bell: [{
      src: "/plugins/chat/audio/bell.mp3",
      type: "audio/mpeg"
    }],
    ding: [{
      src: "/plugins/chat/audio/ding.mp3",
      type: "audio/mpeg"
    }]
  };
  const DEFAULT_SOUND_NAME = "bell";
  const createAudioCache = sources => {
    const audio = new Audio();
    audio.pause();
    sources.forEach(({
      type,
      src
    }) => {
      const source = document.createElement("source");
      source.type = type;
      source.src = (0, _getUrl.getURLWithCDN)(src);
      audio.appendChild(source);
    });
    return audio;
  };
  let ChatAudioManager = _exports.default = (_dec = (0, _decorators.debounce)(AUDIO_DEBOUNCE_DELAY, true), (_class = class ChatAudioManager extends _service.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "_audioCache", {});
    }
    setup() {
      Object.keys(CHAT_SOUNDS).forEach(soundName => {
        this._audioCache[soundName] = createAudioCache(CHAT_SOUNDS[soundName]);
      });
    }
    willDestroy() {
      super.willDestroy(...arguments);
      this._audioCache = {};
    }
    playImmediately(soundName) {
      return this._play(soundName);
    }
    play(soundName) {
      return this._play(soundName);
    }
    _play(soundName) {
      const audio = this._audioCache[soundName] || this._audioCache[DEFAULT_SOUND_NAME];
      audio.muted = (0, _environment.isTesting)();
      if (!audio.paused) {
        audio.pause();
        if (typeof audio.fastSeek === "function") {
          audio.fastSeek(0);
        } else {
          audio.currentTime = 0;
        }
      }
      return audio.play().catch(() => {
        if (!(0, _environment.isTesting)()) {
          // eslint-disable-next-line no-console
          console.info("[chat] User needs to interact with DOM before we can play notification sounds.");
        }
      });
    }
  }, (_applyDecoratedDescriptor(_class.prototype, "play", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "play"), _class.prototype)), _class));
});
define("discourse/plugins/chat/discourse/services/chat-channel-composer", ["exports", "@glimmer/tracking", "@ember/object", "@ember/service"], function (_exports, _tracking, _object, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelComposer = _exports.default = (_dec = (0, _service.inject)("chat-thread-composer"), (_class = class ChatChannelComposer extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatApi", _descriptor2, this);
      _initializerDefineProperty(this, "currentUser", _descriptor3, this);
      _initializerDefineProperty(this, "router", _descriptor4, this);
      _initializerDefineProperty(this, "threadComposer", _descriptor5, this);
      _initializerDefineProperty(this, "loadingSlider", _descriptor6, this);
      _initializerDefineProperty(this, "textarea", _descriptor7, this);
    }
    focus(options = {}) {
      this.textarea?.focus(options);
    }
    blur() {
      this.textarea.blur();
    }
    edit(message) {
      this.chat.activeMessage = null;
      message.editing = true;
      message.channel.draft = message;
      this.focus({
        refreshHeight: true,
        ensureAtEnd: true
      });
    }
    async replyTo(message) {
      this.chat.activeMessage = null;
      if (message.channel.threadingEnabled) {
        if (!message.thread?.id) {
          try {
            this.loadingSlider.transitionStarted();
            const threadObject = await this.chatApi.createThread(message.channel.id, message.id);
            message.thread = message.channel.threadsManager.add(message.channel, threadObject);
          } finally {
            this.loadingSlider.transitionEnded();
          }
        }
        message.channel.resetDraft(this.currentUser);
        await this.router.transitionTo("chat.channel.thread", ...message.thread.routeModels);
        this.threadComposer.focus({
          ensureAtEnd: true,
          refreshHeight: true
        });
      } else {
        message.channel.draft.inReplyTo = message;
        this.focus({
          ensureAtEnd: true,
          refreshHeight: true
        });
      }
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "threadComposer", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "loadingSlider", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "textarea", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "focus", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "focus"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "blur", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "blur"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "edit", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "edit"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "replyTo", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "replyTo"), _class.prototype)), _class));
});
define("discourse/plugins/chat/discourse/services/chat-channel-emoji-picker-manager", ["exports", "discourse/plugins/chat/discourse/services/chat-emoji-picker-manager"], function (_exports, _chatEmojiPickerManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  class ChatChannelEmojiPickerManager extends _chatEmojiPickerManager.default {}
  _exports.default = ChatChannelEmojiPickerManager;
});
define("discourse/plugins/chat/discourse/services/chat-channel-info-route-origin-manager", ["exports", "@ember/service", "@ember/utils", "discourse/lib/key-value-store"], function (_exports, _service, _utils, _keyValueStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.ORIGINS = _exports.INFO_ROUTE_NAMESPACE = _exports.BACK_KEY = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  const BACK_KEY = _exports.BACK_KEY = "back";
  const INFO_ROUTE_NAMESPACE = _exports.INFO_ROUTE_NAMESPACE = "discourse_chat_info_route";
  const ORIGINS = _exports.ORIGINS = {
    channel: "channel",
    browse: "browse"
  };
  class ChatChannelInfoRouteOriginManager extends _service.default {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "store", new _keyValueStore.default(INFO_ROUTE_NAMESPACE));
    }
    get origin() {
      const origin = this.store.getObject(BACK_KEY);
      if (origin) {
        return ORIGINS[origin];
      }
    }
    set origin(value) {
      this.store.setObject({
        key: BACK_KEY,
        value
      });
    }
    get isBrowse() {
      return this.origin === ORIGINS.browse;
    }
    get isChannel() {
      return this.origin === ORIGINS.channel || (0, _utils.isEmpty)(this.origin);
    }
  }
  _exports.default = ChatChannelInfoRouteOriginManager;
});
define("discourse/plugins/chat/discourse/services/chat-channel-notices-manager", ["exports", "@glimmer/tracking", "@ember/service", "@ember-compat/tracked-built-ins", "discourse/plugins/chat/discourse/models/chat-notice"], function (_exports, _tracking, _service, _trackedBuiltIns, _chatNotice) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelNoticesManager = _exports.default = (_class = class ChatChannelNoticesManager extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "notices", _descriptor, this);
    }
    handleNotice(data) {
      this.notices.pushObject(_chatNotice.default.create(data));
    }
    clearNotice(notice) {
      this.notices.removeObject(notice);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "notices", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return new _trackedBuiltIns.TrackedArray();
    }
  })), _class);
});
define("discourse/plugins/chat/discourse/services/chat-channel-pane", ["exports", "@glimmer/tracking", "@ember/object", "@ember/service"], function (_exports, _tracking, _object, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatChannelPane = _exports.default = (_class = class ChatChannelPane extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "reacting", _descriptor2, this);
      _initializerDefineProperty(this, "selectingMessages", _descriptor3, this);
      _initializerDefineProperty(this, "lastSelectedMessage", _descriptor4, this);
      _initializerDefineProperty(this, "sending", _descriptor5, this);
    }
    get channel() {
      return this.chat.activeChannel;
    }
    get selectedMessageIds() {
      return this.channel.messagesManager.selectedMessages.mapBy("id");
    }
    cancelSelecting() {
      this.selectingMessages = false;
      this.channel.messagesManager.clearSelectedMessages();
    }
    onSelectMessage(message) {
      this.lastSelectedMessage = message;
      this.selectingMessages = true;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "reacting", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "selectingMessages", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "lastSelectedMessage", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "sending", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "cancelSelecting", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "cancelSelecting"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onSelectMessage", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "onSelectMessage"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/services/chat-channels-manager", ["exports", "@glimmer/tracking", "@ember/service", "@ember-compat/tracked-built-ins", "rsvp", "discourse/lib/ajax-error", "discourse-common/utils/decorators", "discourse/plugins/chat/discourse/models/chat-channel"], function (_exports, _tracking, _service, _trackedBuiltIns, _rsvp, _ajaxError, _decorators, _chatChannel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _find, _cache, _findStale, _sortDirectMessageChannels;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const DIRECT_MESSAGE_CHANNELS_LIMIT = 20;

  /*
    The ChatChannelsManager service is responsible for managing the loaded chat channels.
    It provides helpers to facilitate using and managing loaded channels instead of constantly
    fetching them from the server.
  */
  let ChatChannelsManager = _exports.default = (_dec = (0, _decorators.debounce)(300), (_class = (_find = /*#__PURE__*/new WeakSet(), _cache = /*#__PURE__*/new WeakSet(), _findStale = /*#__PURE__*/new WeakSet(), _sortDirectMessageChannels = /*#__PURE__*/new WeakSet(), class ChatChannelsManager extends _service.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _sortDirectMessageChannels);
      _classPrivateMethodInitSpec(this, _findStale);
      _classPrivateMethodInitSpec(this, _cache);
      _classPrivateMethodInitSpec(this, _find);
      _initializerDefineProperty(this, "chatSubscriptionsManager", _descriptor, this);
      _initializerDefineProperty(this, "chatApi", _descriptor2, this);
      _initializerDefineProperty(this, "currentUser", _descriptor3, this);
      _initializerDefineProperty(this, "router", _descriptor4, this);
      _initializerDefineProperty(this, "_cached", _descriptor5, this);
    }
    async find(id, options = {
      fetchIfNotFound: true
    }) {
      const existingChannel = _classPrivateMethodGet(this, _findStale, _findStale2).call(this, id);
      if (existingChannel) {
        return _rsvp.default.resolve(existingChannel);
      } else if (options.fetchIfNotFound) {
        return _classPrivateMethodGet(this, _find, _find2).call(this, id);
      } else {
        return _rsvp.default.resolve();
      }
    }
    get channels() {
      return Object.values(this._cached);
    }
    store(channelObject, options = {}) {
      let model;
      if (!options.replace) {
        model = _classPrivateMethodGet(this, _findStale, _findStale2).call(this, channelObject.id);
      }
      if (!model) {
        if (channelObject instanceof _chatChannel.default) {
          model = channelObject;
        } else {
          model = _chatChannel.default.create(channelObject);
        }
        _classPrivateMethodGet(this, _cache, _cache2).call(this, model);
      }
      if (channelObject.meta?.message_bus_last_ids?.channel_message_bus_last_id !== undefined) {
        model.channelMessageBusLastId = channelObject.meta.message_bus_last_ids.channel_message_bus_last_id;
      }
      return model;
    }
    async follow(model) {
      this.chatSubscriptionsManager.startChannelSubscription(model);
      if (!model.currentUserMembership.following) {
        return this.chatApi.followChannel(model.id).then(membership => {
          model.currentUserMembership = membership;
          return model;
        });
      } else {
        return model;
      }
    }
    async unfollow(model) {
      try {
        this.chatSubscriptionsManager.stopChannelSubscription(model);
        model.currentUserMembership = await this.chatApi.unfollowChannel(model.id);
        return model;
      } catch (error) {
        (0, _ajaxError.popupAjaxError)(error);
      }
    }
    async markAllChannelsRead() {
      // The user tracking state for each channel marked read will be propagated by MessageBus
      return this.chatApi.markAllChannelsAsRead();
    }
    remove(model) {
      this.chatSubscriptionsManager.stopChannelSubscription(model);
      delete this._cached[model.id];
    }
    get allChannels() {
      return [...this.publicMessageChannels, ...this.directMessageChannels].sort((a, b) => {
        return b?.currentUserMembership?.lastViewedAt?.localeCompare?.(a?.currentUserMembership?.lastViewedAt);
      });
    }
    get publicMessageChannels() {
      return this.channels.filter(channel => channel.isCategoryChannel && channel.currentUserMembership.following).sort((a, b) => a?.slug?.localeCompare?.(b?.slug));
    }
    get directMessageChannels() {
      return _classPrivateMethodGet(this, _sortDirectMessageChannels, _sortDirectMessageChannels2).call(this, this.channels.filter(channel => {
        const membership = channel.currentUserMembership;
        return channel.isDirectMessageChannel && membership.following;
      }));
    }
    get truncatedDirectMessageChannels() {
      return this.directMessageChannels.slice(0, DIRECT_MESSAGE_CHANNELS_LIMIT);
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatSubscriptionsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "_cached", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return new _trackedBuiltIns.TrackedObject();
    }
  }), _applyDecoratedDescriptor(_class.prototype, "markAllChannelsRead", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "markAllChannelsRead"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "publicMessageChannels", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "publicMessageChannels"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "directMessageChannels", [_tracking.cached], Object.getOwnPropertyDescriptor(_class.prototype, "directMessageChannels"), _class.prototype)), _class));
  async function _find2(id) {
    try {
      const result = await this.chatApi.channel(id);
      return this.store(result.channel);
    } catch (error) {
      (0, _ajaxError.popupAjaxError)(error);
    }
  }
  function _cache2(channel) {
    if (!channel) {
      return;
    }
    this._cached[channel.id] = channel;
  }
  function _findStale2(id) {
    return this._cached[id];
  }
  function _sortDirectMessageChannels2(channels) {
    return channels.sort((a, b) => {
      if (!a.lastMessage.id) {
        return 1;
      }
      if (!b.lastMessage.id) {
        return -1;
      }
      if (a.tracking.unreadCount === b.tracking.unreadCount) {
        return new Date(a.lastMessage.createdAt) > new Date(b.lastMessage.createdAt) ? -1 : 1;
      } else {
        return a.tracking.unreadCount > b.tracking.unreadCount ? -1 : 1;
      }
    });
  }
});
define("discourse/plugins/chat/discourse/services/chat-composer-presence-manager", ["exports", "@ember/runloop", "@ember/service", "discourse-common/config/environment"], function (_exports, _runloop, _service, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const KEEP_ALIVE_DURATION_SECONDS = 10;

  // This service is loosely based on discourse-presence's ComposerPresenceManager service
  // It is a singleton which receives notifications each time the value of the chat composer changes
  // This service ensures that a single browser can only be 'replying' to a single chatChannel at
  // one time, and automatically 'leaves' the channel if the composer value hasn't changed for 10 seconds
  let ChatComposerPresenceManager = _exports.default = (_class = class ChatComposerPresenceManager extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "presence", _descriptor, this);
    }
    willDestroy() {
      this.leave();
    }
    notifyState(channelName, replying) {
      if (!replying) {
        this.leave();
        return;
      }
      if (this._channelName !== channelName) {
        this._enter(channelName);
        this._channelName = channelName;
      }
      if (!(0, _environment.isTesting)()) {
        this._autoLeaveTimer = (0, _runloop.debounce)(this, this.leave, KEEP_ALIVE_DURATION_SECONDS * 1000);
      }
    }
    leave() {
      this._presentChannel?.leave();
      this._presentChannel = null;
      this._channelName = null;
      if (this._autoLeaveTimer) {
        (0, _runloop.cancel)(this._autoLeaveTimer);
        this._autoLeaveTimer = null;
      }
    }
    _enter(channelName) {
      this.leave();
      this._presentChannel = this.presence.getChannel(channelName);
      this._presentChannel.enter();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "presence", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/services/chat-composer-warnings-tracker", ["exports", "@glimmer/tracking", "@ember/runloop", "@ember/service", "discourse/lib/ajax", "discourse-common/lib/debounce", "discourse-common/utils/decorators"], function (_exports, _tracking, _runloop, _service, _ajax, _debounce, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _resetMentionStats, _recordNewWarnings, _rebuildWarnings;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const MENTION_RESULT = {
    invalid: -1,
    unreachable: 0,
    over_members_limit: 1
  };
  const MENTION_DEBOUNCE_MS = 1000;
  let ChatComposerWarningsTracker = _exports.default = (_class = (_resetMentionStats = /*#__PURE__*/new WeakSet(), _recordNewWarnings = /*#__PURE__*/new WeakSet(), _rebuildWarnings = /*#__PURE__*/new WeakSet(), class ChatComposerWarningsTracker extends _service.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _rebuildWarnings);
      _classPrivateMethodInitSpec(this, _recordNewWarnings);
      _classPrivateMethodInitSpec(this, _resetMentionStats);
      _initializerDefineProperty(this, "siteSettings", _descriptor, this);
      // Track mention hints to display warnings
      _initializerDefineProperty(this, "unreachableGroupMentions", _descriptor2, this);
      _initializerDefineProperty(this, "overMembersLimitGroupMentions", _descriptor3, this);
      _initializerDefineProperty(this, "tooManyMentions", _descriptor4, this);
      _initializerDefineProperty(this, "channelWideMentionDisallowed", _descriptor5, this);
      _initializerDefineProperty(this, "mentionsCount", _descriptor6, this);
      _initializerDefineProperty(this, "mentionsTimer", _descriptor7, this);
      // Complimentary structure to avoid repeating mention checks.
      _defineProperty(this, "_mentionWarningsSeen", {});
    }
    willDestroy() {
      (0, _runloop.cancel)(this.mentionsTimer);
    }
    reset() {
      _classPrivateMethodGet(this, _resetMentionStats, _resetMentionStats2).call(this);
      this.mentionsCount = 0;
      (0, _runloop.cancel)(this.mentionsTimer);
    }
    trackMentions(currentMessage, skipDebounce) {
      if (skipDebounce) {
        return this._trackMentions(currentMessage);
      }
      this.mentionsTimer = (0, _debounce.default)(this, this._trackMentions, currentMessage, MENTION_DEBOUNCE_MS);
    }
    _trackMentions(currentMessage) {
      if (!this.siteSettings.enable_mentions) {
        return;
      }
      currentMessage.parseMentions().then(mentions => {
        this.mentionsCount = mentions?.length;
        if (this.mentionsCount > 0) {
          this.tooManyMentions = this.mentionsCount > this.siteSettings.max_mentions_per_chat_message;
          if (!this.tooManyMentions) {
            const newMentions = mentions.filter(mention => !(mention in this._mentionWarningsSeen));
            this.channelWideMentionDisallowed = !currentMessage.channel.allowChannelWideMentions && (mentions.includes("here") || mentions.includes("all"));
            if (newMentions?.length > 0) {
              _classPrivateMethodGet(this, _recordNewWarnings, _recordNewWarnings2).call(this, newMentions, mentions);
            } else {
              _classPrivateMethodGet(this, _rebuildWarnings, _rebuildWarnings2).call(this, mentions);
            }
          }
        } else {
          _classPrivateMethodGet(this, _resetMentionStats, _resetMentionStats2).call(this);
        }
      });
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "unreachableGroupMentions", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "overMembersLimitGroupMentions", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "tooManyMentions", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "channelWideMentionDisallowed", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "mentionsCount", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "mentionsTimer", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "reset", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "reset"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "trackMentions", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "trackMentions"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_trackMentions", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_trackMentions"), _class.prototype)), _class);
  function _resetMentionStats2() {
    this.tooManyMentions = false;
    this.channelWideMentionDisallowed = false;
    this.unreachableGroupMentions = [];
    this.overMembersLimitGroupMentions = [];
  }
  function _recordNewWarnings2(newMentions, mentions) {
    (0, _ajax.ajax)("/chat/api/mentions/groups.json", {
      data: {
        mentions: newMentions
      }
    }).then(newWarnings => {
      newWarnings.unreachable.forEach(warning => {
        this._mentionWarningsSeen[warning] = MENTION_RESULT["unreachable"];
      });
      newWarnings.over_members_limit.forEach(warning => {
        this._mentionWarningsSeen[warning] = MENTION_RESULT["over_members_limit"];
      });
      newWarnings.invalid.forEach(warning => {
        this._mentionWarningsSeen[warning] = MENTION_RESULT["invalid"];
      });
      _classPrivateMethodGet(this, _rebuildWarnings, _rebuildWarnings2).call(this, mentions);
    }).catch(_classPrivateMethodGet(this, _rebuildWarnings, _rebuildWarnings2).call(this, mentions));
  }
  function _rebuildWarnings2(mentions) {
    const newWarnings = mentions.reduce((memo, mention) => {
      if (mention in this._mentionWarningsSeen && !(this._mentionWarningsSeen[mention] === MENTION_RESULT["invalid"])) {
        if (this._mentionWarningsSeen[mention] === MENTION_RESULT["unreachable"]) {
          memo[0].push(mention);
        } else {
          memo[1].push(mention);
        }
      }
      return memo;
    }, [[], []]);
    this.unreachableGroupMentions = newWarnings[0];
    this.overMembersLimitGroupMentions = newWarnings[1];
  }
});
define("discourse/plugins/chat/discourse/services/chat-drafts-manager", ["exports", "@ember/runloop", "@ember/service"], function (_exports, _runloop, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatDraftsManager = _exports.default = (_class = class ChatDraftsManager extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _defineProperty(this, "drafts", {});
    }
    async add(message, channelId, threadId) {
      try {
        this.drafts[this.key(channelId, threadId)] = message;
        await this.persistDraft(message, channelId, threadId);
      } catch (e) {
        // eslint-disable-next-line no-console
        console.log("Couldn't save draft", e);
      }
    }
    get(channelId, threadId) {
      return this.drafts[this.key(channelId, threadId)];
    }
    remove(channelId, threadId) {
      delete this.drafts[this.key(channelId, threadId)];
    }
    reset() {
      this.drafts = {};
    }
    key(channelId, threadId) {
      let key = `c-${channelId}`;
      if (threadId) {
        key += `:t-${threadId}`;
      }
      return key.toString();
    }
    async persistDraft(message, channelId, threadId) {
      try {
        await this.chatApi.saveDraft(channelId, message.toJSONDraft(), {
          threadId
        });
        message.draftSaved = true;
      } catch (e) {
        // We don't want to throw an error if the draft fails to save
      }
    }
    willDestroy() {
      (0, _runloop.cancel)(this?._persistHandler);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/services/chat-drawer-router", ["exports", "@glimmer/tracking", "@ember/service", "discourse/plugins/chat/discourse/components/chat/drawer-routes/channel", "discourse/plugins/chat/discourse/components/chat/drawer-routes/channel-thread", "discourse/plugins/chat/discourse/components/chat/drawer-routes/channel-threads", "discourse/plugins/chat/discourse/components/chat/drawer-routes/channels", "discourse/plugins/chat/discourse/components/chat/drawer-routes/threads"], function (_exports, _tracking, _service, _channel, _channelThread, _channelThreads, _channels, _threads) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const ROUTES = {
    "chat.channel": {
      name: _channel.default
    },
    "chat.channel.thread": {
      name: _channelThread.default,
      extractParams: route => {
        return {
          channelId: route.parent.params.channelId,
          threadId: route.params.threadId
        };
      }
    },
    "chat.channel.thread.index": {
      name: _channelThread.default,
      extractParams: route => {
        return {
          channelId: route.parent.params.channelId,
          threadId: route.params.threadId
        };
      }
    },
    "chat.channel.thread.near-message": {
      name: _channelThread.default,
      extractParams: route => {
        return {
          channelId: route.parent.parent.params.channelId,
          threadId: route.parent.params.threadId,
          messageId: route.params.messageId
        };
      }
    },
    "chat.channel.threads": {
      name: _channelThreads.default,
      extractParams: route => {
        return {
          channelId: route.parent.params.channelId
        };
      }
    },
    "chat.threads": {
      name: _threads.default
    },
    chat: {
      name: _channels.default
    },
    "chat.channel.near-message": {
      name: _channel.default,
      extractParams: route => {
        return {
          channelId: route.parent.params.channelId,
          messageId: route.params.messageId
        };
      }
    },
    "chat.channel-legacy": {
      name: _channel.default,
      extractParams: route => {
        return {
          channelId: route.params.channelId,
          messageId: route.queryParams.messageId
        };
      }
    }
  };
  let ChatDrawerRouter = _exports.default = (_class = class ChatDrawerRouter extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "router", _descriptor, this);
      _initializerDefineProperty(this, "chatHistory", _descriptor2, this);
      _initializerDefineProperty(this, "component", _descriptor3, this);
      _initializerDefineProperty(this, "drawerRoute", _descriptor4, this);
      _initializerDefineProperty(this, "params", _descriptor5, this);
    }
    stateFor(route) {
      this.drawerRoute?.deactivate?.(this.chatHistory.currentRoute);
      this.chatHistory.visit(route);
      this.drawerRoute = ROUTES[route.name];
      this.params = this.drawerRoute?.extractParams?.(route) || route.params;
      this.component = this.drawerRoute?.name || _channels.default;
      this.drawerRoute.activate?.(route);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatHistory", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "component", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "drawerRoute", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "params", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  })), _class);
});
define("discourse/plugins/chat/discourse/services/chat-drawer-size", ["exports", "@ember/service", "discourse/lib/key-value-store"], function (_exports, _service, _keyValueStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  var _min = /*#__PURE__*/new WeakSet();
  class ChatDrawerSize extends _service.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _min);
      _defineProperty(this, "STORE_NAMESPACE", "discourse_chat_drawer_size_");
      _defineProperty(this, "MIN_HEIGHT", 300);
      _defineProperty(this, "MIN_WIDTH", 250);
      _defineProperty(this, "store", new _keyValueStore.default(this.STORE_NAMESPACE));
    }
    get size() {
      return {
        width: this.store.getObject("width") || 400,
        height: this.store.getObject("height") || 530
      };
    }
    set size({
      width,
      height
    }) {
      this.store.setObject({
        key: "width",
        value: _classPrivateMethodGet(this, _min, _min2).call(this, width, this.MIN_WIDTH)
      });
      this.store.setObject({
        key: "height",
        value: _classPrivateMethodGet(this, _min, _min2).call(this, height, this.MIN_HEIGHT)
      });
    }
  }
  _exports.default = ChatDrawerSize;
  function _min2(number, min) {
    return Math.max(number, min);
  }
});
define("discourse/plugins/chat/discourse/services/chat-emoji-picker-manager", ["exports", "@glimmer/tracking", "@ember/object", "@ember/runloop", "@ember/service", "rsvp", "discourse/lib/ajax", "discourse/lib/ajax-error", "discourse-common/config/environment", "discourse-common/lib/helpers", "discourse-common/utils/decorators"], function (_exports, _tracking, _object, _runloop, _service, _rsvp, _ajax, _ajaxError, _environment, _helpers, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const TRANSITION_TIME = (0, _environment.isTesting)() ? 0 : 125; // CSS transition time
  const DEFAULT_VISIBLE_SECTIONS = ["favorites", "smileys_&_emotion"];
  const DEFAULT_LAST_SECTION = "favorites";
  let ChatEmojiPickerManager = _exports.default = (_class = class ChatEmojiPickerManager extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "appEvents", _descriptor, this);
      _initializerDefineProperty(this, "closing", _descriptor2, this);
      _initializerDefineProperty(this, "loading", _descriptor3, this);
      _initializerDefineProperty(this, "picker", _descriptor4, this);
      _initializerDefineProperty(this, "emojis", _descriptor5, this);
      _initializerDefineProperty(this, "visibleSections", _descriptor6, this);
      _initializerDefineProperty(this, "lastVisibleSection", _descriptor7, this);
      _initializerDefineProperty(this, "element", _descriptor8, this);
    }
    get sections() {
      return !this.loading && this.emojis ? Object.keys(this.emojis) : [];
    }
    closeExisting() {
      this.visibleSections = DEFAULT_VISIBLE_SECTIONS;
      this.lastVisibleSection = DEFAULT_LAST_SECTION;
      this.picker = null;
    }
    close() {
      this.closing = true;
      (0, _runloop.later)(() => {
        if (this.isDestroyed || this.isDestroying) {
          return;
        }
        this.visibleSections = DEFAULT_VISIBLE_SECTIONS;
        this.lastVisibleSection = DEFAULT_LAST_SECTION;
        this.closing = false;
        this.picker = null;
      }, TRANSITION_TIME);
    }
    addVisibleSections(sections) {
      this.visibleSections = (0, _helpers.makeArray)(this.visibleSections).concat((0, _helpers.makeArray)(sections)).uniq();
    }
    open(picker) {
      this.loadEmojis();
      if (this.picker) {
        if (this.picker.trigger === picker.trigger) {
          this.closeExisting();
        } else {
          this.closeExisting();
          this.picker = picker;
        }
      } else {
        this.picker = picker;
      }
    }
    loadEmojis() {
      if (this.emojis) {
        return _rsvp.Promise.resolve();
      }
      this.loading = true;
      return (0, _ajax.ajax)("/chat/emojis.json").then(emojis => {
        this.emojis = emojis;
      }).catch(_ajaxError.popupAjaxError).finally(() => {
        this.loading = false;
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "appEvents", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "closing", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "loading", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "picker", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "emojis", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "visibleSections", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return DEFAULT_VISIBLE_SECTIONS;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "lastVisibleSection", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return DEFAULT_LAST_SECTION;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "element", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "closeExisting", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "closeExisting"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "close", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "close"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "loadEmojis", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "loadEmojis"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/services/chat-emoji-reaction-store", ["exports", "@ember/service", "discourse/lib/key-value-store"], function (_exports, _service, _keyValueStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // This class is adapted from emoji-store class in core. We want to maintain separate emoji store for reactions in chat plugin.
  // https://github.com/discourse/discourse/blob/892f7e0506f3a4d40d9a59a4c926ff0a2aa0947e/app/assets/javascripts/discourse/app/services/emoji-store.js
  class ChatEmojiReactionStore extends _service.default {
    constructor() {
      super(...arguments);
      _defineProperty(this, "STORE_NAMESPACE", "discourse_chat_emoji_reaction_");
      _defineProperty(this, "MAX_DISPLAYED_EMOJIS", 20);
      _defineProperty(this, "MAX_TRACKED_EMOJIS", this.MAX_DISPLAYED_EMOJIS * 2);
      _defineProperty(this, "SKIN_TONE_STORE_KEY", "emojiSelectedDiversity");
      _defineProperty(this, "USER_EMOJIS_STORE_KEY", "emojiUsage");
      _defineProperty(this, "store", new _keyValueStore.default(this.STORE_NAMESPACE));
      if (!this.store.getObject(this.USER_EMOJIS_STORE_KEY)) {
        this.storedFavorites = [];
      }
    }
    get diversity() {
      return this.store.getObject(this.SKIN_TONE_STORE_KEY) || 1;
    }
    set diversity(value = 1) {
      this.store.setObject({
        key: this.SKIN_TONE_STORE_KEY,
        value
      });
      this.notifyPropertyChange("diversity");
    }
    get storedFavorites() {
      let value = this.store.getObject(this.USER_EMOJIS_STORE_KEY) || [];
      if (value.length < 1) {
        if (!this.siteSettings.default_emoji_reactions) {
          value = [];
        } else {
          value = this.siteSettings.default_emoji_reactions.split("|").filter(Boolean);
        }
        this.store.setObject({
          key: this.USER_EMOJIS_STORE_KEY,
          value
        });
      }
      return value;
    }
    set storedFavorites(value) {
      this.store.setObject({
        key: this.USER_EMOJIS_STORE_KEY,
        value
      });
      this.notifyPropertyChange("favorites");
    }
    get favorites() {
      const computedStored = [...new Set(this._frequencySort(this.storedFavorites))];
      return computedStored.slice(0, this.MAX_DISPLAYED_EMOJIS);
    }
    set favorites(value = []) {
      this.store.setObject({
        key: this.USER_EMOJIS_STORE_KEY,
        value
      });
    }
    track(code) {
      const normalizedCode = code.replace(/(^:)|(:$)/g, "");
      let recent = this.storedFavorites;
      recent.unshift(normalizedCode);
      recent.length = Math.min(recent.length, this.MAX_TRACKED_EMOJIS);
      this.storedFavorites = recent;
    }
    reset() {
      this.store.setObject({
        key: this.USER_EMOJIS_STORE_KEY,
        value: []
      });
      this.store.setObject({
        key: this.SKIN_TONE_STORE_KEY,
        value: 1
      });
    }
    _frequencySort(array = []) {
      const counters = array.reduce((obj, val) => {
        obj[val] = (obj[val] || 0) + 1;
        return obj;
      }, {});
      return Object.keys(counters).sort((a, b) => counters[b] - counters[a]);
    }
  }
  _exports.default = ChatEmojiReactionStore;
});
define("discourse/plugins/chat/discourse/services/chat-guardian", ["exports", "@ember/service"], function (_exports, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatGuardian = _exports.default = (_class = class ChatGuardian extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "currentUser", _descriptor, this);
      _initializerDefineProperty(this, "siteSettings", _descriptor2, this);
    }
    canEditChatChannel() {
      return this.canUseChat() && this.currentUser.staff;
    }
    canArchiveChannel(channel) {
      return this.canEditChatChannel() && this.siteSettings.chat_allow_archiving_channels && !channel.isArchived && !channel.isReadOnly;
    }
    canUseChat() {
      return this.currentUser?.has_chat_enabled && this.siteSettings?.chat_enabled;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "siteSettings", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/services/chat-history", ["exports", "@glimmer/tracking", "@ember/service"], function (_exports, _tracking, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatHistory = _exports.default = (_class = class ChatHistory extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "history", _descriptor, this);
    }
    get previousRoute() {
      if (this.history?.length > 1) {
        return this.history[this.history.length - 2];
      }
    }
    get currentRoute() {
      if (this.history?.length > 0) {
        return this.history[this.history.length - 1];
      }
    }
    visit(route) {
      this.history = (this.history || []).slice(-9).concat([route]);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "history", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/services/chat-notification-manager", ["exports", "@ember/service", "discourse/lib/desktop-notifications", "discourse/lib/plugin-api", "discourse-common/config/environment", "discourse-common/utils/decorators"], function (_exports, _service, _desktopNotifications, _pluginApi, _environment, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatNotificationManager = _exports.default = (_class = class ChatNotificationManager extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "presence", _descriptor, this);
      _initializerDefineProperty(this, "chat", _descriptor2, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor3, this);
      _defineProperty(this, "_subscribedToCore", true);
      _defineProperty(this, "_subscribedToChat", false);
      _defineProperty(this, "_countChatInDocTitle", true);
    }
    start() {
      if (!this._shouldRun()) {
        return;
      }
      this.set("_chatPresenceChannel", this.presence.getChannel(`/chat-user/chat/${this.currentUser.id}`));
      this.set("_corePresenceChannel", this.presence.getChannel(`/chat-user/core/${this.currentUser.id}`));
      this._chatPresenceChannel.subscribe();
      this._corePresenceChannel.subscribe();
      (0, _pluginApi.withPluginApi)("0.12.1", api => {
        api.onPageChange(this._pageChanged);
      });
      this._pageChanged();
      this._chatPresenceChannel.on("change", this._subscribeToCorrectNotifications);
      this._corePresenceChannel.on("change", this._subscribeToCorrectNotifications);
    }
    willDestroy() {
      super.willDestroy(...arguments);
      if (!this._shouldRun()) {
        return;
      }
      this._chatPresenceChannel.off("change", this._subscribeToCorrectNotifications);
      this._chatPresenceChannel.unsubscribe();
      this._chatPresenceChannel.leave();
      this._corePresenceChannel.off("change", this._subscribeToCorrectNotifications);
      this._corePresenceChannel.unsubscribe();
      this._corePresenceChannel.leave();
    }
    shouldCountChatInDocTitle() {
      return this._countChatInDocTitle;
    }
    _pageChanged() {
      if (this.chatStateManager.isActive) {
        this._chatPresenceChannel.enter({
          onlyWhileActive: false
        });
        this._corePresenceChannel.leave();
      } else {
        this._chatPresenceChannel.leave();
        this._corePresenceChannel.enter({
          onlyWhileActive: false
        });
      }
    }
    _coreAlertChannel() {
      return (0, _desktopNotifications.alertChannel)(this.currentUser);
    }
    _chatAlertChannel() {
      return `/chat${(0, _desktopNotifications.alertChannel)(this.currentUser)}`;
    }
    _subscribeToCorrectNotifications() {
      const oneTabForEachOpen = this._chatPresenceChannel.count > 0 && this._corePresenceChannel.count > 0;
      if (oneTabForEachOpen) {
        this.chatStateManager.isActive ? this._subscribeToChat({
          only: true
        }) : this._subscribeToCore({
          only: true
        });
      } else {
        this._subscribeToBoth();
      }
    }
    _subscribeToBoth() {
      this._subscribeToChat();
      this._subscribeToCore();
    }
    _subscribeToChat(opts = {
      only: false
    }) {
      this.set("_countChatInDocTitle", true);
      if (!this._subscribedToChat) {
        this.messageBus.subscribe(this._chatAlertChannel(), this.onMessage);
        this.set("_subscribedToChat", true);
      }
      if (opts.only && this._subscribedToCore) {
        this.messageBus.unsubscribe(this._coreAlertChannel(), this.onMessage);
        this.set("_subscribedToCore", false);
      }
    }
    _subscribeToCore(opts = {
      only: false
    }) {
      if (opts.only) {
        this.set("_countChatInDocTitle", false);
      }
      if (!this._subscribedToCore) {
        this.messageBus.subscribe(this._coreAlertChannel(), this.onMessage);
        this.set("_subscribedToCore", true);
      }
      if (opts.only && this._subscribedToChat) {
        this.messageBus.unsubscribe(this._chatAlertChannel(), this.onMessage);
        this.set("_subscribedToChat", false);
      }
    }
    onMessage(data) {
      return (0, _desktopNotifications.onNotification)(data, this.siteSettings, this.currentUser);
    }
    _shouldRun() {
      return this.chat.userCanChat && !(0, _environment.isTesting)();
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "presence", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "_pageChanged", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_pageChanged"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_subscribeToCorrectNotifications", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_subscribeToCorrectNotifications"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMessage", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onMessage"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/services/chat-side-panel-size", ["exports", "@ember/service", "discourse/lib/key-value-store"], function (_exports, _service, _keyValueStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  var _min = /*#__PURE__*/new WeakSet();
  class ChatSidePanelSize extends _service.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _min);
      _defineProperty(this, "STORE_NAMESPACE", "discourse_chat_side_panel_size_");
      _defineProperty(this, "MIN_WIDTH", 250);
      _defineProperty(this, "store", new _keyValueStore.default(this.STORE_NAMESPACE));
    }
    get width() {
      return this.store.getObject("width") || this.MIN_WIDTH;
    }
    set width(width) {
      this.store.setObject({
        key: "width",
        value: _classPrivateMethodGet(this, _min, _min2).call(this, width, this.MIN_WIDTH)
      });
    }
  }
  _exports.default = ChatSidePanelSize;
  function _min2(number, min) {
    return Math.max(number, min);
  }
});
define("discourse/plugins/chat/discourse/services/chat-state-manager", ["exports", "@glimmer/tracking", "@ember/service", "discourse/lib/key-value-store", "discourse/lib/plugin-api", "discourse/lib/utilities", "discourse/models/site", "discourse/services/sidebar-state", "discourse-common/lib/get-url", "discourse/plugins/chat/discourse/lib/get-user-chat-separate-sidebar-mode"], function (_exports, _tracking, _service, _keyValueStore, _pluginApi, _utilities, _site, _sidebarState, _getUrl, _getUserChatSeparateSidebarMode) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.addChatDrawerStateCallback = addChatDrawerStateCallback;
  _exports.default = void 0;
  _exports.resetChatDrawerStateCallbacks = resetChatDrawerStateCallbacks;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _publishStateChange;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const PREFERRED_MODE_KEY = "preferred_mode";
  const PREFERRED_MODE_STORE_NAMESPACE = "discourse_chat_";
  const FULL_PAGE_CHAT = "FULL_PAGE_CHAT";
  const DRAWER_CHAT = "DRAWER_CHAT";
  let chatDrawerStateCallbacks = [];
  function addChatDrawerStateCallback(callback) {
    chatDrawerStateCallbacks.push(callback);
  }
  function resetChatDrawerStateCallbacks() {
    chatDrawerStateCallbacks = [];
  }
  let ChatStateManager = _exports.default = (_class = (_publishStateChange = /*#__PURE__*/new WeakSet(), class ChatStateManager extends _service.default {
    constructor(...args) {
      super(...args);
      _classPrivateMethodInitSpec(this, _publishStateChange);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "chatHistory", _descriptor2, this);
      _initializerDefineProperty(this, "router", _descriptor3, this);
      _initializerDefineProperty(this, "isSidePanelExpanded", _descriptor4, this);
      _initializerDefineProperty(this, "isDrawerExpanded", _descriptor5, this);
      _initializerDefineProperty(this, "isDrawerActive", _descriptor6, this);
      _initializerDefineProperty(this, "_chatURL", _descriptor7, this);
      _initializerDefineProperty(this, "_appURL", _descriptor8, this);
      _defineProperty(this, "_store", new _keyValueStore.default(PREFERRED_MODE_STORE_NAMESPACE));
    }
    reset() {
      this._store.remove(PREFERRED_MODE_KEY);
      this._chatURL = null;
      this._appURL = null;
    }
    prefersFullPage() {
      this._store.setObject({
        key: PREFERRED_MODE_KEY,
        value: FULL_PAGE_CHAT
      });
    }
    prefersDrawer() {
      this._store.setObject({
        key: PREFERRED_MODE_KEY,
        value: DRAWER_CHAT
      });
    }
    openSidePanel() {
      this.isSidePanelExpanded = true;
    }
    closeSidePanel() {
      this.isSidePanelExpanded = false;
    }
    didOpenDrawer(url = null) {
      (0, _pluginApi.withPluginApi)("1.8.0", api => {
        if ((0, _getUserChatSeparateSidebarMode.getUserChatSeparateSidebarMode)(this.currentUser).always) {
          api.setSidebarPanel(_sidebarState.MAIN_PANEL);
          api.setSeparatedSidebarMode();
          api.hideSidebarSwitchPanelButtons();
        } else {
          api.setCombinedSidebarMode();
        }
      });
      this.isDrawerActive = true;
      this.isDrawerExpanded = true;
      if (url) {
        this.storeChatURL(url);
      }
      this.chat.updatePresence();
      _classPrivateMethodGet(this, _publishStateChange, _publishStateChange2).call(this);
    }
    didCloseDrawer() {
      (0, _pluginApi.withPluginApi)("1.8.0", api => {
        api.setSidebarPanel(_sidebarState.MAIN_PANEL);
        const chatSeparateSidebarMode = (0, _getUserChatSeparateSidebarMode.getUserChatSeparateSidebarMode)(this.currentUser);
        if (chatSeparateSidebarMode.fullscreen) {
          api.setCombinedSidebarMode();
          api.showSidebarSwitchPanelButtons();
        } else if (chatSeparateSidebarMode.always) {
          api.setSeparatedSidebarMode();
          api.showSidebarSwitchPanelButtons();
        } else {
          api.setCombinedSidebarMode();
          api.hideSidebarSwitchPanelButtons();
        }
      });
      this.isDrawerActive = false;
      this.isDrawerExpanded = false;
      this.chat.updatePresence();
      _classPrivateMethodGet(this, _publishStateChange, _publishStateChange2).call(this);
    }
    didExpandDrawer() {
      this.isDrawerActive = true;
      this.isDrawerExpanded = true;
      this.chat.updatePresence();
    }
    didCollapseDrawer() {
      this.isDrawerActive = true;
      this.isDrawerExpanded = false;
      _classPrivateMethodGet(this, _publishStateChange, _publishStateChange2).call(this);
    }
    didToggleDrawer() {
      this.isDrawerExpanded = !this.isDrawerExpanded;
      this.isDrawerActive = true;
      _classPrivateMethodGet(this, _publishStateChange, _publishStateChange2).call(this);
    }
    get isFullPagePreferred() {
      return !!(_site.default.currentProp("mobileView") || this._store.getObject(PREFERRED_MODE_KEY) === FULL_PAGE_CHAT);
    }
    get isDrawerPreferred() {
      return !!(!this.isFullPagePreferred || !_site.default.currentProp("mobileView") && (!this._store.getObject(PREFERRED_MODE_KEY) || this._store.getObject(PREFERRED_MODE_KEY) === DRAWER_CHAT));
    }
    get isFullPageActive() {
      return this.router.currentRouteName?.startsWith("chat");
    }
    get isActive() {
      return this.isFullPageActive || this.isDrawerActive;
    }
    storeAppURL(url = null) {
      if (url) {
        this._appURL = url;
      } else if (this.router.currentURL?.startsWith("/chat")) {
        this._appURL = "/";
      } else {
        this._appURL = this.router.currentURL;
      }
    }
    storeChatURL(url) {
      this._chatURL = url;
    }
    get lastKnownAppURL() {
      let url = this._appURL;
      if (!url || url === "/") {
        url = this.router.urlFor(`discovery.${(0, _utilities.defaultHomepage)()}`);
      }
      return (0, _getUrl.default)(url);
    }
    get lastKnownChatURL() {
      return (0, _getUrl.default)(this._chatURL || "/chat");
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatHistory", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "isSidePanelExpanded", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "isDrawerExpanded", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "isDrawerActive", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "_chatURL", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "_appURL", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  })), _class);
  function _publishStateChange2() {
    const state = {
      isDrawerActive: this.isDrawerActive,
      isDrawerExpanded: this.isDrawerExpanded
    };
    chatDrawerStateCallbacks.forEach(callback => callback(state));
  }
});
define("discourse/plugins/chat/discourse/services/chat-subscriptions-manager", ["exports", "@ember/service", "discourse-common/utils/decorators", "discourse-i18n", "discourse/plugins/chat/discourse/models/chat-channel", "discourse/plugins/chat/discourse/models/chat-channel-archive"], function (_exports, _service, _decorators, _discourseI18n, _chatChannel, _chatChannelArchive) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatSubscriptionsManager = _exports.default = (_class = class ChatSubscriptionsManager extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "store", _descriptor, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor2, this);
      _initializerDefineProperty(this, "chatTrackingStateManager", _descriptor3, this);
      _initializerDefineProperty(this, "currentUser", _descriptor4, this);
      _initializerDefineProperty(this, "appEvents", _descriptor5, this);
      _initializerDefineProperty(this, "chat", _descriptor6, this);
      _initializerDefineProperty(this, "dialog", _descriptor7, this);
      _initializerDefineProperty(this, "router", _descriptor8, this);
      _defineProperty(this, "_channelSubscriptions", new Set());
    }
    startChannelSubscription(channel) {
      if (channel.currentUserMembership.muted || this._channelSubscriptions.has(channel.id)) {
        return;
      }
      this._channelSubscriptions.add(channel.id);
      this._startChannelMentionsSubscription(channel);
      if (!channel.isDirectMessageChannel) {
        this._startKickFromChannelSubscription(channel);
      }
      this._startChannelNewMessagesSubscription(channel);
    }
    stopChannelSubscription(channel) {
      this.messageBus.unsubscribe(`/chat/${channel.id}/new-messages`, this._onNewMessages);
      if (!channel.isDirectMessageChannel) {
        this.messageBus.unsubscribe(`/chat/${channel.id}/new-mentions`, this._onNewMentions);
        this.messageBus.unsubscribe(`/chat/${channel.id}/kick`, this._onKickFromChannel);
      }
      this._channelSubscriptions.delete(channel.id);
    }
    startChannelsSubscriptions(messageBusIds) {
      this._startNewChannelSubscription(messageBusIds.new_channel);
      this._startChannelArchiveStatusSubscription(messageBusIds.archive_status);
      this._startUserTrackingStateSubscription(messageBusIds.user_tracking_state);
      this._startChannelsEditsSubscription(messageBusIds.channel_edits);
      this._startChannelsStatusChangesSubscription(messageBusIds.channel_status);
      this._startChannelsMetadataChangesSubscription(messageBusIds.channel_metadata);
    }
    stopChannelsSubscriptions() {
      this._stopNewChannelSubscription();
      this._stopChannelArchiveStatusSubscription();
      this._stopUserTrackingStateSubscription();
      this._stopChannelsEditsSubscription();
      this._stopChannelsStatusChangesSubscription();
      this._stopChannelsMetadataChangesSubscription();
      (this.chatChannelsManager.channels || []).forEach(channel => {
        this.stopChannelSubscription(channel);
      });
    }
    _startChannelArchiveStatusSubscription(lastId) {
      if (this.currentUser.admin) {
        this.messageBus.subscribe("/chat/channel-archive-status", this._onChannelArchiveStatusUpdate, lastId);
      }
    }
    _stopChannelArchiveStatusSubscription() {
      if (this.currentUser.admin) {
        this.messageBus.unsubscribe("/chat/channel-archive-status", this._onChannelArchiveStatusUpdate);
      }
    }
    _startChannelMentionsSubscription(channel) {
      this.messageBus.subscribe(`/chat/${channel.id}/new-mentions`, this._onNewMentions, channel.meta.message_bus_last_ids.new_mentions);
    }
    _startKickFromChannelSubscription(channel) {
      this.messageBus.subscribe(`/chat/${channel.id}/kick`, this._onKickFromChannel, channel.meta.message_bus_last_ids.kick);
    }
    _onChannelArchiveStatusUpdate(busData) {
      // we don't want to fetch a channel we don't have locally because archive status changed
      this.chatChannelsManager.find(busData.chat_channel_id, {
        fetchIfNotFound: false
      }).then(channel => {
        if (!channel) {
          return;
        }
        channel.archive = _chatChannelArchive.default.create(busData);
      });
    }
    _onNewMentions(busData) {
      this.chatChannelsManager.find(busData.channel_id).then(channel => {
        const membership = channel.currentUserMembership;
        if (busData.message_id > membership?.lastReadMessageId) {
          channel.tracking.mentionCount++;
        }
      });
    }
    _onKickFromChannel(busData) {
      this.chatChannelsManager.find(busData.channel_id).then(channel => {
        if (this.chat.activeChannel.id === channel.id) {
          this.dialog.alert({
            message: _discourseI18n.default.t("chat.kicked_from_channel"),
            didConfirm: () => {
              this.chatChannelsManager.remove(channel);
              const firstChannel = this.chatChannelsManager.publicMessageChannels[0];
              if (firstChannel) {
                this.router.transitionTo("chat.channel", ...firstChannel.routeModels);
              } else {
                this.router.transitionTo("chat.browse");
              }
            }
          });
        } else {
          this.chatChannelsManager.remove(channel);
        }
      });
    }
    _startChannelNewMessagesSubscription(channel) {
      this.messageBus.subscribe(`/chat/${channel.id}/new-messages`, this._onNewMessages, channel.meta.message_bus_last_ids.new_messages);
    }
    _onNewMessages(busData) {
      switch (busData.type) {
        case "channel":
          this._onNewChannelMessage(busData);
          break;
        case "thread":
          this._onNewThreadMessage(busData);
          break;
      }
    }
    _onNewChannelMessage(busData) {
      this.chatChannelsManager.find(busData.channel_id).then(channel => {
        channel.lastMessage = busData.message;
        const user = busData.message.user;
        if (user.id === this.currentUser.id) {
          // User sent message, update tracking state to no unread
          channel.currentUserMembership.lastReadMessageId = channel.lastMessage.id;
        } else {
          // Ignored user sent message, update tracking state to no unread
          if (this.currentUser.ignored_users.includes(user.username)) {
            channel.currentUserMembership.lastReadMessageId = channel.lastMessage.id;
          } else {
            if (channel.lastMessage.id > (channel.currentUserMembership.lastReadMessageId || 0)) {
              channel.tracking.unreadCount++;
            }

            // Thread should be considered unread if not already.
            if (busData.thread_id && channel.threadingEnabled) {
              channel.threadsManager.find(channel.id, busData.thread_id).then(thread => {
                if (thread.currentUserMembership) {
                  channel.threadsManager.markThreadUnread(busData.thread_id, busData.message.created_at);
                  this._updateActiveLastViewedAt(channel);
                }
              });
            }
          }
        }
      });
    }
    _onNewThreadMessage(busData) {
      this.chatChannelsManager.find(busData.channel_id).then(channel => {
        if (!channel.threadingEnabled) {
          return;
        }
        channel.threadsManager.find(busData.channel_id, busData.thread_id).then(thread => {
          if (busData.message.user.id === this.currentUser.id) {
            // Thread should no longer be considered unread.
            if (thread.currentUserMembership) {
              channel.threadsManager.unreadThreadOverview.delete(parseInt(busData.thread_id, 10));
              thread.currentUserMembership.lastReadMessageId = busData.message.id;
            }
          } else {
            // Ignored user sent message, update tracking state to no unread
            if (this.currentUser.ignored_users.includes(busData.message.user.username)) {
              if (thread.currentUserMembership) {
                thread.currentUserMembership.lastReadMessageId = busData.message.id;
              }
            } else {
              // Message from other user. Increment unread for thread tracking state.
              if (thread.currentUserMembership && busData.message.id > (thread.currentUserMembership.lastReadMessageId || 0) && !thread.currentUserMembership.isQuiet) {
                channel.threadsManager.markThreadUnread(busData.thread_id, busData.message.created_at);
                thread.tracking.unreadCount++;
                this._updateActiveLastViewedAt(channel);
              }
            }
          }
        });
      });
    }

    // If the user is currently looking at this channel via activeChannel, we don't want the unread
    // indicator to show in the sidebar for unread threads (since that is based on the lastViewedAt).
    _updateActiveLastViewedAt(channel) {
      if (this.chat.activeChannel?.id === channel.id) {
        channel.updateLastViewedAt();
      }
    }
    _startUserTrackingStateSubscription(lastId) {
      if (!this.currentUser) {
        return;
      }
      this.messageBus.subscribe(`/chat/user-tracking-state/${this.currentUser.id}`, this._onUserTrackingStateUpdate, lastId);
      this.messageBus.subscribe(`/chat/bulk-user-tracking-state/${this.currentUser.id}`, this._onBulkUserTrackingStateUpdate, lastId);
    }
    _stopUserTrackingStateSubscription() {
      if (!this.currentUser) {
        return;
      }
      this.messageBus.unsubscribe(`/chat/user-tracking-state/${this.currentUser.id}`, this._onUserTrackingStateUpdate);
      this.messageBus.unsubscribe(`/chat/bulk-user-tracking-state/${this.currentUser.id}`, this._onBulkUserTrackingStateUpdate);
    }
    _onBulkUserTrackingStateUpdate(busData) {
      Object.keys(busData).forEach(channelId => {
        this._updateChannelTrackingData(channelId, busData[channelId]);
      });
    }
    _onUserTrackingStateUpdate(busData) {
      this._updateChannelTrackingData(busData.channel_id, busData);
    }
    _updateChannelTrackingData(channelId, busData) {
      this.chatChannelsManager.find(channelId).then(channel => {
        if (!busData.thread_id) {
          channel.currentUserMembership.lastReadMessageId = busData.last_read_message_id;
        }
        channel.tracking.unreadCount = busData.unread_count;
        channel.tracking.mentionCount = busData.mention_count;
        if (busData.hasOwnProperty("unread_thread_overview") && channel.threadingEnabled) {
          channel.threadsManager.unreadThreadOverview = busData.unread_thread_overview;
        }
        if (busData.thread_id && busData.hasOwnProperty("thread_tracking") && channel.threadingEnabled) {
          channel.threadsManager.find(channelId, busData.thread_id).then(thread => {
            if (thread.currentUserMembership && !thread.currentUserMembership.isQuiet) {
              thread.currentUserMembership.lastReadMessageId = busData.last_read_message_id;
              thread.tracking.unreadCount = busData.thread_tracking.unread_count;
              thread.tracking.mentionCount = busData.thread_tracking.mention_count;
            }
          });
        }
      });
    }
    _startNewChannelSubscription(lastId) {
      this.messageBus.subscribe("/chat/new-channel", this._onNewChannelSubscription, lastId);
    }
    _stopNewChannelSubscription() {
      this.messageBus.unsubscribe("/chat/new-channel", this._onNewChannelSubscription);
    }
    _onNewChannelSubscription(data) {
      this.chatChannelsManager.find(data.channel.id).then(channel => {
        // we need to refresh here to have correct last message ids
        channel.meta = data.channel.meta;
        channel.currentUserMembership = data.channel.current_user_membership;
        if (channel.isDirectMessageChannel && !channel.currentUserMembership.following) {
          channel.tracking.unreadCount = 1;
        }
        this.chatChannelsManager.follow(channel);
      });
    }
    _startChannelsMetadataChangesSubscription(lastId) {
      this.messageBus.subscribe("/chat/channel-metadata", this._onChannelMetadata, lastId);
    }
    _startChannelsEditsSubscription(lastId) {
      this.messageBus.subscribe("/chat/channel-edits", this._onChannelEdits, lastId);
    }
    _startChannelsStatusChangesSubscription(lastId) {
      this.messageBus.subscribe("/chat/channel-status", this._onChannelStatus, lastId);
    }
    _stopChannelsStatusChangesSubscription() {
      this.messageBus.unsubscribe("/chat/channel-status", this._onChannelStatus);
    }
    _stopChannelsEditsSubscription() {
      this.messageBus.unsubscribe("/chat/channel-edits", this._onChannelEdits);
    }
    _stopChannelsMetadataChangesSubscription() {
      this.messageBus.unsubscribe("/chat/channel-metadata", this._onChannelMetadata);
    }
    _onChannelMetadata(busData) {
      this.chatChannelsManager.find(busData.chat_channel_id, {
        fetchIfNotFound: false
      }).then(channel => {
        if (channel) {
          channel.membershipsCount = busData.memberships_count;
          this.appEvents.trigger("chat:refresh-channel-members");
        }
      });
    }
    _onChannelEdits(busData) {
      this.chatChannelsManager.find(busData.chat_channel_id).then(channel => {
        if (channel) {
          channel.title = busData.name;
          channel.description = busData.description;
          channel.slug = busData.slug;
        }
      });
    }
    _onChannelStatus(busData) {
      this.chatChannelsManager.find(busData.chat_channel_id).then(channel => {
        channel.status = busData.status;

        // it is not possible for the user to set their last read message id
        // if the channel has been archived, because all the messages have
        // been deleted. we don't want them seeing the blue dot anymore so
        // just completely reset the unreads
        if (busData.status === _chatChannel.CHANNEL_STATUSES.archived) {
          channel.tracking.reset();
        }
      });
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "chatTrackingStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "appEvents", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "dialog", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "_onChannelArchiveStatusUpdate", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_onChannelArchiveStatusUpdate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onNewMentions", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_onNewMentions"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onKickFromChannel", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_onKickFromChannel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onNewMessages", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_onNewMessages"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onBulkUserTrackingStateUpdate", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_onBulkUserTrackingStateUpdate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onUserTrackingStateUpdate", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_onUserTrackingStateUpdate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_updateChannelTrackingData", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_updateChannelTrackingData"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onNewChannelSubscription", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_onNewChannelSubscription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onChannelMetadata", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_onChannelMetadata"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onChannelEdits", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_onChannelEdits"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onChannelStatus", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_onChannelStatus"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/services/chat-thread-composer", ["exports", "@glimmer/tracking", "@ember/object", "@ember/service"], function (_exports, _tracking, _object, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatThreadComposer = _exports.default = (_class = class ChatThreadComposer extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "textarea", _descriptor2, this);
    }
    focus(options = {}) {
      this.textarea?.focus(options);
    }
    blur() {
      this.textarea?.blur();
    }
    edit(message) {
      this.chat.activeMessage = null;
      message.editing = true;
      message.thread.draft = message;
      this.focus({
        refreshHeight: true,
        ensureAtEnd: true
      });
    }
    replyTo() {
      this.chat.activeMessage = null;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "textarea", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "focus", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "focus"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "blur", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "blur"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "edit", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "edit"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "replyTo", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "replyTo"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/services/chat-thread-list-pane", ["exports", "@ember/service"], function (_exports, _service) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatThreadListPane = _exports.default = (_class = class ChatThreadListPane extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
    }
    get isOpened() {
      return this.router.currentRoute.name === "chat.channel.threads";
    }
    async close() {
      await this.router.transitionTo("chat.channel", ...this.chat.activeChannel.routeModels);
    }
    async open() {
      await this.router.transitionTo("chat.channel.threads", ...this.chat.activeChannel.routeModels);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/services/chat-thread-pane", ["exports", "@ember/service", "discourse/plugins/chat/discourse/services/chat-channel-pane"], function (_exports, _service, _chatChannelPane) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let ChatThreadPane = _exports.default = (_class = class ChatThreadPane extends _chatChannelPane.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chat", _descriptor, this);
      _initializerDefineProperty(this, "router", _descriptor2, this);
    }
    get thread() {
      return this.channel?.activeThread;
    }
    get isOpened() {
      return this.router.currentRoute.name === "chat.channel.thread";
    }
    get selectedMessageIds() {
      return this.thread.messagesManager.selectedMessages.mapBy("id");
    }
    async close() {
      await this.router.transitionTo("chat.channel", ...this.channel.routeModels);
    }
    async open(thread) {
      await this.router.transitionTo("chat.channel.thread", ...thread.routeModels);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chat", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
});
define("discourse/plugins/chat/discourse/services/chat-tracking-state-manager", ["exports", "@ember/application", "@ember/runloop", "@ember/service", "discourse-common/lib/debounce", "discourse/plugins/chat/discourse/models/chat-tracking-state"], function (_exports, _application, _runloop, _service, _debounce, _chatTrackingState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2, _triggerNotificationsChanged, _setState, _publicChannels, _directMessageChannels;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
  function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
  function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * This service is used to provide a global interface to tracking individual
   * channels and threads. In many places in the app, we need to know the global
   * unread count for channels, threads, etc.
   *
   * The individual tracking state of each channel and thread is stored in
   * a ChatTrackingState class instance and changed via the getters/setters
   * provided there.
   *
   * This service is also used to preload bulk tracking state for channels
   * and threads, which is used when the user first loads the app, and in
   * certain cases where we need to set the state for many items at once.
   */
  let ChatTrackingStateManager = _exports.default = (_class = (_triggerNotificationsChanged = /*#__PURE__*/new WeakSet(), _setState = /*#__PURE__*/new WeakSet(), _publicChannels = /*#__PURE__*/new WeakMap(), _directMessageChannels = /*#__PURE__*/new WeakMap(), class ChatTrackingStateManager extends _service.default {
    constructor(...args) {
      super(...args);
      _classPrivateFieldInitSpec(this, _directMessageChannels, {
        get: _get_directMessageChannels,
        set: void 0
      });
      _classPrivateFieldInitSpec(this, _publicChannels, {
        get: _get_publicChannels,
        set: void 0
      });
      _classPrivateMethodInitSpec(this, _setState);
      _classPrivateMethodInitSpec(this, _triggerNotificationsChanged);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor, this);
      _initializerDefineProperty(this, "appEvents", _descriptor2, this);
    }
    // NOTE: In future, we may want to preload some thread tracking state
    // as well, but for now we do that on demand when the user opens a channel,
    // to avoid having to load all the threads across all channels into memory at once.
    setupWithPreloadedState({
      channel_tracking = {}
    }) {
      this.chatChannelsManager.channels.forEach(channel => {
        if (channel_tracking[channel.id.toString()]) {
          _classPrivateMethodGet(this, _setState, _setState2).call(this, channel, channel_tracking[channel.id.toString()]);
        }
      });
    }
    setupChannelThreadState(channel, threadTracking) {
      channel.threadsManager.threads.forEach(thread => {
        const tracking = threadTracking[thread.id.toString()];
        if (tracking) {
          _classPrivateMethodGet(this, _setState, _setState2).call(this, thread, tracking);
        }
      });
    }
    get publicChannelUnreadCount() {
      return _classPrivateFieldGet(this, _publicChannels).reduce((unreadCount, channel) => {
        return unreadCount + channel.tracking.unreadCount;
      }, 0);
    }
    get allChannelMentionCount() {
      let totalPublicMentions = _classPrivateFieldGet(this, _publicChannels).reduce((channelMentionCount, channel) => {
        return channelMentionCount + channel.tracking.mentionCount;
      }, 0);
      let totalPrivateMentions = _classPrivateFieldGet(this, _directMessageChannels).reduce((dmMentionCount, channel) => {
        return dmMentionCount + channel.tracking.mentionCount;
      }, 0);
      return totalPublicMentions + totalPrivateMentions;
    }
    get allChannelUrgentCount() {
      let publicChannelMentionCount = _classPrivateFieldGet(this, _publicChannels).reduce((mentionCount, channel) => {
        return mentionCount + channel.tracking.mentionCount;
      }, 0);
      let dmChannelUnreadCount = _classPrivateFieldGet(this, _directMessageChannels).reduce((unreadCount, channel) => {
        return unreadCount + channel.tracking.unreadCount;
      }, 0);
      return publicChannelMentionCount + dmChannelUnreadCount;
    }
    willDestroy() {
      super.willDestroy(...arguments);
      (0, _runloop.cancel)(this._onTriggerNotificationDebounceHandler);
    }

    /**
     * Some reactivity in the app such as the document title
     * updates are only done via appEvents -- rather than
     * sprinkle this appEvent call everywhere we just define
     * it here so it can be changed as required.
     */
    triggerNotificationsChanged() {
      this._onTriggerNotificationDebounceHandler = (0, _debounce.default)(this, _classPrivateMethodGet(this, _triggerNotificationsChanged, _triggerNotificationsChanged2), 100);
    }
  }), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "appEvents", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  function _triggerNotificationsChanged2() {
    this.appEvents.trigger("notifications:changed");
  }
  function _setState2(model, state) {
    if (!model.tracking) {
      model.tracking = new _chatTrackingState.default((0, _application.getOwner)(this));
    }
    model.tracking.unreadCount = state.unread_count;
    model.tracking.mentionCount = state.mention_count;
  }
  function _get_publicChannels() {
    return this.chatChannelsManager.publicMessageChannels;
  }
  function _get_directMessageChannels() {
    return this.chatChannelsManager.directMessageChannels;
  }
});
define("discourse/plugins/chat/discourse/services/chat", ["exports", "@glimmer/tracking", "@ember/object", "@ember/object/computed", "@ember/runloop", "@ember/service", "discourse/lib/ajax", "discourse/lib/ajax-error", "discourse/lib/user-presence", "discourse-common/lib/deprecated", "discourse-common/lib/later", "discourse-common/utils/decorators", "discourse/plugins/chat/discourse/models/chat-message"], function (_exports, _tracking, _object, _computed, _runloop, _service, _ajax, _ajaxError, _userPresence, _deprecated, _later, _decorators, _chatMessage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  const CHAT_ONLINE_OPTIONS = {
    userUnseenTime: 300000,
    // 5 minutes seconds with no interaction
    browserHiddenTime: 300000 // Or the browser has been in the background for 5 minutes
  };
  let Chat = _exports.default = (_dec = (0, _computed.and)("currentUser.has_chat_enabled", "siteSettings.chat_enabled"), _dec2 = (0, _object.computed)("currentUser.staff", "currentUser.groups.[]"), _dec3 = (0, _object.computed)("activeChannel.userSilenced"), (_class = class Chat extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatApi", _descriptor, this);
      _initializerDefineProperty(this, "appEvents", _descriptor2, this);
      _initializerDefineProperty(this, "currentUser", _descriptor3, this);
      _initializerDefineProperty(this, "chatNotificationManager", _descriptor4, this);
      _initializerDefineProperty(this, "chatSubscriptionsManager", _descriptor5, this);
      _initializerDefineProperty(this, "chatStateManager", _descriptor6, this);
      _initializerDefineProperty(this, "chatDraftsManager", _descriptor7, this);
      _initializerDefineProperty(this, "presence", _descriptor8, this);
      _initializerDefineProperty(this, "router", _descriptor9, this);
      _initializerDefineProperty(this, "site", _descriptor10, this);
      _initializerDefineProperty(this, "chatChannelsManager", _descriptor11, this);
      _initializerDefineProperty(this, "chatTrackingStateManager", _descriptor12, this);
      _defineProperty(this, "cook", null);
      _defineProperty(this, "presenceChannel", null);
      _defineProperty(this, "sidebarActive", false);
      _defineProperty(this, "isNetworkUnreliable", false);
      _initializerDefineProperty(this, "userCanChat", _descriptor13, this);
      _initializerDefineProperty(this, "_activeMessage", _descriptor14, this);
      _initializerDefineProperty(this, "_activeChannel", _descriptor15, this);
    }
    get activeChannel() {
      return this._activeChannel;
    }
    set activeChannel(channel) {
      if (!channel) {
        this._activeMessage = null;
      }
      if (this._activeChannel) {
        this._activeChannel.activeThread = null;
      }
      this._activeChannel = channel;
    }
    get userCanDirectMessage() {
      if (!this.currentUser) {
        return false;
      }
      return this.currentUser.staff || this.siteSettings.userInAnyGroups("direct_message_enabled_groups", this.currentUser);
    }
    get userCanInteractWithChat() {
      return !this.activeChannel?.userSilenced;
    }
    get activeMessage() {
      return this._activeMessage;
    }
    set activeMessage(hash) {
      if (hash) {
        this._activeMessage = hash;
      } else {
        this._activeMessage = null;
      }
    }
    init() {
      super.init(...arguments);
      if (this.userCanChat) {
        this.presenceChannel = this.presence.getChannel("/chat/online");
        (0, _userPresence.onPresenceChange)({
          callback: this.onPresenceChangeCallback,
          browserHiddenTime: 150000,
          userUnseenTime: 150000
        });
      }
    }
    onPresenceChangeCallback(present) {
      if (present) {
        // NOTE: channels is more than a simple array, it also contains
        // tracking and membership data, see Chat::StructuredChannelSerializer
        this.chatApi.listCurrentUserChannels().then(channelsView => {
          this.chatSubscriptionsManager.stopChannelsSubscriptions();
          this.chatSubscriptionsManager.startChannelsSubscriptions(channelsView.meta.message_bus_last_ids);
          [...channelsView.public_channels, ...channelsView.direct_message_channels].forEach(channelObject => {
            this.chatChannelsManager.find(channelObject.id, {
              fetchIfNotFound: false
            }).then(channel => {
              if (!channel) {
                return;
              }
              // TODO (martin) We need to do something here for thread tracking
              // state as well on presence change, otherwise we will be back in
              // the same place as the channels were.
              //
              // At some point it would likely be better to just fetch an
              // endpoint that gives you all channel tracking state and the
              // thread tracking state for the current channel.

              // ensures we have the latest message bus ids
              channel.meta.message_bus_last_ids = channelObject.meta.message_bus_last_ids;
              const state = channelsView.tracking.channel_tracking[channel.id];
              channel.tracking.unreadCount = state.unread_count;
              channel.tracking.mentionCount = state.mention_count;
              channel.currentUserMembership = channelObject.current_user_membership;
              this.chatSubscriptionsManager.startChannelSubscription(channel);
            });
          });
        });
      }
    }
    markNetworkAsUnreliable() {
      (0, _runloop.cancel)(this._networkCheckHandler);
      this.set("isNetworkUnreliable", true);
      this._networkCheckHandler = (0, _later.default)(() => {
        if (this.isDestroyed || this.isDestroying) {
          return;
        }
        this.markNetworkAsReliable();
      }, 30000);
    }
    markNetworkAsReliable() {
      (0, _runloop.cancel)(this._networkCheckHandler);
      this.set("isNetworkUnreliable", false);
    }
    setupWithPreloadedChannels(channelsView) {
      this.chatSubscriptionsManager.startChannelsSubscriptions(channelsView.meta.message_bus_last_ids);
      this.presenceChannel.subscribe(channelsView.global_presence_channel_state);
      [...channelsView.public_channels, ...channelsView.direct_message_channels].forEach(channelObject => {
        const storedChannel = this.chatChannelsManager.store(channelObject);
        const storedDrafts = (this.currentUser?.chat_drafts || []).filter(draft => draft.channel_id === storedChannel.id);
        storedDrafts.forEach(storedDraft => {
          this.chatDraftsManager.add(_chatMessage.default.createDraftMessage(storedChannel, Object.assign({
            user: this.currentUser
          }, JSON.parse(storedDraft.data))), storedDraft.channel_id, storedDraft.thread_id);
        });
        if (channelsView.unread_thread_overview?.[storedChannel.id]) {
          storedChannel.threadsManager.unreadThreadOverview = channelsView.unread_thread_overview[storedChannel.id];
        }
        return this.chatChannelsManager.follow(storedChannel);
      });
      this.chatTrackingStateManager.setupWithPreloadedState(channelsView.tracking);
    }
    willDestroy() {
      super.willDestroy(...arguments);
      if (this.userCanChat) {
        this.chatSubscriptionsManager.stopChannelsSubscriptions();
        (0, _userPresence.removeOnPresenceChange)(this.onPresenceChangeCallback);
      }
    }
    updatePresence() {
      (0, _runloop.next)(() => {
        if (this.isDestroyed || this.isDestroying) {
          return;
        }
        if (this.currentUser.user_option?.hide_profile_and_presence) {
          return;
        }
        if (this.chatStateManager.isActive) {
          this.presenceChannel.enter({
            activeOptions: CHAT_ONLINE_OPTIONS
          });
        } else {
          this.presenceChannel.leave();
        }
      });
    }
    getDocumentTitleCount() {
      return this.chatNotificationManager.shouldCountChatInDocTitle() ? this.chatTrackingStateManager.allChannelUrgentCount : 0;
    }
    switchChannelUpOrDown(direction) {
      const {
        activeChannel
      } = this;
      if (!activeChannel) {
        return; // Chat isn't open. Return and do nothing!
      }
      let currentList, otherList;
      if (activeChannel.isDirectMessageChannel) {
        currentList = this.chatChannelsManager.truncatedDirectMessageChannels;
        otherList = this.chatChannelsManager.publicMessageChannels;
      } else {
        currentList = this.chatChannelsManager.publicMessageChannels;
        otherList = this.chatChannelsManager.truncatedDirectMessageChannels;
      }
      const directionUp = direction === "up";
      const currentChannelIndex = currentList.findIndex(c => c.id === activeChannel.id);
      let nextChannelInSameList = currentList[currentChannelIndex + (directionUp ? -1 : 1)];
      if (nextChannelInSameList) {
        // You're navigating in the same list of channels, just use index +- 1
        return this.router.transitionTo("chat.channel", ...nextChannelInSameList.routeModels);
      }

      // You need to go to the next list of channels, if it exists.
      const nextList = otherList.length ? otherList : currentList;
      const nextChannel = directionUp ? nextList[nextList.length - 1] : nextList[0];
      if (nextChannel.id !== activeChannel.id) {
        return this.router.transitionTo("chat.channel", ...nextChannel.routeModels);
      }
    }
    getIdealFirstChannelId() {
      // When user opens chat we need to give them the 'best' channel when they enter.
      //
      // Look for public channels with mentions. If one exists, enter that.
      // Next best is a DM channel with unread messages.
      // Next best is a public channel with unread messages.
      // Then we fall back to the chat_default_channel_id site setting
      // if that is present and in the list of channels the user can access.
      // If none of these options exist, then we get the first public channel,
      // or failing that the first DM channel.
      // Defined in order of significance.
      let publicChannelWithMention, dmChannelWithUnread, publicChannelWithUnread, publicChannel, dmChannel, defaultChannel;
      this.chatChannelsManager.channels.forEach(channel => {
        const membership = channel.currentUserMembership;
        if (!membership.following) {
          return;
        }
        if (channel.isDirectMessageChannel) {
          if (!dmChannelWithUnread && channel.tracking.unreadCount > 0) {
            dmChannelWithUnread = channel.id;
          } else if (!dmChannel) {
            dmChannel = channel.id;
          }
        } else {
          if (membership.unread_mentions > 0) {
            publicChannelWithMention = channel.id;
            return; // <- We have a public channel with a mention. Break and return this.
          } else if (!publicChannelWithUnread && channel.tracking.unreadCount > 0) {
            publicChannelWithUnread = channel.id;
          } else if (!defaultChannel && parseInt(this.siteSettings.chat_default_channel_id || 0, 10) === channel.id) {
            defaultChannel = channel.id;
          } else if (!publicChannel) {
            publicChannel = channel.id;
          }
        }
      });
      return publicChannelWithMention || dmChannelWithUnread || publicChannelWithUnread || defaultChannel || publicChannel || dmChannel;
    }
    _fireOpenFloatAppEvent(channel, messageId = null) {
      messageId ? this.router.transitionTo("chat.channel.near-message", ...channel.routeModels, messageId) : this.router.transitionTo("chat.channel", ...channel.routeModels);
    }
    async followChannel(channel) {
      return this.chatChannelsManager.follow(channel);
    }
    async unfollowChannel(channel) {
      return this.chatChannelsManager.unfollow(channel).then(() => {
        if (channel === this.activeChannel && channel.isDirectMessageChannel) {
          this.router.transitionTo("chat");
        }
      });
    }
    upsertDmChannelForUser(channel, user) {
      const usernames = (channel.chatable.users || []).mapBy("username").concat(user.username).uniq();
      return this.upsertDmChannelForUsernames(usernames);
    }

    // @param {array} usernames - The usernames to create or fetch the direct message
    // channel for. The current user will automatically be included in the channel
    // when it is created.
    upsertDmChannelForUsernames(usernames, name = null) {
      return (0, _ajax.ajax)("/chat/api/direct-message-channels.json", {
        method: "POST",
        data: {
          target_usernames: usernames.uniq(),
          name
        }
      }).then(response => {
        const channel = this.chatChannelsManager.store(response.channel);
        this.chatChannelsManager.follow(channel);
        return channel;
      }).catch(_ajaxError.popupAjaxError);
    }

    // @param {array} usernames - The usernames to fetch the direct message
    // channel for. The current user will automatically be included as a
    // participant to fetch the channel for.
    getDmChannelForUsernames(usernames) {
      return (0, _ajax.ajax)("/chat/direct_messages.json", {
        data: {
          usernames: usernames.uniq().join(",")
        }
      });
    }
    addToolbarButton() {
      (0, _deprecated.default)("Use the new chat API `api.registerChatComposerButton` instead of `chat.addToolbarButton`");
    }
    toggleDrawer() {
      this.chatStateManager.didToggleDrawer();
      this.appEvents.trigger("chat:toggle-expand", this.chatStateManager.isDrawerExpanded);
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatApi", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "appEvents", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "currentUser", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "chatNotificationManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "chatSubscriptionsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "chatStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "chatDraftsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "presence", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "router", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "site", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "chatChannelsManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "chatTrackingStateManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "userCanChat", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "_activeMessage", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "_activeChannel", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "userCanDirectMessage", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "userCanDirectMessage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "userCanInteractWithChat", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "userCanInteractWithChat"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onPresenceChangeCallback", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "onPresenceChangeCallback"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleDrawer", [_object.action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleDrawer"), _class.prototype)), _class));
});
define("discourse/plugins/chat/discourse/services/emoji-picker-scroll-observer", ["exports", "@glimmer/tracking", "@ember/service", "discourse-common/utils/decorators"], function (_exports, _tracking, _service, _decorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _class, _descriptor, _descriptor2;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
  let EmojiPickerScrollObserver = _exports.default = (_class = class EmojiPickerScrollObserver extends _service.default {
    constructor(...args) {
      super(...args);
      _initializerDefineProperty(this, "chatEmojiPickerManager", _descriptor, this);
      _initializerDefineProperty(this, "enabled", _descriptor2, this);
      _defineProperty(this, "direction", "up");
      _defineProperty(this, "prevYPosition", 0);
    }
    _observerCallback(event) {
      if (!this.enabled) {
        return;
      }
      this._setScrollDirection(event.target);
      const visibleSections = [...document.querySelectorAll(".chat-emoji-picker__section")].filter(sectionElement => this._isSectionVisibleInPicker(sectionElement, event.target));
      if (visibleSections?.length) {
        let sectionElement;
        if (this.direction === "up" || this.prevYPosition < 50) {
          sectionElement = visibleSections.firstObject;
        } else {
          sectionElement = visibleSections.lastObject;
        }
        this.chatEmojiPickerManager.lastVisibleSection = sectionElement.dataset.section;
        this.chatEmojiPickerManager.addVisibleSections(visibleSections.map(s => s.dataset.section));
      }
    }
    observe(element) {
      element.addEventListener("scroll", this._observerCallback);
    }
    unobserve(element) {
      element.removeEventListener("scroll", this._observerCallback);
    }
    _setScrollDirection(target) {
      if (target.scrollTop > this.prevYPosition) {
        this.direction = "down";
      } else {
        this.direction = "up";
      }
      this.prevYPosition = target.scrollTop;
    }
    _isSectionVisibleInPicker(section, picker) {
      const {
        bottom,
        height,
        top
      } = section.getBoundingClientRect();
      const containerRect = picker.getBoundingClientRect();
      return top <= containerRect.top ? containerRect.top - top <= height : bottom - containerRect.bottom <= height;
    }
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "chatEmojiPickerManager", [_service.inject], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "enabled", [_tracking.tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "_observerCallback", [_decorators.bind], Object.getOwnPropertyDescriptor(_class.prototype, "_observerCallback"), _class.prototype)), _class);
});
define("discourse/plugins/chat/discourse/templates/admin-plugins-chat", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Admin::ExportMessages />
  
  {{#if this.selectedWebhook}}
    <DButton
      @icon="chevron-left"
      @label="chat.incoming_webhooks.back"
      @title="chat.incoming_webhooks.back"
      @action={{fn (mut this.selectedWebhookId) null}}
      class="incoming-chat-webhooks-back"
    />
  
    <form class="form-vertical">
      <div class="control-group">
        <label class="control-label">
          {{i18n "chat.incoming_webhooks.name"}}
        </label>
        <Input
          @type="text"
          @value={{this.selectedWebhook.name}}
          placeholder={{i18n "chat.incoming_webhooks.name"}}
        />
      </div>
  
      <div class="control-group">
        <label class="control-label">
          {{i18n "chat.incoming_webhooks.description"}}
        </label>
        <Textarea @value={{this.selectedWebhook.description}} />
      </div>
  
      <div class="control-group">
        <label class="control-label">
          {{i18n "chat.incoming_webhooks.username"}}
        </label>
        <Input
          @type="text"
          @value={{this.selectedWebhook.username}}
          placeholder={{i18n "chat.incoming_webhooks.system"}}
        />
        <div class="control-instructions">
          {{i18n "chat.incoming_webhooks.username_instructions"}}
        </div>
      </div>
  
      <div class="control-group">
        <label class="control-label">
          {{i18n "chat.incoming_webhooks.post_to"}}
        </label>
        <ChatChannelChooser
          @content={{this.model.chat_channels}}
          @value={{this.selectedWebhook.chat_channel.id}}
          @onChange={{action "changeChatChannel"}}
        />
      </div>
  
      <div class="control-group">
        <label class="control-label">
          {{#if this.selectedWebhook.emoji}}
            {{i18n "chat.incoming_webhooks.current_emoji"}}
  
            <span class="incoming-chat-webhooks-current-emoji">
              {{replace-emoji this.selectedWebhook.emoji}}
            </span>
          {{else}}
            {{i18n "chat.incoming_webhooks.no_emoji"}}
          {{/if}}
        </label>
  
        <EmojiPicker
          @isActive={{this.emojiPickerIsActive}}
          @isEditorFocused={{true}}
          @emojiSelected={{action "emojiSelected"}}
          @onEmojiPickerClose={{action (mut this.emojiPickerIsActive) false}}
        />
  
        {{#unless this.emojiPickerIsActive}}
          <DButton
            @label="chat.incoming_webhooks.select_emoji"
            @action={{fn (mut this.emojiPickerIsActive) true}}
            class="btn-primary"
          />
          <DButton
            @label="chat.incoming_webhooks.reset_emoji"
            @action={{fn (mut this.selectedWebhook.emoji) null}}
            @disabled={{not this.selectedWebhook.emoji}}
          />
        {{/unless}}
  
        <div class="control-instructions">
          {{i18n "chat.incoming_webhooks.emoji_instructions"}}
        </div>
      </div>
  
      <div class="control-group">
        <label class="control-label">{{i18n "chat.incoming_webhooks.url"}}</label>
        <label>{{this.selectedWebhook.url}}</label>
        <div class="control-instructions">
          {{i18n "chat.incoming_webhooks.url_instructions"}}
        </div>
      </div>
  
      <DButton
        @label="chat.incoming_webhooks.save"
        @title="chat.incoming_webhooks.save"
        @action={{this.saveEdit}}
        @disabled={{this.saveEditDisabled}}
        class="btn-primary"
      />
    </form>
  {{else}}
    {{!  Index view   }}
    <h3>{{i18n "chat.incoming_webhooks.title"}}</h3>
  
    {{#if this.creatingNew}}
      <div class="new-incoming-webhook-container">
        <Input
          @type="text"
          @value={{this.newWebhookName}}
          placeholder={{i18n "chat.incoming_webhooks.name_placeholder"}}
        />
        <ChatChannelChooser
          @content={{this.model.chat_channels}}
          @value={{this.newWebhookChannelId}}
          @onChange={{action (mut this.newWebhookChannelId)}}
        />
        <DButton
          @label="chat.create"
          @title="chat.create"
          @disabled={{not this.nameAndChannelValid}}
          @action={{this.createNewWebhook}}
          class="btn-primary create-new-incoming-webhook-btn"
        />
        <DButton
          @label="chat.cancel"
          @title="chat.cancel"
          @action={{this.resetNewWebhook}}
        />
      </div>
    {{else}}
      <DButton
        @label="chat.incoming_webhooks.new"
        @title="chat.incoming_webhooks.new"
        @action={{fn (mut this.creatingNew) true}}
        class="btn-primary"
      />
    {{/if}}
  
    <p>{{html-safe (i18n "chat.incoming_webhooks.instructions")}}</p>
  
    <div class="incoming-chat-webhooks">
      {{#if this.model.incoming_chat_webhooks}}
        {{#each this.sortedWebhooks as |webhook|}}
          <div class="incoming-chat-webhooks--row">
            <div class="incoming-chat-webhooks--row--details">
              <div class="incoming-chat-webhooks--row--details--name">
                {{webhook.name}}
              </div>
  
              <div>
                {{#if webhook.emoji}}
                  {{replace-emoji webhook.emoji}}
                {{/if}}
  
                {{#if webhook.username}}
                  {{webhook.username}}
                {{else}}
                  {{i18n "chat.incoming_webhooks.system"}}
                {{/if}}
              </div>
  
              <div><ChannelTitle @channel={{webhook.chat_channel}} /></div>
              <div>{{webhook.description}}</div>
            </div>
  
            <div class="incoming-chat-webhooks--row--controls">
              <div>
                <DButton
                  @icon="pencil-alt"
                  @label="chat.incoming_webhooks.edit"
                  @action={{fn (mut this.selectedWebhookId) webhook.id}}
                />
                <DButton
                  @icon="trash-alt"
                  @title="chat.incoming_webhooks.delete"
                  @action={{fn this.destroyWebhook webhook}}
                  class="btn-danger"
                />
              </div>
            </div>
          </div>
        {{/each}}
      {{else}}
        {{i18n "chat.incoming_webhooks.none"}}
      {{/if}}
    </div>
  {{/if}}
  */
  {
    "id": "E7ktcAjF",
    "block": "[[[8,[39,0],null,null,null],[1,\"\\n\\n\"],[41,[30,0,[\"selectedWebhook\"]],[[[1,\"  \"],[8,[39,2],[[24,0,\"incoming-chat-webhooks-back\"]],[[\"@icon\",\"@label\",\"@title\",\"@action\"],[\"chevron-left\",\"chat.incoming_webhooks.back\",\"chat.incoming_webhooks.back\",[28,[37,3],[[28,[37,4],[[30,0,[\"selectedWebhookId\"]]],null],null],null]]],null],[1,\"\\n\\n  \"],[10,\"form\"],[14,0,\"form-vertical\"],[12],[1,\"\\n    \"],[10,0],[14,0,\"control-group\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,0,\"control-label\"],[12],[1,\"\\n        \"],[1,[28,[35,5],[\"chat.incoming_webhooks.name\"],null]],[1,\"\\n      \"],[13],[1,\"\\n      \"],[8,[39,6],[[16,\"placeholder\",[28,[37,5],[\"chat.incoming_webhooks.name\"],null]]],[[\"@type\",\"@value\"],[\"text\",[30,0,[\"selectedWebhook\",\"name\"]]]],null],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[10,0],[14,0,\"control-group\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,0,\"control-label\"],[12],[1,\"\\n        \"],[1,[28,[35,5],[\"chat.incoming_webhooks.description\"],null]],[1,\"\\n      \"],[13],[1,\"\\n      \"],[8,[39,7],null,[[\"@value\"],[[30,0,[\"selectedWebhook\",\"description\"]]]],null],[1,\"    \"],[13],[1,\"\\n\\n    \"],[10,0],[14,0,\"control-group\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,0,\"control-label\"],[12],[1,\"\\n        \"],[1,[28,[35,5],[\"chat.incoming_webhooks.username\"],null]],[1,\"\\n      \"],[13],[1,\"\\n      \"],[8,[39,6],[[16,\"placeholder\",[28,[37,5],[\"chat.incoming_webhooks.system\"],null]]],[[\"@type\",\"@value\"],[\"text\",[30,0,[\"selectedWebhook\",\"username\"]]]],null],[1,\"\\n      \"],[10,0],[14,0,\"control-instructions\"],[12],[1,\"\\n        \"],[1,[28,[35,5],[\"chat.incoming_webhooks.username_instructions\"],null]],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[10,0],[14,0,\"control-group\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,0,\"control-label\"],[12],[1,\"\\n        \"],[1,[28,[35,5],[\"chat.incoming_webhooks.post_to\"],null]],[1,\"\\n      \"],[13],[1,\"\\n      \"],[8,[39,8],null,[[\"@content\",\"@value\",\"@onChange\"],[[30,0,[\"model\",\"chat_channels\"]],[30,0,[\"selectedWebhook\",\"chat_channel\",\"id\"]],[28,[37,9],[[30,0],\"changeChatChannel\"],null]]],null],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[10,0],[14,0,\"control-group\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,0,\"control-label\"],[12],[1,\"\\n\"],[41,[30,0,[\"selectedWebhook\",\"emoji\"]],[[[1,\"          \"],[1,[28,[35,5],[\"chat.incoming_webhooks.current_emoji\"],null]],[1,\"\\n\\n          \"],[10,1],[14,0,\"incoming-chat-webhooks-current-emoji\"],[12],[1,\"\\n            \"],[1,[28,[35,10],[[30,0,[\"selectedWebhook\",\"emoji\"]]],null]],[1,\"\\n          \"],[13],[1,\"\\n\"]],[]],[[[1,\"          \"],[1,[28,[35,5],[\"chat.incoming_webhooks.no_emoji\"],null]],[1,\"\\n\"]],[]]],[1,\"      \"],[13],[1,\"\\n\\n      \"],[8,[39,11],null,[[\"@isActive\",\"@isEditorFocused\",\"@emojiSelected\",\"@onEmojiPickerClose\"],[[30,0,[\"emojiPickerIsActive\"]],true,[28,[37,9],[[30,0],\"emojiSelected\"],null],[28,[37,9],[[30,0],[28,[37,4],[[30,0,[\"emojiPickerIsActive\"]]],null],false],null]]],null],[1,\"\\n\\n\"],[41,[51,[30,0,[\"emojiPickerIsActive\"]]],[[[1,\"        \"],[8,[39,2],[[24,0,\"btn-primary\"]],[[\"@label\",\"@action\"],[\"chat.incoming_webhooks.select_emoji\",[28,[37,3],[[28,[37,4],[[30,0,[\"emojiPickerIsActive\"]]],null],true],null]]],null],[1,\"\\n        \"],[8,[39,2],null,[[\"@label\",\"@action\",\"@disabled\"],[\"chat.incoming_webhooks.reset_emoji\",[28,[37,3],[[28,[37,4],[[30,0,[\"selectedWebhook\",\"emoji\"]]],null],null],null],[28,[37,13],[[30,0,[\"selectedWebhook\",\"emoji\"]]],null]]],null],[1,\"\\n\"]],[]],null],[1,\"\\n      \"],[10,0],[14,0,\"control-instructions\"],[12],[1,\"\\n        \"],[1,[28,[35,5],[\"chat.incoming_webhooks.emoji_instructions\"],null]],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[10,0],[14,0,\"control-group\"],[12],[1,\"\\n      \"],[10,\"label\"],[14,0,\"control-label\"],[12],[1,[28,[35,5],[\"chat.incoming_webhooks.url\"],null]],[13],[1,\"\\n      \"],[10,\"label\"],[12],[1,[30,0,[\"selectedWebhook\",\"url\"]]],[13],[1,\"\\n      \"],[10,0],[14,0,\"control-instructions\"],[12],[1,\"\\n        \"],[1,[28,[35,5],[\"chat.incoming_webhooks.url_instructions\"],null]],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n\\n    \"],[8,[39,2],[[24,0,\"btn-primary\"]],[[\"@label\",\"@title\",\"@action\",\"@disabled\"],[\"chat.incoming_webhooks.save\",\"chat.incoming_webhooks.save\",[30,0,[\"saveEdit\"]],[30,0,[\"saveEditDisabled\"]]]],null],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]],[[[1,\"  \"],[10,\"h3\"],[12],[1,[28,[35,5],[\"chat.incoming_webhooks.title\"],null]],[13],[1,\"\\n\\n\"],[41,[30,0,[\"creatingNew\"]],[[[1,\"    \"],[10,0],[14,0,\"new-incoming-webhook-container\"],[12],[1,\"\\n      \"],[8,[39,6],[[16,\"placeholder\",[28,[37,5],[\"chat.incoming_webhooks.name_placeholder\"],null]]],[[\"@type\",\"@value\"],[\"text\",[30,0,[\"newWebhookName\"]]]],null],[1,\"\\n      \"],[8,[39,8],null,[[\"@content\",\"@value\",\"@onChange\"],[[30,0,[\"model\",\"chat_channels\"]],[30,0,[\"newWebhookChannelId\"]],[28,[37,9],[[30,0],[28,[37,4],[[30,0,[\"newWebhookChannelId\"]]],null]],null]]],null],[1,\"\\n      \"],[8,[39,2],[[24,0,\"btn-primary create-new-incoming-webhook-btn\"]],[[\"@label\",\"@title\",\"@disabled\",\"@action\"],[\"chat.create\",\"chat.create\",[28,[37,13],[[30,0,[\"nameAndChannelValid\"]]],null],[30,0,[\"createNewWebhook\"]]]],null],[1,\"\\n      \"],[8,[39,2],null,[[\"@label\",\"@title\",\"@action\"],[\"chat.cancel\",\"chat.cancel\",[30,0,[\"resetNewWebhook\"]]]],null],[1,\"\\n    \"],[13],[1,\"\\n\"]],[]],[[[1,\"    \"],[8,[39,2],[[24,0,\"btn-primary\"]],[[\"@label\",\"@title\",\"@action\"],[\"chat.incoming_webhooks.new\",\"chat.incoming_webhooks.new\",[28,[37,3],[[28,[37,4],[[30,0,[\"creatingNew\"]]],null],true],null]]],null],[1,\"\\n\"]],[]]],[1,\"\\n  \"],[10,2],[12],[1,[28,[35,14],[[28,[37,5],[\"chat.incoming_webhooks.instructions\"],null]],null]],[13],[1,\"\\n\\n  \"],[10,0],[14,0,\"incoming-chat-webhooks\"],[12],[1,\"\\n\"],[41,[30,0,[\"model\",\"incoming_chat_webhooks\"]],[[[42,[28,[37,16],[[28,[37,16],[[30,0,[\"sortedWebhooks\"]]],null]],null],null,[[[1,\"        \"],[10,0],[14,0,\"incoming-chat-webhooks--row\"],[12],[1,\"\\n          \"],[10,0],[14,0,\"incoming-chat-webhooks--row--details\"],[12],[1,\"\\n            \"],[10,0],[14,0,\"incoming-chat-webhooks--row--details--name\"],[12],[1,\"\\n              \"],[1,[30,1,[\"name\"]]],[1,\"\\n            \"],[13],[1,\"\\n\\n            \"],[10,0],[12],[1,\"\\n\"],[41,[30,1,[\"emoji\"]],[[[1,\"                \"],[1,[28,[35,10],[[30,1,[\"emoji\"]]],null]],[1,\"\\n\"]],[]],null],[1,\"\\n\"],[41,[30,1,[\"username\"]],[[[1,\"                \"],[1,[30,1,[\"username\"]]],[1,\"\\n\"]],[]],[[[1,\"                \"],[1,[28,[35,5],[\"chat.incoming_webhooks.system\"],null]],[1,\"\\n\"]],[]]],[1,\"            \"],[13],[1,\"\\n\\n            \"],[10,0],[12],[8,[39,17],null,[[\"@channel\"],[[30,1,[\"chat_channel\"]]]],null],[13],[1,\"\\n            \"],[10,0],[12],[1,[30,1,[\"description\"]]],[13],[1,\"\\n          \"],[13],[1,\"\\n\\n          \"],[10,0],[14,0,\"incoming-chat-webhooks--row--controls\"],[12],[1,\"\\n            \"],[10,0],[12],[1,\"\\n              \"],[8,[39,2],null,[[\"@icon\",\"@label\",\"@action\"],[\"pencil-alt\",\"chat.incoming_webhooks.edit\",[28,[37,3],[[28,[37,4],[[30,0,[\"selectedWebhookId\"]]],null],[30,1,[\"id\"]]],null]]],null],[1,\"\\n              \"],[8,[39,2],[[24,0,\"btn-danger\"]],[[\"@icon\",\"@title\",\"@action\"],[\"trash-alt\",\"chat.incoming_webhooks.delete\",[28,[37,3],[[30,0,[\"destroyWebhook\"]],[30,1]],null]]],null],[1,\"\\n            \"],[13],[1,\"\\n          \"],[13],[1,\"\\n        \"],[13],[1,\"\\n\"]],[1]],null]],[]],[[[1,\"      \"],[1,[28,[35,5],[\"chat.incoming_webhooks.none\"],null]],[1,\"\\n\"]],[]]],[1,\"  \"],[13],[1,\"\\n\"]],[]]]],[\"webhook\"],false,[\"chat/admin/export-messages\",\"if\",\"d-button\",\"fn\",\"mut\",\"i18n\",\"input\",\"textarea\",\"chat-channel-chooser\",\"action\",\"replace-emoji\",\"emoji-picker\",\"unless\",\"not\",\"html-safe\",\"each\",\"-track-array\",\"channel-title\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/admin-plugins-chat.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-browse-all", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Routes::Browse @status="all" />
  */
  {
    "id": "wstkeSHU",
    "block": "[[[8,[39,0],null,[[\"@status\"],[\"all\"]],null]],[],false,[\"chat/routes/browse\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-browse-all.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-browse-archived", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Routes::Browse @status="archived" />
  */
  {
    "id": "0DBy4MEk",
    "block": "[[[8,[39,0],null,[[\"@status\"],[\"archived\"]],null]],[],false,[\"chat/routes/browse\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-browse-archived.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-browse-closed", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Routes::Browse @status="closed" />
  */
  {
    "id": "qYrewYp6",
    "block": "[[[8,[39,0],null,[[\"@status\"],[\"closed\"]],null]],[],false,[\"chat/routes/browse\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-browse-closed.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-browse-open", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Routes::Browse @status="open" />
  */
  {
    "id": "Ha6JlJwA",
    "block": "[[[8,[39,0],null,[[\"@status\"],[\"open\"]],null]],[],false,[\"chat/routes/browse\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-browse-open.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-browse", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    {{outlet}}
  */
  {
    "id": "bDDVU8Cl",
    "block": "[[[46,[28,[37,1],null,null],null,null,null]],[],false,[\"component\",\"-outlet\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-browse.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-channel-info-members", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Routes::ChannelInfoMembers @channel={{this.model}} />
  */
  {
    "id": "F/Of0pmn",
    "block": "[[[8,[39,0],null,[[\"@channel\"],[[30,0,[\"model\"]]]],null]],[],false,[\"chat/routes/channel-info-members\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-channel-info-members.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-channel-info-settings", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Routes::ChannelInfoSettings @channel={{this.model}} />
  */
  {
    "id": "mUrk0Olg",
    "block": "[[[8,[39,0],null,[[\"@channel\"],[[30,0,[\"model\"]]]],null]],[],false,[\"chat/routes/channel-info-settings\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-channel-info-settings.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-channel-info", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Routes::ChannelInfo @channel={{this.model}} />
  */
  {
    "id": "Ap9/cIrL",
    "block": "[[[8,[39,0],null,[[\"@channel\"],[[30,0,[\"model\"]]]],null]],[],false,[\"chat/routes/channel-info\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-channel-info.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-channel-thread", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Routes::ChannelThread
    @thread={{this.model}}
    @targetMessageId={{this.targetMessageId}}
  />
  */
  {
    "id": "dBCndVuI",
    "block": "[[[8,[39,0],null,[[\"@thread\",\"@targetMessageId\"],[[30,0,[\"model\"]],[30,0,[\"targetMessageId\"]]]],null]],[],false,[\"chat/routes/channel-thread\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-channel-thread.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-channel-threads", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Routes::ChannelThreads @channel={{this.model}} />
  */
  {
    "id": "neA2/I/Y",
    "block": "[[[8,[39,0],null,[[\"@channel\"],[[30,0,[\"model\"]]]],null]],[],false,[\"chat/routes/channel-threads\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-channel-threads.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-channel", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Routes::Channel
    @channel={{this.model}}
    @targetMessageId={{this.targetMessageId}}
  />
  */
  {
    "id": "H/iqPgyD",
    "block": "[[[8,[39,0],null,[[\"@channel\",\"@targetMessageId\"],[[30,0,[\"model\"]],[30,0,[\"targetMessageId\"]]]],null]],[],false,[\"chat/routes/channel\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-channel.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-index", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <ChannelsList />
  */
  {
    "id": "Okro16df",
    "block": "[[[8,[39,0],null,null,null]],[],false,[\"channels-list\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-index.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat-threads", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <Chat::Routes::Threads />
  */
  {
    "id": "xde66Ckc",
    "block": "[[[8,[39,0],null,null,null]],[],false,[\"chat/routes/threads\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat-threads.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/chat", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <div id="chat-progress-bar-container"></div>
  
  <ChatVh />
  
  {{#if this.chat.sidebarActive}}
    <div class="full-page-chat teams-sidebar-on">
      {{outlet}}
    </div>
  {{else}}
    <div
      class={{concat-class
        "full-page-chat"
        (if this.shouldUseCoreSidebar "full-page-chat-sidebar-enabled")
      }}
    >
      {{#if this.shouldUseChatSidebar}}
        <ChannelsList />
      {{/if}}
  
      <div
        id="main-chat-outlet"
        class={{concat-class "main-chat-outlet" this.mainOutletModifierClasses}}
      >
        {{outlet}}
      </div>
    </div>
  {{/if}}
  */
  {
    "id": "Ypgs0gJG",
    "block": "[[[10,0],[14,1,\"chat-progress-bar-container\"],[12],[13],[1,\"\\n\\n\"],[8,[39,0],null,null,null],[1,\"\\n\\n\"],[41,[30,0,[\"chat\",\"sidebarActive\"]],[[[1,\"  \"],[10,0],[14,0,\"full-page-chat teams-sidebar-on\"],[12],[1,\"\\n    \"],[46,[28,[37,3],null,null],null,null,null],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]],[[[1,\"  \"],[10,0],[15,0,[28,[37,4],[\"full-page-chat\",[52,[30,0,[\"shouldUseCoreSidebar\"]],\"full-page-chat-sidebar-enabled\"]],null]],[12],[1,\"\\n\"],[41,[30,0,[\"shouldUseChatSidebar\"]],[[[1,\"      \"],[8,[39,5],null,null,null],[1,\"\\n\"]],[]],null],[1,\"\\n    \"],[10,0],[14,1,\"main-chat-outlet\"],[15,0,[28,[37,4],[\"main-chat-outlet\",[30,0,[\"mainOutletModifierClasses\"]]],null]],[12],[1,\"\\n      \"],[46,[28,[37,3],null,null],null,null,null],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"]],[]]]],[],false,[\"chat-vh\",\"if\",\"component\",\"-outlet\",\"concat-class\",\"channels-list\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/chat.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/connectors/below-footer/chat-channel-message-emoji-picker-connector", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <ChatChannelMessageEmojiPicker />
  */
  {
    "id": "yzyIVLUg",
    "block": "[[[8,[39,0],null,null,null]],[],false,[\"chat-channel-message-emoji-picker\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/connectors/below-footer/chat-channel-message-emoji-picker-connector.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/connectors/below-footer/chat-drawer-outlet", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <div class="chat-drawer-outlet-container">
    <ChatDrawer />
  </div>
  */
  {
    "id": "dBkEnbeG",
    "block": "[[[10,0],[14,0,\"chat-drawer-outlet-container\"],[12],[1,\"\\n  \"],[8,[39,0],null,null,null],[1,\"\\n\"],[13]],[],false,[\"chat-drawer\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/connectors/below-footer/chat-drawer-outlet.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/connectors/below-footer/chat-message-actions-desktop-outlet", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <ChatMessageActionsDesktop />
  */
  {
    "id": "6ho8SpDw",
    "block": "[[[8,[39,0],null,null,null]],[],false,[\"chat-message-actions-desktop\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/connectors/below-footer/chat-message-actions-desktop-outlet.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/connectors/below-footer/chat-message-actions-mobile-outlet", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <ChatMessageActionsMobile />
  */
  {
    "id": "dy8JR7Ux",
    "block": "[[[8,[39,0],null,null,null]],[],false,[\"chat-message-actions-mobile\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/connectors/below-footer/chat-message-actions-mobile-outlet.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/connectors/home-logo-wrapper/chat-header-connector", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <ChatHeader>{{yield}}</ChatHeader>
  */
  {
    "id": "edqwta3S",
    "block": "[[[8,[39,0],null,null,[[\"default\"],[[[[18,1,null]],[]]]]]],[\"&default\"],false,[\"chat-header\",\"yield\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/connectors/home-logo-wrapper/chat-header-connector.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/connectors/user-card-below-message-button/chat-button", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    {{#if this.user.can_chat_user}}
    <Chat::UserCardButton @user={{this.user}} />
  {{/if}}
  */
  {
    "id": "6Q54Siix",
    "block": "[[[41,[30,0,[\"user\",\"can_chat_user\"]],[[[1,\"  \"],[8,[39,1],null,[[\"@user\"],[[30,0,[\"user\"]]]],null],[1,\"\\n\"]],[]],null]],[],false,[\"if\",\"chat/user-card-button\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/connectors/user-card-below-message-button/chat-button.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/templates/preferences/chat", ["exports", "@ember/template-factory"], function (_exports, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _templateFactory.createTemplateFactory)(
  /*
    <label class="control-label">{{i18n "chat.title_capitalized"}}</label>
  
  <div class="control-group chat-setting" data-setting-name="user_chat_enabled">
    <label class="controls">
      <Input
        id="user_chat_enabled"
        @type="checkbox"
        @checked={{this.model.user_option.chat_enabled}}
      />
      {{i18n "chat.enable"}}
    </label>
  </div>
  
  <div
    class="control-group chat-setting"
    data-setting-name="user_chat_only_push_notifications"
  >
    <label class="controls">
      <Input
        id="user_chat_only_push_notifications"
        @type="checkbox"
        @checked={{this.model.user_option.only_chat_push_notifications}}
      />
      {{i18n "chat.only_chat_push_notifications.title"}}
    </label>
    <span class="control-instructions">
      {{i18n "chat.only_chat_push_notifications.description"}}
    </span>
  </div>
  
  <div
    class="control-group chat-setting"
    data-setting-name="user_chat_ignore_channel_wide_mention"
  >
    <label class="controls">
      <Input
        id="user_chat_ignore_channel_wide_mention"
        @type="checkbox"
        @checked={{this.model.user_option.ignore_channel_wide_mention}}
      />
      {{i18n "chat.ignore_channel_wide_mention.title"}}
    </label>
    <span class="control-instructions">
      {{i18n "chat.ignore_channel_wide_mention.description"}}
    </span>
  </div>
  
  <div
    class="control-group chat-setting controls-dropdown"
    data-setting-name="user_chat_sounds"
  >
    <label for="user_chat_sounds">{{i18n "chat.sound.title"}}</label>
    <ComboBox
      @options={{hash none="chat.sounds.none"}}
      @valueProperty="value"
      @content={{this.chatSounds}}
      @value={{this.model.user_option.chat_sound}}
      @id="user_chat_sounds"
      @onChange={{action "onChangeChatSound"}}
    />
  </div>
  
  <div
    class="control-group chat-setting controls-dropdown"
    data-setting-name="user_chat_email_frequency"
  >
    <label for="user_chat_email_frequency">
      {{i18n "chat.email_frequency.title"}}
    </label>
    <ComboBox
      @valueProperty="value"
      @content={{this.emailFrequencyOptions}}
      @value={{this.model.user_option.chat_email_frequency}}
      @id="user_chat_email_frequency"
      @onChange={{action (mut this.model.user_option.chat_email_frequency)}}
    />
    {{#if (eq this.model.user_option.chat_email_frequency "when_away")}}
      <div class="control-instructions">
        {{i18n "chat.email_frequency.description"}}
      </div>
    {{/if}}
  </div>
  
  <div
    class="control-group chat-setting controls-dropdown"
    data-setting-name="user_chat_header_indicator_preference"
  >
    <label for="user_chat_header_indicator_preference">
      {{i18n "chat.header_indicator_preference.title"}}
    </label>
    <ComboBox
      @valueProperty="value"
      @content={{this.headerIndicatorOptions}}
      @value={{this.model.user_option.chat_header_indicator_preference}}
      @id="user_chat_header_indicator_preference"
      @onChange={{action
        (mut this.model.user_option.chat_header_indicator_preference)
      }}
    />
  </div>
  
  <div
    class="control-group chat-setting controls-dropdown"
    data-setting-name="user_chat_separate_sidebar_mode"
  >
    <label for="user_chat_separate_sidebar_mode">
      {{i18n "chat.separate_sidebar_mode.title"}}
    </label>
  
    <ComboBox
      @valueProperty="value"
      @content={{this.chatSeparateSidebarModeOptions}}
      @value={{this.chatSeparateSidebarMode}}
      @id="user_chat_separate_sidebar_mode"
      @onChange={{action (mut this.model.user_option.chat_separate_sidebar_mode)}}
    />
  </div>
  
  <SaveControls
    @id="user_chat_preference_save"
    @model={{this.model}}
    @action={{action "save"}}
    @saved={{this.saved}}
  />
  */
  {
    "id": "Z9h+n7xC",
    "block": "[[[10,\"label\"],[14,0,\"control-label\"],[12],[1,[28,[35,0],[\"chat.title_capitalized\"],null]],[13],[1,\"\\n\\n\"],[10,0],[14,0,\"control-group chat-setting\"],[14,\"data-setting-name\",\"user_chat_enabled\"],[12],[1,\"\\n  \"],[10,\"label\"],[14,0,\"controls\"],[12],[1,\"\\n    \"],[8,[39,1],[[24,1,\"user_chat_enabled\"]],[[\"@type\",\"@checked\"],[\"checkbox\",[30,0,[\"model\",\"user_option\",\"chat_enabled\"]]]],null],[1,\"\\n    \"],[1,[28,[35,0],[\"chat.enable\"],null]],[1,\"\\n  \"],[13],[1,\"\\n\"],[13],[1,\"\\n\\n\"],[10,0],[14,0,\"control-group chat-setting\"],[14,\"data-setting-name\",\"user_chat_only_push_notifications\"],[12],[1,\"\\n  \"],[10,\"label\"],[14,0,\"controls\"],[12],[1,\"\\n    \"],[8,[39,1],[[24,1,\"user_chat_only_push_notifications\"]],[[\"@type\",\"@checked\"],[\"checkbox\",[30,0,[\"model\",\"user_option\",\"only_chat_push_notifications\"]]]],null],[1,\"\\n    \"],[1,[28,[35,0],[\"chat.only_chat_push_notifications.title\"],null]],[1,\"\\n  \"],[13],[1,\"\\n  \"],[10,1],[14,0,\"control-instructions\"],[12],[1,\"\\n    \"],[1,[28,[35,0],[\"chat.only_chat_push_notifications.description\"],null]],[1,\"\\n  \"],[13],[1,\"\\n\"],[13],[1,\"\\n\\n\"],[10,0],[14,0,\"control-group chat-setting\"],[14,\"data-setting-name\",\"user_chat_ignore_channel_wide_mention\"],[12],[1,\"\\n  \"],[10,\"label\"],[14,0,\"controls\"],[12],[1,\"\\n    \"],[8,[39,1],[[24,1,\"user_chat_ignore_channel_wide_mention\"]],[[\"@type\",\"@checked\"],[\"checkbox\",[30,0,[\"model\",\"user_option\",\"ignore_channel_wide_mention\"]]]],null],[1,\"\\n    \"],[1,[28,[35,0],[\"chat.ignore_channel_wide_mention.title\"],null]],[1,\"\\n  \"],[13],[1,\"\\n  \"],[10,1],[14,0,\"control-instructions\"],[12],[1,\"\\n    \"],[1,[28,[35,0],[\"chat.ignore_channel_wide_mention.description\"],null]],[1,\"\\n  \"],[13],[1,\"\\n\"],[13],[1,\"\\n\\n\"],[10,0],[14,0,\"control-group chat-setting controls-dropdown\"],[14,\"data-setting-name\",\"user_chat_sounds\"],[12],[1,\"\\n  \"],[10,\"label\"],[14,\"for\",\"user_chat_sounds\"],[12],[1,[28,[35,0],[\"chat.sound.title\"],null]],[13],[1,\"\\n  \"],[8,[39,2],null,[[\"@options\",\"@valueProperty\",\"@content\",\"@value\",\"@id\",\"@onChange\"],[[28,[37,3],null,[[\"none\"],[\"chat.sounds.none\"]]],\"value\",[30,0,[\"chatSounds\"]],[30,0,[\"model\",\"user_option\",\"chat_sound\"]],\"user_chat_sounds\",[28,[37,4],[[30,0],\"onChangeChatSound\"],null]]],null],[1,\"\\n\"],[13],[1,\"\\n\\n\"],[10,0],[14,0,\"control-group chat-setting controls-dropdown\"],[14,\"data-setting-name\",\"user_chat_email_frequency\"],[12],[1,\"\\n  \"],[10,\"label\"],[14,\"for\",\"user_chat_email_frequency\"],[12],[1,\"\\n    \"],[1,[28,[35,0],[\"chat.email_frequency.title\"],null]],[1,\"\\n  \"],[13],[1,\"\\n  \"],[8,[39,2],null,[[\"@valueProperty\",\"@content\",\"@value\",\"@id\",\"@onChange\"],[\"value\",[30,0,[\"emailFrequencyOptions\"]],[30,0,[\"model\",\"user_option\",\"chat_email_frequency\"]],\"user_chat_email_frequency\",[28,[37,4],[[30,0],[28,[37,5],[[30,0,[\"model\",\"user_option\",\"chat_email_frequency\"]]],null]],null]]],null],[1,\"\\n\"],[41,[28,[37,7],[[30,0,[\"model\",\"user_option\",\"chat_email_frequency\"]],\"when_away\"],null],[[[1,\"    \"],[10,0],[14,0,\"control-instructions\"],[12],[1,\"\\n      \"],[1,[28,[35,0],[\"chat.email_frequency.description\"],null]],[1,\"\\n    \"],[13],[1,\"\\n\"]],[]],null],[13],[1,\"\\n\\n\"],[10,0],[14,0,\"control-group chat-setting controls-dropdown\"],[14,\"data-setting-name\",\"user_chat_header_indicator_preference\"],[12],[1,\"\\n  \"],[10,\"label\"],[14,\"for\",\"user_chat_header_indicator_preference\"],[12],[1,\"\\n    \"],[1,[28,[35,0],[\"chat.header_indicator_preference.title\"],null]],[1,\"\\n  \"],[13],[1,\"\\n  \"],[8,[39,2],null,[[\"@valueProperty\",\"@content\",\"@value\",\"@id\",\"@onChange\"],[\"value\",[30,0,[\"headerIndicatorOptions\"]],[30,0,[\"model\",\"user_option\",\"chat_header_indicator_preference\"]],\"user_chat_header_indicator_preference\",[28,[37,4],[[30,0],[28,[37,5],[[30,0,[\"model\",\"user_option\",\"chat_header_indicator_preference\"]]],null]],null]]],null],[1,\"\\n\"],[13],[1,\"\\n\\n\"],[10,0],[14,0,\"control-group chat-setting controls-dropdown\"],[14,\"data-setting-name\",\"user_chat_separate_sidebar_mode\"],[12],[1,\"\\n  \"],[10,\"label\"],[14,\"for\",\"user_chat_separate_sidebar_mode\"],[12],[1,\"\\n    \"],[1,[28,[35,0],[\"chat.separate_sidebar_mode.title\"],null]],[1,\"\\n  \"],[13],[1,\"\\n\\n  \"],[8,[39,2],null,[[\"@valueProperty\",\"@content\",\"@value\",\"@id\",\"@onChange\"],[\"value\",[30,0,[\"chatSeparateSidebarModeOptions\"]],[30,0,[\"chatSeparateSidebarMode\"]],\"user_chat_separate_sidebar_mode\",[28,[37,4],[[30,0],[28,[37,5],[[30,0,[\"model\",\"user_option\",\"chat_separate_sidebar_mode\"]]],null]],null]]],null],[1,\"\\n\"],[13],[1,\"\\n\\n\"],[8,[39,8],null,[[\"@id\",\"@model\",\"@action\",\"@saved\"],[\"user_chat_preference_save\",[30,0,[\"model\"]],[28,[37,4],[[30,0],\"save\"],null],[30,0,[\"saved\"]]]],null]],[],false,[\"i18n\",\"input\",\"combo-box\",\"hash\",\"action\",\"mut\",\"if\",\"eq\",\"save-controls\"]]",
    "moduleName": "discourse/plugins/chat/discourse/templates/preferences/chat.hbs",
    "isStrictMode": false
  });
});
define("discourse/plugins/chat/discourse/widgets/chat-header-icon", ["exports", "discourse/widgets/render-glimmer", "discourse/widgets/widget", "@ember/template-factory"], function (_exports, _renderGlimmer, _widget, _templateFactory) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = (0, _widget.createWidget)("chat-header-icon", {
    tagName: "li.header-dropdown-toggle.chat-header-icon",
    services: ["chat"],
    html() {
      if (!this.chat.userCanChat) {
        return;
      }
      return [new _renderGlimmer.default(this, "div.widget-component-connector", (0, _templateFactory.createTemplateFactory)(
      /*
        <Chat::Header::Icon />
      */
      {
        "id": "iNo9r7Qm",
        "block": "[[[8,[39,0],null,null,null]],[],false,[\"chat/header/icon\"]]",
        "moduleName": "/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/discourse/widgets/chat-header-icon.js",
        "isStrictMode": false
      }))];
    }
  });
});
define("discourse/plugins/chat/lib/discourse-markdown/chat-transcript", ["exports", "pretty-text/emoji", "discourse-i18n"], function (_exports, _emoji, _discourseI18n) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.setup = setup;
  let customMarkdownCookFn;
  const chatTranscriptRule = {
    tag: "chat",
    replace: function (state, tagInfo, content) {
      // shouldn't really happen but we don't want to break rendering if it does
      if (!customMarkdownCookFn) {
        return;
      }
      const options = state.md.options.discourse;
      const [username, messageIdStart, messageTimeStart] = tagInfo.attrs.quote && tagInfo.attrs.quote.split(";") || [];
      const reactions = tagInfo.attrs.reactions;
      const multiQuote = !!tagInfo.attrs.multiQuote;
      const noLink = !!tagInfo.attrs.noLink;
      const channelName = tagInfo.attrs.channel;
      const channelId = tagInfo.attrs.channelId;
      const threadId = tagInfo.attrs.threadId;
      const threadTitle = tagInfo.attrs.threadTitle;
      const channelLink = channelId ? options.getURL(`/chat/c/-/${channelId}`) : null;
      if (!username || !messageIdStart || !messageTimeStart) {
        return;
      }
      const isThread = threadId && content.includes("[chat");
      let wrapperDivToken = state.push("div_chat_transcript_wrap", "div", 1);
      if (channelName && multiQuote) {
        let metaDivToken = state.push("div_chat_transcript_meta", "div", 1);
        metaDivToken.attrs = [["class", "chat-transcript-meta"]];
        const channelToken = state.push("html_inline", "", 0);
        const unescapedChannelName = (0, _emoji.performEmojiUnescape)(channelName, {
          getURL: options.getURL,
          emojiSet: options.emojiSet,
          emojiCDNUrl: options.emojiCDNUrl,
          enableEmojiShortcuts: options.enableEmojiShortcuts,
          inlineEmoji: options.inlineEmoji,
          lazy: true
        });
        channelToken.content = _discourseI18n.default.t("chat.quote.original_channel", {
          channel: unescapedChannelName,
          channelLink
        });
        state.push("div_chat_transcript_meta", "div", -1);
      }
      if (isThread) {
        state.push("details_chat_transcript_wrap_open", "details", 1);
        state.push("summary_chat_transcript_open", "summary", 1);
        const threadToken = state.push("div_thread_open", "div", 1);
        threadToken.attrs = [["class", "chat-transcript-thread"]];
        const threadHeaderToken = state.push("div_thread_header_open", "div", 1);
        threadHeaderToken.attrs = [["class", "chat-transcript-thread-header"]];
        const thread_svg = state.push("svg_thread_header_open", "svg", 1);
        thread_svg.block = false;
        thread_svg.attrs = [["class", "fa d-icon d-icon-discourse-threads svg-icon svg-node"]];
        state.push(thread_svg);
        let thread_use = state.push("use_svg_thread_open", "use", 1);
        thread_use.block = false;
        thread_use.attrs = [["href", "#discourse-threads"]];
        state.push(thread_use);
        state.push(state.push("use_svg_thread_close", "use", -1));
        state.push(state.push("svg_thread_header_close", "svg", -1));
        const threadTitleContainerToken = state.push("span_thread_title_open", "span", 1);
        threadTitleContainerToken.attrs = [["class", "chat-transcript-thread-header__title"]];
        const threadTitleToken = state.push("html_inline", "", 0);
        const unescapedThreadTitle = (0, _emoji.performEmojiUnescape)(threadTitle, {
          getURL: options.getURL,
          emojiSet: options.emojiSet,
          emojiCDNUrl: options.emojiCDNUrl,
          enableEmojiShortcuts: options.enableEmojiShortcuts,
          inlineEmoji: options.inlineEmoji,
          lazy: true
        });
        threadTitleToken.content = unescapedThreadTitle ? unescapedThreadTitle : _discourseI18n.default.t("chat.quote.default_thread_title");
        state.push("span_thread_title_close", "span", -1);
        state.push("div_thread_header_close", "div", -1);
      }
      let wrapperClasses = ["chat-transcript"];
      if (tagInfo.attrs.chained) {
        wrapperClasses.push("chat-transcript-chained");
      }
      wrapperDivToken.attrs = [["class", wrapperClasses.join(" ")]];
      wrapperDivToken.attrs.push(["data-message-id", messageIdStart]);
      wrapperDivToken.attrs.push(["data-username", username]);
      wrapperDivToken.attrs.push(["data-datetime", messageTimeStart]);
      if (reactions) {
        wrapperDivToken.attrs.push(["data-reactions", reactions]);
      }
      if (channelName) {
        wrapperDivToken.attrs.push(["data-channel-name", channelName]);
      }
      if (channelId) {
        wrapperDivToken.attrs.push(["data-channel-id", channelId]);
      }
      let userDivToken = state.push("div_chat_transcript_user", "div", 1);
      userDivToken.attrs = [["class", "chat-transcript-user"]];

      // start: user avatar
      let avatarDivToken = state.push("div_chat_transcript_user_avatar", "div", 1);
      avatarDivToken.attrs = [["class", "chat-transcript-user-avatar"]];

      // server-side, we need to lookup the avatar from the username
      let avatarImg;
      if (options.lookupAvatar) {
        avatarImg = options.lookupAvatar(username);
      }
      if (avatarImg) {
        const avatarImgToken = state.push("html_inline", "", 0);
        avatarImgToken.content = avatarImg;
      }
      state.push("div_chat_transcript_user_avatar", "div", -1);
      // end: user avatar

      // start: username
      let usernameDivToken = state.push("div_chat_transcript_username", "div", 1);
      usernameDivToken.attrs = [["class", "chat-transcript-username"]];
      let displayName;
      if (options.formatUsername) {
        displayName = options.formatUsername(username);
      } else {
        displayName = username;
      }
      const usernameToken = state.push("html_inline", "", 0);
      usernameToken.content = displayName;
      state.push("div_chat_transcript_username", "div", -1);
      // end: username

      // start: time + link to message
      let datetimeDivToken = state.push("div_chat_transcript_datetime", "div", 1);
      datetimeDivToken.attrs = [["class", "chat-transcript-datetime"]];

      // for some cases, like archiving, we don't want the link to the
      // chat message because it will just result in a 404
      // also handles the case where the quote doesn’t contain
      // enough data to build a valid channel/message link
      if (noLink || !channelLink) {
        let spanToken = state.push("span_open", "span", 1);
        spanToken.attrs = [["title", messageTimeStart]];
        spanToken.block = false;
        if (channelName && !multiQuote) {
          let channelLinkToken = state.push("link_open", "a", 1);
          channelLinkToken.attrs = [["class", "chat-transcript-channel"], ["href", channelLink]];
          let inlineTextToken = state.push("html_inline", "", 0);
          inlineTextToken.content = `#${channelName}`;
          channelLinkToken = state.push("link_close", "a", -1);
          channelLinkToken.block = false;
        }
        spanToken = state.push("span_close", "span", -1);
        spanToken.block = false;
      } else {
        let linkToken = state.push("link_open", "a", 1);
        linkToken.attrs = [["href", `${channelLink}/${messageIdStart}`], ["title", messageTimeStart]];
        linkToken.block = false;
        linkToken = state.push("link_close", "a", -1);
        linkToken.block = false;
      }
      state.push("div_chat_transcript_datetime", "div", -1);
      // end: time + link to message

      // start: channel link for !multiQuote
      if (channelName && !multiQuote) {
        let channelLinkToken = state.push("link_open", "a", 1);
        channelLinkToken.attrs = [["class", "chat-transcript-channel"], ["href", channelLink]];
        let inlineTextToken = state.push("html_inline", "", 0);
        inlineTextToken.content = `#${channelName}`;
        channelLinkToken = state.push("link_close", "a", -1);
        channelLinkToken.block = false;
      }
      // end: channel link for !multiQuote

      state.push("div_chat_transcript_user", "div", -1);
      let messagesToken = state.push("div_chat_transcript_messages", "div", 1);
      messagesToken.attrs = [["class", "chat-transcript-messages"]];
      if (isThread) {
        const regex = /\[chat/i;
        const match = regex.exec(content);
        if (match) {
          const threadToken = state.push("html_raw", "", 1);
          threadToken.content = customMarkdownCookFn(content.substring(0, match.index));
          state.push("html_raw", "", -1);
          state.push("div_thread_close", "div", -1);
          state.push("summary_chat_transcript_close", "summary", -1);
          const token = state.push("html_raw", "", 1);
          token.content = customMarkdownCookFn(content.substring(match.index));
          state.push("html_raw", "", -1);
          state.push("details_chat_transcript_wrap_close", "details", -1);
        }
      } else {
        // rendering chat message content with limited markdown rule subset
        const token = state.push("html_raw", "", 1);
        token.content = customMarkdownCookFn(content);
        state.push("html_raw", "", -1);
      }
      if (reactions) {
        let emojiHtmlCache = {};
        let reactionsToken = state.push("div_chat_transcript_reactions", "div", 1);
        reactionsToken.attrs = [["class", "chat-transcript-reactions"]];
        reactions.split(";").forEach(reaction => {
          const split = reaction.split(":");
          const emoji = split[0];
          const usernames = split[1].split(",");
          const reactToken = state.push("div_chat_transcript_reaction", "div", 1);
          reactToken.attrs = [["class", "chat-transcript-reaction"]];
          const emojiToken = state.push("html_inline", "", 0);
          if (!emojiHtmlCache[emoji]) {
            emojiHtmlCache[emoji] = (0, _emoji.performEmojiUnescape)(`:${emoji}:`, {
              getURL: options.getURL,
              emojiSet: options.emojiSet,
              emojiCDNUrl: options.emojiCDNUrl,
              enableEmojiShortcuts: options.enableEmojiShortcuts,
              inlineEmoji: options.inlineEmoji,
              lazy: true
            });
          }
          emojiToken.content = `${emojiHtmlCache[emoji]} ${usernames.length.toString()}`;
          state.push("div_chat_transcript_reaction", "div", -1);
        });
        state.push("div_chat_transcript_reactions", "div", -1);
      }
      state.push("div_chat_transcript_messages", "div", -1);
      state.push("div_chat_transcript_wrap", "div", -1);
      return true;
    }
  };
  function setup(helper) {
    helper.allowList(["svg[class=fa d-icon d-icon-discourse-threads svg-icon svg-node]", "use[href=#discourse-threads]", "div[class=chat-transcript]", "details[class=chat-transcript]", "div[class=chat-transcript chat-transcript-chained]", "details[class=chat-transcript chat-transcript-chained]", "div.chat-transcript-meta", "div.chat-transcript-user", "div.chat-transcript-username", "div.chat-transcript-user-avatar", "div.chat-transcript-messages", "div.chat-transcript-datetime", "div.chat-transcript-reactions", "div.chat-transcript-reaction", "span[title]", "div[data-message-id]", "div[data-channel-name]", "div[data-channel-id]", "div[data-username]", "div[data-datetime]", "a.chat-transcript-channel", "div.chat-transcript-thread", "div.chat-transcript-thread-header", "span.chat-transcript-thread-header__title"]);
    helper.registerOptions((opts, siteSettings) => {
      opts.features["chat-transcript"] = !!siteSettings.chat_enabled;
    });
    helper.registerPlugin(md => {
      if (md.options.discourse.features["chat-transcript"]) {
        md.block.bbcode.ruler.push("chat-transcript", chatTranscriptRule);
      }
    });
    helper.buildCookFunction((opts, generateCookFunction) => {
      if (!opts.discourse.additionalOptions?.chat) {
        return;
      }
      const chatAdditionalOpts = opts.discourse.additionalOptions.chat;

      // we need to be able to quote images from chat, but the image rule is usually
      // banned for chat messages
      const markdownItRules = chatAdditionalOpts.limited_pretty_text_markdown_rules.concat("image");
      generateCookFunction({
        featuresOverride: chatAdditionalOpts.limited_pretty_text_features,
        markdownItRules,
        hashtagLookup: opts.discourse.hashtagLookup,
        hashtagTypesInPriorityOrder: chatAdditionalOpts.hashtag_configurations["chat-composer"],
        hashtagIcons: opts.discourse.hashtagIcons
      }, customCookFn => {
        customMarkdownCookFn = customCookFn;
      });
    });
  }
});
define("discourse/plugins/chat/select-kit/addons/components/thread-notifications-button", ["exports", "select-kit/components/notifications-button", "discourse/plugins/chat/discourse/lib/chat-notification-levels"], function (_exports, _notificationsButton, _chatNotificationLevels) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _exports.default = _notificationsButton.default.extend({
    pluginApiIdentifiers: ["thread-notifications-button"],
    classNames: ["thread-notifications-button"],
    content: _chatNotificationLevels.threadNotificationButtonLevels,
    selectKitOptions: {
      i18nPrefix: "chat.thread.notifications",
      showFullTitle: false,
      btnCustomClasses: "btn-flat"
    }
  });
});//# sourceMappingURL=chat.map
