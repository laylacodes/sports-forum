{"version":3,"sources":["discourse/plugins/chat/acceptance/chat-composer-test.js","discourse/plugins/chat/acceptance/chat-live-pane-collapse-test.js","discourse/plugins/chat/acceptance/chat-live-pane-test.js","discourse/plugins/chat/acceptance/hashtag-css-generator-test.js","discourse/plugins/chat/acceptance/mentions-test.js","discourse/plugins/chat/acceptance/user-status-on-mentions-test.js","discourse/plugins/chat/chat-fixtures.js","discourse/plugins/chat/components/channel-title-test.js","discourse/plugins/chat/components/chat-channel-card-test.js","discourse/plugins/chat/components/chat-channel-leave-btn-test.js","discourse/plugins/chat/components/chat-channel-metadata-test.js","discourse/plugins/chat/components/chat-channel-preview-card-test.js","discourse/plugins/chat/components/chat-channel-row-test.js","discourse/plugins/chat/components/chat-channel-status-test.js","discourse/plugins/chat/components/chat-channel-test.js","discourse/plugins/chat/components/chat-composer-dropdown-test.js","discourse/plugins/chat/components/chat-composer-message-details-test.js","discourse/plugins/chat/components/chat-composer-placeholder-test.js","discourse/plugins/chat/components/chat-composer-upload-test.js","discourse/plugins/chat/components/chat-composer-uploads-test.js","discourse/plugins/chat/components/chat-emoji-avatar-test.js","discourse/plugins/chat/components/chat-emoji-picker-test.js","discourse/plugins/chat/components/chat-header-icon-test.js","discourse/plugins/chat/components/chat-message-avatar-test.js","discourse/plugins/chat/components/chat-message-collapser-test.js","discourse/plugins/chat/components/chat-message-info-test.js","discourse/plugins/chat/components/chat-message-left-gutter-test.js","discourse/plugins/chat/components/chat-message-reaction-test.js","discourse/plugins/chat/components/chat-message-separator-date-test.js","discourse/plugins/chat/components/chat-message-separator-new-test.js","discourse/plugins/chat/components/chat-message-test.js","discourse/plugins/chat/components/chat-message-text-test.js","discourse/plugins/chat/components/chat-modal-archive-channel-test.js","discourse/plugins/chat/components/chat-modal-delete-channel-test.js","discourse/plugins/chat/components/chat-modal-move-message-to-channel-test.js","discourse/plugins/chat/components/chat-notices-test.js","discourse/plugins/chat/components/chat-replying-indicator-test.js","discourse/plugins/chat/components/chat-retention-reminder-test.js","discourse/plugins/chat/components/chat-retention-reminder-text-test.js","discourse/plugins/chat/components/chat-thread-header-test.js","discourse/plugins/chat/components/chat-thread-list-item-test.js","discourse/plugins/chat/components/chat-thread-participants-test.js","discourse/plugins/chat/components/chat-upload-test.js","discourse/plugins/chat/components/chat-user-avatar-test.js","discourse/plugins/chat/components/chat-user-card-button-test.js","discourse/plugins/chat/components/chat-user-display-name-test.js","discourse/plugins/chat/components/chat-user-info-test.js","discourse/plugins/chat/components/collapser-test.js","discourse/plugins/chat/components/dc-filter-input-test.js","discourse/plugins/chat/helpers/chat-default-pretender.js","discourse/plugins/chat/helpers/chat-pretenders.js","discourse/plugins/chat/integration/components/user-menu/chat-notifications-list-test.js","discourse/plugins/chat/unit/helpers/format-chat-date-test.js","discourse/plugins/chat/unit/helpers/tonable-emoji-title-test.js","discourse/plugins/chat/unit/lib/chat-composer-buttons-test.js","discourse/plugins/chat/unit/lib/chat-emoji-reaction-store-test.js","discourse/plugins/chat/unit/lib/get-reaction-text-test.js","discourse/plugins/chat/unit/lib/slugify-channel-test.js","discourse/plugins/chat/unit/models/chat-message-test.js","discourse/plugins/chat/unit/services/chat-channel-info-route-origin-manager-test.js","discourse/plugins/chat/unit/services/chat-drafts-manager-test.js","discourse/plugins/chat/unit/services/chat-drawer-size-test.js","discourse/plugins/chat/unit/services/chat-emoji-picker-manager-test.js","discourse/plugins/chat/unit/services/chat-guardian-test.js","discourse/plugins/chat/unit/services/chat-state-manager-test.js","discourse/plugins/chat/unit/utility/plugin-api-test.js"],"sourcesContent":["define(\"discourse/plugins/chat/acceptance/chat-composer-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/helpers/chat-pretenders\"], function (_testHelpers, _qunit, _qunitHelpers, _chatPretenders) {\n  \"use strict\";\n\n  const GROUP_NAME = \"group1\";\n  (0, _qunitHelpers.acceptance)(\"Discourse Chat - Composer\", function (needs) {\n    needs.user({\n      has_chat_enabled: true\n    });\n    needs.settings({\n      chat_enabled: true,\n      enable_rich_text_paste: true\n    });\n    needs.pretender((server, helper) => {\n      (0, _chatPretenders.baseChatPretenders)(server, helper);\n      (0, _chatPretenders.chatChannelPretender)(server, helper);\n      server.get(\"/chat/:id/messages.json\", () => helper.response({\n        chat_messages: [],\n        meta: {}\n      }));\n      server.get(\"/chat/emojis.json\", () => helper.response({\n        favorites: [{\n          name: \"grinning\"\n        }]\n      }));\n      server.post(\"/chat/drafts\", () => {\n        return helper.response([]);\n      });\n      server.get(\"/chat/api/mentions/groups.json\", () => {\n        return helper.response({\n          unreachable: [GROUP_NAME],\n          over_members_limit: [],\n          invalid: []\n        });\n      });\n    });\n    needs.hooks.beforeEach(function () {\n      Object.defineProperty(this, \"chatService\", {\n        get: () => this.container.lookup(\"service:chat\")\n      });\n    });\n    (0, _qunit.skip)(\"when pasting html in composer\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/chat/c/another-category/11\");\n      const clipboardEvent = new Event(\"paste\", {\n        bubbles: true\n      });\n      clipboardEvent.clipboardData = {\n        types: [\"text/html\"],\n        getData: type => {\n          if (type === \"text/html\") {\n            return \"<a href>Foo</a>\";\n          }\n        }\n      };\n      document.querySelector(\".chat-composer__input\").dispatchEvent(clipboardEvent);\n      await (0, _testHelpers.settled)();\n      assert.equal(document.querySelector(\".chat-composer__input\").value, \"Foo\");\n    });\n  });\n  let sendAttempt = 0;\n  (0, _qunitHelpers.acceptance)(\"Discourse Chat - Composer - unreliable network\", function (needs) {\n    needs.user({\n      id: 1,\n      has_chat_enabled: true\n    });\n    needs.settings({\n      chat_enabled: true\n    });\n    needs.pretender((server, helper) => {\n      (0, _chatPretenders.chatChannelPretender)(server, helper);\n      server.get(\"/chat/:id/messages.json\", () => helper.response({\n        chat_messages: [],\n        meta: {}\n      }));\n      server.post(\"/chat/drafts\", () => helper.response(500, {}));\n      server.post(\"/chat/:id.json\", () => {\n        sendAttempt += 1;\n        return sendAttempt === 1 ? helper.response(500, {}) : helper.response({\n          success: true\n        });\n      });\n    });\n    needs.hooks.beforeEach(function () {\n      Object.defineProperty(this, \"chatService\", {\n        get: () => this.container.lookup(\"service:chat\")\n      });\n    });\n    needs.hooks.afterEach(function () {\n      sendAttempt = 0;\n    });\n    (0, _qunit.skip)(\"Sending a message with unreliable network\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/chat/c/-/11\");\n      await (0, _testHelpers.fillIn)(\".chat-composer__input\", \"network-error-message\");\n      await (0, _testHelpers.click)(\".chat-composer-button.-send\");\n      assert.ok((0, _qunitHelpers.exists)(\".chat-message-container[data-id='1'] .retry-staged-message-btn\"), \"it adds a retry button\");\n      await (0, _testHelpers.fillIn)(\".chat-composer__input\", \"network-error-message\");\n      await (0, _testHelpers.click)(\".chat-composer-button.-send\");\n      await (0, _qunitHelpers.publishToMessageBus)(`/chat/11`, {\n        type: \"sent\",\n        staged_id: 1,\n        chat_message: {\n          cooked: \"network-error-message\",\n          id: 175,\n          user: {\n            id: 1\n          }\n        }\n      });\n      assert.notOk((0, _qunitHelpers.exists)(\".chat-message-container[data-id='1'] .retry-staged-message-btn\"), \"it removes the staged message\");\n      assert.ok((0, _qunitHelpers.exists)(\".chat-message-container[data-id='175']\"), \"it sends the message\");\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-composer__input\").value, \"\", \"it clears the input\");\n    });\n    (0, _qunit.skip)(\"Draft with unreliable network\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/chat/c/-/11\");\n      this.chatService.set(\"isNetworkUnreliable\", true);\n      await (0, _testHelpers.settled)();\n      assert.ok((0, _qunitHelpers.exists)(\".chat-composer__unreliable-network\"), \"it displays a network error icon\");\n    });\n  });\n});","define(\"discourse/plugins/chat/acceptance/chat-live-pane-collapse-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/qunit-helpers\"], function (_testHelpers, _qunit, _qunitHelpers) {\n  \"use strict\";\n\n  (0, _qunitHelpers.acceptance)(\"Discourse Chat - Chat live pane collapse\", function (needs) {\n    needs.user({\n      username: \"eviltrout\",\n      id: 1,\n      can_chat: true,\n      has_chat_enabled: true\n    });\n    needs.settings({\n      chat_enabled: true\n    });\n    needs.pretender((server, helper) => {\n      server.get(\"/chat/:chatChannelId/messages.json\", () => helper.response({\n        meta: {\n          can_chat: true,\n          user_silenced: false\n        },\n        chat_messages: [{\n          id: 1,\n          message: \"https://www.youtube.com/watch?v=aOWkVdU4NH0\",\n          cooked: '<div class=\"youtube-onebox lazy-video-container\" data-video-id=\"aOWkVdU4NH0\" data-video-title=\"Picnic with my cat (shaved ice &amp; lemonade)\" data-provider-name=\"youtube\"> <a href=\"https://www.youtube.com/watch?v=aOWkVdU4NH0\" target=\"_blank\" rel=\"nofollow ugc noopener\"> <img class=\"youtube-thumbnail\" src=\"https://img.youtube.com/vi/aOWkVdU4NH0/maxresdefault.jpg\" title=\"Picnic with my cat (shaved ice &amp; lemonade)\"> </a> </div>',\n          excerpt: '<a href=\"https://www.youtube.com/watch?v=aOWkVdU4NH0\">[Picnic with my cat (shaved ice &amp; lemonade&hellip;</a>',\n          created_at: \"2021-07-20T08:14:16.950Z\",\n          flag_count: 0,\n          user: {\n            avatar_template: \"/letter_avatar_proxy/v4/letter/t/a9a28c/{size}.png\",\n            id: 1,\n            name: \"Tomtom\",\n            username: \"tomtom\"\n          }\n        }, {\n          id: 2,\n          message: \"\",\n          cooked: \"\",\n          excerpt: \"\",\n          uploads: [{\n            id: 4,\n            url: \"/images/avatar.png\",\n            original_filename: \"tomtom.jpeg\",\n            filesize: 93815,\n            width: 480,\n            height: 640,\n            thumbnail_width: 375,\n            thumbnail_height: 500,\n            extension: \"jpeg\",\n            retain_hours: null,\n            human_filesize: \"91.6 KB\"\n          }],\n          user: {\n            avatar_template: \"/letter_avatar_proxy/v4/letter/t/a9a28c/{size}.png\",\n            id: 1,\n            name: \"Tomtom\",\n            username: \"tomtom\"\n          }\n        }]\n      }));\n      server.get(\"/chat/chat_channels.json\", () => helper.response({\n        public_channels: [],\n        direct_message_channels: [],\n        message_bus_last_ids: {\n          channel_metadata: 0,\n          channel_edits: 0,\n          channel_status: 0,\n          new_channel: 0,\n          user_tracking_state: 0\n        }\n      }));\n      server.get(\"/chat/chat_channels/:chatChannelId\", () => helper.response({\n        id: 1,\n        title: \"something\"\n      }));\n      server.post(\"/uploads/lookup-urls\", () => helper.response([200, {\n        \"Content-Type\": \"application/json\"\n      }, [{\n        url: \"/images/avatar.png\"\n      }]]));\n    });\n    (0, _qunit.skip)(\"can collapse and expand videos in chat\", async function (assert) {\n      const videoContainer = \".chat-message-container[data-id='1'] .lazy-video-container\";\n      const expandImage = \".chat-message-container[data-id='1'] .chat-message-collapser-closed\";\n      const collapseImage = \".chat-message-container[data-id='1'] .chat-message-collapser-opened\";\n      await (0, _testHelpers.visit)(\"/chat/c/cat/1\");\n      assert.ok((0, _qunitHelpers.visible)(videoContainer));\n      assert.ok((0, _qunitHelpers.visible)(collapseImage), \"the open arrow is shown\");\n      assert.notOk((0, _qunitHelpers.exists)(expandImage), \"the close arrow is hidden\");\n      await (0, _testHelpers.click)(collapseImage);\n      assert.notOk((0, _qunitHelpers.visible)(videoContainer));\n      assert.ok((0, _qunitHelpers.visible)(expandImage), \"the close arrow is shown\");\n      assert.notOk((0, _qunitHelpers.exists)(collapseImage), \"the open arrow is hidden\");\n      await (0, _testHelpers.click)(expandImage);\n      assert.ok((0, _qunitHelpers.visible)(videoContainer));\n      assert.ok((0, _qunitHelpers.visible)(collapseImage), \"the open arrow is shown again\");\n      assert.notOk((0, _qunitHelpers.exists)(expandImage), \"the close arrow is hidden again\");\n    });\n    (0, _qunit.skip)(\"lightbox shows up before and after expand and collapse\", async function (assert) {\n      const lightboxImage = \".mfp-img\";\n      const image = \".chat-message-container[data-id='2'] .chat-img-upload\";\n      const expandImage = \".chat-message-container[data-id='2'] .chat-message-collapser-closed\";\n      const collapseImage = \".chat-message-container[data-id='2'] .chat-message-collapser-opened\";\n      await (0, _testHelpers.visit)(\"/chat/c/cat/1\");\n      await (0, _testHelpers.click)(image);\n      assert.ok((0, _qunitHelpers.exists)(document.querySelector(lightboxImage)), \"can see lightbox\");\n      await (0, _testHelpers.click)(document.querySelector(\".mfp-container\"));\n      await (0, _testHelpers.click)(collapseImage);\n      await (0, _testHelpers.click)(expandImage);\n      await (0, _testHelpers.click)(image);\n      assert.ok((0, _qunitHelpers.exists)(document.querySelector(lightboxImage)), \"can see lightbox after collapse expand\");\n      await (0, _testHelpers.click)(document.querySelector(\".mfp-container\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/acceptance/chat-live-pane-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/qunit-helpers\"], function (_testHelpers, _qunit, _qunitHelpers) {\n  \"use strict\";\n\n  (0, _qunitHelpers.acceptance)(\"Discourse Chat - Chat live pane - handling 429 errors\", function (needs) {\n    needs.user({\n      username: \"eviltrout\",\n      id: 1,\n      has_chat_enabled: true\n    });\n    needs.settings({\n      chat_enabled: true,\n      navigation_menu: \"legacy\"\n    });\n    needs.pretender((server, helper) => {\n      server.get(\"/chat/:chatChannelId/messages.json\", () => {\n        return helper.response(429);\n      });\n      server.get(\"/chat/chat_channels.json\", () => helper.response({\n        public_channels: [{\n          id: 1,\n          title: \"something\",\n          current_user_membership: {\n            following: true\n          },\n          message_bus_last_ids: {\n            new_mentions: 0,\n            new_messages: 0\n          }\n        }],\n        direct_message_channels: [],\n        message_bus_last_ids: {\n          channel_metadata: 0,\n          channel_edits: 0,\n          channel_status: 0,\n          new_channel: 0,\n          user_tracking_state: 0\n        }\n      }));\n      server.get(\"/chat/chat_channels/:chatChannelId\", () => helper.response({\n        id: 1,\n        title: \"something\"\n      }));\n      server.post(\"/chat/drafts\", () => {\n        return helper.response([]);\n      });\n      server.post(\"/chat/:chatChannelId.json\", () => {\n        return helper.response({\n          success: \"OK\"\n        });\n      });\n    });\n    (0, _qunit.skip)(\"Handles 429 errors by displaying an alert\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/chat/c/cat/1\");\n      assert.ok((0, _qunitHelpers.exists)(\".dialog-content\"), \"We displayed a 429 error\");\n      await (0, _testHelpers.click)(\".dialog-footer .btn-primary\");\n    });\n  });\n});","define(\"discourse/plugins/chat/acceptance/hashtag-css-generator-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/qunit-helpers\"], function (_testHelpers, _qunit, _qunitHelpers) {\n  \"use strict\";\n\n  (0, _qunitHelpers.acceptance)(\"Chat | Hashtag CSS Generator\", function (needs) {\n    const category1 = {\n      id: 1,\n      color: \"ff0000\",\n      name: \"category1\"\n    };\n    const category2 = {\n      id: 2,\n      color: \"333\",\n      name: \"category2\"\n    };\n    const category3 = {\n      id: 4,\n      color: \"2B81AF\",\n      parentCategory: {\n        id: 1\n      },\n      name: \"category3\"\n    };\n    needs.settings({\n      chat_enabled: true\n    });\n    needs.user({\n      has_chat_enabled: true,\n      chat_channels: {\n        public_channels: [{\n          id: 44,\n          chatable_id: 1,\n          chatable_type: \"Category\",\n          meta: {\n            message_bus_last_ids: {}\n          },\n          current_user_membership: {\n            following: true\n          },\n          chatable: category1\n        }, {\n          id: 74,\n          chatable_id: 2,\n          chatable_type: \"Category\",\n          meta: {\n            message_bus_last_ids: {}\n          },\n          current_user_membership: {\n            following: true\n          },\n          chatable: category2\n        }, {\n          id: 88,\n          chatable_id: 4,\n          chatable_type: \"Category\",\n          meta: {\n            message_bus_last_ids: {}\n          },\n          current_user_membership: {\n            following: true\n          },\n          chatable: category3\n        }],\n        direct_message_channels: [],\n        meta: {\n          message_bus_last_ids: {}\n        },\n        tracking: {\n          channel_tracking: {\n            44: {\n              unread_count: 0,\n              mention_count: 0\n            },\n            74: {\n              unread_count: 0,\n              mention_count: 0\n            },\n            88: {\n              unread_count: 0,\n              mention_count: 0\n            }\n          },\n          thread_tracking: {}\n        }\n      }\n    });\n    needs.site({\n      categories: [category1, category2, category3]\n    });\n    (0, _qunit.test)(\"hashtag CSS classes are generated\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/\");\n      const cssTag = document.querySelector(\"style#hashtag-css-generator\");\n      assert.equal(cssTag.innerHTML, \".hashtag-color--category-1 {\\n  background: linear-gradient(-90deg, var(--category-1-color) 50%, var(--category-1-color) 50%);\\n}\\n.hashtag-color--category-2 {\\n  background: linear-gradient(-90deg, var(--category-2-color) 50%, var(--category-2-color) 50%);\\n}\\n.hashtag-color--category-4 {\\n  background: linear-gradient(-90deg, var(--category-4-color) 50%, var(--category-1-color) 50%);\\n}\\n.d-icon.hashtag-color--channel-44 { color: var(--category-1-color); }\\n.d-icon.hashtag-color--channel-74 { color: var(--category-2-color); }\\n.d-icon.hashtag-color--channel-88 { color: var(--category-4-color); }\");\n    });\n  });\n});","define(\"discourse/plugins/chat/acceptance/mentions-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/create-pretender\", \"discourse/tests/helpers/qunit-helpers\"], function (_testHelpers, _qunit, _createPretender, _qunitHelpers) {\n  \"use strict\";\n\n  (0, _qunitHelpers.acceptance)(\"Chat | Mentions\", function (needs) {\n    const channelId = 1;\n    const actingUser = {\n      id: 1,\n      username: \"acting_user\"\n    };\n    const channel = {\n      id: channelId,\n      chatable_id: 1,\n      chatable_type: \"Category\",\n      meta: {\n        message_bus_last_ids: {},\n        can_delete_self: true\n      },\n      current_user_membership: {\n        following: true\n      },\n      allow_channel_wide_mentions: false,\n      chatable: {\n        id: 1\n      },\n      title: \"Some title\"\n    };\n    needs.settings({\n      chat_enabled: true\n    });\n    needs.user({\n      ...actingUser,\n      has_chat_enabled: true,\n      chat_channels: {\n        public_channels: [channel],\n        direct_message_channels: [],\n        meta: {\n          message_bus_last_ids: {}\n        },\n        tracking: {}\n      }\n    });\n    needs.hooks.beforeEach(function () {\n      _createPretender.default.post(`/chat/drafts`, () => (0, _createPretender.response)({}));\n      _createPretender.default.get(`/chat/api/channels/${channelId}/messages`, () => (0, _createPretender.response)({\n        messages: [],\n        meta: {\n          can_load_more_future: false\n        }\n      }));\n      _createPretender.default.get(\"/chat/api/mentions/groups.json\", () => (0, _createPretender.response)({\n        unreachable: [],\n        over_members_limit: [],\n        invalid: [\"and\"]\n      }));\n    });\n    (0, _qunit.test)(\"shows warning when mention limit exceeded\", async function (assert) {\n      this.siteSettings.max_mentions_per_chat_message = 2;\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await (0, _testHelpers.fillIn)(\".chat-composer__input\", `Hey @user1 @user2 @user3`);\n      assert.dom(\".chat-mention-warnings\").exists();\n    });\n    (0, _qunit.test)(\"shows warning for @here mentions when channel-wide mentions are disabled\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await (0, _testHelpers.fillIn)(\".chat-composer__input\", `Hey @here`);\n      assert.dom(\".chat-mention-warnings\").exists();\n    });\n    (0, _qunit.test)(\"shows warning for @all mention when channel-wide mentions are disabled\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await (0, _testHelpers.fillIn)(\".chat-composer__input\", `Hey @all`);\n      assert.dom(\".chat-mention-warnings\").exists();\n    });\n    (0, _qunit.test)(\"ignores duplicates when counting mentions\", async function (assert) {\n      this.siteSettings.max_mentions_per_chat_message = 2;\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      const mention = `@user1`;\n      await (0, _testHelpers.fillIn)(\".chat-composer__input\", `Hey ${mention} ${mention} ${mention}`);\n      assert.dom(\".chat-mention-warnings\").doesNotExist();\n    });\n    (0, _qunit.test)(\"doesn't consider code-blocks when counting mentions\", async function (assert) {\n      this.siteSettings.max_mentions_per_chat_message = 2;\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      // since @bar is inside a code-block it shouldn't be considered a mention\n      const message = `Hey @user1 @user2\n    \\`\\`\\`\n      def foo\n        @bar = true\n      end\n    \\`\\`\\`\n    `;\n      await (0, _testHelpers.fillIn)(\".chat-composer__input\", message);\n      assert.dom(\".chat-mention-warnings\").doesNotExist();\n    });\n  });\n});","define(\"discourse/plugins/chat/acceptance/user-status-on-mentions-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/create-pretender\", \"discourse/tests/helpers/qunit-helpers\"], function (_testHelpers, _qunit, _createPretender, _qunitHelpers) {\n  \"use strict\";\n\n  (0, _qunitHelpers.acceptance)(\"Chat | User status on mentions\", function (needs) {\n    const channelId = 1;\n    const messageId = 1;\n    const actingUser = {\n      id: 1,\n      username: \"acting_user\"\n    };\n    const mentionedUser1 = {\n      id: 1000,\n      username: \"user1\",\n      status: {\n        description: \"surfing\",\n        emoji: \"surfing_man\"\n      }\n    };\n    const mentionedUser2 = {\n      id: 2000,\n      username: \"user2\",\n      status: {\n        description: \"vacation\",\n        emoji: \"desert_island\"\n      }\n    };\n    const mentionedUser3 = {\n      id: 3000,\n      username: \"user3\",\n      status: {\n        description: \"off to dentist\",\n        emoji: \"tooth\"\n      }\n    };\n    const message = {\n      id: messageId,\n      message: `Hey @${mentionedUser1.username}`,\n      cooked: `<p>Hey <a class=\"mention\" href=\"/u/${mentionedUser1.username}\">@${mentionedUser1.username}</a></p>`,\n      mentioned_users: [mentionedUser1],\n      user: actingUser,\n      created_at: \"2020-08-04T15:00:00.000Z\"\n    };\n    const newStatus = {\n      description: \"working remotely\",\n      emoji: \"house\"\n    };\n    const channel = {\n      id: channelId,\n      chatable_id: 1,\n      chatable_type: \"Category\",\n      title: \"A category channel\",\n      meta: {\n        message_bus_last_ids: {},\n        can_delete_self: true\n      },\n      current_user_membership: {\n        following: true\n      },\n      chatable: {\n        id: 1\n      }\n    };\n    needs.settings({\n      chat_enabled: true\n    });\n    needs.user({\n      ...actingUser,\n      has_chat_enabled: true,\n      chat_channels: {\n        public_channels: [channel],\n        direct_message_channels: [],\n        meta: {\n          message_bus_last_ids: {}\n        },\n        tracking: {}\n      }\n    });\n    needs.hooks.beforeEach(function () {\n      _createPretender.default.post(`/chat/1`, () => (0, _createPretender.response)({}));\n      _createPretender.default.put(`/chat/1/edit/${messageId}`, () => (0, _createPretender.response)({}));\n      _createPretender.default.post(`/chat/drafts`, () => (0, _createPretender.response)({}));\n      _createPretender.default.put(`/chat/api/channels/1/read/1`, () => (0, _createPretender.response)({}));\n      _createPretender.default.get(`/chat/api/channels/1/messages`, () => (0, _createPretender.response)({\n        messages: [message],\n        meta: {\n          can_load_more_future: false\n        }\n      }));\n      _createPretender.default.delete(`/chat/api/channels/1/messages/${messageId}`, () => (0, _createPretender.response)({}));\n      _createPretender.default.put(`/chat/api/channels/1/messages/${messageId}/restore`, () => (0, _createPretender.response)({}));\n      _createPretender.default.get(\"/u/search/users\", () => (0, _createPretender.response)({\n        users: [mentionedUser2, mentionedUser3]\n      }));\n      _createPretender.default.get(\"/chat/api/mentions/groups.json\", () => (0, _createPretender.response)({\n        unreachable: [],\n        over_members_limit: [],\n        invalid: [\"and\"]\n      }));\n    });\n    (0, _qunit.skip)(\"just posted messages | it shows status on mentions \", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await typeWithAutocompleteAndSend(`mentioning @${mentionedUser2.username}`);\n      assertStatusIsRendered(assert, statusSelector(mentionedUser2.username), mentionedUser2.status);\n    });\n    (0, _qunit.skip)(\"just posted messages | it updates status on mentions\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await typeWithAutocompleteAndSend(`mentioning @${mentionedUser2.username}`);\n      (0, _qunitHelpers.loggedInUser)().appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser2.id]: newStatus\n      });\n      const selector = statusSelector(mentionedUser2.username);\n      await (0, _testHelpers.waitFor)(selector);\n      assertStatusIsRendered(assert, selector, newStatus);\n    });\n    (0, _qunit.skip)(\"just posted messages | it deletes status on mentions\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await typeWithAutocompleteAndSend(`mentioning @${mentionedUser2.username}`);\n      (0, _qunitHelpers.loggedInUser)().appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser2.id]: null\n      });\n      const selector = statusSelector(mentionedUser2.username);\n      await (0, _testHelpers.waitFor)(selector, {\n        count: 0\n      });\n      assert.dom(selector).doesNotExist(\"status is deleted\");\n    });\n    (0, _qunit.skip)(\"edited messages | it shows status on mentions\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await editMessage(\".chat-message-content\", `mentioning @${mentionedUser3.username}`);\n      assertStatusIsRendered(assert, statusSelector(mentionedUser3.username), mentionedUser3.status);\n    });\n    (0, _qunit.skip)(\"edited messages | it updates status on mentions\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await editMessage(\".chat-message-content\", `mentioning @${mentionedUser3.username}`);\n      (0, _qunitHelpers.loggedInUser)().appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser3.id]: newStatus\n      });\n      const selector = statusSelector(mentionedUser3.username);\n      await (0, _testHelpers.waitFor)(selector);\n      assertStatusIsRendered(assert, selector, newStatus);\n    });\n    (0, _qunit.skip)(\"edited messages | it deletes status on mentions\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await editMessage(\".chat-message-content\", `mentioning @${mentionedUser3.username}`);\n      (0, _qunitHelpers.loggedInUser)().appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser3.id]: null\n      });\n      const selector = statusSelector(mentionedUser3.username);\n      await (0, _testHelpers.waitFor)(selector, {\n        count: 0\n      });\n      assert.dom(selector).doesNotExist(\"status is deleted\");\n    });\n    (0, _qunit.test)(\"deleted messages | it shows status on mentions\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await deleteMessage(\".chat-message-content\");\n      await (0, _testHelpers.click)(\".chat-message-expand\");\n      assertStatusIsRendered(assert, statusSelector(mentionedUser1.username), mentionedUser1.status);\n    });\n    (0, _qunit.test)(\"deleted messages | it updates status on mentions\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await deleteMessage(\".chat-message-content\");\n      await (0, _testHelpers.click)(\".chat-message-expand\");\n      (0, _qunitHelpers.loggedInUser)().appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser1.id]: newStatus\n      });\n      const selector = statusSelector(mentionedUser1.username);\n      await (0, _testHelpers.waitFor)(selector);\n      assertStatusIsRendered(assert, selector, newStatus);\n    });\n    (0, _qunit.test)(\"deleted messages | it deletes status on mentions\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await deleteMessage(\".chat-message-content\");\n      await (0, _testHelpers.click)(\".chat-message-expand\");\n      (0, _qunitHelpers.loggedInUser)().appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser1.id]: null\n      });\n      const selector = statusSelector(mentionedUser1.username);\n      await (0, _testHelpers.waitFor)(selector, {\n        count: 0\n      });\n      assert.dom(selector).doesNotExist(\"status is deleted\");\n    });\n    (0, _qunit.test)(\"restored messages | it shows status on mentions\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await deleteMessage(\".chat-message-content\");\n      await restoreMessage(\".chat-message-text.-deleted\");\n      assertStatusIsRendered(assert, statusSelector(mentionedUser1.username), mentionedUser1.status);\n    });\n    (0, _qunit.test)(\"restored messages | it updates status on mentions\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await deleteMessage(\".chat-message-content\");\n      await restoreMessage(\".chat-message-text.-deleted\");\n      (0, _qunitHelpers.loggedInUser)().appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser1.id]: newStatus\n      });\n      const selector = statusSelector(mentionedUser1.username);\n      await (0, _testHelpers.waitFor)(selector);\n      assertStatusIsRendered(assert, selector, newStatus);\n    });\n    (0, _qunit.test)(\"restored messages | it deletes status on mentions\", async function (assert) {\n      await (0, _testHelpers.visit)(`/chat/c/-/${channelId}`);\n      await deleteMessage(\".chat-message-content\");\n      await restoreMessage(\".chat-message-text.-deleted\");\n      (0, _qunitHelpers.loggedInUser)().appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser1.id]: null\n      });\n      const selector = statusSelector(mentionedUser1.username);\n      await (0, _testHelpers.waitFor)(selector, {\n        count: 0\n      });\n      assert.dom(selector).doesNotExist(\"status is deleted\");\n    });\n    function assertStatusIsRendered(assert, selector, status) {\n      assert.dom(selector).exists(\"status is rendered\").hasAttribute(\"src\", new RegExp(`${status.emoji}.png`), \"status emoji is updated\");\n    }\n    async function deleteMessage(messageSelector) {\n      await (0, _testHelpers.triggerEvent)((0, _qunitHelpers.query)(messageSelector), \"mouseenter\");\n      await (0, _testHelpers.click)(\".more-buttons .select-kit-header-wrapper\");\n      await (0, _testHelpers.click)(\".select-kit-collection .select-kit-row[data-value='delete']\");\n      await (0, _qunitHelpers.publishToMessageBus)(`/chat/${channelId}`, {\n        type: \"delete\",\n        deleted_id: messageId,\n        deleted_at: \"2022-01-01T08:00:00.000Z\"\n      });\n    }\n    async function editMessage(messageSelector, text) {\n      await (0, _testHelpers.triggerEvent)((0, _qunitHelpers.query)(messageSelector), \"mouseenter\");\n      await (0, _testHelpers.click)(\".more-buttons .select-kit-header-wrapper\");\n      await (0, _testHelpers.click)(\".select-kit-collection .select-kit-row[data-value='edit']\");\n      await typeWithAutocompleteAndSend(text);\n    }\n    async function restoreMessage(messageSelector) {\n      await (0, _testHelpers.triggerEvent)((0, _qunitHelpers.query)(messageSelector), \"mouseenter\");\n      await (0, _testHelpers.click)(\".more-buttons .select-kit-header-wrapper\");\n      await (0, _testHelpers.click)(\".select-kit-collection .select-kit-row[data-value='restore']\");\n      await (0, _qunitHelpers.publishToMessageBus)(`/chat/${channelId}`, {\n        type: \"restore\",\n        chat_message: message\n      });\n    }\n    async function typeWithAutocompleteAndSend(text) {\n      await (0, _qunitHelpers.emulateAutocomplete)(\".chat-composer__input\", text);\n      await (0, _testHelpers.click)(\".autocomplete.ac-user .selected\");\n      await (0, _testHelpers.click)(\".chat-composer-button.-send\");\n    }\n    function statusSelector(username) {\n      return `.mention[href='/u/${username}'] .user-status-message img`;\n    }\n  });\n});","define(\"discourse/plugins/chat/chat-fixtures\", [\"exports\", \"discourse-common/lib/object\"], function (_exports, _object) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.directMessageChannels = _exports.chatChannels = void 0;\n  _exports.generateChatView = generateChatView;\n  _exports.messageContents = void 0;\n  const messageContents = _exports.messageContents = [\"Hello world\", \"What up\", \"heyo!\"];\n  const directMessageChannels = _exports.directMessageChannels = [{\n    chat_channel: {\n      chatable: {\n        users: [{\n          id: 1,\n          username: \"markvanlan\",\n          avatar_template: \"/letter_avatar_proxy/v4/letter/t/f9ae1b/{size}.png\"\n        }, {\n          id: 2,\n          username: \"hawk\",\n          avatar_template: \"/letter_avatar_proxy/v4/letter/t/f9ae1b/{size}.png\"\n        }]\n      },\n      chatable_id: 58,\n      chatable_type: \"DirectMessage\",\n      chatable_url: null,\n      id: 75,\n      title: \"@hawk\",\n      current_user_membership: {\n        muted: false,\n        following: true\n      },\n      allow_channel_wide_mentions: true,\n      last_message: {\n        id: 333,\n        created_at: \"2021-07-02T08:14:16.950Z\"\n      },\n      message_bus_last_ids: {\n        new_mentions: 0,\n        new_messages: 0\n      }\n    }\n  }, {\n    chat_channel: {\n      chatable: {\n        users: [{\n          id: 1,\n          username: \"markvanlan\",\n          avatar_template: \"/letter_avatar_proxy/v4/letter/t/f9ae1b/{size}.png\"\n        }, {\n          id: 3,\n          username: \"eviltrout\",\n          avatar_template: \"/letter_avatar_proxy/v4/letter/t/f9ae1b/{size}.png\"\n        }]\n      },\n      chatable_id: 59,\n      chatable_type: \"DirectMessage\",\n      chatable_url: null,\n      id: 76,\n      title: \"@eviltrout, @markvanlan\",\n      current_user_membership: {\n        muted: false,\n        following: true\n      },\n      allow_channel_wide_mentions: true,\n      last_message: {\n        id: 333,\n        created_at: \"2021-07-02T08:14:16.950Z\"\n      },\n      message_bus_last_ids: {\n        new_mentions: 0,\n        new_messages: 0\n      }\n    }\n  }];\n  const chatables = {\n    1: {\n      id: 1,\n      name: \"Bug\",\n      color: \"0088CC\",\n      text_color: \"FFFFFF\",\n      slug: \"bug\"\n    },\n    8: {\n      id: 8,\n      name: \"Public category\",\n      slug: \"public-category\",\n      posts_count: 1\n    },\n    12: {\n      id: 12,\n      name: \"Another category\",\n      slug: \"another-category\",\n      posts_count: 100\n    }\n  };\n  const chatChannels = _exports.chatChannels = {\n    public_channels: [{\n      id: 9,\n      chatable_id: 1,\n      chatable_type: \"Category\",\n      chatable_url: \"/c/bug/1\",\n      title: \"Site\",\n      status: \"open\",\n      chatable: chatables[1],\n      allow_channel_wide_mentions: true,\n      last_message: {\n        id: 333,\n        created_at: \"2021-07-02T08:14:16.950Z\"\n      },\n      current_user_membership: {\n        muted: false,\n        following: true\n      },\n      message_bus_last_ids: {\n        new_mentions: 0,\n        new_messages: 0\n      }\n    }, {\n      id: 7,\n      chatable_id: 1,\n      chatable_type: \"Category\",\n      chatable_url: \"/c/bug/1\",\n      title: \"Bug\",\n      status: \"open\",\n      chatable: chatables[1],\n      allow_channel_wide_mentions: true,\n      last_message: {\n        id: 333,\n        created_at: \"2021-07-02T08:14:16.950Z\"\n      },\n      current_user_membership: {\n        muted: false,\n        following: true\n      },\n      message_bus_last_ids: {\n        new_mentions: 0,\n        new_messages: 0\n      }\n    }, {\n      id: 4,\n      chatable_id: 8,\n      chatable_type: \"Category\",\n      chatable_url: \"/c/public-category/8\",\n      title: \"Public category\",\n      status: \"open\",\n      chatable: chatables[8],\n      allow_channel_wide_mentions: true,\n      last_message: {\n        id: 333,\n        created_at: \"2021-07-02T08:14:16.950Z\"\n      },\n      current_user_membership: {\n        muted: false,\n        following: true\n      },\n      message_bus_last_ids: {\n        new_mentions: 0,\n        new_messages: 0\n      }\n    }, {\n      id: 5,\n      chatable_id: 8,\n      chatable_type: \"Category\",\n      chatable_url: \"/c/public-category/8\",\n      title: \"Public category (read-only)\",\n      status: \"read_only\",\n      chatable: chatables[8],\n      allow_channel_wide_mentions: true,\n      last_message: {\n        id: 333,\n        created_at: \"2021-07-02T08:14:16.950Z\"\n      },\n      current_user_membership: {\n        muted: false,\n        following: true\n      },\n      message_bus_last_ids: {\n        new_mentions: 0,\n        new_messages: 0\n      }\n    }, {\n      id: 6,\n      chatable_id: 8,\n      chatable_type: \"Category\",\n      chatable_url: \"/c/public-category/8\",\n      title: \"Public category (closed)\",\n      status: \"closed\",\n      chatable: chatables[8],\n      allow_channel_wide_mentions: true,\n      last_message: {\n        id: 333,\n        created_at: \"2021-07-02T08:14:16.950Z\"\n      },\n      current_user_membership: {\n        muted: false,\n        following: true\n      },\n      message_bus_last_ids: {\n        new_mentions: 0,\n        new_messages: 0\n      }\n    }, {\n      id: 10,\n      chatable_id: 8,\n      chatable_type: \"Category\",\n      chatable_url: \"/c/public-category/8\",\n      title: \"Public category (archived)\",\n      status: \"archived\",\n      chatable: chatables[8],\n      allow_channel_wide_mentions: true,\n      last_message: {\n        id: 333,\n        created_at: \"2021-07-02T08:14:16.950Z\"\n      },\n      current_user_membership: {\n        muted: false,\n        following: true\n      },\n      message_bus_last_ids: {\n        new_mentions: 0,\n        new_messages: 0\n      }\n    }, {\n      id: 11,\n      chatable_id: 12,\n      chatable_type: \"Category\",\n      chatable_url: \"/c/another-category/12\",\n      title: \"Another Category\",\n      status: \"open\",\n      chatable: chatables[12],\n      allow_channel_wide_mentions: true,\n      last_message: {\n        id: 333,\n        created_at: \"2021-07-02T08:14:16.950Z\"\n      },\n      current_user_membership: {\n        muted: false,\n        following: true\n      },\n      message_bus_last_ids: {\n        new_mentions: 0,\n        new_messages: 0\n      }\n    }],\n    tracking: {\n      channel_tracking: {\n        4: {\n          unread_count: 0,\n          mention_count: 0\n        },\n        5: {\n          unread_count: 0,\n          mention_count: 0\n        },\n        6: {\n          unread_count: 0,\n          mention_count: 0\n        },\n        7: {\n          unread_count: 0,\n          mention_count: 0\n        },\n        9: {\n          unread_count: 0,\n          mention_count: 0\n        },\n        10: {\n          unread_count: 0,\n          mention_count: 0\n        },\n        11: {\n          unread_count: 0,\n          mention_count: 0\n        },\n        75: {\n          unread_count: 0,\n          mention_count: 0\n        },\n        76: {\n          unread_count: 0,\n          mention_count: 0\n        }\n      },\n      thread_tracking: {}\n    },\n    direct_message_channels: directMessageChannels.mapBy(\"chat_channel\"),\n    message_bus_last_ids: {\n      channel_metadata: 0,\n      channel_edits: 0,\n      channel_status: 0,\n      new_channel: 0,\n      user_tracking_state: 0\n    }\n  };\n  const message0 = {\n    id: 174,\n    message: messageContents[0],\n    cooked: messageContents[0],\n    excerpt: messageContents[0],\n    created_at: \"2021-07-20T08:14:16.950Z\",\n    flag_count: 0,\n    user: {\n      id: 1,\n      username: \"markvanlan\",\n      name: null,\n      avatar_template: \"/letter_avatar_proxy/v4/letter/m/48db29/{size}.png\"\n    },\n    available_flags: [\"spam\"]\n  };\n  const message1 = {\n    id: 175,\n    message: messageContents[1],\n    cooked: messageContents[1],\n    excerpt: messageContents[1],\n    created_at: \"2021-07-20T08:14:22.043Z\",\n    flag_count: 0,\n    user: {\n      id: 2,\n      username: \"hawk\",\n      name: null,\n      avatar_template: \"/letter_avatar_proxy/v4/letter/m/48db29/{size}.png\"\n    },\n    in_reply_to: message0,\n    uploads: [{\n      extension: \"pdf\",\n      filesize: 861550,\n      height: null,\n      human_filesize: \"841 KB\",\n      id: 38,\n      original_filename: \"Chat message PDF!\",\n      retain_hours: null,\n      short_path: \"/uploads/short-url/vYozObYao54I6G3x8wvOf73epfX.pdf\",\n      short_url: \"upload://vYozObYao54I6G3x8wvOf73epfX.pdf\",\n      thumbnail_height: null,\n      thumbnail_width: null,\n      url: \"/images/avatar.png\",\n      width: null\n    }],\n    available_flags: [\"spam\"]\n  };\n  const message2 = {\n    id: 176,\n    message: messageContents[2],\n    cooked: messageContents[2],\n    excerpt: messageContents[2],\n    created_at: \"2021-07-20T08:14:25.043Z\",\n    flag_count: 0,\n    user: {\n      id: 2,\n      username: \"hawk\",\n      name: null,\n      avatar_template: \"/letter_avatar_proxy/v4/letter/m/48db29/{size}.png\"\n    },\n    in_reply_to: message0,\n    uploads: [{\n      extension: \"png\",\n      filesize: 50419,\n      height: 393,\n      human_filesize: \"49.2 KB\",\n      id: 37,\n      original_filename: \"image.png\",\n      retain_hours: null,\n      short_path: \"/uploads/short-url/2LbadI7uOM7JsXyVoc12dHUjJYo.png\",\n      short_url: \"upload://2LbadI7uOM7JsXyVoc12dHUjJYo.png\",\n      thumbnail_height: 224,\n      thumbnail_width: 689,\n      url: \"/images/avatar.png\",\n      width: 1209\n    }],\n    reactions: {\n      heart: {\n        count: 1,\n        reacted: false,\n        users: [{\n          id: 99,\n          username: \"im-penar\"\n        }]\n      },\n      kiwi_fruit: {\n        count: 2,\n        reacted: true,\n        users: [{\n          id: 99,\n          username: \"im-penar\"\n        }]\n      },\n      tada: {\n        count: 1,\n        reacted: true,\n        users: []\n      }\n    },\n    available_flags: [\"spam\"]\n  };\n  const message3 = {\n    id: 177,\n    message: \"gg @osama @mark @here\",\n    cooked: '<p>gg <a class=\"mention\" href=\"/u/osama\">@osama</a> <a class=\"mention\" href=\"/u/mark\">@mark</a> <a class=\"mention\" href=\"/u/here\">@here</a></p>',\n    excerpt: '<p>gg <a class=\"mention\" href=\"/u/osama\">@osama</a> <a class=\"mention\" href=\"/u/mark\">@mark</a> <a class=\"mention\" href=\"/u/here\">@here</a></p>',\n    created_at: \"2021-07-22T08:14:16.950Z\",\n    flag_count: 0,\n    user: {\n      id: 1,\n      username: \"markvanlan\",\n      name: null,\n      avatar_template: \"/letter_avatar_proxy/v4/letter/m/48db29/{size}.png\"\n    },\n    available_flags: [\"spam\"]\n  };\n  function generateChatView(loggedInUser, metaOverrides = {}) {\n    const metaDefaults = {\n      can_flag: true,\n      user_silenced: false,\n      can_moderate: loggedInUser.staff,\n      can_delete_self: true,\n      can_delete_others: loggedInUser.staff\n    };\n    return {\n      meta: (0, _object.deepMerge)(metaDefaults, metaOverrides),\n      chat_messages: [message0, message1, message2, message3]\n    };\n  }\n});","define(\"discourse/plugins/chat/components/channel-title-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"discourse/plugins/chat/discourse/models/chat-channel\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _fabricators, _chatChannel, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | <ChannelTitle />\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"category channel\", async function (assert) {\n      this.channel = _fabricators.default.channel();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChannelTitle @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"PzL+OUb2\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"channel-title\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/channel-title-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-title__category-badge\").getAttribute(\"style\"), `color: #${this.channel.chatable.color}`);\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-title__name\").innerText, this.channel.title);\n    });\n    (0, _qunit.test)(\"category channel - escapes title\", async function (assert) {\n      this.channel = _fabricators.default.channel({\n        chatable_type: _chatChannel.CHATABLE_TYPES.categoryChannel,\n        title: \"<div class='xss'>evil</div>\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChannelTitle @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"PzL+OUb2\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"channel-title\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/channel-title-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".xss\"));\n    });\n    (0, _qunit.test)(\"category channel - read restricted\", async function (assert) {\n      this.channel = _fabricators.default.channel({\n        chatable: _fabricators.default.category({\n          read_restricted: true\n        })\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChannelTitle @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"PzL+OUb2\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"channel-title\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/channel-title-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".d-icon-lock\"));\n    });\n    (0, _qunit.test)(\"category channel - not read restricted\", async function (assert) {\n      this.channel = _fabricators.default.channel({\n        chatable: _fabricators.default.category({\n          read_restricted: false\n        })\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChannelTitle @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"PzL+OUb2\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"channel-title\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/channel-title-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".d-icon-lock\"));\n    });\n    (0, _qunit.test)(\"direct message channel - one user\", async function (assert) {\n      this.channel = _fabricators.default.directMessageChannel({\n        chatable: _fabricators.default.directMessage({\n          users: [_fabricators.default.user()]\n        })\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChannelTitle @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"PzL+OUb2\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"channel-title\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/channel-title-test.js\",\n        \"isStrictMode\": false\n      }));\n      const user = this.channel.chatable.users[0];\n      assert.true((0, _qunitHelpers.exists)(`.chat-user-avatar .avatar[title=\"${user.username}\"]`));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-title__name\").innerText.trim(), user.username);\n    });\n    (0, _qunit.test)(\"direct message channel - multiple users\", async function (assert) {\n      this.channel = _fabricators.default.directMessageChannel({\n        users: [_fabricators.default.user(), _fabricators.default.user(), _fabricators.default.user()]\n      });\n      this.channel.chatable.group = true;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChannelTitle @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"PzL+OUb2\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"channel-title\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/channel-title-test.js\",\n        \"isStrictMode\": false\n      }));\n      const users = this.channel.chatable.users;\n      assert.strictEqual(parseInt((0, _qunitHelpers.query)(\".chat-channel-title__users-count\").innerText.trim(), 10), users.length);\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-title__name\").innerText.trim(), users.mapBy(\"username\").join(\", \"));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-channel-card-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse-i18n\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _discourseI18n, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-channel-card\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.channel = _fabricators.default.channel();\n      this.channel.description = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\";\n    });\n    (0, _qunit.test)(\"escapes channel title\", async function (assert) {\n      this.channel.title = \"<div class='xss'>evil</div>\";\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".xss\"));\n    });\n    (0, _qunit.test)(\"escapes channel description\", async function (assert) {\n      this.channel.description = \"<div class='xss'>evil</div>\";\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".xss\"));\n    });\n    (0, _qunit.test)(\"Closed channel\", async function (assert) {\n      this.channel.status = \"closed\";\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".chat-channel-card.-closed\"));\n    });\n    (0, _qunit.test)(\"Archived channel\", async function (assert) {\n      this.channel.status = \"archived\";\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".chat-channel-card.-archived\"));\n    });\n    (0, _qunit.test)(\"Muted channel\", async function (assert) {\n      this.channel.currentUserMembership.muted = true;\n      this.channel.currentUserMembership.following = true;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-card__tag.-muted\").textContent.trim(), _discourseI18n.default.t(\"chat.muted\"));\n    });\n    (0, _qunit.test)(\"Joined channel\", async function (assert) {\n      this.channel.currentUserMembership.following = true;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-card__tag.-joined\").textContent.trim(), _discourseI18n.default.t(\"chat.joined\"));\n      assert.true((0, _qunitHelpers.exists)(\".toggle-channel-membership-button.-leave\"));\n    });\n    (0, _qunit.test)(\"Joinable channel\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".chat-channel-card__join-btn\"));\n    });\n    (0, _qunit.test)(\"Memberships count\", async function (assert) {\n      this.channel.membershipsCount = 4;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-card__members\").textContent.trim(), _discourseI18n.default.t(\"chat.channel.memberships_count\", {\n        count: 4\n      }));\n    });\n    (0, _qunit.test)(\"No description\", async function (assert) {\n      this.channel.description = null;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".chat-channel-card__description\"));\n    });\n    (0, _qunit.test)(\"Description\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-card__description\").textContent.trim(), this.channel.description);\n    });\n    (0, _qunit.test)(\"Name\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-card__name\").innerText.trim(), this.channel.title);\n    });\n    (0, _qunit.test)(\"Settings button\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".chat-channel-card__setting\"));\n    });\n    (0, _qunit.test)(\"Read restricted chatable\", async function (assert) {\n      this.channel.chatable.read_restricted = true;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"euWZOZh/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".d-icon-lock\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-card\").style.borderLeftColor, \"rgb(213, 99, 83)\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-channel-leave-btn-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/create-pretender\", \"discourse/tests/helpers/qunit-helpers\", \"discourse-i18n\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _createPretender, _qunitHelpers, _discourseI18n, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-channel-leave-btn\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"accepts an optional onLeaveChannel callback\", async function (assert) {\n      this.foo = 1;\n      this.onLeaveChannel = () => this.foo = 2;\n      this.channel = _fabricators.default.directMessageChannel();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelLeaveBtn @channel={{this.channel}} @onLeaveChannel={{this.onLeaveChannel}} />\n      */\n      {\n        \"id\": \"UBTclhlU\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\",\\\"@onLeaveChannel\\\"],[[30,0,[\\\"channel\\\"]],[30,0,[\\\"onLeaveChannel\\\"]]]],null]],[],false,[\\\"chat-channel-leave-btn\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-leave-btn-test.js\",\n        \"isStrictMode\": false\n      }));\n      _createPretender.default.post(\"/chat/chat_channels/:chatChannelId/unfollow\", () => {\n        return [200, {\n          current_user_membership: {\n            following: false\n          }\n        }, {}];\n      });\n      assert.strictEqual(this.foo, 1);\n      await (0, _testHelpers.click)(\".chat-channel-leave-btn\");\n      assert.strictEqual(this.foo, 2);\n    });\n    (0, _qunit.test)(\"has a specific title for direct message channel\", async function (assert) {\n      this.channel = _fabricators.default.directMessageChannel();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelLeaveBtn @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"XP4b7FyG\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-leave-btn\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-leave-btn-test.js\",\n        \"isStrictMode\": false\n      }));\n      const btn = (0, _qunitHelpers.query)(\".chat-channel-leave-btn\");\n      assert.strictEqual(btn.title, _discourseI18n.default.t(\"chat.direct_messages.leave\"));\n    });\n    (0, _qunit.test)(\"has a specific title for message channel\", async function (assert) {\n      this.channel = _fabricators.default.channel();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelLeaveBtn @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"XP4b7FyG\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-leave-btn\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-leave-btn-test.js\",\n        \"isStrictMode\": false\n      }));\n      const btn = (0, _qunitHelpers.query)(\".chat-channel-leave-btn\");\n      assert.strictEqual(btn.title, _discourseI18n.default.t(\"chat.leave\"));\n    });\n    (0, _qunit.test)(\"is not visible on mobile\", async function (assert) {\n      this.site.mobileView = true;\n      this.channel = _fabricators.default.channel();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelLeaveBtn @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"XP4b7FyG\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-leave-btn\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-leave-btn-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".chat-channel-leave-btn\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-channel-metadata-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-channel-metadata\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"displays last message created at\", async function (assert) {\n      let lastMessageSentAt = moment().subtract(1, \"day\").format();\n      this.channel = _fabricators.default.directMessageChannel();\n      this.channel.lastMessage = _fabricators.default.message({\n        channel: this.channel,\n        created_at: lastMessageSentAt\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelMetadata @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"vrieOILC\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-metadata\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-metadata-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-metadata__date\").hasText(\"Yesterday\");\n      lastMessageSentAt = moment();\n      this.channel.lastMessage.createdAt = lastMessageSentAt;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelMetadata @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"vrieOILC\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-metadata\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-metadata-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-metadata__date\").hasText(lastMessageSentAt.format(\"LT\"));\n    });\n    (0, _qunit.test)(\"unreadIndicator\", async function (assert) {\n      this.channel = _fabricators.default.directMessageChannel();\n      this.channel.tracking.unreadCount = 1;\n      this.unreadIndicator = true;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelMetadata @channel={{this.channel}} @unreadIndicator={{this.unreadIndicator}}/>\n      */\n      {\n        \"id\": \"xYF0K843\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\",\\\"@unreadIndicator\\\"],[[30,0,[\\\"channel\\\"]],[30,0,[\\\"unreadIndicator\\\"]]]],null]],[],false,[\\\"chat-channel-metadata\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-metadata-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".chat-channel-unread-indicator\"));\n      this.unreadIndicator = false;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelMetadata @channel={{this.channel}} @unreadIndicator={{this.unreadIndicator}}/>\n      */\n      {\n        \"id\": \"xYF0K843\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\",\\\"@unreadIndicator\\\"],[[30,0,[\\\"channel\\\"]],[30,0,[\\\"unreadIndicator\\\"]]]],null]],[],false,[\\\"chat-channel-metadata\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-metadata-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".chat-channel-unread-indicator\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-channel-preview-card-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-channel-preview-card\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.set(\"channel\", _fabricators.default.channel({\n        chatable_type: \"Category\"\n      }));\n      this.channel.description = \"Important stuff is announced here.\";\n      this.channel.title = \"announcements\";\n      this.channel.meta = {\n        can_join_chat_channel: true\n      };\n      this.currentUser.set(\"has_chat_enabled\", true);\n      this.siteSettings.chat_enabled = true;\n    });\n    (0, _qunit.test)(\"channel title\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelPreviewCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"MZSigRtl\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-preview-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-preview-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-title__name\").innerText, this.channel.title, \"it shows the channel title\");\n      assert.true((0, _qunitHelpers.exists)((0, _qunitHelpers.query)(\".chat-channel-title__category-badge\")), \"it shows the category hashtag badge\");\n    });\n    (0, _qunit.test)(\"channel description\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelPreviewCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"MZSigRtl\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-preview-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-preview-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-channel-preview-card__description\").innerText, this.channel.description, \"the channel description is shown\");\n    });\n    (0, _qunit.test)(\"no channel description\", async function (assert) {\n      this.channel.description = null;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelPreviewCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"MZSigRtl\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-preview-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-preview-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".chat-channel-preview-card__description\"), \"no line is left for the channel description if there is none\");\n      assert.true((0, _qunitHelpers.exists)(\".chat-channel-preview-card.-no-description\"), \"it adds a modifier class for styling\");\n    });\n    (0, _qunit.test)(\"join\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelPreviewCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"MZSigRtl\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-preview-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-preview-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".toggle-channel-membership-button.-join\"), \"it shows the join channel button\");\n    });\n    (0, _qunit.test)(\"browse all\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelPreviewCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"MZSigRtl\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-preview-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-preview-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".chat-channel-preview-card__browse-all\"), \"it shows a link to browse all channels\");\n    });\n    (0, _qunit.test)(\"closed channel\", async function (assert) {\n      this.channel.status = \"closed\";\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelPreviewCard @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"MZSigRtl\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-preview-card\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-preview-card-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".chat-channel-preview-card__join-channel-btn\"), \"it does not show the join channel button\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-channel-row-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-channel-row\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.categoryChatChannel = _fabricators.default.channel();\n      this.directMessageChannel = _fabricators.default.directMessageChannel();\n    });\n    (0, _qunit.test)(\"links to correct channel\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").hasAttribute(\"href\", `/chat/c/${this.categoryChatChannel.slugifiedTitle}/${this.categoryChatChannel.id}`);\n    });\n    (0, _qunit.test)(\"allows tabbing\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").hasAttribute(\"tabindex\", \"0\");\n    });\n    (0, _qunit.test)(\"channel data attrite tabbing\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").hasAttribute(\"data-chat-channel-id\", this.categoryChatChannel.id.toString());\n    });\n    (0, _qunit.test)(\"renders correct channel title\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-title\").hasText(this.categoryChatChannel.title);\n    });\n    (0, _qunit.test)(\"renders correct channel metadata\", async function (assert) {\n      this.categoryChatChannel.lastMessage = _fabricators.default.message({\n        created_at: moment().toISOString()\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-metadata\").hasText(moment(this.categoryChatChannel.lastMessage.createdAt).format(\"h:mm A\"));\n    });\n    (0, _qunit.test)(\"renders membership toggling button when necessary\", async function (assert) {\n      this.site.desktopView = false;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}}/>\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".toggle-channel-membership-button\").doesNotExist();\n      this.categoryChatChannel.currentUserMembership.following = true;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".toggle-channel-membership-button\").doesNotExist();\n      this.site.desktopView = true;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} @options={{hash leaveButton=true}}/>\n      */\n      {\n        \"id\": \"EC1wuf9a\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\",\\\"@options\\\"],[[30,0,[\\\"categoryChatChannel\\\"]],[28,[37,1],null,[[\\\"leaveButton\\\"],[true]]]]],null]],[],false,[\\\"chat-channel-row\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".toggle-channel-membership-button\").exists();\n    });\n    (0, _qunit.test)(\"focused channel has correct class\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").doesNotHaveClass(\"focused\");\n      this.categoryChatChannel.focused = true;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").hasClass(\"focused\");\n    });\n    (0, _qunit.test)(\"muted channel has correct class\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").doesNotHaveClass(\"muted\");\n      this.categoryChatChannel.currentUserMembership.muted = true;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").hasClass(\"muted\");\n    });\n    (0, _qunit.test)(\"leaveButton options adds correct class\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").doesNotHaveClass(\"can-leave\");\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} @options={{hash leaveButton=true}} />\n      */\n      {\n        \"id\": \"EC1wuf9a\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\",\\\"@options\\\"],[[30,0,[\\\"categoryChatChannel\\\"]],[28,[37,1],null,[[\\\"leaveButton\\\"],[true]]]]],null]],[],false,[\\\"chat-channel-row\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").hasClass(\"can-leave\");\n    });\n    (0, _qunit.test)(\"active channel adds correct class\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").doesNotHaveClass(\"active\");\n      this.owner.lookup(\"service:chat\").set(\"activeChannel\", {\n        id: this.categoryChatChannel.id\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").hasClass(\"active\");\n    });\n    (0, _qunit.test)(\"unreads adds correct class\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").doesNotHaveClass(\"has-unread\");\n      this.categoryChatChannel.tracking.unreadCount = 1;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-row\").hasClass(\"has-unread\");\n    });\n    (0, _qunit.test)(\"user status with category channel\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.categoryChatChannel}} />\n      */\n      {\n        \"id\": \"Jcvg0dm6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"categoryChatChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".user-status-message\").doesNotExist();\n    });\n    (0, _qunit.test)(\"user status with direct message channel\", async function (assert) {\n      this.directMessageChannel.chatable = _fabricators.default.directMessage({\n        users: [_fabricators.default.user()]\n      });\n      const status = {\n        description: \"Off to dentist\",\n        emoji: \"tooth\"\n      };\n      this.directMessageChannel.chatable.users[0].status = status;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.directMessageChannel}} />\n      */\n      {\n        \"id\": \"Xk6GuGRH\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"directMessageChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".user-status-message\").exists();\n    });\n    (0, _qunit.test)(\"user status with direct message channel and multiple users\", async function (assert) {\n      const status = {\n        description: \"Off to dentist\",\n        emoji: \"tooth\"\n      };\n      this.directMessageChannel.chatable.users[0].status = status;\n      this.directMessageChannel.chatable.users.push({\n        id: 2,\n        username: \"bill\",\n        name: null,\n        avatar_template: \"/letter_avatar_proxy/v3/letter/t/31188e/{size}.png\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelRow @channel={{this.directMessageChannel}} />\n      */\n      {\n        \"id\": \"Xk6GuGRH\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"directMessageChannel\\\"]]]],null]],[],false,[\\\"chat-channel-row\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-row-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".user-status-message\").doesNotExist();\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-channel-status-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse-i18n\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"discourse/plugins/chat/discourse/models/chat-channel\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _discourseI18n, _fabricators, _chatChannel, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-channel-status\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"renders nothing when channel is opened\", async function (assert) {\n      this.channel = _fabricators.default.channel();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelStatus @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"NZD19/T7\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-status\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-status-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-status\").doesNotExist();\n    });\n    (0, _qunit.test)(\"defaults to long format\", async function (assert) {\n      this.channel = _fabricators.default.channel({\n        status: _chatChannel.CHANNEL_STATUSES.closed\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelStatus @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"NZD19/T7\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-status\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-status-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-status\").hasText(_discourseI18n.default.t(\"chat.channel_status.closed_header\"));\n    });\n    (0, _qunit.test)(\"accepts a format argument\", async function (assert) {\n      this.channel = _fabricators.default.channel({\n        status: _chatChannel.CHANNEL_STATUSES.archived\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelStatus @channel={{this.channel}} @format=\"short\" />\n      */\n      {\n        \"id\": \"3bEqFcxj\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\",\\\"@format\\\"],[[30,0,[\\\"channel\\\"]],\\\"short\\\"]],null]],[],false,[\\\"chat-channel-status\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-status-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-status\").hasText(_discourseI18n.default.t(\"chat.channel_status.archived\"));\n    });\n    (0, _qunit.test)(\"renders the correct icon\", async function (assert) {\n      this.channel = _fabricators.default.channel({\n        status: _chatChannel.CHANNEL_STATUSES.archived\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelStatus @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"NZD19/T7\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-status\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-status-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(`.d-icon-${(0, _chatChannel.channelStatusIcon)(this.channel.status)}`).exists();\n    });\n    (0, _qunit.test)(\"renders archive status\", async function (assert) {\n      this.currentUser.admin = true;\n      this.channel = _fabricators.default.channel({\n        status: _chatChannel.CHANNEL_STATUSES.archived,\n        archive_failed: true\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannelStatus @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"NZD19/T7\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel-status\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-status-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-channel-retry-archive\").exists();\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-channel-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/create-pretender\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _createPretender, _qunitHelpers, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-channel | status on mentions\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    const channelId = 1;\n    const actingUser = {\n      id: 1,\n      username: \"acting_user\"\n    };\n    const mentionedUser = {\n      id: 1000,\n      username: \"user1\",\n      status: {\n        description: \"surfing\",\n        emoji: \"surfing_man\"\n      }\n    };\n    const mentionedUser2 = {\n      id: 2000,\n      username: \"user2\",\n      status: {\n        description: \"vacation\",\n        emoji: \"desert_island\"\n      }\n    };\n    const message = {\n      id: 1891,\n      message: `Hey @${mentionedUser.username}`,\n      cooked: `<p>Hey <a class=\"mention\" href=\"/u/${mentionedUser.username}\">@${mentionedUser.username}</a></p>`,\n      mentioned_users: [mentionedUser],\n      created_at: \"2020-08-04T15:00:00.000Z\",\n      user: {\n        id: 1,\n        username: \"jesse\"\n      }\n    };\n    hooks.beforeEach(function () {\n      _createPretender.default.get(`/chat/api/channels/1/messages`, () => (0, _createPretender.response)({\n        messages: [message],\n        meta: {\n          can_delete_self: true\n        }\n      }));\n      this.channel = _fabricators.default.channel({\n        id: channelId,\n        currentUserMembership: {\n          following: true\n        },\n        meta: {\n          can_join_chat_channel: false\n        }\n      });\n      this.appEvents = this.container.lookup(\"service:app-events\");\n    });\n    (0, _qunit.test)(\"it shows status on mentions\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannel @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"9pyUnBuV\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-test.js\",\n        \"isStrictMode\": false\n      }));\n      assertStatusIsRendered(assert, statusSelector(mentionedUser.username), mentionedUser.status);\n    });\n    (0, _qunit.test)(\"it updates status on mentions\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannel @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"9pyUnBuV\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-test.js\",\n        \"isStrictMode\": false\n      }));\n      const newStatus = {\n        description: \"off to dentist\",\n        emoji: \"tooth\"\n      };\n      this.appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser.id]: newStatus\n      });\n      const selector = statusSelector(mentionedUser.username);\n      await (0, _testHelpers.waitFor)(selector);\n      assertStatusIsRendered(assert, statusSelector(mentionedUser.username), newStatus);\n    });\n    (0, _qunit.test)(\"it deletes status on mentions\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannel @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"9pyUnBuV\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-test.js\",\n        \"isStrictMode\": false\n      }));\n      this.appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser.id]: null\n      });\n      const selector = statusSelector(mentionedUser.username);\n      await (0, _testHelpers.waitFor)(selector, {\n        count: 0\n      });\n      assert.dom(selector).doesNotExist(\"status is deleted\");\n    });\n    (0, _qunit.test)(\"it shows status on mentions on messages that came from Message Bus\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannel @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"9pyUnBuV\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-test.js\",\n        \"isStrictMode\": false\n      }));\n      await receiveChatMessageViaMessageBus();\n      assertStatusIsRendered(assert, statusSelector(mentionedUser2.username), mentionedUser2.status);\n    });\n    (0, _qunit.test)(\"it updates status on mentions on messages that came from Message Bus\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannel @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"9pyUnBuV\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-test.js\",\n        \"isStrictMode\": false\n      }));\n      await receiveChatMessageViaMessageBus();\n      const newStatus = {\n        description: \"off to meeting\",\n        emoji: \"calendar\"\n      };\n      this.appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser2.id]: newStatus\n      });\n      const selector = statusSelector(mentionedUser2.username);\n      await (0, _testHelpers.waitFor)(selector);\n      assertStatusIsRendered(assert, statusSelector(mentionedUser2.username), newStatus);\n    });\n    (0, _qunit.test)(\"it deletes status on mentions on messages that came from Message Bus\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannel @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"9pyUnBuV\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-channel\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-test.js\",\n        \"isStrictMode\": false\n      }));\n      await receiveChatMessageViaMessageBus();\n      this.appEvents.trigger(\"user-status:changed\", {\n        [mentionedUser2.id]: null\n      });\n      const selector = statusSelector(mentionedUser2.username);\n      await (0, _testHelpers.waitFor)(selector, {\n        count: 0\n      });\n      assert.dom(selector).doesNotExist(\"status is deleted\");\n    });\n    (0, _qunit.test)(\"it shows status tooltip\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatChannel @channel={{this.channel}} /><DInlineTooltip />\n      */\n      {\n        \"id\": \"ULdQjcMV\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null],[8,[39,1],null,null,null]],[],false,[\\\"chat-channel\\\",\\\"d-inline-tooltip\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-channel-test.js\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.triggerEvent)(statusSelector(mentionedUser.username), \"mousemove\");\n      assert.equal(document.querySelector(\".user-status-tooltip-description\").textContent.trim(), mentionedUser.status.description, \"status description is correct\");\n      assert.ok(document.querySelector(`.user-status-message-tooltip img[alt='${mentionedUser.status.emoji}']`), \"status emoji is correct\");\n    });\n    function assertStatusIsRendered(assert, selector, status) {\n      assert.dom(selector).exists(\"status is rendered\").hasAttribute(\"src\", new RegExp(`${status.emoji}.png`), \"status emoji is updated\");\n    }\n    async function receiveChatMessageViaMessageBus() {\n      await (0, _qunitHelpers.publishToMessageBus)(`/chat/${channelId}`, {\n        chat_message: {\n          id: 2138,\n          message: `Hey @${mentionedUser2.username}`,\n          cooked: `<p>Hey <a class=\"mention\" href=\"/u/${mentionedUser2.username}\">@${mentionedUser2.username}</a></p>`,\n          created_at: \"2023-05-18T16:07:59.588Z\",\n          excerpt: `Hey @${mentionedUser2.username}`,\n          available_flags: [],\n          chat_channel_id: 7,\n          mentioned_users: [mentionedUser2],\n          user: actingUser,\n          chat_webhook_event: null,\n          uploads: []\n        },\n        type: \"sent\"\n      });\n    }\n    function statusSelector(username) {\n      return `.mention[href='/u/${username}'] .user-status-message img`;\n    }\n  });\n});","define(\"discourse/plugins/chat/components/chat-composer-dropdown-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-composer-dropdown\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"buttons\", async function (assert) {\n      this.set(\"buttons\", [{\n        id: \"foo\",\n        icon: \"times\",\n        action: () => {}\n      }]);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerDropdown @buttons={{this.buttons}} />\n      */\n      {\n        \"id\": \"kbxFhlT3\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@buttons\\\"],[[30,0,[\\\"buttons\\\"]]]],null]],[],false,[\\\"chat-composer-dropdown\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-dropdown-test.js\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.click)(\".chat-composer-dropdown__trigger-btn\");\n      assert.true((0, _qunitHelpers.exists)(\".chat-composer-dropdown__item.foo\"));\n      assert.true((0, _qunitHelpers.exists)(\".chat-composer-dropdown__action-btn.foo .d-icon-times\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-composer-message-details-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-composer-message-details\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"data-id attribute\", async function (assert) {\n      this.message = _fabricators.default.message();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerMessageDetails @message={{this.message}} />\n      */\n      {\n        \"id\": \"6qLZ88Ex\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@message\\\"],[[30,0,[\\\"message\\\"]]]],null]],[],false,[\\\"chat-composer-message-details\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-message-details-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-composer-message-details\").hasAttribute(\"data-id\", this.message.id.toString());\n    });\n    (0, _qunit.test)(\"editing a message has the pencil icon\", async function (assert) {\n      this.message = _fabricators.default.message({\n        editing: true\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerMessageDetails @message={{this.message}} />\n      */\n      {\n        \"id\": \"6qLZ88Ex\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@message\\\"],[[30,0,[\\\"message\\\"]]]],null]],[],false,[\\\"chat-composer-message-details\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-message-details-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-composer-message-details .d-icon-pencil-alt\").exists();\n    });\n    (0, _qunit.test)(\"replying to a message has the reply icon\", async function (assert) {\n      const firstMessage = _fabricators.default.message();\n      this.message = _fabricators.default.message({\n        inReplyTo: firstMessage\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerMessageDetails @message={{this.message}} />\n      */\n      {\n        \"id\": \"6qLZ88Ex\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@message\\\"],[[30,0,[\\\"message\\\"]]]],null]],[],false,[\\\"chat-composer-message-details\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-message-details-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-composer-message-details .d-icon-reply\").exists();\n    });\n    (0, _qunit.test)(\"displays user avatar\", async function (assert) {\n      this.message = _fabricators.default.message();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerMessageDetails @message={{this.message}} />\n      */\n      {\n        \"id\": \"6qLZ88Ex\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@message\\\"],[[30,0,[\\\"message\\\"]]]],null]],[],false,[\\\"chat-composer-message-details\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-message-details-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-composer-message-details .chat-user-avatar .avatar\").hasAttribute(\"title\", this.message.user.username);\n    });\n    (0, _qunit.test)(\"displays message excerpt\", async function (assert) {\n      this.message = _fabricators.default.message();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerMessageDetails @message={{this.message}} />\n      */\n      {\n        \"id\": \"6qLZ88Ex\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@message\\\"],[[30,0,[\\\"message\\\"]]]],null]],[],false,[\\\"chat-composer-message-details\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-message-details-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-reply__excerpt\").hasText(this.message.excerpt);\n    });\n    (0, _qunit.test)(\"displays user’s username\", async function (assert) {\n      this.message = _fabricators.default.message();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerMessageDetails @message={{this.message}} />\n      */\n      {\n        \"id\": \"6qLZ88Ex\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@message\\\"],[[30,0,[\\\"message\\\"]]]],null]],[],false,[\\\"chat-composer-message-details\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-message-details-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-reply__username\").hasText(this.message.user.username);\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-composer-placeholder-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/create-pretender\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/models/chat-channel\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _createPretender, _qunitHelpers, _chatChannel, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-composer placeholder\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"direct message to self shows Jot something down\", async function (assert) {\n      _createPretender.default.get(\"/chat/emojis.json\", () => [200, [], {}]);\n      this.currentUser.set(\"id\", 1);\n      this.channel = _chatChannel.default.create({\n        chatable_type: \"DirectMessage\",\n        chatable: {\n          users: [{\n            id: 1\n          }]\n        }\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Composer::Channel @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"3p0y+c7x\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat/composer/channel\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-placeholder-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-composer__input\").placeholder, \"Jot something down\");\n    });\n    (0, _qunit.test)(\"direct message to multiple folks shows their names\", async function (assert) {\n      _createPretender.default.get(\"/chat/emojis.json\", () => [200, [], {}]);\n      this.channel = _chatChannel.default.create({\n        chatable_type: \"DirectMessage\",\n        chatable: {\n          group: true,\n          users: [{\n            name: \"Tomtom\"\n          }, {\n            name: \"Steaky\"\n          }, {\n            username: \"zorro\"\n          }]\n        }\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Composer::Channel @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"3p0y+c7x\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat/composer/channel\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-placeholder-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-composer__input\").placeholder, \"Chat with Tomtom, Steaky, @zorro\");\n    });\n    (0, _qunit.test)(\"message to channel shows send message to channel name\", async function (assert) {\n      _createPretender.default.get(\"/chat/emojis.json\", () => [200, [], {}]);\n      this.channel = _chatChannel.default.create({\n        chatable_type: \"Category\",\n        title: \"just-cats\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Composer::Channel @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"3p0y+c7x\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat/composer/channel\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-placeholder-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-composer__input\").placeholder, \"Chat in #just-cats\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-composer-upload-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse-i18n\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _discourseI18n, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-composer-upload\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"file - uploading in progress\", async function (assert) {\n      this.set(\"upload\", {\n        progress: 50,\n        extension: \".pdf\",\n        fileName: \"test.pdf\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerUpload @upload={{this.upload}} />\n      */\n      {\n        \"id\": \"WzCOEtr+\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@upload\\\"],[[30,0,[\\\"upload\\\"]]]],null]],[],false,[\\\"chat-composer-upload\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-upload-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".upload-progress[value=50]\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\".uploading\").innerText.trim(), _discourseI18n.default.t(\"uploading\"));\n    });\n    (0, _qunit.test)(\"image - uploading in progress\", async function (assert) {\n      this.set(\"upload\", {\n        extension: \".png\",\n        progress: 78,\n        fileName: \"test.png\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerUpload @upload={{this.upload}} />\n      */\n      {\n        \"id\": \"WzCOEtr+\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@upload\\\"],[[30,0,[\\\"upload\\\"]]]],null]],[],false,[\\\"chat-composer-upload\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-upload-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".d-icon-far-image\"));\n      assert.true((0, _qunitHelpers.exists)(\".upload-progress[value=78]\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\".uploading\").innerText.trim(), _discourseI18n.default.t(\"uploading\"));\n    });\n    (0, _qunit.test)(\"image - preprocessing upload in progress\", async function (assert) {\n      this.set(\"upload\", {\n        extension: \".png\",\n        progress: 78,\n        fileName: \"test.png\",\n        processing: true\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerUpload @upload={{this.upload}} />\n      */\n      {\n        \"id\": \"WzCOEtr+\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@upload\\\"],[[30,0,[\\\"upload\\\"]]]],null]],[],false,[\\\"chat-composer-upload\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-upload-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".processing\").innerText.trim(), _discourseI18n.default.t(\"processing\"));\n    });\n    (0, _qunit.test)(\"file - upload complete\", async function (assert) {\n      this.set(\"upload\", {\n        type: \".pdf\",\n        original_filename: \"some file.pdf\",\n        extension: \"pdf\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerUpload @isDone={{true}} @upload={{this.upload}} />\n      */\n      {\n        \"id\": \"rBDACIPY\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@isDone\\\",\\\"@upload\\\"],[true,[30,0,[\\\"upload\\\"]]]],null]],[],false,[\\\"chat-composer-upload\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-upload-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".d-icon-file-alt\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\".file-name\").innerText.trim(), \"some file.pdf\");\n      assert.strictEqual((0, _qunitHelpers.query)(\".extension-pill\").innerText.trim(), \"pdf\");\n    });\n    (0, _qunit.test)(\"image - upload complete\", async function (assert) {\n      this.set(\"upload\", {\n        type: \".png\",\n        original_filename: \"bar_image.png\",\n        extension: \"png\",\n        short_path: \"/images/avatar.png\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerUpload @isDone={{true}} @upload={{this.upload}} />\n      */\n      {\n        \"id\": \"rBDACIPY\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@isDone\\\",\\\"@upload\\\"],[true,[30,0,[\\\"upload\\\"]]]],null]],[],false,[\\\"chat-composer-upload\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-upload-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\"img.preview-img[src='/images/avatar.png']\"));\n    });\n    (0, _qunit.test)(\"removing completed upload\", async function (assert) {\n      this.set(\"uploadRemoved\", false);\n      this.set(\"removeUpload\", () => {\n        this.set(\"uploadRemoved\", true);\n      });\n      this.set(\"upload\", {\n        type: \".png\",\n        original_filename: \"bar_image.png\",\n        extension: \"png\",\n        short_path: \"/images/avatar.png\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerUpload @isDone={{true}} @upload={{this.upload}} @onCancel={{fn this.removeUpload this.upload}} />\n      */\n      {\n        \"id\": \"1R+RAVPR\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@isDone\\\",\\\"@upload\\\",\\\"@onCancel\\\"],[true,[30,0,[\\\"upload\\\"]],[28,[37,1],[[30,0,[\\\"removeUpload\\\"]],[30,0,[\\\"upload\\\"]]],null]]],null]],[],false,[\\\"chat-composer-upload\\\",\\\"fn\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-upload-test.js\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.click)(\".chat-composer-upload__remove-btn\");\n      assert.strictEqual(this.uploadRemoved, true);\n    });\n    (0, _qunit.test)(\"cancelling in progress upload\", async function (assert) {\n      this.set(\"uploadRemoved\", false);\n      this.set(\"removeUpload\", () => {\n        this.set(\"uploadRemoved\", true);\n      });\n      this.set(\"upload\", {\n        type: \".png\",\n        original_filename: \"bar_image.png\",\n        extension: \"png\",\n        short_path: \"/images/avatar.png\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatComposerUpload @upload={{this.upload}} @onCancel={{fn this.removeUpload this.upload}} />\n      */\n      {\n        \"id\": \"6aEp0h5d\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@upload\\\",\\\"@onCancel\\\"],[[30,0,[\\\"upload\\\"]],[28,[37,1],[[30,0,[\\\"removeUpload\\\"]],[30,0,[\\\"upload\\\"]]],null]]],null]],[],false,[\\\"chat-composer-upload\\\",\\\"fn\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-upload-test.js\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.click)(\".chat-composer-upload__remove-btn\");\n      assert.strictEqual(this.uploadRemoved, true);\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-composer-uploads-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/create-pretender\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _createPretender, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  const fakeUpload = {\n    type: \".png\",\n    extension: \"png\",\n    name: \"myfile.png\",\n    short_path: \"/images/avatar.png\"\n  };\n  const mockUploadResponse = {\n    extension: \"jpeg\",\n    filesize: 126177,\n    height: 800,\n    human_filesize: \"123 KB\",\n    id: 202,\n    original_filename: \"avatar.PNG.jpg\",\n    retain_hours: null,\n    short_path: \"/images/avatar.png\",\n    short_url: \"upload://yoj8pf9DdIeHRRULyw7i57GAYdz.jpeg\",\n    thumbnail_height: 320,\n    thumbnail_width: 690,\n    url: \"/images/avatar.png\",\n    width: 1920\n  };\n  function setupUploadPretender() {\n    _createPretender.default.post(\"/uploads.json\", () => {\n      return [200, {\n        \"Content-Type\": \"application/json\"\n      }, mockUploadResponse];\n    }, 500 // this delay is important to slow down the uploads a bit so we can click elements in the UI like the cancel button\n    );\n  }\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-composer-uploads\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"loading uploads from an outside source (e.g. draft or editing message)\", async function (assert) {\n      this.existingUploads = [fakeUpload];\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ChatComposerUploads @existingUploads={{this.existingUploads}} @fileUploadElementId=\"chat-widget-uploader\" />\n          \n      */\n      {\n        \"id\": \"u569F1d3\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@existingUploads\\\",\\\"@fileUploadElementId\\\"],[[30,0,[\\\"existingUploads\\\"]],\\\"chat-widget-uploader\\\"]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"chat-composer-uploads\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-uploads-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.count)(\".chat-composer-upload\"), 1);\n      assert.strictEqual((0, _qunitHelpers.exists)(\".chat-composer-upload\"), true);\n    });\n    (0, _qunit.test)(\"upload starts and completes\", async function (assert) {\n      setupUploadPretender();\n      this.set(\"onUploadChanged\", () => {});\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ChatComposerUploads @fileUploadElementId=\"chat-widget-uploader\" @onUploadChanged={{this.onUploadChanged}} />\n          \n      */\n      {\n        \"id\": \"vQOIpN3Y\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@fileUploadElementId\\\",\\\"@onUploadChanged\\\"],[\\\"chat-widget-uploader\\\",[30,0,[\\\"onUploadChanged\\\"]]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"chat-composer-uploads\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-uploads-test.js\",\n        \"isStrictMode\": false\n      }));\n      const done = assert.async();\n      this.appEvents = this.container.lookup(\"service:app-events\");\n      this.appEvents.on(\"upload-mixin:chat-composer-uploader:upload-success\", (fileName, upload) => {\n        assert.strictEqual(fileName, \"avatar.png\");\n        assert.deepEqual(upload, mockUploadResponse);\n        done();\n      });\n      this.appEvents.trigger(\"upload-mixin:chat-composer-uploader:add-files\", (0, _qunitHelpers.createFile)(\"avatar.png\"));\n      await (0, _testHelpers.waitFor)(\".chat-composer-upload\");\n      assert.dom(\".chat-composer-upload\").exists({\n        count: 1\n      });\n    });\n    (0, _qunit.test)(\"removing a completed upload\", async function (assert) {\n      this.set(\"changedUploads\", null);\n      this.set(\"onUploadChanged\", () => {});\n      this.existingUploads = [fakeUpload];\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ChatComposerUploads @existingUploads={{this.existingUploads}} @fileUploadElementId=\"chat-widget-uploader\" @onUploadChanged={{this.onUploadChanged}} />\n          \n      */\n      {\n        \"id\": \"hoHtJQLc\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@existingUploads\\\",\\\"@fileUploadElementId\\\",\\\"@onUploadChanged\\\"],[[30,0,[\\\"existingUploads\\\"]],\\\"chat-widget-uploader\\\",[30,0,[\\\"onUploadChanged\\\"]]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"chat-composer-uploads\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-uploads-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-composer-upload\").exists({\n        count: 1\n      });\n      await (0, _testHelpers.click)(\".chat-composer-upload__remove-btn\");\n      assert.dom(\".chat-composer-upload\").exists({\n        count: 0\n      });\n    });\n    (0, _qunit.test)(\"cancelling in progress upload\", async function (assert) {\n      setupUploadPretender();\n      this.set(\"changedUploads\", null);\n      this.set(\"onUploadChanged\", uploads => {\n        this.set(\"changedUploads\", uploads);\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ChatComposerUploads @fileUploadElementId=\"chat-widget-uploader\" @onUploadChanged={{this.onUploadChanged}} />\n          \n      */\n      {\n        \"id\": \"vQOIpN3Y\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@fileUploadElementId\\\",\\\"@onUploadChanged\\\"],[\\\"chat-widget-uploader\\\",[30,0,[\\\"onUploadChanged\\\"]]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"chat-composer-uploads\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-composer-uploads-test.js\",\n        \"isStrictMode\": false\n      }));\n      const image = (0, _qunitHelpers.createFile)(\"avatar.png\");\n      const done = assert.async();\n      this.appEvents = this.container.lookup(\"service:app-events\");\n      this.appEvents.on(`upload-mixin:chat-composer-uploader:upload-cancelled`, fileId => {\n        assert.strictEqual(fileId.includes(\"uppy-avatar/\"), true, \"upload was cancelled\");\n        done();\n      });\n      this.appEvents.trigger(\"upload-mixin:chat-composer-uploader:add-files\", image);\n      await (0, _testHelpers.waitFor)(\".chat-composer-upload\");\n      assert.strictEqual((0, _qunitHelpers.count)(\".chat-composer-upload\"), 1);\n      await (0, _testHelpers.click)(\".chat-composer-upload__remove-btn\");\n      assert.strictEqual((0, _qunitHelpers.count)(\".chat-composer-upload\"), 0);\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-emoji-avatar-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-emoji-avatar\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"uses an emoji as avatar\", async function (assert) {\n      this.set(\"emoji\", \":otter:\");\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiAvatar @emoji={{this.emoji}} />\n      */\n      {\n        \"id\": \"8U/sMPzf\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@emoji\\\"],[[30,0,[\\\"emoji\\\"]]]],null]],[],false,[\\\"chat-emoji-avatar\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-avatar-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(`.chat-emoji-avatar .chat-emoji-avatar-container .emoji[title=otter]`));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-emoji-picker-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/create-pretender\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _createPretender, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  function emojisResponse() {\n    return {\n      favorites: [{\n        name: \"grinning\",\n        tonable: false,\n        url: \"/images/emoji/twitter/grinning.png?v=12\",\n        group: \"smileys_\\u0026_emotion\",\n        search_aliases: [\"smiley_cat\", \"star_struck\"]\n      }],\n      \"smileys_&_emotion\": [{\n        name: \"grinning\",\n        tonable: false,\n        url: \"/images/emoji/twitter/grinning.png?v=12\",\n        group: \"smileys_\\u0026_emotion\",\n        search_aliases: [\"smiley_cat\", \"star_struck\"]\n      }],\n      \"people_&_body\": [{\n        name: \"raised_hands\",\n        tonable: true,\n        url: \"/images/emoji/twitter/raised_hands.png?v=12\",\n        group: \"people_&_body\",\n        search_aliases: []\n      }, {\n        name: \"man_rowing_boat\",\n        tonable: true,\n        url: \"/images/emoji/twitter/man_rowing_boat.png?v=12\",\n        group: \"people_&_body\",\n        search_aliases: []\n      }],\n      objects: [{\n        name: \"womans_clothes\",\n        tonable: false,\n        url: \"/images/emoji/twitter/womans_clothes.png?v=12\",\n        group: \"objects\",\n        search_aliases: []\n      }]\n    };\n  }\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-emoji-picker\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    hooks.afterEach(function () {\n      this.emojiReactionStore.diversity = 1;\n    });\n    hooks.beforeEach(function () {\n      _createPretender.default.get(\"/chat/emojis.json\", () => {\n        return [200, {}, emojisResponse()];\n      });\n      this.chatEmojiPickerManager = this.container.lookup(\"service:chat-emoji-picker-manager\");\n      this.chatEmojiPickerManager.open(() => {});\n      this.chatEmojiPickerManager.addVisibleSections([\"smileys_&_emotion\", \"people_&_body\", \"objects\"]);\n      this.emojiReactionStore = this.container.lookup(\"service:chat-emoji-reaction-store\");\n    });\n    (0, _qunit.test)(\"When displaying navigation\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker />\n      */\n      {\n        \"id\": \"fR4pNC6V\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(`.chat-emoji-picker__section-btn.active[data-section=\"favorites\"]`), \"it renders first section as active\");\n      assert.true((0, _qunitHelpers.exists)(`.chat-emoji-picker__section-btn[data-section=\"smileys_&_emotion\"]`));\n      assert.true((0, _qunitHelpers.exists)(`.chat-emoji-picker__section-btn[data-section=\"people_&_body\"]`));\n      assert.true((0, _qunitHelpers.exists)(`.chat-emoji-picker__section-btn[data-section=\"objects\"]`));\n    });\n    (0, _qunit.test)(\"When changing tone scale\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker />\n      */\n      {\n        \"id\": \"fR4pNC6V\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.click)(\".chat-emoji-picker__fitzpatrick-modifier-btn.current.t1\");\n      await (0, _testHelpers.click)(\".chat-emoji-picker__fitzpatrick-modifier-btn.t6\");\n      assert.true((0, _qunitHelpers.exists)(`img[src=\"/images/emoji/twitter/raised_hands/6.png\"]`), \"it applies the tone to emojis\");\n      assert.true((0, _qunitHelpers.exists)(\".chat-emoji-picker__fitzpatrick-modifier-btn.current.t6\"), \"it changes the current scale to t6\");\n    });\n    (0, _qunit.test)(\"When requesting section\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker />\n      */\n      {\n        \"id\": \"fR4pNC6V\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual(document.querySelector(\"#ember-testing-container\").scrollTop, 0);\n      await (0, _testHelpers.click)(`.chat-emoji-picker__section-btn[data-section=\"objects\"]`);\n      assert.true(document.querySelector(\".chat-emoji-picker__scrollable-content\").scrollTop > 0, \"it scrolls to the section\");\n    });\n    (0, _qunit.test)(\"When filtering emojis\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker />\n      */\n      {\n        \"id\": \"fR4pNC6V\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.fillIn)(\".dc-filter-input\", \"grinning\");\n      assert.strictEqual((0, _qunitHelpers.queryAll)(\".chat-emoji-picker__section.filtered > img\").length, 1, \"it filters the emojis list\");\n      assert.true((0, _qunitHelpers.exists)('.chat-emoji-picker__section.filtered > img[alt=\"grinning\"]'), \"it filters the correct emoji\");\n      await (0, _testHelpers.fillIn)(\".dc-filter-input\", \"Grinning\");\n      assert.true((0, _qunitHelpers.exists)('.chat-emoji-picker__section.filtered > img[alt=\"grinning\"]'), \"it is case insensitive\");\n      await (0, _testHelpers.fillIn)(\".dc-filter-input\", \"smiley_cat\");\n      assert.true((0, _qunitHelpers.exists)('.chat-emoji-picker__section.filtered > img[alt=\"grinning\"]'), \"it filters the correct emoji using search alias\");\n    });\n    (0, _qunit.test)(\"When selecting an emoji\", async function (assert) {\n      let selection;\n      this.didSelectEmoji = emoji => {\n        selection = emoji;\n      };\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker @didSelectEmoji={{this.didSelectEmoji}} />\n      */\n      {\n        \"id\": \"KO2B29D4\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@didSelectEmoji\\\"],[[30,0,[\\\"didSelectEmoji\\\"]]]],null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.click)('img.emoji[data-emoji=\"grinning\"]');\n      assert.strictEqual(selection, \"grinning\");\n    });\n    (0, _qunit.test)(\"When navigating sections\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker />\n      */\n      {\n        \"id\": \"fR4pNC6V\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.triggerKeyEvent)(document.activeElement, \"keydown\", \"ArrowDown\");\n      assert.strictEqual(document.activeElement.dataset.emoji, \"grinning\", \"ArrowDown focuses on the first favorite emoji\");\n      await (0, _testHelpers.triggerKeyEvent)(document.activeElement, \"keydown\", \"ArrowDown\");\n      await (0, _testHelpers.triggerKeyEvent)(document.activeElement, \"keydown\", \"ArrowDown\");\n      assert.strictEqual(document.activeElement.dataset.emoji, \"raised_hands\", \"ArrowDown focuses on the first emoji form the third section\");\n      await (0, _testHelpers.triggerKeyEvent)(document.activeElement, \"keydown\", \"ArrowRight\");\n      assert.strictEqual(document.activeElement.dataset.emoji, \"man_rowing_boat\", \"ArrowRight focuses on the emoji at the right\");\n      await (0, _testHelpers.triggerKeyEvent)(document.activeElement, \"keydown\", \"ArrowLeft\");\n      assert.strictEqual(document.activeElement.dataset.emoji, \"raised_hands\", \"ArrowLeft focuses on the emoji at the left\");\n      await (0, _testHelpers.triggerKeyEvent)(document.activeElement, \"keydown\", \"ArrowUp\");\n      assert.strictEqual(document.activeElement.dataset.emoji, \"grinning\", \"ArrowUp focuses on the first emoji form the second section\");\n    });\n    (0, _qunit.test)(\"When navigating filtered emojis\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker />\n      */\n      {\n        \"id\": \"fR4pNC6V\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.fillIn)(\".dc-filter-input\", \"man\");\n      await (0, _testHelpers.triggerKeyEvent)(document.activeElement, \"keydown\", \"ArrowDown\");\n      assert.strictEqual(document.activeElement.dataset.emoji, \"man_rowing_boat\", \"ArrowDown focuses on the first filtered emoji\");\n      await (0, _testHelpers.triggerKeyEvent)(document.activeElement, \"keydown\", \"ArrowRight\");\n      assert.strictEqual(document.activeElement.dataset.emoji, \"womans_clothes\", \"ArrowRight focuses on the emoji at the right\");\n      await (0, _testHelpers.triggerKeyEvent)(document.activeElement, \"keydown\", \"ArrowLeft\");\n      assert.strictEqual(document.activeElement.dataset.emoji, \"man_rowing_boat\", \"ArrowLeft focuses on the emoji at the left\");\n    });\n    (0, _qunit.test)(\"When selecting a toned an emoji\", async function (assert) {\n      let selection;\n      this.didSelectEmoji = emoji => {\n        selection = emoji;\n      };\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker @didSelectEmoji={{this.didSelectEmoji}} />\n      */\n      {\n        \"id\": \"KO2B29D4\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@didSelectEmoji\\\"],[[30,0,[\\\"didSelectEmoji\\\"]]]],null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      this.emojiReactionStore.diversity = 1;\n      await (0, _testHelpers.click)('img.emoji[data-emoji=\"man_rowing_boat\"]');\n      assert.strictEqual(selection, \"man_rowing_boat\");\n      this.emojiReactionStore.diversity = 2;\n      await (0, _testHelpers.click)('img.emoji[data-emoji=\"man_rowing_boat\"]');\n      assert.strictEqual(selection, \"man_rowing_boat:t2\");\n    });\n    (0, _qunit.test)(\"When opening the picker\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker />\n      */\n      {\n        \"id\": \"fR4pNC6V\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true(document.activeElement.classList.contains(\"dc-filter-input\"));\n    });\n    (0, _qunit.test)(\"When hovering an emoji\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker />\n      */\n      {\n        \"id\": \"fR4pNC6V\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)('.chat-emoji-picker__section[data-section=\"people_&_body\"] img.emoji:nth-child(1)').title, \":raised_hands:\", \"first emoji has a title\");\n      assert.strictEqual((0, _qunitHelpers.query)('.chat-emoji-picker__section[data-section=\"people_&_body\"] img.emoji:nth-child(2)').title, \":man_rowing_boat:\", \"second emoji has a title\");\n      await (0, _testHelpers.fillIn)(\".dc-filter-input\", \"grinning\");\n      assert.strictEqual((0, _qunitHelpers.query)('img.emoji[data-emoji=\"grinning\"]').title, \":grinning:\", \"filtered emoji have a title\");\n      this.emojiReactionStore.diversity = 1;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker />\n      */\n      {\n        \"id\": \"fR4pNC6V\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)('img.emoji[data-emoji=\"man_rowing_boat\"]').title, \":man_rowing_boat:\", \"it has a title without the scale as diversity value is 1\");\n      this.emojiReactionStore.diversity = 2;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatEmojiPicker />\n      */\n      {\n        \"id\": \"fR4pNC6V\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat-emoji-picker\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-emoji-picker-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)('img.emoji[data-emoji=\"man_rowing_boat\"]').title, \":man_rowing_boat:t2:\", \"it has a title with the scale\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-header-icon-test\", [\"@ember/test-helpers\", \"qunit\", \"sinon\", \"discourse/tests/helpers/component-test\", \"discourse-i18n\", \"discourse/plugins/chat/discourse/controllers/preferences-chat\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _sinon, _componentTest, _discourseI18n, _preferencesChat, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-header-icon\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {});\n    (0, _qunit.test)(\"full page - never separated sidebar mode\", async function (assert) {\n      this.currentUser.user_option.chat_separate_sidebar_mode = \"never\";\n      _sinon.default.stub(this.owner.lookup(\"service:chat-state-manager\"), \"isFullPageActive\").value(true);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Header::Icon />\n      */\n      {\n        \"id\": \"w378IFKs\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat/header/icon\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-header-icon-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".icon.btn-flat\").hasAttribute(\"title\", _discourseI18n.default.t(\"chat.title_capitalized\")).hasAttribute(\"href\", \"/chat\");\n      assert.dom(\".d-icon-d-chat\").exists();\n    });\n    (0, _qunit.test)(\"full page - always separated mode\", async function (assert) {\n      this.currentUser.user_option.chat_separate_sidebar_mode = \"always\";\n      _sinon.default.stub(this.owner.lookup(\"service:chat-state-manager\"), \"isFullPageActive\").value(true);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Header::Icon />\n      */\n      {\n        \"id\": \"w378IFKs\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat/header/icon\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-header-icon-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".icon.btn-flat\").hasAttribute(\"title\", _discourseI18n.default.t(\"sidebar.panels.forum.label\")).hasAttribute(\"href\", \"/latest\");\n      assert.dom(\".d-icon-random\").exists();\n    });\n    (0, _qunit.test)(\"mobile\", async function (assert) {\n      this.site.mobileView = true;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Header::Icon />\n      */\n      {\n        \"id\": \"w378IFKs\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"chat/header/icon\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-header-icon-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".icon.btn-flat\").hasAttribute(\"title\", _discourseI18n.default.t(\"chat.title_capitalized\")).hasAttribute(\"href\", \"/chat\");\n      assert.dom(\".d-icon-d-chat\").exists();\n    });\n    (0, _qunit.test)(\"full page - with unread\", async function (assert) {\n      this.currentUser.user_option.chat_separate_sidebar_mode = \"always\";\n      this.currentUser.user_option.chat_header_indicator_preference = _preferencesChat.HEADER_INDICATOR_PREFERENCE_ALL_NEW;\n      _sinon.default.stub(this.owner.lookup(\"service:chat-state-manager\"), \"isFullPageActive\").value(true);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Header::Icon @urgentCount={{1}} />\n      */\n      {\n        \"id\": \"5e1T83hv\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@urgentCount\\\"],[1]],null]],[],false,[\\\"chat/header/icon\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-header-icon-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".icon.btn-flat\").hasAttribute(\"title\", _discourseI18n.default.t(\"sidebar.panels.forum.label\")).hasAttribute(\"href\", \"/latest\");\n      assert.dom(\".d-icon-random\").exists();\n      assert.dom(\".chat-channel-unread-indicator__number\").doesNotExist();\n    });\n    (0, _qunit.test)(\"drawer - with unread\", async function (assert) {\n      this.currentUser.user_option.chat_separate_sidebar_mode = \"always\";\n      this.currentUser.user_option.chat_header_indicator_preference = _preferencesChat.HEADER_INDICATOR_PREFERENCE_ALL_NEW;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Header::Icon @urgentCount={{1}} />\n      */\n      {\n        \"id\": \"5e1T83hv\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@urgentCount\\\"],[1]],null]],[],false,[\\\"chat/header/icon\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-header-icon-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".icon.btn-flat\").hasAttribute(\"title\", _discourseI18n.default.t(\"sidebar.panels.chat.label\")).hasAttribute(\"href\", \"/chat\");\n      assert.dom(\".d-icon-d-chat\").exists();\n      assert.dom(\".chat-channel-unread-indicator__number\").exists().containsText(\"1\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-message-avatar-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"discourse/plugins/chat/discourse/models/chat-message\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _fabricators, _chatMessage, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-message-avatar\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"chat_webhook_event\", async function (assert) {\n      this.message = _chatMessage.default.create(_fabricators.default.channel(), {\n        chat_webhook_event: {\n          emoji: \":heart:\"\n        }\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Message::Avatar @message={{this.message}} />\n      */\n      {\n        \"id\": \"2a93SvNr\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@message\\\"],[[30,0,[\\\"message\\\"]]]],null]],[],false,[\\\"chat/message/avatar\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-avatar-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-emoji-avatar .emoji\").title, \"heart\");\n    });\n    (0, _qunit.test)(\"user\", async function (assert) {\n      this.message = _chatMessage.default.create(_fabricators.default.channel(), {\n        user: {\n          username: \"discobot\"\n        }\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Message::Avatar @message={{this.message}} />\n      */\n      {\n        \"id\": \"2a93SvNr\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@message\\\"],[[30,0,[\\\"message\\\"]]]],null]],[],false,[\\\"chat/message/avatar\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-avatar-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)('.chat-user-avatar [data-user-card=\"discobot\"]'));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-message-collapser-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  const youtubeCooked = \"<p>written text</p>\" + '<div class=\"youtube-onebox lazy-video-container\" data-video-id=\"ytId1\" data-video-title=\"Cats are great\" data-provider-name=\"youtube\"> <a href=\"https://www.youtube.com/watch?v=ytId1\"></a>Vid 1</div>' + \"<p>more written text</p>\" + '<div class=\"youtube-onebox lazy-video-container\" data-video-id=\"ytId2\" data-video-title=\"Kittens are great\" data-provider-name=\"youtube\"> <a href=\"https://www.youtube.com/watch?v=ytId2\"></a>Vid 2</div>' + \"<p>and even more</p>\";\n  const animatedImageCooked = \"<p>written text</p>\" + '<p><img src=\"/images/avatar.png\" class=\"animated onebox\"></img></p>' + \"<p>more written text</p>\" + '<p><img src=\"/images/d-logo-sketch-small.png\" class=\"animated onebox\"></img></p>' + \"<p>and even more</p>\";\n  const externalImageCooked = \"<p>written text</p>\" + '<p><a href=\"http://cat1.com\" class=\"onebox\"><img src=\"\"></img></a></p>' + \"<p>more written text</p>\" + '<p><a href=\"http://cat2.com\" class=\"onebox\"><img src=\"\"></img></a></p>' + \"<p>and even more</p>\";\n  const imageCooked = \"<p>written text</p>\" + '<p><img src=\"/images/avatar.png\" alt=\"shows alt\"></p>' + \"<p>more written text</p>\" + '<p><img src=\"/images/d-logo-sketch-small.png\" alt=\"\"></p>' + \"<p>and even more</p>\" + '<p><img src=\"/images/d-logo-sketch.png\" class=\"emoji\"></p>';\n  const galleryCooked = \"<p>written text</p>\" + '<div class=\"onebox imgur-album\">' + '<a href=\"https://imgur.com/gallery/yyVx5lJ\">' + '<span class=\"outer-box\"><span><span class=\"album-title\">Le tomtom album</span></span></span>' + '<img src=\"/images/avatar.png\" title=\"Solution\" height=\"315\" width=\"600\">' + \"</a>\" + \"</div>\" + \"<p>more written text</p>\";\n  const evilString = \"<script>someeviltitle</script>\";\n  const evilStringEscaped = \"&lt;script&gt;someeviltitle&lt;/script&gt;\";\n  (0, _qunit.module)(\"Discourse Chat | Component | chat message collapser\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"escapes uploads header\", async function (assert) {\n      this.set(\"uploads\", [{\n        original_filename: evilString\n      }]);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @uploads={{this.uploads}} />\n      */\n      {\n        \"id\": \"kWeHUsxZ\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@uploads\\\"],[[30,0,[\\\"uploads\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.query)(\".chat-message-collapser-link-small\").innerHTML.includes(evilStringEscaped));\n    });\n  });\n  (0, _qunit.module)(\"Discourse Chat | Component | chat message collapser youtube\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"escapes youtube header\", async function (assert) {\n      this.set(\"cooked\", youtubeCooked.replace(\"https://www.youtube.com/watch?v=ytId1\", `https://www.youtube.com/watch?v=${evilString}`));\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.query)(\".chat-message-collapser-link\").href.includes(\"%3Cscript%3Esomeeviltitle%3C/script%3E\"));\n    });\n    (0, _qunit.test)(\"shows youtube link in header\", async function (assert) {\n      this.set(\"cooked\", youtubeCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const link = (0, _qunitHelpers.queryAll)(\".chat-message-collapser-link\");\n      assert.strictEqual(link.length, 2, \"two youtube links rendered\");\n      assert.strictEqual(link[0].href, \"https://www.youtube.com/watch?v=ytId1\");\n      assert.strictEqual(link[1].href, \"https://www.youtube.com/watch?v=ytId2\");\n    });\n    (0, _qunit.test)(\"shows all user written text\", async function (assert) {\n      youtubeCooked.youtubeid;\n      this.set(\"cooked\", youtubeCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const text = (0, _qunitHelpers.queryAll)(\".chat-message-collapser p\");\n      assert.strictEqual(text.length, 3, \"shows all written text\");\n      assert.strictEqual(text[0].innerText, \"written text\", \"first line of written text\");\n      assert.strictEqual(text[1].innerText, \"more written text\", \"third line of written text\");\n      assert.strictEqual(text[2].innerText, \"and even more\", \"fifth line of written text\");\n    });\n    (0, _qunit.test)(\"collapses and expands cooked youtube\", async function (assert) {\n      this.set(\"cooked\", youtubeCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const youtubeDivs = (0, _qunitHelpers.queryAll)(\".youtube-onebox\");\n      assert.strictEqual(youtubeDivs.length, 2, \"two youtube previews rendered\");\n      await (0, _testHelpers.click)((0, _qunitHelpers.queryAll)(\".chat-message-collapser-opened\")[0], \"close first preview\");\n      assert.false((0, _qunitHelpers.visible)(\".youtube-onebox[data-video-id='ytId1']\"), \"first youtube preview hidden\");\n      assert.true((0, _qunitHelpers.visible)(\".youtube-onebox[data-video-id='ytId2']\"), \"second youtube preview still visible\");\n      await (0, _testHelpers.click)(\".chat-message-collapser-closed\");\n      assert.strictEqual(youtubeDivs.length, 2, \"two youtube previews rendered\");\n      await (0, _testHelpers.click)((0, _qunitHelpers.queryAll)(\".chat-message-collapser-opened\")[1], \"close second preview\");\n      assert.true((0, _qunitHelpers.visible)(\".youtube-onebox[data-video-id='ytId1']\"), \"first youtube preview still visible\");\n      assert.false((0, _qunitHelpers.visible)(\".youtube-onebox[data-video-id='ytId2']\"), \"second youtube preview hidden\");\n      await (0, _testHelpers.click)(\".chat-message-collapser-closed\");\n      assert.strictEqual(youtubeDivs.length, 2, \"two youtube previews rendered\");\n    });\n  });\n  (0, _qunit.module)(\"Discourse Chat | Component | chat message collapser images\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    const imageTextCooked = \"<p>A picture of Tomtom</p>\";\n    (0, _qunit.test)(\"shows filename for one image\", async function (assert) {\n      this.set(\"cooked\", imageTextCooked);\n      this.set(\"uploads\", [{\n        original_filename: \"tomtom.jpeg\"\n      }]);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} @uploads={{this.uploads}} />\n      */\n      {\n        \"id\": \"K9VKIiqS\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\",\\\"@uploads\\\"],[[30,0,[\\\"cooked\\\"]],[30,0,[\\\"uploads\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.query)(\".chat-message-collapser-link-small\").innerText.includes(\"tomtom.jpeg\"));\n    });\n    (0, _qunit.test)(\"shows number of files for multiple images\", async function (assert) {\n      this.set(\"cooked\", imageTextCooked);\n      this.set(\"uploads\", [{}, {}]);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} @uploads={{this.uploads}} />\n      */\n      {\n        \"id\": \"K9VKIiqS\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\",\\\"@uploads\\\"],[[30,0,[\\\"cooked\\\"]],[30,0,[\\\"uploads\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.query)(\".chat-message-collapser-link-small\").innerText.includes(\"2 files\"));\n    });\n    (0, _qunit.test)(\"collapses and expands images\", async function (assert) {\n      this.set(\"cooked\", imageTextCooked);\n      this.set(\"uploads\", [{\n        original_filename: \"tomtom.png\"\n      }]);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} @uploads={{this.uploads}} />\n      */\n      {\n        \"id\": \"K9VKIiqS\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\",\\\"@uploads\\\"],[[30,0,[\\\"cooked\\\"]],[30,0,[\\\"uploads\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const uploads = \".chat-uploads\";\n      const chatImageUpload = \".chat-img-upload\";\n      assert.true((0, _qunitHelpers.visible)(uploads));\n      assert.true((0, _qunitHelpers.visible)(chatImageUpload));\n      await (0, _testHelpers.click)(\".chat-message-collapser-opened\");\n      assert.false((0, _qunitHelpers.visible)(uploads));\n      assert.false((0, _qunitHelpers.visible)(chatImageUpload));\n      await (0, _testHelpers.click)(\".chat-message-collapser-closed\");\n      assert.true((0, _qunitHelpers.visible)(uploads));\n      assert.true((0, _qunitHelpers.visible)(chatImageUpload));\n    });\n  });\n  (0, _qunit.module)(\"Discourse Chat | Component | chat message collapser animated image\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"shows links for animated image\", async function (assert) {\n      this.set(\"cooked\", animatedImageCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const links = (0, _qunitHelpers.queryAll)(\"a.chat-message-collapser-link-small\");\n      assert.true(links[0].innerText.trim().includes(\"avatar.png\"));\n      assert.true(links[0].href.includes(\"avatar.png\"));\n      assert.true(links[1].innerText.trim().includes(\"d-logo-sketch-small.png\"));\n      assert.true(links[1].href.includes(\"d-logo-sketch-small.png\"));\n    });\n    (0, _qunit.test)(\"shows all user written text\", async function (assert) {\n      this.set(\"cooked\", animatedImageCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const text = (0, _qunitHelpers.queryAll)(\".chat-message-collapser p\");\n      assert.strictEqual(text.length, 5, \"shows all written text\");\n      assert.strictEqual(text[0].innerText, \"written text\");\n      assert.strictEqual(text[2].innerText, \"more written text\");\n      assert.strictEqual(text[4].innerText, \"and even more\");\n    });\n    (0, _qunit.test)(\"collapses and expands animated image onebox\", async function (assert) {\n      this.set(\"cooked\", animatedImageCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const animatedOneboxes = (0, _qunitHelpers.queryAll)(\".animated.onebox\");\n      assert.strictEqual(animatedOneboxes.length, 2, \"two oneboxes rendered\");\n      await (0, _testHelpers.click)((0, _qunitHelpers.queryAll)(\".chat-message-collapser-opened\")[0], \"close first preview\");\n      assert.false((0, _qunitHelpers.visible)(\".onebox[src='/images/avatar.png']\"), \"first onebox hidden\");\n      assert.true((0, _qunitHelpers.visible)(\".onebox[src='/images/d-logo-sketch-small.png']\"), \"second onebox still visible\");\n      await (0, _testHelpers.click)(\".chat-message-collapser-closed\");\n      assert.strictEqual(animatedOneboxes.length, 2, \"two oneboxes rendered\");\n      await (0, _testHelpers.click)((0, _qunitHelpers.queryAll)(\".chat-message-collapser-opened\")[1], \"close second preview\");\n      assert.true((0, _qunitHelpers.visible)(\".onebox[src='/images/avatar.png']\"), \"first onebox still visible\");\n      assert.false((0, _qunitHelpers.visible)(\".onebox[src='/images/d-logo-sketch-small.png']\"), \"second onebox hidden\");\n      await (0, _testHelpers.click)(\".chat-message-collapser-closed\");\n      assert.strictEqual(animatedOneboxes.length, 2, \"two oneboxes rendered\");\n    });\n  });\n  (0, _qunit.module)(\"Discourse Chat | Component | chat message collapser external image onebox\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"shows links for animated image\", async function (assert) {\n      this.set(\"cooked\", externalImageCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const links = (0, _qunitHelpers.queryAll)(\"a.chat-message-collapser-link-small\");\n      assert.true(links[0].innerText.trim().includes(\"http://cat1.com\"));\n      assert.true(links[0].href.includes(\"http://cat1.com\"));\n      assert.true(links[1].innerText.trim().includes(\"http://cat2.com\"));\n      assert.true(links[1].href.includes(\"http://cat2.com\"));\n    });\n    (0, _qunit.test)(\"shows all user written text\", async function (assert) {\n      this.set(\"cooked\", externalImageCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const text = (0, _qunitHelpers.queryAll)(\".chat-message-collapser p\");\n      assert.strictEqual(text.length, 5, \"shows all written text\");\n      assert.strictEqual(text[0].innerText, \"written text\");\n      assert.strictEqual(text[2].innerText, \"more written text\");\n      assert.strictEqual(text[4].innerText, \"and even more\");\n    });\n    (0, _qunit.test)(\"collapses and expands image oneboxes\", async function (assert) {\n      this.set(\"cooked\", externalImageCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const imageOneboxes = (0, _qunitHelpers.queryAll)(\".onebox\");\n      assert.strictEqual(imageOneboxes.length, 2, \"two oneboxes rendered\");\n      await (0, _testHelpers.click)((0, _qunitHelpers.queryAll)(\".chat-message-collapser-opened\")[0], \"close first preview\");\n      assert.false((0, _qunitHelpers.visible)(\".onebox[href='http://cat1.com']\"), \"first onebox hidden\");\n      assert.true((0, _qunitHelpers.visible)(\".onebox[href='http://cat2.com']\"), \"second onebox still visible\");\n      await (0, _testHelpers.click)(\".chat-message-collapser-closed\");\n      assert.strictEqual(imageOneboxes.length, 2, \"two oneboxes rendered\");\n      await (0, _testHelpers.click)((0, _qunitHelpers.queryAll)(\".chat-message-collapser-opened\")[1], \"close second preview\");\n      assert.true((0, _qunitHelpers.visible)(\".onebox[href='http://cat1.com']\"), \"first onebox still visible\");\n      assert.false((0, _qunitHelpers.visible)(\".onebox[href='http://cat2.com']\"), \"second onebox hidden\");\n      await (0, _testHelpers.click)(\".chat-message-collapser-closed\");\n      assert.strictEqual(imageOneboxes.length, 2, \"two oneboxes rendered\");\n    });\n  });\n  (0, _qunit.module)(\"Discourse Chat | Component | chat message collapser images\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.skip)(\"escapes link\", async function (assert) {\n      this.set(\"cooked\", imageCooked.replace(\"shows alt\", evilString).replace(\"/images/d-logo-sketch-small.png\", evilString));\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.queryAll)(\".chat-message-collapser-link-small\")[0].innerHTML.includes(evilStringEscaped));\n      assert.true((0, _qunitHelpers.queryAll)(\".chat-message-collapser-link-small\")[1].innerHTML.includes(\"&lt;script&gt;someeviltitle&lt;/script&gt;\"));\n    });\n    (0, _qunit.test)(\"shows alt or links (if no alt) for linked image\", async function (assert) {\n      this.set(\"cooked\", imageCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const links = (0, _qunitHelpers.queryAll)(\"a.chat-message-collapser-link-small\");\n      assert.true(links[0].innerText.trim().includes(\"shows alt\"));\n      assert.true(links[0].href.includes(\"/images/avatar.png\"));\n      assert.true(links[1].innerText.trim().includes(\"/images/d-logo-sketch-small.png\"));\n      assert.true(links[1].href.includes(\"/images/d-logo-sketch-small.png\"));\n    });\n    (0, _qunit.test)(\"shows all user written text\", async function (assert) {\n      this.set(\"cooked\", imageCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const text = (0, _qunitHelpers.queryAll)(\".chat-message-collapser p\");\n      assert.strictEqual(text.length, 6, \"shows all written text\");\n      assert.strictEqual(text[0].innerText, \"written text\");\n      assert.strictEqual(text[2].innerText, \"more written text\");\n      assert.strictEqual(text[4].innerText, \"and even more\");\n    });\n    (0, _qunit.test)(\"collapses and expands images\", async function (assert) {\n      this.set(\"cooked\", imageCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const images = (0, _qunitHelpers.queryAll)(\"img\");\n      assert.strictEqual(images.length, 3);\n      await (0, _testHelpers.click)((0, _qunitHelpers.queryAll)(\".chat-message-collapser-opened\")[0], \"close first preview\");\n      assert.false((0, _qunitHelpers.visible)(\"img[src='/images/avatar.png']\"), \"first image hidden\");\n      assert.true((0, _qunitHelpers.visible)(\"img[src='/images/d-logo-sketch-small.png']\"), \"second image still visible\");\n      await (0, _testHelpers.click)(\".chat-message-collapser-closed\");\n      assert.strictEqual(images.length, 3);\n      await (0, _testHelpers.click)((0, _qunitHelpers.queryAll)(\".chat-message-collapser-opened\")[1], \"close second preview\");\n      assert.true((0, _qunitHelpers.visible)(\"img[src='/images/avatar.png']\"), \"first image still visible\");\n      assert.false((0, _qunitHelpers.visible)(\"img[src='/images/d-logo-sketch-small.png']\"), \"second image hidden\");\n      await (0, _testHelpers.click)(\".chat-message-collapser-closed\");\n      assert.strictEqual(images.length, 3);\n    });\n    (0, _qunit.test)(\"does not show collapser for emoji images\", async function (assert) {\n      this.set(\"cooked\", imageCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const links = (0, _qunitHelpers.queryAll)(\"a.chat-message-collapser-link-small\");\n      const images = (0, _qunitHelpers.queryAll)(\"img\");\n      const collapser = (0, _qunitHelpers.queryAll)(\".chat-message-collapser-opened\");\n      assert.strictEqual(links.length, 2);\n      assert.strictEqual(images.length, 3, \"shows images and emoji\");\n      assert.strictEqual(collapser.length, 2);\n    });\n  });\n  (0, _qunit.module)(\"Discourse Chat | Component | chat message collapser galleries\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"escapes title/link\", async function (assert) {\n      this.set(\"cooked\", galleryCooked.replace(\"https://imgur.com/gallery/yyVx5lJ\", evilString).replace(\"Le tomtom album\", evilString));\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.query)(\".chat-message-collapser-link-small\").href.includes(\"%3Cscript%3Esomeeviltitle%3C/script%3E\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-message-collapser-link-small\").innerHTML.trim(), \"someeviltitle\");\n    });\n    (0, _qunit.test)(\"removes album title overlay\", async function (assert) {\n      this.set(\"cooked\", galleryCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.visible)(\".album-title\"), \"album title removed\");\n    });\n    (0, _qunit.test)(\"shows gallery link\", async function (assert) {\n      this.set(\"cooked\", galleryCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.query)(\".chat-message-collapser-link-small\").innerText.includes(\"Le tomtom album\"));\n    });\n    (0, _qunit.test)(\"shows all user written text\", async function (assert) {\n      this.set(\"cooked\", galleryCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const text = (0, _qunitHelpers.queryAll)(\".chat-message-collapser p\");\n      assert.strictEqual(text.length, 2, \"shows all written text\");\n      assert.strictEqual(text[0].innerText, \"written text\");\n      assert.strictEqual(text[1].innerText, \"more written text\");\n    });\n    (0, _qunit.test)(\"collapses and expands images\", async function (assert) {\n      this.set(\"cooked\", galleryCooked);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageCollapser @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"dVxZq5vw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.visible)(\"img\"), \"image visible initially\");\n      await (0, _testHelpers.click)((0, _qunitHelpers.queryAll)(\".chat-message-collapser-opened\")[0], \"close preview\");\n      assert.false((0, _qunitHelpers.visible)(\"img\"), \"image hidden\");\n      await (0, _testHelpers.click)(\".chat-message-collapser-closed\");\n      assert.true((0, _qunitHelpers.visible)(\"img\"), \"image visible initially\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-message-info-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/models/bookmark\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse-i18n\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"discourse/plugins/chat/discourse/models/chat-message\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _bookmark, _componentTest, _qunitHelpers, _discourseI18n, _fabricators, _chatMessage, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-message-info\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    const template = (0, _templateFactory.createTemplateFactory)(\n    /*\n      \n        <Chat::Message::Info @message={{this.message}} @show={{true}} />\n      \n    */\n    {\n      \"id\": \"sqMuOJIK\",\n      \"block\": \"[[[1,\\\"\\\\n    \\\"],[8,[39,0],null,[[\\\"@message\\\",\\\"@show\\\"],[[30,0,[\\\"message\\\"]],true]],null],[1,\\\"\\\\n  \\\"]],[],false,[\\\"chat/message/info\\\"]]\",\n      \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-info-test.js\",\n      \"isStrictMode\": false\n    });\n    (0, _qunit.test)(\"chat_webhook_event\", async function (assert) {\n      this.message = _fabricators.default.message({\n        chat_webhook_event: {\n          username: \"discobot\"\n        }\n      });\n      await (0, _testHelpers.render)(template);\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-message-info__username\").innerText.trim(), this.message.chatWebhookEvent.username);\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-message-info__bot-indicator\").textContent.trim(), _discourseI18n.default.t(\"chat.bot\"));\n    });\n    (0, _qunit.test)(\"user\", async function (assert) {\n      this.message = _fabricators.default.message({\n        user: {\n          username: \"discobot\"\n        }\n      });\n      await (0, _testHelpers.render)(template);\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-message-info__username\").innerText.trim(), this.message.user.username);\n    });\n    (0, _qunit.test)(\"date\", async function (assert) {\n      this.message = _fabricators.default.message({\n        user: {\n          username: \"discobot\"\n        },\n        created_at: moment()\n      });\n      await (0, _testHelpers.render)(template);\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-info__date\"));\n    });\n    (0, _qunit.test)(\"bookmark (with reminder)\", async function (assert) {\n      this.message = _fabricators.default.message({\n        user: {\n          username: \"discobot\"\n        },\n        bookmark: _bookmark.default.create({\n          reminder_at: moment(),\n          name: \"some name\"\n        })\n      });\n      await (0, _testHelpers.render)(template);\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-info__bookmark .d-icon-discourse-bookmark-clock\"));\n    });\n    (0, _qunit.test)(\"bookmark (no reminder)\", async function (assert) {\n      this.message = _chatMessage.default.create(_fabricators.default.channel(), {\n        user: {\n          username: \"discobot\"\n        },\n        bookmark: _bookmark.default.create({\n          name: \"some name\"\n        })\n      });\n      await (0, _testHelpers.render)(template);\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-info__bookmark .d-icon-bookmark\"));\n    });\n    (0, _qunit.test)(\"user status\", async function (assert) {\n      const status = {\n        description: \"off to dentist\",\n        emoji: \"tooth\"\n      };\n      this.message = _fabricators.default.message({\n        user: {\n          status\n        }\n      });\n      await (0, _testHelpers.render)(template);\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-info__status .user-status-message\"));\n    });\n    (0, _qunit.test)(\"flag status\", async function (assert) {\n      this.message = _fabricators.default.message({\n        user: {\n          username: \"discobot\"\n        },\n        user_flag_status: 0\n      });\n      await (0, _testHelpers.render)(template);\n      assert.dom(\".chat-message-info__flag > .svg-icon-title\").hasAttribute(\"title\", _discourseI18n.default.t(\"chat.you_flagged\"));\n    });\n    (0, _qunit.test)(\"reviewable\", async function (assert) {\n      this.message = _fabricators.default.message({\n        user: {\n          username: \"discobot\"\n        },\n        user_flag_status: 0\n      });\n      await (0, _testHelpers.render)(template);\n      assert.dom(\".chat-message-info__flag > .svg-icon-title\").hasAttribute(\"title\", _discourseI18n.default.t(\"chat.you_flagged\"));\n    });\n    (0, _qunit.test)(\"with username classes\", async function (assert) {\n      this.message = _fabricators.default.message({\n        user: {\n          username: \"discobot\",\n          admin: true,\n          moderator: true,\n          new_user: true,\n          primary_group_name: \"foo\"\n        }\n      });\n      await (0, _testHelpers.render)(template);\n      assert.dom(\".chat-message-info__username.is-staff\").exists();\n      assert.dom(\".chat-message-info__username.is-admin\").exists();\n      assert.dom(\".chat-message-info__username.is-moderator\").exists();\n      assert.dom(\".chat-message-info__username.is-new-user\").exists();\n      assert.dom(\".chat-message-info__username.group--foo\").exists();\n    });\n    (0, _qunit.test)(\"without username classes\", async function (assert) {\n      this.message = _fabricators.default.message({\n        user: {\n          username: \"discobot\"\n        }\n      });\n      await (0, _testHelpers.render)(template);\n      assert.dom(\".chat-message-info__username.is-staff\").doesNotExist();\n      assert.dom(\".chat-message-info__username.is-admin\").doesNotExist();\n      assert.dom(\".chat-message-info__username.is-moderator\").doesNotExist();\n      assert.dom(\".chat-message-info__username.is-new-user\").doesNotExist();\n      assert.dom(\".chat-message-info__username.group--foo\").doesNotExist();\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-message-left-gutter-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse-i18n\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _discourseI18n, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | Chat::Message::LeftGutter\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    const template = (0, _templateFactory.createTemplateFactory)(\n    /*\n      \n          <Chat::Message::LeftGutter @message={{this.message}} />\n        \n    */\n    {\n      \"id\": \"jdPrmNS6\",\n      \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@message\\\"],[[30,0,[\\\"message\\\"]]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"chat/message/left-gutter\\\"]]\",\n      \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-left-gutter-test.js\",\n      \"isStrictMode\": false\n    });\n    (0, _qunit.test)(\"default\", async function (assert) {\n      this.message = _fabricators.default.message();\n      await (0, _testHelpers.render)(template);\n      assert.dom(\".chat-message-left-gutter__date\").exists();\n    });\n    (0, _qunit.test)(\"with reviewable\", async function (assert) {\n      this.message = _fabricators.default.message({\n        reviewable_id: 1\n      });\n      await (0, _testHelpers.render)(template);\n      assert.dom(\".chat-message-left-gutter__flag .svg-icon-title\").hasAttribute(\"title\", _discourseI18n.default.t(\"chat.flagged\"));\n    });\n    (0, _qunit.test)(\"with flag status\", async function (assert) {\n      this.message = _fabricators.default.message({\n        user_flag_status: 0\n      });\n      await (0, _testHelpers.render)(template);\n      assert.dom(\".chat-message-left-gutter__flag .svg-icon-title\").hasAttribute(\"title\", _discourseI18n.default.t(\"chat.you_flagged\"));\n    });\n    (0, _qunit.test)(\"bookmark\", async function (assert) {\n      this.message = _fabricators.default.message({\n        bookmark: _fabricators.default.bookmark()\n      });\n      await (0, _testHelpers.render)(template);\n      assert.dom(\".chat-message-left-gutter__date\").exists();\n      assert.dom(\".chat-message-left-gutter__bookmark\").exists();\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-message-reaction-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-message-reaction\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"adds reacted class when user reacted\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ChatMessageReaction @reaction={{hash emoji=\"heart\" reacted=true}} />\n          \n      */\n      {\n        \"id\": \"fk7lw5im\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@reaction\\\"],[[28,[37,1],null,[[\\\"emoji\\\",\\\"reacted\\\"],[\\\"heart\\\",true]]]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"chat-message-reaction\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-reaction-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-reaction.reacted\"));\n    });\n    (0, _qunit.test)(\"adds reaction name as class\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageReaction @reaction={{hash emoji=\"heart\"}} />\n      */\n      {\n        \"id\": \"HATvPhs2\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@reaction\\\"],[[28,[37,1],null,[[\\\"emoji\\\"],[\\\"heart\\\"]]]]],null]],[],false,[\\\"chat-message-reaction\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-reaction-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(`.chat-message-reaction[data-emoji-name=\"heart\"]`));\n    });\n    (0, _qunit.test)(\"title/alt attributes\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageReaction @reaction={{hash emoji=\"heart\"}} />\n      */\n      {\n        \"id\": \"HATvPhs2\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@reaction\\\"],[[28,[37,1],null,[[\\\"emoji\\\"],[\\\"heart\\\"]]]]],null]],[],false,[\\\"chat-message-reaction\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-reaction-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-message-reaction\").title, \":heart:\");\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-message-reaction img\").alt, \":heart:\");\n    });\n    (0, _qunit.test)(\"count of reactions\", async function (assert) {\n      this.set(\"count\", 0);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ChatMessageReaction @reaction={{hash emoji=\"heart\" count=this.count}} />\n          \n      */\n      {\n        \"id\": \"xQJNWdS/\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@reaction\\\"],[[28,[37,1],null,[[\\\"emoji\\\",\\\"count\\\"],[\\\"heart\\\",[30,0,[\\\"count\\\"]]]]]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"chat-message-reaction\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-reaction-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".chat-message-reaction .count\"));\n      this.set(\"count\", 2);\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-message-reaction .count\").innerText, \"2\");\n    });\n    (0, _qunit.test)(\"reaction’s image\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageReaction @reaction={{hash emoji=\"heart\"}} />\n      */\n      {\n        \"id\": \"HATvPhs2\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@reaction\\\"],[[28,[37,1],null,[[\\\"emoji\\\"],[\\\"heart\\\"]]]]],null]],[],false,[\\\"chat-message-reaction\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-reaction-test.js\",\n        \"isStrictMode\": false\n      }));\n      const src = (0, _qunitHelpers.query)(\".chat-message-reaction img\").src;\n      assert.true(/heart\\.png/.test(src));\n    });\n    (0, _qunit.test)(\"click action\", async function (assert) {\n      this.set(\"count\", 0);\n      this.set(\"react\", () => {\n        this.set(\"count\", 1);\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ChatMessageReaction class=\"show\" @reaction={{hash emoji=\"heart\" count=this.count}} @onReaction={{this.react}} />\n          \n      */\n      {\n        \"id\": \"vyqVwpy5\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],[[24,0,\\\"show\\\"]],[[\\\"@reaction\\\",\\\"@onReaction\\\"],[[28,[37,1],null,[[\\\"emoji\\\",\\\"count\\\"],[\\\"heart\\\",[30,0,[\\\"count\\\"]]]]],[30,0,[\\\"react\\\"]]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"chat-message-reaction\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-reaction-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".chat-message-reaction .count\"));\n      await (0, _testHelpers.click)(\".chat-message-reaction\");\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-message-reaction .count\").innerText, \"1\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-message-separator-date-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-message-separator-date\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"first message of the day\", async function (assert) {\n      this.set(\"date\", moment().format(\"LLL\"));\n      this.set(\"message\", {\n        formattedFirstMessageDate: this.date\n      });\n      this.set(\"fetchMessagesByDate\", () => {});\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageSeparatorDate @message={{this.message}} @fetchMessagesByDate={{this.fetchMessagesByDate}} />\n      */\n      {\n        \"id\": \"Qyd93EBh\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@message\\\",\\\"@fetchMessagesByDate\\\"],[[30,0,[\\\"message\\\"]],[30,0,[\\\"fetchMessagesByDate\\\"]]]],null]],[],false,[\\\"chat-message-separator-date\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-separator-date-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-message-separator-date\").innerText.trim(), this.date);\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-message-separator-new-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse-i18n\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _discourseI18n, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-message-separator-new\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"newest message\", async function (assert) {\n      this.set(\"message\", {\n        newest: true\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageSeparatorNew @message={{this.message}} />\n      */\n      {\n        \"id\": \"zYDZueum\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@message\\\"],[[30,0,[\\\"message\\\"]]]],null]],[],false,[\\\"chat-message-separator-new\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-separator-new-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-message-separator-new\").innerText.trim(), _discourseI18n.default.t(\"chat.last_visit\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-message-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-message\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    const template = (0, _templateFactory.createTemplateFactory)(\n    /*\n      \n        <ChatMessage @message={{this.message}} />\n      \n    */\n    {\n      \"id\": \"+SnKGnUx\",\n      \"block\": \"[[[1,\\\"\\\\n    \\\"],[8,[39,0],null,[[\\\"@message\\\"],[[30,0,[\\\"message\\\"]]]],null],[1,\\\"\\\\n  \\\"]],[],false,[\\\"chat-message\\\"]]\",\n      \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-test.js\",\n      \"isStrictMode\": false\n    });\n    (0, _qunit.test)(\"Message with edits\", async function (assert) {\n      this.message = _fabricators.default.message({\n        edited: true\n      });\n      await (0, _testHelpers.render)(template);\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-edited\"), \"has the correct css class\");\n    });\n    (0, _qunit.test)(\"Deleted message\", async function (assert) {\n      this.message = _fabricators.default.message({\n        user: this.currentUser,\n        deleted_at: moment()\n      });\n      await (0, _testHelpers.render)(template);\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-text.-deleted .chat-message-expand\"), \"has the correct css class and expand button within\");\n    });\n    (0, _qunit.test)(\"Hidden message\", async function (assert) {\n      this.message = _fabricators.default.message({\n        hidden: true\n      });\n      await (0, _testHelpers.render)(template);\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-text.-hidden .chat-message-expand\"), \"has the correct css class and expand button within\");\n    });\n    (0, _qunit.test)(\"Message with reply\", async function (assert) {\n      this.message = _fabricators.default.message({\n        inReplyTo: _fabricators.default.message()\n      });\n      await (0, _testHelpers.render)(template);\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-container.has-reply\"), \"has the correct css class\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-message-text-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-message-text\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"yields\", async function (assert) {\n      this.set(\"cooked\", \"<p></p>\");\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ChatMessageText @cooked={{this.cooked}} @uploads={{this.uploads}}>\n              <div class=\"yield-me\"></div>\n            </ChatMessageText>\n          \n      */\n      {\n        \"id\": \"+ZeZR6Nb\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@cooked\\\",\\\"@uploads\\\"],[[30,0,[\\\"cooked\\\"]],[30,0,[\\\"uploads\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,0],[14,0,\\\"yield-me\\\"],[12],[13],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"chat-message-text\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-text-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".yield-me\"));\n    });\n    (0, _qunit.test)(\"shows collapsed\", async function (assert) {\n      this.set(\"cooked\", '<div class=\"youtube-onebox lazy-video-container\" data-video-id=\"WaT_rLGuUr8\" data-video-title=\"Japanese Katsu Curry (Pork Cutlet)\" data-provider-name=\"youtube\"/>');\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageText @cooked={{this.cooked}} @uploads={{this.uploads}} />\n      */\n      {\n        \"id\": \"2xu1kI/6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\",\\\"@uploads\\\"],[[30,0,[\\\"cooked\\\"]],[30,0,[\\\"uploads\\\"]]]],null]],[],false,[\\\"chat-message-text\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-text-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-collapser\"));\n    });\n    (0, _qunit.test)(\"does not collapse a non-image onebox\", async function (assert) {\n      this.set(\"cooked\", '<p><a href=\"http://cat1.com\" class=\"onebox\"></a></p>');\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageText @cooked={{this.cooked}} />\n      */\n      {\n        \"id\": \"16bNWvSH\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\"],[[30,0,[\\\"cooked\\\"]]]],null]],[],false,[\\\"chat-message-text\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-text-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.false((0, _qunitHelpers.exists)(\".chat-message-collapser\"));\n    });\n    (0, _qunit.test)(\"shows edits - regular message\", async function (assert) {\n      this.set(\"cooked\", \"<p></p>\");\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageText @cooked={{this.cooked}} @edited={{true}} />\n      */\n      {\n        \"id\": \"BtKWL0DT\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\",\\\"@edited\\\"],[[30,0,[\\\"cooked\\\"]],true]],null]],[],false,[\\\"chat-message-text\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-text-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-edited\"));\n    });\n    (0, _qunit.test)(\"shows edits - collapsible message\", async function (assert) {\n      this.set(\"cooked\", '<div class=\"youtube-onebox lazy-video-container\"></div>');\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatMessageText @cooked={{this.cooked}} @edited={{true}} />\n      */\n      {\n        \"id\": \"BtKWL0DT\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@cooked\\\",\\\"@edited\\\"],[[30,0,[\\\"cooked\\\"]],true]],null]],[],false,[\\\"chat-message-text\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-message-text-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".chat-message-edited\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-modal-archive-channel-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | <Chat::Modal::ArchiveChannel>\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"channel title is escaped in instructions correctly\", async function (assert) {\n      this.channel = _fabricators.default.channel({\n        title: `<script>someeviltitle</script>`\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Modal::ArchiveChannel @inline={{true}} @model={{hash channel=this.channel}} />\n      */\n      {\n        \"id\": \"1oUbvwOK\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@inline\\\",\\\"@model\\\"],[true,[28,[37,1],null,[[\\\"channel\\\"],[[30,0,[\\\"channel\\\"]]]]]]],null]],[],false,[\\\"chat/modal/archive-channel\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-modal-archive-channel-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.query)(\".chat-modal-archive-channel\").innerHTML.includes(\"&lt;script&gt;someeviltitle&lt;/script&gt;\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-modal-delete-channel-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | <Chat::Modal::DeleteChannel />\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"channel title is escaped in instructions correctly\", async function (assert) {\n      this.channel = _fabricators.default.channel({\n        title: `<script>someeviltitle</script>`\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::Modal::DeleteChannel @inline={{true}} @model={{hash channel=this.channel}} />\n      */\n      {\n        \"id\": \"g7o7qAvV\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@inline\\\",\\\"@model\\\"],[true,[28,[37,1],null,[[\\\"channel\\\"],[[30,0,[\\\"channel\\\"]]]]]]],null]],[],false,[\\\"chat/modal/delete-channel\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-modal-delete-channel-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.query)(\".chat-modal-delete-channel__instructions\").innerHTML.includes(\"&lt;script&gt;someeviltitle&lt;/script&gt;\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-modal-move-message-to-channel-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | <Chat::Modal::MoveMessageToChannel />\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"channel title is escaped in instructions correctly\", async function (assert) {\n      this.channel = _fabricators.default.channel({\n        title: \"<script>someeviltitle</script>\"\n      });\n      this.selectedMessageIds = [this.channel.id];\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n              <Chat::Modal::MoveMessageToChannel\n                @inline={{true}}\n                @model={{hash sourceChannel=this.channel selectedMessageIds=this.selectedMessageIds}}\n              />\n            \n      */\n      {\n        \"id\": \"GULOkMS6\",\n        \"block\": \"[[[1,\\\"\\\\n        \\\"],[8,[39,0],null,[[\\\"@inline\\\",\\\"@model\\\"],[true,[28,[37,1],null,[[\\\"sourceChannel\\\",\\\"selectedMessageIds\\\"],[[30,0,[\\\"channel\\\"]],[30,0,[\\\"selectedMessageIds\\\"]]]]]]],null],[1,\\\"\\\\n      \\\"]],[],false,[\\\"chat/modal/move-message-to-channel\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-modal-move-message-to-channel-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.query)(\".chat-modal-move-message-to-channel\").innerHTML.includes(\"&lt;script&gt;someeviltitle&lt;/script&gt;\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-notices-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/create-pretender\", \"discourse/tests/helpers/qunit-helpers\", \"discourse-i18n\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _createPretender, _qunitHelpers, _discourseI18n, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-notice\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"displays all notices for a channel\", async function (assert) {\n      this.channel = _fabricators.default.channel();\n      this.manager = this.container.lookup(\"service:chat-channel-notices-manager\");\n      this.manager.handleNotice({\n        channel_id: this.channel.id,\n        text_content: \"hello\"\n      });\n      this.manager.handleNotice({\n        channel_id: this.channel.id,\n        text_content: \"goodbye\"\n      });\n      this.manager.handleNotice({\n        channel_id: this.channel.id + 1,\n        text_content: \"N/A\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatNotices @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"Gb5suZmk\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-notices\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-notices-test.js\",\n        \"isStrictMode\": false\n      }));\n      const notices = (0, _qunitHelpers.queryAll)(\".chat-notices .chat-notices__notice\");\n      assert.strictEqual(notices.length, 2, \"Two notices are rendered\");\n      assert.true(notices[0].innerText.includes(\"hello\"));\n      assert.true(notices[1].innerText.includes(\"goodbye\"));\n    });\n    (0, _qunit.test)(\"Notices can be cleared\", async function (assert) {\n      this.channel = _fabricators.default.channel();\n      this.manager = this.container.lookup(\"service:chat-channel-notices-manager\");\n      this.manager.handleNotice({\n        channel_id: this.channel.id,\n        text_content: \"hello\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatNotices @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"Gb5suZmk\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-notices\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-notices-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.queryAll)(\".chat-notices .chat-notices__notice\").length, 1, \"Notice is present\");\n      await (0, _testHelpers.click)((0, _qunitHelpers.query)(\".chat-notices__notice__clear\"), \"Clear the notice\");\n      assert.strictEqual((0, _qunitHelpers.queryAll)(\".chat-notices .chat-notices__notice\").length, 0, \"Notice was cleared\");\n    });\n    (0, _qunit.test)(\"MentionWithoutMembership notice renders\", async function (assert) {\n      this.channel = _fabricators.default.channel();\n      this.manager = this.container.lookup(\"service:chat-channel-notices-manager\");\n      const text = \"Joffrey can't chat, hermano\";\n      this.manager.handleNotice({\n        channel_id: this.channel.id,\n        notice_type: \"mention_without_membership\",\n        data: {\n          user_ids: [1],\n          message_id: 1,\n          text\n        }\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatNotices @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"Gb5suZmk\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-notices\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-notices-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _qunitHelpers.queryAll)(\".chat-notices .chat-notices__notice .mention-without-membership-notice\").length, 1, \"Notice is present\");\n      assert.dom(\".mention-without-membership-notice__body__text\").hasText(text);\n      assert.dom(\".mention-without-membership-notice__body__link\").hasText(_discourseI18n.default.t(\"chat.mention_warning.invite\"));\n      _createPretender.default.post(`/chat/api/channels/${this.channel.id}/invites`, () => {\n        return [200, {\n          \"Content-Type\": \"application/json\"\n        }, {}];\n      });\n      await (0, _testHelpers.click)((0, _qunitHelpers.query)(\".mention-without-membership-notice__body__link\"), \"Invites the user\");\n\n      // I would love to test that the invitation sent text is present here but\n      // dismiss is called right away instead of waiting 3 seconds.. Not much we can\n      // do about this - at least we are testing that nothing broke all the way through\n      // clearing the notice\n      assert.strictEqual((0, _qunitHelpers.queryAll)(\".chat-notices .chat-notices__notice .mention-without-membership-notice\").length, 0, \"Notice has been cleared\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-replying-indicator-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/presence-pretender\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _presencePretender, _qunitHelpers, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  async function addUser(id, username, channelName = \"/chat-reply/1\") {\n    await (0, _presencePretender.joinChannel)(channelName, {\n      id,\n      avatar_template: \"/images/avatar.png\",\n      username\n    });\n  }\n  async function removeUser(id, channelName = \"/chat-reply/1\") {\n    await (0, _presencePretender.leaveChannel)(channelName, {\n      id\n    });\n  }\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-replying-indicator\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"not displayed when no one is replying\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatReplyingIndicator @presenceChannelName=\"/chat-reply/1\" />\n      */\n      {\n        \"id\": \"4ECVTMdo\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@presenceChannelName\\\"],[\\\"/chat-reply/1\\\"]],null]],[],false,[\\\"chat-replying-indicator\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-replying-indicator-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-replying-indicator__text\").doesNotExist();\n    });\n    (0, _qunit.test)(\"working for thread\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatReplyingIndicator @presenceChannelName=\"/chat-reply/1/thread/1\" />\n      */\n      {\n        \"id\": \"hqZ9EAqb\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@presenceChannelName\\\"],[\\\"/chat-reply/1/thread/1\\\"]],null]],[],false,[\\\"chat-replying-indicator\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-replying-indicator-test.js\",\n        \"isStrictMode\": false\n      }));\n      await addUser(1, \"sam\", \"/chat-reply/1/thread/1\");\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-replying-indicator__text\").innerText, \"sam is typing\");\n    });\n    (0, _qunit.test)(\"doesn’t leak in other indicators\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n                <div class=\"channel\"><ChatReplyingIndicator @presenceChannelName=\"/chat-reply/1\" /></div>\n                <div class=\"thread\"><ChatReplyingIndicator @presenceChannelName=\"/chat-reply/1/thread/1\" /></div>\n              \n      */\n      {\n        \"id\": \"g+1WPds1\",\n        \"block\": \"[[[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"channel\\\"],[12],[8,[39,0],null,[[\\\"@presenceChannelName\\\"],[\\\"/chat-reply/1\\\"]],null],[13],[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"thread\\\"],[12],[8,[39,0],null,[[\\\"@presenceChannelName\\\"],[\\\"/chat-reply/1/thread/1\\\"]],null],[13],[1,\\\"\\\\n        \\\"]],[],false,[\\\"chat-replying-indicator\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-replying-indicator-test.js\",\n        \"isStrictMode\": false\n      }));\n      await addUser(1, \"sam\");\n      assert.dom(\".channel .chat-replying-indicator__text\").hasText(\"sam is typing\");\n      assert.dom(\".thread .chat-replying-indicator__text\").doesNotExist();\n      await addUser(2, \"mark\", \"/chat-reply/1/thread/1\");\n      await removeUser(1);\n      assert.dom(\".channel .chat-replying-indicator__text\").doesNotExist();\n      assert.dom(\".thread .chat-replying-indicator__text\").hasText(\"mark is typing\");\n    });\n    (0, _qunit.test)(\"displays indicator when user is replying\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatReplyingIndicator @presenceChannelName=\"/chat-reply/1\" />\n      */\n      {\n        \"id\": \"4ECVTMdo\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@presenceChannelName\\\"],[\\\"/chat-reply/1\\\"]],null]],[],false,[\\\"chat-replying-indicator\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-replying-indicator-test.js\",\n        \"isStrictMode\": false\n      }));\n      await addUser(1, \"sam\");\n      assert.strictEqual((0, _qunitHelpers.query)(\".chat-replying-indicator__text\").innerText, `sam is typing`);\n    });\n    (0, _qunit.test)(\"displays indicator when 2 or 3 users are replying\", async function (assert) {\n      this.channel = _fabricators.default.channel();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatReplyingIndicator @presenceChannelName=\"/chat-reply/1\" />\n      */\n      {\n        \"id\": \"4ECVTMdo\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@presenceChannelName\\\"],[\\\"/chat-reply/1\\\"]],null]],[],false,[\\\"chat-replying-indicator\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-replying-indicator-test.js\",\n        \"isStrictMode\": false\n      }));\n      await addUser(1, \"sam\");\n      await addUser(2, \"mark\");\n      assert.dom(\".chat-replying-indicator__text\").hasText(\"sam and mark are typing\");\n    });\n    (0, _qunit.test)(\"displays indicator when 3 users are replying\", async function (assert) {\n      this.channel = _fabricators.default.channel();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatReplyingIndicator @presenceChannelName=\"/chat-reply/1\" />\n      */\n      {\n        \"id\": \"4ECVTMdo\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@presenceChannelName\\\"],[\\\"/chat-reply/1\\\"]],null]],[],false,[\\\"chat-replying-indicator\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-replying-indicator-test.js\",\n        \"isStrictMode\": false\n      }));\n      await addUser(1, \"sam\");\n      await addUser(2, \"mark\");\n      await addUser(3, \"joffrey\");\n      assert.dom(\".chat-replying-indicator__text\").hasText(\"sam, mark and joffrey are typing\");\n    });\n    (0, _qunit.test)(\"displays indicator when more than 3 users are replying\", async function (assert) {\n      this.channel = _fabricators.default.channel();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatReplyingIndicator  @presenceChannelName=\"/chat-reply/1\" />\n      */\n      {\n        \"id\": \"4ECVTMdo\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@presenceChannelName\\\"],[\\\"/chat-reply/1\\\"]],null]],[],false,[\\\"chat-replying-indicator\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-replying-indicator-test.js\",\n        \"isStrictMode\": false\n      }));\n      await addUser(1, \"sam\");\n      await addUser(2, \"mark\");\n      await addUser(3, \"joffrey\");\n      await addUser(4, \"taylor\");\n      assert.dom(\".chat-replying-indicator__text\").hasText(\"sam, mark and 2 others are typing\");\n    });\n    (0, _qunit.test)(\"filters current user from list of repliers\", async function (assert) {\n      this.channel = _fabricators.default.channel();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatReplyingIndicator  @presenceChannelName=\"/chat-reply/1\" />\n      */\n      {\n        \"id\": \"4ECVTMdo\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@presenceChannelName\\\"],[\\\"/chat-reply/1\\\"]],null]],[],false,[\\\"chat-replying-indicator\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-replying-indicator-test.js\",\n        \"isStrictMode\": false\n      }));\n      await addUser(1, \"sam\");\n      await addUser(this.currentUser.id, this.currentUser.username);\n      assert.dom(\".chat-replying-indicator__text\").hasText(\"sam is typing\");\n    });\n    (0, _qunit.test)(\"resets presence when channel changes\", async function (assert) {\n      this.set(\"presenceChannelName\", \"/chat-reply/1\");\n      await addUser(1, \"sam\");\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatReplyingIndicator @presenceChannelName={{this.presenceChannelName}} />\n      */\n      {\n        \"id\": \"CE3nYBH2\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@presenceChannelName\\\"],[[30,0,[\\\"presenceChannelName\\\"]]]],null]],[],false,[\\\"chat-replying-indicator\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-replying-indicator-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-replying-indicator__text\").hasText(\"sam is typing\");\n      this.set(\"presenceChannelName\", \"/chat-reply/2\");\n      assert.dom(\".chat-replying-indicator__text\").doesNotExist();\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-retention-reminder-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse-i18n\", \"discourse/plugins/chat/discourse/models/chat-channel\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _discourseI18n, _chatChannel, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-retention-reminder\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"display retention info\", async function (assert) {\n      this.channel = _chatChannel.default.create({\n        chatable_type: \"Category\"\n      });\n      this.currentUser.set(\"needs_channel_retention_reminder\", true);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatRetentionReminder @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"EPz6ltPI\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-retention-reminder\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-retention-reminder-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-retention-reminder\").includesText(_discourseI18n.default.t(\"chat.retention_reminders.long\", {\n        count: this.siteSettings.chat_channel_retention_days\n      }));\n    });\n    (0, _qunit.test)(\"@type=short\", async function (assert) {\n      this.channel = _chatChannel.default.create({\n        chatable_type: \"Category\"\n      });\n      this.currentUser.set(\"needs_channel_retention_reminder\", true);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatRetentionReminder @channel={{this.channel}} @type=\"short\" />\n      */\n      {\n        \"id\": \"CyYEFDvP\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\",\\\"@type\\\"],[[30,0,[\\\"channel\\\"]],\\\"short\\\"]],null]],[],false,[\\\"chat-retention-reminder\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-retention-reminder-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-retention-reminder\").includesText(_discourseI18n.default.t(\"chat.retention_reminders.short\", {\n        count: this.siteSettings.chat_channel_retention_days\n      }));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-retention-reminder-text-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse-i18n\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _discourseI18n, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-retention-reminder-text\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"when setting is set on 0\", async function (assert) {\n      this.channel = _fabricators.default.channel();\n      this.siteSettings.chat_channel_retention_days = 0;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatRetentionReminderText @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"bK6lOQ1E\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-retention-reminder-text\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-retention-reminder-text-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-retention-reminder-text\").includesText(_discourseI18n.default.t(\"chat.retention_reminders.indefinitely_long\"));\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatRetentionReminderText @channel={{this.channel}} @type=\"short\" />\n      */\n      {\n        \"id\": \"WKp9340L\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\",\\\"@type\\\"],[[30,0,[\\\"channel\\\"]],\\\"short\\\"]],null]],[],false,[\\\"chat-retention-reminder-text\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-retention-reminder-text-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-retention-reminder-text\").includesText(_discourseI18n.default.t(\"chat.retention_reminders.indefinitely_short\"));\n    });\n    (0, _qunit.test)(\"when channel is a public channel\", async function (assert) {\n      const count = 10;\n      this.channel = _fabricators.default.channel();\n      this.siteSettings.chat_channel_retention_days = count;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatRetentionReminderText @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"bK6lOQ1E\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-retention-reminder-text\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-retention-reminder-text-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-retention-reminder-text\").includesText(_discourseI18n.default.t(\"chat.retention_reminders.long\", {\n        count\n      }));\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatRetentionReminderText @channel={{this.channel}} @type=\"short\" />\n      */\n      {\n        \"id\": \"WKp9340L\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\",\\\"@type\\\"],[[30,0,[\\\"channel\\\"]],\\\"short\\\"]],null]],[],false,[\\\"chat-retention-reminder-text\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-retention-reminder-text-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-retention-reminder-text\").includesText(_discourseI18n.default.t(\"chat.retention_reminders.short\", {\n        count\n      }));\n    });\n    (0, _qunit.test)(\"when channel is a DM channel\", async function (assert) {\n      const count = 10;\n      this.channel = _fabricators.default.directMessageChannel();\n      this.siteSettings.chat_dm_retention_days = count;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatRetentionReminderText @channel={{this.channel}} />\n      */\n      {\n        \"id\": \"bK6lOQ1E\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\"],[[30,0,[\\\"channel\\\"]]]],null]],[],false,[\\\"chat-retention-reminder-text\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-retention-reminder-text-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-retention-reminder-text\").includesText(_discourseI18n.default.t(\"chat.retention_reminders.long\", {\n        count\n      }));\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatRetentionReminderText @channel={{this.channel}} @type=\"short\" />\n      */\n      {\n        \"id\": \"WKp9340L\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@channel\\\",\\\"@type\\\"],[[30,0,[\\\"channel\\\"]],\\\"short\\\"]],null]],[],false,[\\\"chat-retention-reminder-text\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-retention-reminder-text-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-retention-reminder-text\").includesText(_discourseI18n.default.t(\"chat.retention_reminders.short\", {\n        count\n      }));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-thread-header-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-thread-header\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"it safely renders title\", async function (assert) {\n      const title = \"<style>body { background: red;}</style>\";\n      this.thread = _fabricators.default.thread({\n        title\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <Chat::Thread::Header @thread={{this.thread}} @channel={{this.thread.channel}} />\n          \n      */\n      {\n        \"id\": \"YSbBrs2Q\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@thread\\\",\\\"@channel\\\"],[[30,0,[\\\"thread\\\"]],[30,0,[\\\"thread\\\",\\\"channel\\\"]]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"chat/thread/header\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-thread-header-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.ok((0, _qunitHelpers.query)(\".c-navbar__title\").innerHTML.trim().includes(\"&lt;style&gt;body { background: red;}&lt;/style&gt;\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-thread-list-item-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-thread-list-item\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"it safely renders title\", async function (assert) {\n      const title = \"<style>body { background: red;}</style>\";\n      this.thread = _fabricators.default.thread({\n        title\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <Chat::ThreadList::Item @thread={{this.thread}} />\n          \n      */\n      {\n        \"id\": \"Kr/MxAlu\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@thread\\\"],[[30,0,[\\\"thread\\\"]]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"chat/thread-list/item\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-thread-list-item-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.equal((0, _qunitHelpers.query)(\".chat-thread-list-item__title\").innerHTML.trim(), \"&lt;style&gt;body { background: red;}&lt;/style&gt;\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-thread-participants-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | <ChatThreadParticipants />\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"no participants\", async function (assert) {\n      this.thread = _fabricators.default.thread();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatThreadParticipants @thread={{this.thread}} />\n      */\n      {\n        \"id\": \"mPPdjSaI\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@thread\\\"],[[30,0,[\\\"thread\\\"]]]],null]],[],false,[\\\"chat-thread-participants\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-thread-participants-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-thread-participants\").doesNotExist();\n    });\n    (0, _qunit.test)(\"@includeOriginalMessageUser=true\", async function (assert) {\n      const originalMessageUser = _fabricators.default.user({\n        username: \"bob\"\n      });\n      this.thread = _fabricators.default.thread({\n        original_message: _fabricators.default.message({\n          user: originalMessageUser\n        }),\n        preview: _fabricators.default.threadPreview({\n          channel: this.channel,\n          participant_users: [originalMessageUser, _fabricators.default.user({\n            username: \"alice\"\n          })]\n        })\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatThreadParticipants @thread={{this.thread}} />\n      */\n      {\n        \"id\": \"mPPdjSaI\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@thread\\\"],[[30,0,[\\\"thread\\\"]]]],null]],[],false,[\\\"chat-thread-participants\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-thread-participants-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-user-avatar[data-username]\").exists({\n        count: 2\n      });\n    });\n    (0, _qunit.test)(\"@includeOriginalMessageUser=false\", async function (assert) {\n      const originalMessageUser = _fabricators.default.user({\n        username: \"bob\"\n      });\n      this.thread = _fabricators.default.thread({\n        original_message: _fabricators.default.message({\n          user: originalMessageUser\n        }),\n        preview: _fabricators.default.threadPreview({\n          channel: this.channel,\n          participant_users: [originalMessageUser, _fabricators.default.user({\n            username: \"alice\"\n          })]\n        })\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatThreadParticipants @thread={{this.thread}} @includeOriginalMessageUser={{false}} />\n      */\n      {\n        \"id\": \"O1cNg6AN\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@thread\\\",\\\"@includeOriginalMessageUser\\\"],[[30,0,[\\\"thread\\\"]],false]],null]],[],false,[\\\"chat-thread-participants\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-thread-participants-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.chat-user-avatar[data-username=\"bob\"]').doesNotExist();\n      assert.dom('.chat-user-avatar[data-username=\"alice\"]').exists();\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-upload-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  const IMAGE_FIXTURE = {\n    id: 290,\n    url: null,\n    // Nulled out to avoid actually setting the img src - avoids an HTTP request\n    original_filename: \"image.jpg\",\n    filesize: 172214,\n    width: 1024,\n    height: 768,\n    thumbnail_width: 666,\n    thumbnail_height: 500,\n    extension: \"jpeg\",\n    short_url: \"upload://mnCnqY5tunCFw2qMgtPnu1mu1C9.jpeg\",\n    short_path: \"/uploads/short-url/mnCnqY5tunCFw2qMgtPnu1mu1C9.jpeg\",\n    retain_hours: null,\n    human_filesize: \"168 KB\",\n    dominant_color: \"788370\" // rgb(120, 131, 112)\n  };\n  const VIDEO_FIXTURE = {\n    id: 290,\n    url: null,\n    // Nulled out to avoid actually setting the src - avoids an HTTP request\n    original_filename: \"video.mp4\",\n    filesize: 172214,\n    width: 1024,\n    height: 768,\n    thumbnail_width: 666,\n    thumbnail_height: 500,\n    extension: \"mp4\",\n    short_url: \"upload://mnCnqY5tunCFw2qMgtPnu1mu1C9.mp4\",\n    short_path: \"/uploads/short-url/mnCnqY5tunCFw2qMgtPnu1mu1C9.mp4\",\n    retain_hours: null,\n    human_filesize: \"168 KB\"\n  };\n  const AUDIO_FIXTURE = {\n    id: 290,\n    url: null,\n    // Nulled out to avoid actually setting the src - avoids an HTTP request\n    original_filename: \"song.mp3\",\n    filesize: 172214,\n    width: 1024,\n    height: 768,\n    thumbnail_width: 666,\n    thumbnail_height: 500,\n    extension: \"mp3\",\n    short_url: \"upload://mnCnqY5tunCFw2qMgtPnu1mu1C9.mp3\",\n    short_path: \"/uploads/short-url/mnCnqY5tunCFw2qMgtPnu1mu1C9.mp3\",\n    retain_hours: null,\n    human_filesize: \"168 KB\"\n  };\n  const TXT_FIXTURE = {\n    id: 290,\n    url: \"https://example.com/file.txt\",\n    original_filename: \"file.txt\",\n    filesize: 172214,\n    extension: \"txt\",\n    short_url: \"upload://mnCnqY5tunCFw2qMgtPnu1mu1C9.jpeg\",\n    short_path: \"/uploads/short-url/mnCnqY5tunCFw2qMgtPnu1mu1C9.jpeg\",\n    retain_hours: null,\n    human_filesize: \"168 KB\"\n  };\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-upload\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"with an image\", async function (assert) {\n      this.set(\"upload\", IMAGE_FIXTURE);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUpload @upload={{this.upload}} />\n      */\n      {\n        \"id\": \"bRuNXoH4\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@upload\\\"],[[30,0,[\\\"upload\\\"]]]],null]],[],false,[\\\"chat-upload\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-upload-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\"img.chat-img-upload\"), \"displays as an image\");\n      const image = (0, _qunitHelpers.query)(\"img.chat-img-upload\");\n      assert.strictEqual(image.loading, \"lazy\", \"is lazy loading\");\n      assert.strictEqual(image.style.backgroundColor, \"rgb(120, 131, 112)\", \"sets background to dominant color\");\n      image.dispatchEvent(new Event(\"load\")); // Fake that the image has loaded\n      await (0, _testHelpers.settled)();\n      assert.strictEqual(image.style.backgroundColor, \"\", \"removes the background color once the image has loaded\");\n    });\n    (0, _qunit.test)(\"with a video\", async function (assert) {\n      this.set(\"upload\", VIDEO_FIXTURE);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUpload @upload={{this.upload}} />\n      */\n      {\n        \"id\": \"bRuNXoH4\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@upload\\\"],[[30,0,[\\\"upload\\\"]]]],null]],[],false,[\\\"chat-upload\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-upload-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\"video.chat-video-upload\"), \"displays as an video\");\n      const video = (0, _qunitHelpers.query)(\"video.chat-video-upload\");\n      assert.true(video.hasAttribute(\"controls\"), \"has video controls\");\n      assert.strictEqual(video.getAttribute(\"preload\"), \"metadata\", \"video has correct preload settings\");\n    });\n    (0, _qunit.test)(\"with a audio\", async function (assert) {\n      this.set(\"upload\", AUDIO_FIXTURE);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUpload @upload={{this.upload}} />\n      */\n      {\n        \"id\": \"bRuNXoH4\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@upload\\\"],[[30,0,[\\\"upload\\\"]]]],null]],[],false,[\\\"chat-upload\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-upload-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\"audio.chat-audio-upload\"), \"displays as an audio\");\n      const audio = (0, _qunitHelpers.query)(\"audio.chat-audio-upload\");\n      assert.true(audio.hasAttribute(\"controls\"), \"has audio controls\");\n      assert.strictEqual(audio.getAttribute(\"preload\"), \"metadata\", \"audio has correct preload settings\");\n    });\n    (0, _qunit.test)(\"non image upload\", async function (assert) {\n      this.set(\"upload\", TXT_FIXTURE);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUpload @upload={{this.upload}} />\n      */\n      {\n        \"id\": \"bRuNXoH4\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@upload\\\"],[[30,0,[\\\"upload\\\"]]]],null]],[],false,[\\\"chat-upload\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-upload-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\"a.chat-other-upload\"), \"displays as a link\");\n      const link = (0, _qunitHelpers.query)(\"a.chat-other-upload\");\n      assert.strictEqual(link.href, TXT_FIXTURE.url, \"has the correct URL\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-user-avatar-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  function containerSelector(user, options = {}) {\n    let onlineSelector = \":not(.is-online)\";\n    if (options.online) {\n      onlineSelector = \".is-online\";\n    }\n    return `.chat-user-avatar${onlineSelector} .chat-user-avatar__container[data-user-card=${user.username}] .avatar[title=${user.username}]`;\n  }\n  (0, _qunit.module)(\"Discourse Chat | Component | <ChatUserAvatar />\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"when user is not online\", async function (assert) {\n      this.user = _fabricators.default.user();\n      this.chat = {\n        presenceChannel: {\n          users: []\n        }\n      };\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUserAvatar @chat={{this.chat}} @user={{this.user}} />\n      */\n      {\n        \"id\": \"Sj1WLKZw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@chat\\\",\\\"@user\\\"],[[30,0,[\\\"chat\\\"]],[30,0,[\\\"user\\\"]]]],null]],[],false,[\\\"chat-user-avatar\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-avatar-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(containerSelector(this.user, {\n        online: false\n      })).exists();\n    });\n    (0, _qunit.test)(\"user is online\", async function (assert) {\n      this.user = _fabricators.default.user();\n      this.chat = {\n        presenceChannel: {\n          users: [{\n            id: this.user.id\n          }]\n        }\n      };\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUserAvatar @chat={{this.chat}} @user={{this.user}} />\n      */\n      {\n        \"id\": \"Sj1WLKZw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@chat\\\",\\\"@user\\\"],[[30,0,[\\\"chat\\\"]],[30,0,[\\\"user\\\"]]]],null]],[],false,[\\\"chat-user-avatar\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-avatar-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(containerSelector(this.user, {\n        online: true\n      })).exists();\n    });\n    (0, _qunit.test)(\"@showPresence=false\", async function (assert) {\n      this.user = _fabricators.default.user();\n      this.chat = {\n        presenceChannel: {\n          users: [{\n            id: this.user.id\n          }]\n        }\n      };\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUserAvatar @showPresence={{false}} @chat={{this.chat}} @user={{this.user}} />\n      */\n      {\n        \"id\": \"NFvj6rCM\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@showPresence\\\",\\\"@chat\\\",\\\"@user\\\"],[false,[30,0,[\\\"chat\\\"]],[30,0,[\\\"user\\\"]]]],null]],[],false,[\\\"chat-user-avatar\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-avatar-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(containerSelector(this.user, {\n        online: false\n      })).exists();\n    });\n    (0, _qunit.test)(\"@interactive=true\", async function (assert) {\n      this.user = _fabricators.default.user();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUserAvatar @interactive={{false}}  @user={{this.user}} />\n      */\n      {\n        \"id\": \"6l4Q9i3e\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@interactive\\\",\\\"@user\\\"],[false,[30,0,[\\\"user\\\"]]]],null]],[],false,[\\\"chat-user-avatar\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-avatar-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".clickable\").doesNotExist();\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-user-card-button-test\", [\"@ember/test-helpers\", \"qunit\", \"sinon\", \"discourse/tests/helpers/component-test\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"ember-this-fallback/deprecations-helper\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _sinon, _componentTest, _fabricators, _deprecationsHelper, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | <Chat::UserCardButton />\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"when current user can send direct messages\", async function (assert) {\n      _sinon.default.stub(this.owner.lookup(\"service:chat\"), \"userCanDirectMessage\").value(true);\n      this.user = _fabricators.default.user();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::UserCardButton @user={{user}} />\n      */\n      {\n        \"id\": \"raOiWzYi\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@user\\\"],[[30,0,[\\\"user\\\"]]]],null],[1,[28,[32,0],[\\\"[[\\\\\\\"The `user` property path was used in the `/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-card-button-test.js` template without using `this`. This fallback behavior has been deprecated, all properties must be looked up on `this` when used in the template: {{this.user}}\\\\\\\",false,{\\\\\\\"id\\\\\\\":\\\\\\\"ember-this-fallback.this-property-fallback\\\\\\\",\\\\\\\"until\\\\\\\":\\\\\\\"n/a\\\\\\\",\\\\\\\"for\\\\\\\":\\\\\\\"ember-this-fallback\\\\\\\",\\\\\\\"url\\\\\\\":\\\\\\\"https://deprecations.emberjs.com/v3.x#toc_this-property-fallback\\\\\\\",\\\\\\\"since\\\\\\\":{\\\\\\\"available\\\\\\\":\\\\\\\"0.2.0\\\\\\\"}}]]\\\"],null]]],[],false,[\\\"chat/user-card-button\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-card-button-test.js\",\n        \"scope\": () => [_deprecationsHelper.default],\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-user-card-btn\").exists(\"it shows the chat button\");\n    });\n    (0, _qunit.test)(\"when current user can’t send direct messages\", async function (assert) {\n      _sinon.default.stub(this.owner.lookup(\"service:chat\"), \"userCanDirectMessage\").value(false);\n      this.user = _fabricators.default.user();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::UserCardButton @user={{user}} />\n      */\n      {\n        \"id\": \"raOiWzYi\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@user\\\"],[[30,0,[\\\"user\\\"]]]],null],[1,[28,[32,0],[\\\"[[\\\\\\\"The `user` property path was used in the `/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-card-button-test.js` template without using `this`. This fallback behavior has been deprecated, all properties must be looked up on `this` when used in the template: {{this.user}}\\\\\\\",false,{\\\\\\\"id\\\\\\\":\\\\\\\"ember-this-fallback.this-property-fallback\\\\\\\",\\\\\\\"until\\\\\\\":\\\\\\\"n/a\\\\\\\",\\\\\\\"for\\\\\\\":\\\\\\\"ember-this-fallback\\\\\\\",\\\\\\\"url\\\\\\\":\\\\\\\"https://deprecations.emberjs.com/v3.x#toc_this-property-fallback\\\\\\\",\\\\\\\"since\\\\\\\":{\\\\\\\"available\\\\\\\":\\\\\\\"0.2.0\\\\\\\"}}]]\\\"],null]]],[],false,[\\\"chat/user-card-button\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-card-button-test.js\",\n        \"scope\": () => [_deprecationsHelper.default],\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-user-card-btn\").doesNotExist(\"it doesn’t show the chat button\");\n    });\n    (0, _qunit.test)(\"when displayed user is suspended\", async function (assert) {\n      _sinon.default.stub(this.owner.lookup(\"service:chat\"), \"userCanDirectMessage\").value(true);\n      this.user = _fabricators.default.user({\n        suspended_till: moment().add(1, \"year\").toDate()\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Chat::UserCardButton @user={{user}}/>\n      */\n      {\n        \"id\": \"raOiWzYi\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@user\\\"],[[30,0,[\\\"user\\\"]]]],null],[1,[28,[32,0],[\\\"[[\\\\\\\"The `user` property path was used in the `/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-card-button-test.js` template without using `this`. This fallback behavior has been deprecated, all properties must be looked up on `this` when used in the template: {{this.user}}\\\\\\\",false,{\\\\\\\"id\\\\\\\":\\\\\\\"ember-this-fallback.this-property-fallback\\\\\\\",\\\\\\\"until\\\\\\\":\\\\\\\"n/a\\\\\\\",\\\\\\\"for\\\\\\\":\\\\\\\"ember-this-fallback\\\\\\\",\\\\\\\"url\\\\\\\":\\\\\\\"https://deprecations.emberjs.com/v3.x#toc_this-property-fallback\\\\\\\",\\\\\\\"since\\\\\\\":{\\\\\\\"available\\\\\\\":\\\\\\\"0.2.0\\\\\\\"}}]]\\\"],null]]],[],false,[\\\"chat/user-card-button\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-card-button-test.js\",\n        \"scope\": () => [_deprecationsHelper.default],\n        \"isStrictMode\": false\n      }));\n      assert.dom(\".chat-user-card-btn\").doesNotExist(\"it doesn’t show the chat button\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-user-display-name-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  function displayName() {\n    return (0, _qunitHelpers.query)(\".chat-user-display-name\").innerText.trim();\n  }\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-user-display-name | prioritize username in UX\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"username and no name\", async function (assert) {\n      this.siteSettings.prioritize_username_in_ux = true;\n      this.set(\"user\", {\n        username: \"bob\",\n        name: null\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUserDisplayName @user={{this.user}} />\n      */\n      {\n        \"id\": \"A9eSdKlw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@user\\\"],[[30,0,[\\\"user\\\"]]]],null]],[],false,[\\\"chat-user-display-name\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-display-name-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual(displayName(), \"bob\");\n    });\n    (0, _qunit.test)(\"username and name\", async function (assert) {\n      this.siteSettings.prioritize_username_in_ux = true;\n      this.set(\"user\", {\n        username: \"bob\",\n        name: \"Bobcat\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUserDisplayName @user={{this.user}} />\n      */\n      {\n        \"id\": \"A9eSdKlw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@user\\\"],[[30,0,[\\\"user\\\"]]]],null]],[],false,[\\\"chat-user-display-name\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-display-name-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual(displayName(), \"bob — Bobcat\");\n    });\n  });\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-user-display-name | prioritize name in UX\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"no name\", async function (assert) {\n      this.siteSettings.prioritize_username_in_ux = false;\n      this.set(\"user\", {\n        username: \"bob\",\n        name: null\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUserDisplayName @user={{this.user}} />\n      */\n      {\n        \"id\": \"A9eSdKlw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@user\\\"],[[30,0,[\\\"user\\\"]]]],null]],[],false,[\\\"chat-user-display-name\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-display-name-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual(displayName(), \"bob\");\n    });\n    (0, _qunit.test)(\"name and username\", async function (assert) {\n      this.siteSettings.prioritize_username_in_ux = false;\n      this.set(\"user\", {\n        username: \"bob\",\n        name: \"Bobcat\"\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUserDisplayName @user={{this.user}} />\n      */\n      {\n        \"id\": \"A9eSdKlw\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@user\\\"],[[30,0,[\\\"user\\\"]]]],null]],[],false,[\\\"chat-user-display-name\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-display-name-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual(displayName(), \"Bobcat — bob\");\n    });\n  });\n});","define(\"discourse/plugins/chat/components/chat-user-info-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | chat-user-info\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"avatar and name\", async function (assert) {\n      this.set(\"user\", this.currentUser);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <ChatUserInfo @user={{this.user}} />\n      */\n      {\n        \"id\": \"WZjk3swb\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@user\\\"],[[30,0,[\\\"user\\\"]]]],null]],[],false,[\\\"chat-user-info\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/chat-user-info-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.dom().containsText(this.user.username);\n      assert.dom().containsText(this.user.name);\n    });\n  });\n});","define(\"discourse/plugins/chat/components/collapser-test\", [\"@ember/template\", \"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_template, _testHelpers, _qunit, _componentTest, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | collapser\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"renders header\", async function (assert) {\n      this.set(\"header\", (0, _template.htmlSafe)(`<div class=\"cat\">tomtom</div>`));\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <Collapser @header={{this.header}} />\n      */\n      {\n        \"id\": \"O+1SK+ah\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@header\\\"],[[30,0,[\\\"header\\\"]]]],null]],[],false,[\\\"collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".cat\"));\n    });\n    (0, _qunit.test)(\"collapses and expands yielded body\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <Collapser>\n              <div class=\"cat\">body text</div>\n            </Collapser>\n          \n      */\n      {\n        \"id\": \"8SQlRYCI\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,null,[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,0],[14,0,\\\"cat\\\"],[12],[1,\\\"body text\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"collapser\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/collapser-test.js\",\n        \"isStrictMode\": false\n      }));\n      const openButton = \".chat-message-collapser-closed\";\n      const closeButton = \".chat-message-collapser-opened\";\n      const body = \".cat\";\n      assert.true((0, _qunitHelpers.visible)(body));\n      await (0, _testHelpers.click)(closeButton);\n      assert.false((0, _qunitHelpers.visible)(body));\n      await (0, _testHelpers.click)(openButton);\n      assert.true((0, _qunitHelpers.visible)(body));\n    });\n  });\n});","define(\"discourse/plugins/chat/components/dc-filter-input-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Component | dc-filter-input\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"Left icon\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <DcFilterInput @icons={{hash left=\"bell\"}} />\n      */\n      {\n        \"id\": \"vPSPriS6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@icons\\\"],[[28,[37,1],null,[[\\\"left\\\"],[\\\"bell\\\"]]]]],null]],[],false,[\\\"dc-filter-input\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/dc-filter-input-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".d-icon-bell.-left\"));\n    });\n    (0, _qunit.test)(\"Right icon\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <DcFilterInput @icons={{hash right=\"bell\"}} />\n      */\n      {\n        \"id\": \"biJcUzF/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@icons\\\"],[[28,[37,1],null,[[\\\"right\\\"],[\\\"bell\\\"]]]]],null]],[],false,[\\\"dc-filter-input\\\",\\\"hash\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/dc-filter-input-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".d-icon-bell.-right\"));\n    });\n    (0, _qunit.test)(\"containerClass argument\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <DcFilterInput @containerClass=\"foo\" />\n      */\n      {\n        \"id\": \"T6yfAvyM\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@containerClass\\\"],[\\\"foo\\\"]],null]],[],false,[\\\"dc-filter-input\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/dc-filter-input-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)(\".dc-filter-input-container.foo\"));\n    });\n    (0, _qunit.test)(\"Html attributes\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <DcFilterInput data-foo=\"1\" placeholder=\"bar\" />\n      */\n      {\n        \"id\": \"Q9WD/L0i\",\n        \"block\": \"[[[8,[39,0],[[24,\\\"data-foo\\\",\\\"1\\\"],[24,\\\"placeholder\\\",\\\"bar\\\"]],null,null]],[],false,[\\\"dc-filter-input\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/dc-filter-input-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.true((0, _qunitHelpers.exists)('.dc-filter-input[data-foo=\"1\"]'));\n      assert.true((0, _qunitHelpers.exists)('.dc-filter-input[placeholder=\"bar\"]'));\n    });\n    (0, _qunit.test)(\"Filter action\", async function (assert) {\n      this.set(\"value\", null);\n      this.set(\"action\", event => {\n        this.set(\"value\", event.target.value);\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <DcFilterInput @filterAction={{this.action}} />\n      */\n      {\n        \"id\": \"yt46/o+8\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@filterAction\\\"],[[30,0,[\\\"action\\\"]]]],null]],[],false,[\\\"dc-filter-input\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/dc-filter-input-test.js\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.fillIn)(\".dc-filter-input\", \"foo\");\n      assert.strictEqual(this.value, \"foo\");\n    });\n    (0, _qunit.test)(\"Focused state\", async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <DcFilterInput @filterAction={{this.action}} />\n      */\n      {\n        \"id\": \"yt46/o+8\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@filterAction\\\"],[[30,0,[\\\"action\\\"]]]],null]],[],false,[\\\"dc-filter-input\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/components/dc-filter-input-test.js\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.triggerEvent)(\".dc-filter-input\", \"focusin\");\n      assert.true((0, _qunitHelpers.exists)(\".dc-filter-input-container.is-focused\"));\n      await (0, _testHelpers.triggerEvent)(\".dc-filter-input\", \"focusout\");\n      assert.false((0, _qunitHelpers.exists)(\".dc-filter-input-container.is-focused\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/helpers/chat-default-pretender\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = applyDefaultHandlers;\n  function applyDefaultHandlers(helpers) {\n    this.post(\"/chat/api/channels/:channel_id/drafts\", () => helpers.response({}));\n    this.post(\"/chat/api/channels/:channel_id/threads/:thread_id/drafts\", () => helpers.response({}));\n  }\n});","define(\"discourse/plugins/chat/helpers/chat-pretenders\", [\"exports\", \"discourse/models/user\", \"discourse-common/lib/object\", \"discourse/plugins/chat/chat-fixtures\"], function (_exports, _user, _object, _chatFixtures) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.baseChatPretenders = baseChatPretenders;\n  _exports.chatChannelPretender = chatChannelPretender;\n  _exports.directMessageChannelPretender = directMessageChannelPretender;\n  function baseChatPretenders(server, helper) {\n    server.get(\"/chat/:chatChannelId/messages.json\", () => helper.response((0, _chatFixtures.generateChatView)(_user.default.current())));\n    server.post(\"/chat/:chatChannelId.json\", () => {\n      return helper.response({\n        success: \"OK\"\n      });\n    });\n    server.get(\"/notifications\", () => {\n      return helper.response({\n        notifications: [{\n          id: 42,\n          user_id: 1,\n          notification_type: 29,\n          read: false,\n          high_priority: true,\n          created_at: \"2021-01-01 12:00:00 UTC\",\n          fancy_title: \"First notification\",\n          post_number: null,\n          topic_id: null,\n          slug: null,\n          data: {\n            chat_message_id: 174,\n            chat_channel_id: 9,\n            chat_channel_title: \"Site\",\n            mentioned_by_username: \"hawk\"\n          }\n        }, {\n          id: 43,\n          user_id: 1,\n          notification_type: 29,\n          read: false,\n          high_priority: true,\n          created_at: \"2021-01-01 12:00:00 UTC\",\n          fancy_title: \"Second notification\",\n          post_number: null,\n          topic_id: null,\n          slug: null,\n          data: {\n            identifier: \"engineers\",\n            is_group: true,\n            chat_message_id: 174,\n            chat_channel_id: 9,\n            chat_channel_title: \"Site\",\n            mentioned_by_username: \"hawk\"\n          }\n        }, {\n          id: 44,\n          user_id: 1,\n          notification_type: 29,\n          read: false,\n          high_priority: true,\n          created_at: \"2021-01-01 12:00:00 UTC\",\n          fancy_title: \"Third notification\",\n          post_number: null,\n          topic_id: null,\n          slug: null,\n          data: {\n            identifier: \"all\",\n            chat_message_id: 174,\n            chat_channel_id: 9,\n            chat_channel_title: \"Site\",\n            mentioned_by_username: \"hawk\"\n          }\n        }, {\n          id: 45,\n          user_id: 1,\n          notification_type: 31,\n          read: false,\n          high_priority: true,\n          created_at: \"2021-01-01 12:00:00 UTC\",\n          fancy_title: \"Fourth notification\",\n          post_number: null,\n          topic_id: null,\n          slug: null,\n          data: {\n            message: \"chat.invitation_notification\",\n            chat_message_id: 174,\n            chat_channel_id: 9,\n            chat_channel_title: \"Site\",\n            invited_by_username: \"hawk\"\n          }\n        }, {\n          id: 46,\n          user_id: 1,\n          notification_type: 29,\n          read: false,\n          high_priority: true,\n          created_at: \"2021-01-01 12:00:00 UTC\",\n          fancy_title: \"Fifth notification\",\n          post_number: null,\n          topic_id: null,\n          slug: null,\n          data: {\n            chat_message_id: 174,\n            chat_channel_id: 9,\n            chat_channel_title: \"Site\",\n            is_direct_message_channel: true,\n            mentioned_by_username: \"hawk\"\n          }\n        }],\n        seen_notification_id: null\n      });\n    });\n    server.get(\"/chat/lookup/:messageId.json\", () => helper.response((0, _chatFixtures.generateChatView)(_user.default.current())));\n    server.post(\"/uploads/lookup-urls\", () => {\n      return helper.response([]);\n    });\n    server.get(\"/chat/api/category-chatables/:categoryId/permissions.json\", () => helper.response({\n      allowed_groups: [\"@everyone\"],\n      private: false\n    }));\n  }\n  function directMessageChannelPretender(server, helper, opts = {\n    unread_count: 0,\n    muted: false\n  }) {\n    let copy = (0, _object.cloneJSON)(_chatFixtures.directMessageChannels[0]);\n    copy.chat_channel.currentUserMembership.muted = opts.muted;\n    server.get(\"/chat/chat_channels/75.json\", () => helper.response(copy));\n  }\n  function chatChannelPretender(server, helper, changes = []) {\n    // changes is [{ id: X, unread_count: Y, muted: true}]\n    let copy = (0, _object.cloneJSON)(_chatFixtures.chatChannels);\n    changes.forEach(change => {\n      let found;\n      found = copy.public_channels.find(c => c.id === change.id);\n      if (found) {\n        found.currentUserMembership.muted = change.muted;\n      }\n      if (!found) {\n        found = copy.direct_message_channels.find(c => c.id === change.id);\n        if (found) {\n          found.currentUserMembership.muted = change.muted;\n        }\n      }\n    });\n    server.get(\"/chat/chat_channels.json\", () => helper.response(copy));\n  }\n});","define(\"discourse/plugins/chat/integration/components/user-menu/chat-notifications-list-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/create-pretender\", \"discourse/tests/helpers/qunit-helpers\", \"discourse-i18n\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _createPretender, _qunitHelpers, _discourseI18n, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Integration | Component | user-menu | chat-notifications-list\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    hooks.beforeEach(() => {\n      _createPretender.default.get(\"/notifications\", () => {\n        return (0, _createPretender.response)({\n          notifications: []\n        });\n      });\n    });\n    const template = (0, _templateFactory.createTemplateFactory)(\n    /*\n      <UserMenu::ChatNotificationsList/>\n    */\n    {\n      \"id\": \"uMkPEaHK\",\n      \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"user-menu/chat-notifications-list\\\"]]\",\n      \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/integration/components/user-menu/chat-notifications-list-test.js\",\n      \"isStrictMode\": false\n    });\n    (0, _qunit.test)(\"empty state when there are no notifications\", async function (assert) {\n      await (0, _testHelpers.render)(template);\n      assert.true((0, _qunitHelpers.exists)(\".empty-state .empty-state-body\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\".empty-state .empty-state-title\").textContent.trim(), _discourseI18n.default.t(\"user_menu.no_chat_notifications_title\"));\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/helpers/format-chat-date-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _qunitHelpers, _fabricators, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Unit | Helpers | format-chat-date\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"link to chat message\", async function (assert) {\n      const channel = _fabricators.default.channel();\n      this.message = _fabricators.default.message({\n        channel\n      });\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        {{format-chat-date this.message}}\n      */\n      {\n        \"id\": \"m4M1itgb\",\n        \"block\": \"[[[1,[28,[35,0],[[30,0,[\\\"message\\\"]]],null]]],[],false,[\\\"format-chat-date\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/unit/helpers/format-chat-date-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.equal((0, _qunitHelpers.query)(\".chat-time\").getAttribute(\"href\"), `/chat/c/-/${channel.id}/${this.message.id}`);\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/helpers/tonable-emoji-title-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/component-test\", \"@ember/template-factory\"], function (_testHelpers, _qunit, _componentTest, _templateFactory) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Unit | Helpers | tonable-emoji-title\", function (hooks) {\n    (0, _componentTest.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"When emoji is not tonable\", async function (assert) {\n      this.set(\"emoji\", {\n        name: \"foo\",\n        tonable: false\n      });\n      this.set(\"diversity\", 1);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        {{tonable-emoji-title this.emoji this.diversity}}\n      */\n      {\n        \"id\": \"8TuLZ/PG\",\n        \"block\": \"[[[1,[28,[35,0],[[30,0,[\\\"emoji\\\"]],[30,0,[\\\"diversity\\\"]]],null]]],[],false,[\\\"tonable-emoji-title\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/unit/helpers/tonable-emoji-title-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.equal(document.querySelector(\"#ember-testing\").innerText.trim(), \":foo:\");\n    });\n    (0, _qunit.test)(\"When emoji is tonable and diversity is 1\", async function (assert) {\n      this.set(\"emoji\", {\n        name: \"foo\",\n        tonable: true\n      });\n      this.set(\"diversity\", 1);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        {{tonable-emoji-title this.emoji this.diversity}}\n      */\n      {\n        \"id\": \"8TuLZ/PG\",\n        \"block\": \"[[[1,[28,[35,0],[[30,0,[\\\"emoji\\\"]],[30,0,[\\\"diversity\\\"]]],null]]],[],false,[\\\"tonable-emoji-title\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/unit/helpers/tonable-emoji-title-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.equal(document.querySelector(\"#ember-testing\").innerText.trim(), \":foo:\");\n    });\n    (0, _qunit.test)(\"When emoji is tonable and diversity is greater than 1\", async function (assert) {\n      this.set(\"emoji\", {\n        name: \"foo\",\n        tonable: true\n      });\n      this.set(\"diversity\", 2);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        {{tonable-emoji-title this.emoji this.diversity}}\n      */\n      {\n        \"id\": \"8TuLZ/PG\",\n        \"block\": \"[[[1,[28,[35,0],[[30,0,[\\\"emoji\\\"]],[30,0,[\\\"diversity\\\"]]],null]]],[],false,[\\\"tonable-emoji-title\\\"]]\",\n        \"moduleName\": \"/Users/laylaelwakhi/discourse/app/assets/javascripts/discourse/discourse/plugins/chat/unit/helpers/tonable-emoji-title-test.js\",\n        \"isStrictMode\": false\n      }));\n      assert.equal(document.querySelector(\"#ember-testing\").innerText.trim(), \":foo:t2:\");\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/lib/chat-composer-buttons-test\", [\"qunit\", \"discourse/plugins/chat/discourse/lib/chat-composer-buttons\"], function (_qunit, _chatComposerButtons) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Unit | chat-composer-buttons\", function (hooks) {\n    hooks.beforeEach(function () {\n      (0, _chatComposerButtons.registerChatComposerButton)({\n        id: \"foo\",\n        icon: \"times\",\n        dependentKeys: [\"test\"]\n      });\n      (0, _chatComposerButtons.registerChatComposerButton)({\n        id: \"bar\",\n        translatedLabel() {\n          return this.baz;\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      (0, _chatComposerButtons.clearChatComposerButtons)();\n    });\n    (0, _qunit.test)(\"chatComposerButtons\", function (assert) {\n      const button = (0, _chatComposerButtons.chatComposerButtons)({\n        baz: \"fooz\"\n      }, \"inline\")[1];\n      assert.equal(button.id, \"bar\");\n      assert.equal(button.label, \"fooz\");\n    });\n    (0, _qunit.test)(\"chatComposerButtonsDependentKeys\", function (assert) {\n      assert.deepEqual((0, _chatComposerButtons.chatComposerButtonsDependentKeys)(), [\"test\"]);\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/lib/chat-emoji-reaction-store-test\", [\"@ember/application\", \"ember-qunit\", \"qunit\"], function (_application, _emberQunit, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Unit | chat-emoji-reaction-store\", function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      this.siteSettings = (0, _application.getOwner)(this).lookup(\"service:site-settings\");\n      this.chatEmojiReactionStore = (0, _application.getOwner)(this).lookup(\"service:chat-emoji-reaction-store\");\n      this.chatEmojiReactionStore.siteSettings = this.siteSettings;\n      this.chatEmojiReactionStore.reset();\n    });\n    hooks.afterEach(function () {\n      this.chatEmojiReactionStore.reset();\n    });\n    (0, _qunit.test)(\"defaults\", function (assert) {\n      assert.deepEqual(this.chatEmojiReactionStore.favorites, this.siteSettings.default_emoji_reactions.split(\"|\").filter(val => val));\n    });\n    (0, _qunit.test)(\"diversity\", function (assert) {\n      assert.strictEqual(this.chatEmojiReactionStore.diversity, 1);\n      this.chatEmojiReactionStore.diversity = 2;\n      assert.strictEqual(this.chatEmojiReactionStore.diversity, 2);\n    });\n    (0, _qunit.test)(\"#favorites with defaults\", function (assert) {\n      this.siteSettings.default_emoji_reactions = \"smile|heart|tada\";\n      assert.deepEqual(this.chatEmojiReactionStore.favorites, [\"smile\", \"heart\", \"tada\"]);\n    });\n    (0, _qunit.test)(\"#favorites\", function (assert) {\n      this.chatEmojiReactionStore.storedFavorites = [\"grinning\"];\n      assert.deepEqual(this.chatEmojiReactionStore.favorites, [\"grinning\"]);\n    });\n    (0, _qunit.test)(\"#favorites when tracking multiple times the same emoji\", function (assert) {\n      this.chatEmojiReactionStore.storedFavorites = [\"grinning\", \"yum\", \"not_yum\", \"yum\"];\n      assert.deepEqual(this.chatEmojiReactionStore.favorites, [\"yum\", \"grinning\", \"not_yum\"], \"it favors count over order\");\n    });\n    (0, _qunit.test)(\"#favorites when reaching displayed limit\", function (assert) {\n      this.chatEmojiReactionStore.storedFavorites = [];\n      [...Array(this.chatEmojiReactionStore.MAX_TRACKED_EMOJIS)].forEach((_, index) => {\n        this.chatEmojiReactionStore.track(\"yum\" + index);\n      });\n      this.chatEmojiReactionStore.track(\"grinning\");\n      assert.strictEqual(this.chatEmojiReactionStore.favorites.length, this.chatEmojiReactionStore.MAX_DISPLAYED_EMOJIS, \"it enforces the max length\");\n    });\n    (0, _qunit.test)(\"#storedFavorites\", function (assert) {\n      this.chatEmojiReactionStore.storedFavorites = [];\n      this.chatEmojiReactionStore.track(\"yum\");\n      assert.deepEqual(this.chatEmojiReactionStore.storedFavorites, [\"yum\"].concat(this.siteSettings.default_emoji_reactions.split(\"|\")));\n    });\n    (0, _qunit.test)(\"#storedFavorites when tracking different emojis\", function (assert) {\n      this.chatEmojiReactionStore.storedFavorites = [];\n      this.chatEmojiReactionStore.track(\"yum\");\n      this.chatEmojiReactionStore.track(\"not_yum\");\n      this.chatEmojiReactionStore.track(\"yum\");\n      this.chatEmojiReactionStore.track(\"grinning\");\n      assert.deepEqual(this.chatEmojiReactionStore.storedFavorites, [\"grinning\", \"yum\", \"not_yum\", \"yum\"].concat(this.siteSettings.default_emoji_reactions.split(\"|\")), \"it ensures last in is first\");\n    });\n    (0, _qunit.test)(\"#storedFavorites when tracking an emoji after reaching the limit\", function (assert) {\n      this.chatEmojiReactionStore.storedFavorites = [];\n      [...Array(this.chatEmojiReactionStore.MAX_TRACKED_EMOJIS)].forEach(() => {\n        this.chatEmojiReactionStore.track(\"yum\");\n      });\n      this.chatEmojiReactionStore.track(\"grinning\");\n      assert.strictEqual(this.chatEmojiReactionStore.storedFavorites.length, this.chatEmojiReactionStore.MAX_TRACKED_EMOJIS, \"it enforces the max length\");\n      assert.strictEqual(this.chatEmojiReactionStore.storedFavorites.firstObject, \"grinning\", \"it correctly stores the last tracked emoji\");\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/lib/get-reaction-text-test\", [\"qunit\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"discourse/plugins/chat/discourse/lib/get-reaction-text\"], function (_qunit, _fabricators, _getReactionText) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Unit | get-reaction-text\", function () {\n    (0, _qunit.test)(\"no reaction \", function (assert) {\n      const reaction = _fabricators.default.reaction({\n        count: 0,\n        users: []\n      });\n      const currentUser = _fabricators.default.user();\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, currentUser), undefined);\n    });\n    (0, _qunit.test)(\"current user reacted - one reaction\", function (assert) {\n      const currentUser = _fabricators.default.user();\n      const reaction = _fabricators.default.reaction({\n        count: 1,\n        users: [currentUser],\n        reacted: true\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, currentUser), \"<span>You reacted with </span>:heart:\");\n    });\n    (0, _qunit.test)(\"current user reacted - two reactions\", function (assert) {\n      const currentUser = _fabricators.default.user();\n      const secondUser = _fabricators.default.user({\n        username: \"martin\"\n      });\n      const reaction = _fabricators.default.reaction({\n        count: 2,\n        users: [currentUser, secondUser],\n        reacted: true\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, currentUser), \"<span>You and martin reacted with </span>:heart:\");\n    });\n    (0, _qunit.test)(\"current user reacted - more than display limit reactions\", function (assert) {\n      const currentUser = _fabricators.default.user();\n      const otherUsers = Array.from(Array(_getReactionText.MAX_DISPLAYED_USERNAMES + 1)).map((_, i) => _fabricators.default.user({\n        username: \"user\" + i\n      }));\n      const reaction = _fabricators.default.reaction({\n        count: [currentUser].concat(otherUsers).length,\n        users: [currentUser].concat(otherUsers),\n        reacted: true\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, currentUser), \"<span>You, user0, user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, user11, user12, user13, user14 and 1 other reacted with </span>:heart:\");\n    });\n    (0, _qunit.test)(\"current user reacted - less or equal than display limit reactions\", function (assert) {\n      const currentUser = _fabricators.default.user();\n      const otherUsers = Array.from(Array(_getReactionText.MAX_DISPLAYED_USERNAMES - 2)).map((_, i) => _fabricators.default.user({\n        username: \"user\" + i\n      }));\n      const reaction = _fabricators.default.reaction({\n        count: [currentUser].concat(otherUsers).length,\n        users: [currentUser].concat(otherUsers),\n        reacted: true\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, currentUser), \"<span>You, user0, user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, user11 and user12 reacted with </span>:heart:\");\n    });\n    (0, _qunit.test)(\"current user reacted - one reaction\", function (assert) {\n      const currentUser = _fabricators.default.user();\n      const reaction = _fabricators.default.reaction({\n        count: 1,\n        users: [currentUser],\n        reacted: true\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, currentUser), \"<span>You reacted with </span>:heart:\");\n    });\n    (0, _qunit.test)(\"current user reacted - two reactions\", function (assert) {\n      const currentUser = _fabricators.default.user();\n      const secondUser = _fabricators.default.user({\n        username: \"martin\"\n      });\n      const reaction = _fabricators.default.reaction({\n        count: 2,\n        users: [currentUser, secondUser],\n        reacted: true\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, currentUser), \"<span>You and martin reacted with </span>:heart:\");\n    });\n    (0, _qunit.test)(\"current user reacted - more than display limit reactions\", function (assert) {\n      const currentUser = _fabricators.default.user();\n      const otherUsers = Array.from(Array(_getReactionText.MAX_DISPLAYED_USERNAMES + 1)).map((_, i) => _fabricators.default.user({\n        username: \"user\" + i\n      }));\n      const reaction = _fabricators.default.reaction({\n        count: [currentUser].concat(otherUsers).length,\n        users: [currentUser].concat(otherUsers),\n        reacted: true\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, currentUser), \"<span>You, user0, user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, user11, user12, user13, user14 and 1 other reacted with </span>:heart:\");\n    });\n    (0, _qunit.test)(\"current user reacted - less or equal than display limit reactions\", function (assert) {\n      const currentUser = _fabricators.default.user();\n      const otherUsers = Array.from(Array(_getReactionText.MAX_DISPLAYED_USERNAMES - 2)).map((_, i) => _fabricators.default.user({\n        username: \"user\" + i\n      }));\n      const reaction = _fabricators.default.reaction({\n        count: [currentUser].concat(otherUsers).length,\n        users: [currentUser].concat(otherUsers),\n        reacted: true\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, currentUser), \"<span>You, user0, user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, user11 and user12 reacted with </span>:heart:\");\n    });\n    (0, _qunit.test)(\"current user didn't react - one reaction\", function (assert) {\n      const user = _fabricators.default.user({\n        username: \"martin\"\n      });\n      const reaction = _fabricators.default.reaction({\n        count: 1,\n        users: [user]\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, _fabricators.default.user()), \"<span>martin reacted with </span>:heart:\");\n    });\n    (0, _qunit.test)(\"current user didn't react - two reactions\", function (assert) {\n      const firstUser = _fabricators.default.user({\n        username: \"claude\"\n      });\n      const secondUser = _fabricators.default.user({\n        username: \"martin\"\n      });\n      const reaction = _fabricators.default.reaction({\n        count: 2,\n        users: [firstUser, secondUser]\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, _fabricators.default.user()), \"<span>claude and martin reacted with </span>:heart:\");\n    });\n    (0, _qunit.test)(\"current user didn't react - more than display limit reactions\", function (assert) {\n      const users = Array.from(Array(_getReactionText.MAX_DISPLAYED_USERNAMES + 1)).map((_, i) => _fabricators.default.user({\n        username: \"user\" + i\n      }));\n      const reaction = _fabricators.default.reaction({\n        count: users.length,\n        users\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, _fabricators.default.user()), \"<span>user0, user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, user11, user12, user13, user14 and 1 other reacted with </span>:heart:\");\n    });\n    (0, _qunit.test)(\"current user didn't react - less or equal than display limit reactions\", function (assert) {\n      const users = Array.from(Array(_getReactionText.MAX_DISPLAYED_USERNAMES - 1)).map((_, i) => _fabricators.default.user({\n        username: \"user\" + i\n      }));\n      const reaction = _fabricators.default.reaction({\n        count: users.length,\n        users\n      });\n      assert.strictEqual((0, _getReactionText.getReactionText)(reaction, _fabricators.default.user()), \"<span>user0, user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, user11, user12 and user13 reacted with </span>:heart:\");\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/lib/slugify-channel-test\", [\"qunit\", \"discourse/plugins/chat/discourse/lib/slugify-channel\"], function (_qunit, _slugifyChannel) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Unit | slugify-channel\", function () {\n    (0, _qunit.test)(\"defaults for title\", function (assert) {\n      assert.equal((0, _slugifyChannel.default)({\n        title: \"Foo bar\"\n      }), \"foo-bar\");\n    });\n    (0, _qunit.test)(\"a very long name for the title\", function (assert) {\n      const string = \"xAq8l5ca2CtEToeMLe2pEr2VUGQBx3HPlxbkDExKrJHp4f7jCVw9id1EQv1N1lYMRdAIiZNnn94Kr0uU0iiEeVO4XkBVmpW8Mknmd\";\n      assert.equal((0, _slugifyChannel.default)({\n        title: string\n      }), string.toLowerCase().slice(0, -1));\n    });\n    (0, _qunit.test)(\"a cyrillic name for the title\", function (assert) {\n      const string = \"Русская литература и фольклор\";\n      assert.equal((0, _slugifyChannel.default)({\n        title: string\n      }), \"русская-литература-и-фольклор\");\n    });\n    (0, _qunit.test)(\"channel has escapedTitle\", function (assert) {\n      assert.equal((0, _slugifyChannel.default)({\n        escapedTitle: \"Foo bar\"\n      }), \"foo-bar\");\n    });\n    (0, _qunit.test)(\"channel has slug and title\", function (assert) {\n      assert.equal((0, _slugifyChannel.default)({\n        title: \"Foo bar\",\n        slug: \"some-other-thing\"\n      }), \"some-other-thing\", \"slug takes priority\");\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/models/chat-message-test\", [\"qunit\", \"discourse/plugins/chat/discourse/lib/fabricators\", \"discourse/plugins/chat/discourse/models/chat-message\"], function (_qunit, _fabricators, _chatMessage) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Unit |  Models | chat-message\", function () {\n    (0, _qunit.test)(\".persisted\", function (assert) {\n      const channel = _fabricators.default.channel();\n      let message = _chatMessage.default.create(channel, {\n        id: null\n      });\n      assert.strictEqual(message.persisted, false);\n      message = _chatMessage.default.create(channel, {\n        id: 1,\n        staged: true\n      });\n      assert.strictEqual(message.persisted, false);\n      message = _chatMessage.default.create(channel, {\n        id: 1,\n        staged: false\n      });\n      assert.strictEqual(message.persisted, true);\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/services/chat-channel-info-route-origin-manager-test\", [\"@ember/application\", \"ember-qunit\", \"qunit\", \"discourse/plugins/chat/discourse/services/chat-channel-info-route-origin-manager\"], function (_application, _emberQunit, _qunit, _chatChannelInfoRouteOriginManager) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Unit | Service | chat-channel-info-route-origin-manager\", function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      this.manager = (0, _application.getOwner)(this).lookup(\"service:chat-channel-info-route-origin-manager\");\n    });\n    hooks.afterEach(function () {\n      this.manager.origin = null;\n    });\n    (0, _qunit.test)(\".origin\", function (assert) {\n      this.manager.origin = _chatChannelInfoRouteOriginManager.ORIGINS.channnel;\n      assert.strictEqual(this.manager.origin, _chatChannelInfoRouteOriginManager.ORIGINS.channnel);\n    });\n    (0, _qunit.test)(\".isBrowse\", function (assert) {\n      this.manager.origin = _chatChannelInfoRouteOriginManager.ORIGINS.browse;\n      assert.strictEqual(this.manager.isBrowse, true);\n      this.manager.origin = null;\n      assert.strictEqual(this.manager.isBrowse, false);\n      this.manager.origin = _chatChannelInfoRouteOriginManager.ORIGINS.channel;\n      assert.strictEqual(this.manager.isBrowse, false);\n    });\n    (0, _qunit.test)(\".isChannel\", function (assert) {\n      this.manager.origin = _chatChannelInfoRouteOriginManager.ORIGINS.channnel;\n      assert.strictEqual(this.manager.isChannel, true);\n      this.manager.origin = _chatChannelInfoRouteOriginManager.ORIGINS.browse;\n      assert.strictEqual(this.manager.isChannel, false);\n      this.manager.origin = null;\n      assert.strictEqual(this.manager.isChannel, true);\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/services/chat-drafts-manager-test\", [\"@ember/application\", \"ember-qunit\", \"qunit\", \"discourse/plugins/chat/discourse/lib/fabricators\"], function (_application, _emberQunit, _qunit, _fabricators) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Unit | Service | chat-drafts-manager\", function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      this.subject = (0, _application.getOwner)(this).lookup(\"service:chat-drafts-manager\");\n    });\n    (0, _qunit.test)(\"storing and retrieving message\", async function (assert) {\n      const message1 = _fabricators.default.message();\n      await this.subject.add(message1, message1.channel.id);\n      assert.strictEqual(this.subject.get(message1.channel.id), message1);\n      const message2 = _fabricators.default.message();\n      await this.subject.add(message2, message2.channel.id);\n      assert.strictEqual(this.subject.get(message2.channel.id), message2);\n    });\n    (0, _qunit.test)(\"#reset\", async function (assert) {\n      const message = _fabricators.default.message();\n      await this.subject.add(message, message.channel.id);\n      assert.strictEqual(Object.keys(this.subject.drafts).length, 1);\n      this.subject.reset();\n      assert.strictEqual(Object.keys(this.subject.drafts).length, 0);\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/services/chat-drawer-size-test\", [\"@ember/application\", \"ember-qunit\", \"qunit\"], function (_application, _emberQunit, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Unit | Service | chat-drawer-size\", function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      this.subject = (0, _application.getOwner)(this).lookup(\"service:chat-drawer-size\");\n    });\n    (0, _qunit.test)(\"get size (with default)\", async function (assert) {\n      assert.deepEqual(this.subject.size, {\n        width: 400,\n        height: 530\n      });\n    });\n    (0, _qunit.test)(\"set size\", async function (assert) {\n      this.subject.size = {\n        width: 400,\n        height: 500\n      };\n      assert.deepEqual(this.subject.size, {\n        width: 400,\n        height: 500\n      });\n    });\n    (0, _qunit.test)(\"min size\", async function (assert) {\n      this.subject.size = {\n        width: 100,\n        height: 100\n      };\n      assert.deepEqual(this.subject.size, {\n        width: 250,\n        height: 300\n      });\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/services/chat-emoji-picker-manager-test\", [\"@ember/application\", \"@ember/test-helpers\", \"ember-qunit\", \"qunit\", \"discourse/tests/helpers/create-pretender\"], function (_application, _testHelpers, _emberQunit, _qunit, _createPretender) {\n  \"use strict\";\n\n  function emojisResponse() {\n    return {\n      favorites: [{\n        name: \"sad\"\n      }]\n    };\n  }\n  (0, _qunit.module)(\"Discourse Chat | Unit | Service | chat-emoji-picker-manager\", function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      _createPretender.default.get(\"/chat/emojis.json\", () => {\n        return [200, {}, emojisResponse()];\n      });\n      this.manager = (0, _application.getOwner)(this).lookup(\"service:chat-emoji-picker-manager\");\n    });\n    hooks.afterEach(function () {\n      this.manager.close();\n    });\n    (0, _qunit.test)(\"addVisibleSections\", async function (assert) {\n      this.manager.addVisibleSections([\"favorites\", \"objects\"]);\n      assert.deepEqual(this.manager.visibleSections, [\"favorites\", \"smileys_&_emotion\", \"objects\"]);\n    });\n    (0, _qunit.test)(\"sections\", async function (assert) {\n      assert.deepEqual(this.manager.sections, []);\n      this.manager.open({});\n      assert.deepEqual(this.manager.sections, []);\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.manager.sections, [\"favorites\"]);\n    });\n    (0, _qunit.test)(\"open\", async function (assert) {\n      this.manager.open({\n        context: \"chat-composer\"\n      });\n      assert.ok(this.manager.loading);\n      assert.ok(this.manager.picker);\n      assert.strictEqual(this.manager.picker.context, \"chat-composer\");\n      assert.deepEqual(this.manager.visibleSections, [\"favorites\", \"smileys_&_emotion\"]);\n      assert.strictEqual(this.manager.lastVisibleSection, \"favorites\");\n      await (0, _testHelpers.settled)();\n      assert.deepEqual(this.manager.emojis, emojisResponse());\n      assert.strictEqual(this.manager.loading, false);\n    });\n    (0, _qunit.test)(\"closeExisting\", async function (assert) {\n      this.manager.open({\n        context: \"channel-composer\",\n        trigger: \"foo\"\n      });\n      this.manager.addVisibleSections(\"objects\");\n      this.manager.lastVisibleSection = \"objects\";\n      this.manager.open({\n        context: \"thread-composer\",\n        trigger: \"bar\"\n      });\n      assert.strictEqual(this.manager.picker.context, \"thread-composer\", \"it resets the picker to latest picker\");\n      assert.deepEqual(this.manager.visibleSections, [\"favorites\", \"smileys_&_emotion\"], \"it resets sections\");\n      assert.strictEqual(this.manager.lastVisibleSection, \"favorites\", \"it resets last visible section\");\n    });\n    (0, _qunit.test)(\"close\", async function (assert) {\n      this.manager.open({\n        context: \"channel-composer\"\n      });\n      assert.ok(this.manager.picker);\n      this.manager.addVisibleSections(\"objects\");\n      this.manager.lastVisibleSection = \"objects\";\n      this.manager.close();\n      assert.ok(this.manager.closing);\n      assert.ok(this.manager.picker);\n      await (0, _testHelpers.settled)();\n      assert.notOk(this.manager.picker);\n      assert.notOk(this.manager.closing);\n      assert.deepEqual(this.manager.visibleSections, [\"favorites\", \"smileys_&_emotion\"], \"it resets visible sections\");\n      assert.strictEqual(this.manager.lastVisibleSection, \"favorites\", \"it resets last visible section\");\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/services/chat-guardian-test\", [\"@ember/object\", \"qunit\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/fabricators\"], function (_object, _qunit, _qunitHelpers, _fabricators) {\n  \"use strict\";\n\n  (0, _qunitHelpers.acceptance)(\"Discourse Chat | Unit | Service | chat-guardian\", function (needs) {\n    needs.hooks.beforeEach(function () {\n      Object.defineProperty(this, \"chatGuardian\", {\n        get: () => this.container.lookup(\"service:chat-guardian\")\n      });\n      Object.defineProperty(this, \"siteSettings\", {\n        get: () => this.container.lookup(\"service:site-settings\")\n      });\n      Object.defineProperty(this, \"currentUser\", {\n        get: () => this.container.lookup(\"service:current-user\")\n      });\n    });\n    needs.user();\n    needs.settings();\n    (0, _qunit.test)(\"#canEditChatChannel\", async function (assert) {\n      (0, _object.set)(this.currentUser, \"has_chat_enabled\", false);\n      (0, _object.set)(this.currentUser, \"admin\", false);\n      (0, _object.set)(this.currentUser, \"moderator\", false);\n      this.siteSettings.chat_enabled = false;\n      assert.notOk(this.chatGuardian.canEditChatChannel());\n      (0, _object.set)(this.currentUser, \"has_chat_enabled\", true);\n      (0, _object.set)(this.currentUser, \"admin\", true);\n      this.siteSettings.chat_enabled = false;\n      assert.notOk(this.chatGuardian.canEditChatChannel());\n      (0, _object.set)(this.currentUser, \"has_chat_enabled\", false);\n      (0, _object.set)(this.currentUser, \"admin\", false);\n      (0, _object.set)(this.currentUser, \"moderator\", false);\n      this.siteSettings.chat_enabled = true;\n      assert.notOk(this.chatGuardian.canEditChatChannel());\n      (0, _object.set)(this.currentUser, \"has_chat_enabled\", false);\n      (0, _object.set)(this.currentUser, \"admin\", true);\n      this.siteSettings.chat_enabled = true;\n      assert.notOk(this.chatGuardian.canEditChatChannel());\n      (0, _object.set)(this.currentUser, \"has_chat_enabled\", true);\n      (0, _object.set)(this.currentUser, \"admin\", false);\n      (0, _object.set)(this.currentUser, \"moderator\", false);\n      this.siteSettings.chat_enabled = true;\n      assert.notOk(this.chatGuardian.canEditChatChannel());\n      (0, _object.set)(this.currentUser, \"has_chat_enabled\", true);\n      (0, _object.set)(this.currentUser, \"admin\", true);\n      this.siteSettings.chat_enabled = true;\n      assert.ok(this.chatGuardian.canEditChatChannel());\n    });\n    (0, _qunit.test)(\"#canUseChat\", async function (assert) {\n      (0, _object.set)(this.currentUser, \"has_chat_enabled\", false);\n      this.siteSettings.chat_enabled = true;\n      assert.notOk(this.chatGuardian.canUseChat());\n      (0, _object.set)(this.currentUser, \"has_chat_enabled\", true);\n      this.siteSettings.chat_enabled = false;\n      assert.notOk(this.chatGuardian.canUseChat());\n      (0, _object.set)(this.currentUser, \"has_chat_enabled\", true);\n      this.siteSettings.chat_enabled = true;\n      assert.ok(this.chatGuardian.canUseChat());\n    });\n    (0, _qunit.test)(\"#canArchiveChannel\", async function (assert) {\n      const channel = _fabricators.default.channel();\n      (0, _object.set)(this.currentUser, \"has_chat_enabled\", true);\n      (0, _object.set)(this.currentUser, \"admin\", true);\n      this.siteSettings.chat_enabled = true;\n      this.siteSettings.chat_allow_archiving_channels = true;\n      assert.ok(this.chatGuardian.canArchiveChannel(channel));\n      (0, _object.set)(this.currentUser, \"admin\", false);\n      (0, _object.set)(this.currentUser, \"moderator\", false);\n      assert.notOk(this.chatGuardian.canArchiveChannel(channel));\n      (0, _object.set)(this.currentUser, \"admin\", true);\n      (0, _object.set)(this.currentUser, \"moderator\", true);\n      channel.status = \"read_only\";\n      assert.notOk(this.chatGuardian.canArchiveChannel(channel));\n      channel.status = \"open\";\n      channel.status = \"archived\";\n      assert.notOk(this.chatGuardian.canArchiveChannel(channel));\n      channel.status = \"open\";\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/services/chat-state-manager-test\", [\"@ember/application\", \"ember-qunit\", \"qunit\", \"sinon\", \"discourse/models/site\", \"discourse/plugins/chat/discourse/services/chat-state-manager\"], function (_application, _emberQunit, _qunit, _sinon, _site, _chatStateManager) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Discourse Chat | Unit | Service | chat-state-manager\", function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      this.subject = (0, _application.getOwner)(this).lookup(\"service:chat-state-manager\");\n    });\n    hooks.afterEach(function () {\n      this.subject.reset();\n    });\n    (0, _qunit.test)(\"isFullPagePreferred\", function (assert) {\n      assert.notOk(this.subject.isFullPagePreferred);\n      this.subject.prefersFullPage();\n      assert.ok(this.subject.isFullPagePreferred);\n      this.subject.prefersDrawer();\n      assert.notOk(this.subject.isFullPagePreferred);\n      this.subject.prefersDrawer();\n      _site.default.currentProp(\"mobileView\", true);\n      assert.ok(this.subject.isFullPagePreferred);\n    });\n    (0, _qunit.test)(\"isDrawerPreferred\", function (assert) {\n      assert.ok(this.subject.isDrawerPreferred);\n      this.subject.prefersFullPage();\n      assert.notOk(this.subject.isDrawerPreferred);\n      this.subject.prefersDrawer();\n      assert.ok(this.subject.isDrawerPreferred);\n    });\n    (0, _qunit.test)(\"lastKnownChatURL\", function (assert) {\n      assert.strictEqual(this.subject.lastKnownChatURL, \"/chat\");\n      this.subject.storeChatURL(\"/bar\");\n      assert.strictEqual(this.subject.lastKnownChatURL, \"/bar\");\n    });\n    (0, _qunit.test)(\"lastKnownAppURL\", function (assert) {\n      assert.strictEqual(this.subject.lastKnownAppURL, \"/latest\");\n      _sinon.default.stub(this.subject.router, \"currentURL\").value(\"/foo\");\n      this.subject.storeAppURL();\n      assert.strictEqual(this.subject.lastKnownAppURL, \"/foo\");\n      this.subject.storeAppURL(\"/bar\");\n      assert.strictEqual(this.subject.lastKnownAppURL, \"/bar\");\n    });\n    (0, _qunit.test)(\"isFullPageActive\", function (assert) {\n      _sinon.default.stub(this.subject.router, \"currentRouteName\").value(\"foo\");\n      assert.notOk(this.subject.isFullPageActive);\n      _sinon.default.stub(this.subject.router, \"currentRouteName\").value(\"chat\");\n      assert.ok(this.subject.isFullPageActive);\n    });\n    (0, _qunit.test)(\"didCollapseDrawer\", function (assert) {\n      this.subject.didCollapseDrawer();\n      assert.strictEqual(this.subject.isDrawerExpanded, false);\n      assert.strictEqual(this.subject.isDrawerActive, true);\n    });\n    (0, _qunit.test)(\"didExpandDrawer\", function (assert) {\n      const stub = _sinon.default.stub(this.owner.lookup(\"service:chat\"), \"updatePresence\");\n      this.subject.didExpandDrawer();\n      assert.strictEqual(this.subject.isDrawerExpanded, true);\n      assert.strictEqual(this.subject.isDrawerActive, true);\n      _sinon.default.assert.calledOnce(stub);\n    });\n    (0, _qunit.test)(\"didCloseDrawer\", function (assert) {\n      const stub = _sinon.default.stub(this.owner.lookup(\"service:chat\"), \"updatePresence\");\n      this.subject.didCloseDrawer();\n      assert.strictEqual(this.subject.isDrawerExpanded, false);\n      assert.strictEqual(this.subject.isDrawerActive, false);\n      _sinon.default.assert.calledOnce(stub);\n    });\n    (0, _qunit.test)(\"didOpenDrawer\", function (assert) {\n      const stub = _sinon.default.stub(this.owner.lookup(\"service:chat\"), \"updatePresence\");\n      this.subject.didOpenDrawer();\n      assert.strictEqual(this.subject.isDrawerExpanded, true);\n      assert.strictEqual(this.subject.isDrawerActive, true);\n      assert.strictEqual(this.subject.lastKnownChatURL, \"/chat\");\n      this.subject.didOpenDrawer(\"/foo\");\n      assert.strictEqual(this.subject.lastKnownChatURL, \"/foo\");\n      _sinon.default.assert.calledTwice(stub);\n    });\n    (0, _qunit.test)(\"callbacks\", function (assert) {\n      this.state = null;\n      (0, _chatStateManager.addChatDrawerStateCallback)(state => {\n        this.state = state;\n      });\n      this.subject.didOpenDrawer();\n      assert.strictEqual(this.state.isDrawerActive, true);\n      assert.strictEqual(this.state.isDrawerExpanded, true);\n      this.subject.didCloseDrawer();\n      assert.strictEqual(this.state.isDrawerActive, false);\n      assert.strictEqual(this.state.isDrawerExpanded, false);\n      (0, _chatStateManager.resetChatDrawerStateCallbacks)();\n    });\n  });\n});","define(\"discourse/plugins/chat/unit/utility/plugin-api-test\", [\"@ember/application\", \"ember-qunit\", \"qunit\", \"discourse/lib/plugin-api\", \"discourse/models/user\", \"discourse/tests/helpers/create-pretender\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/chat/discourse/lib/chat-message-interactor\", \"discourse/plugins/chat/discourse/lib/fabricators\"], function (_application, _emberQunit, _qunit, _pluginApi, _user, _createPretender, _qunitHelpers, _chatMessageInteractor, _fabricators) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Chat | Unit | Utility | plugin-api\", function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)(\"#sendChatMessage\", async function (assert) {\n      const done = assert.async();\n      _createPretender.default.post(\"/chat/1\", request => {\n        assert.strictEqual(request.url, \"/chat/1\");\n        assert.strictEqual(request.requestBody, \"thread_id=2&message=hello\");\n        done();\n        return [200, {}, {}];\n      });\n      (0, _pluginApi.withPluginApi)(\"1.1.0\", async api => {\n        await api.sendChatMessage(1, {\n          message: \"hello\",\n          threadId: 2\n        });\n      });\n    });\n    (0, _qunit.test)(\"#removeChatComposerSecondaryActions\", async function (assert) {\n      (0, _pluginApi.withPluginApi)(\"1.1.0\", async api => {\n        // assert that the api method is defined\n        assert.equal(typeof api.removeChatComposerSecondaryActions, \"function\");\n        (0, _qunitHelpers.logIn)();\n        const currentUser = _user.default.current();\n        (0, _application.getOwner)(this).unregister(\"service:current-user\");\n        (0, _application.getOwner)(this).register(\"service:current-user\", currentUser, {\n          instantiate: false\n        });\n        const message = _fabricators.default.message({\n          user: currentUser\n        });\n        const context = \"channel\";\n        const interactor = new _chatMessageInteractor.default((0, _application.getOwner)(this), message, context);\n\n        // assert that the initial secondary actions are present\n        const secondaryActions = interactor.secondaryActions;\n        assert.ok(secondaryActions.length > 0);\n        try {\n          // remove the first secondary action listed\n          api.removeChatComposerSecondaryActions(secondaryActions[0].id);\n          const updatedSecondaryActions = interactor.secondaryActions;\n\n          // assert that the secondary action was removed\n          assert.ok(updatedSecondaryActions.length < secondaryActions.length, \"the updated secondary actions must contain less items than the original\");\n          assert.notOk(updatedSecondaryActions.map(v => v.id).includes(secondaryActions[0]), \"the updated secondary actions must not include the removed action\");\n        } finally {\n          // reset the secondary actions removed to prevent leakage to other tests\n          (0, _chatMessageInteractor.resetRemovedChatComposerSecondaryActions)();\n        }\n      });\n    });\n  });\n});"],"names":[],"mappingsrxzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtahhjnrzzttIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnhQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzdtpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrpxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxvvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"chat_tests.js"}