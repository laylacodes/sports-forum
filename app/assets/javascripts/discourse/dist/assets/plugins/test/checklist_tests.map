{"version":3,"sources":["discourse/plugins/checklist/lib/checklist-test.js"],"sourcesContent":["define(\"discourse/plugins/checklist/lib/checklist-test\", [\"jquery\", \"qunit\", \"rsvp\", \"discourse/lib/text\", \"discourse/models/post\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/checklist/discourse/initializers/checklist\"], function (_jquery, _qunit, _rsvp, _text, _post, _qunitHelpers, _checklist) {\n  \"use strict\";\n\n  let currentRaw;\n  async function prepare(raw) {\n    const cooked = await (0, _text.cook)(raw, {\n      siteSettings: {\n        checklist_enabled: true\n      }\n    });\n    const widget = {\n      attrs: {},\n      scheduleRerender() {}\n    };\n    const model = _post.default.create({\n      id: 42,\n      can_edit: true\n    });\n    const decoratorHelper = {\n      widget,\n      getModel: () => model\n    };\n    const $elem = (0, _jquery.default)(`<div>${cooked.toString()}</div>`);\n    (0, _checklist.checklistSyntax)($elem[0], decoratorHelper);\n    currentRaw = raw;\n    const updated = new _rsvp.Promise(resolve => {\n      model.save = async fields => resolve(fields.raw);\n    });\n    return [$elem, updated];\n  }\n  (0, _qunitHelpers.acceptance)(\"discourse-checklist | checklist\", function (needs) {\n    needs.pretender(server => {\n      server.get(\"/posts/42\", () => [200, {\n        \"Content-Type\": \"application/json\"\n      }, {\n        raw: currentRaw\n      }]);\n    });\n    (0, _qunit.test)(\"make checkboxes readonly while updating\", async function (assert) {\n      const [$elem, updated] = await prepare(`\n[ ] first\n[x] second\n    `);\n      const $checklist = $elem.find(\".chcklst-box\");\n      $checklist.get(0).click();\n      const checkbox = $checklist.get(1);\n      assert.ok(checkbox.classList.contains(\"readonly\"));\n      checkbox.click();\n      const output = await updated;\n      assert.ok(output.includes(\"[x] first\"));\n      assert.ok(output.includes(\"[x] second\"));\n    });\n    (0, _qunit.test)(\"checkbox before a code block\", async function (assert) {\n      const [$elem, updated] = await prepare(`\n[ ] first\n[x] actual\n\\`[x] nope\\`\n    `);\n      assert.equal($elem.find(\".chcklst-box\").length, 2);\n      $elem.find(\".chcklst-box\")[1].click();\n      const output = await updated;\n      assert.ok(output.includes(\"[ ] first\"));\n      assert.ok(output.includes(\"[ ] actual\"));\n      assert.ok(output.includes(\"[x] nope\"));\n    });\n    (0, _qunit.test)(\"permanently checked checkbox\", async function (assert) {\n      const [$elem, updated] = await prepare(`\n[X] perma\n[x] not perma\n    `);\n      assert.equal($elem.find(\".chcklst-box\").length, 2);\n      $elem.find(\".chcklst-box\")[0].click();\n      $elem.find(\".chcklst-box\")[1].click();\n      const output = await updated;\n      assert.ok(output.includes(\"[X] perma\"));\n      assert.ok(output.includes(\"[ ] not perma\"));\n    });\n    (0, _qunit.test)(\"checkbox before a multiline code block\", async function (assert) {\n      const [$elem, updated] = await prepare(`\n[ ] first\n[x] actual\n\\`\\`\\`\n[x] nope\n[x] neither\n\\`\\`\\`\n    `);\n      assert.equal($elem.find(\".chcklst-box\").length, 2);\n      $elem.find(\".chcklst-box\")[1].click();\n      const output = await updated;\n      assert.ok(output.includes(\"[ ] first\"));\n      assert.ok(output.includes(\"[ ] actual\"));\n      assert.ok(output.includes(\"[x] nope\"));\n    });\n    (0, _qunit.test)(\"checkbox before italic/bold sequence\", async function (assert) {\n      const [$elem, updated] = await prepare(` [x] *test*\n    `);\n      assert.equal($elem.find(\".chcklst-box\").length, 1);\n      $elem.find(\".chcklst-box\")[0].click();\n      const output = await updated;\n      assert.ok(output.includes(\"[ ] *test*\"));\n    });\n    (0, _qunit.test)(\"checkboxes in an unordered list\", async function (assert) {\n      const [$elem, updated] = await prepare(`\n* [x] checked\n* [] test\n* [] two\n  `);\n      assert.equal($elem.find(\".chcklst-box\").length, 3);\n      $elem.find(\".chcklst-box\")[1].click();\n      const output = await updated;\n      assert.ok(output.includes(\"* [x] checked\"));\n      assert.ok(output.includes(\"* [x] test\"));\n      assert.ok(output.includes(\"* [] two\"));\n    });\n    (0, _qunit.test)(\"checkboxes in italic/bold-like blocks\", async function (assert) {\n      const [$elem, updated] = await prepare(`\n*[x\n*a [*] x]*\n[*x]\n~~[*]~~\n\n* []* 0\n\n~~[] ~~ 1\n\n~~ [x]~~ 2\n\n* [x] 3\n  `);\n      assert.equal($elem.find(\".chcklst-box\").length, 4);\n      $elem.find(\".chcklst-box\")[3].click();\n      const output = await updated;\n      assert.ok(output.includes(\"* [ ] 3\"));\n    });\n    (0, _qunit.test)(\"correct checkbox is selected\", async function (assert) {\n      const [$elem, updated] = await prepare(`\n\\`[x]\\`\n*[x]*\n**[x]**\n_[x]_\n__[x]__\n~~[x]~~\n\n[code]\n[x]\n[ ]\n[ ]\n[x]\n[/code]\n\n\\`\\`\\`\n[x]\n[ ]\n[ ]\n[x]\n\\`\\`\\`\n\nActual checkboxes:\n[] first\n[x] second\n* test[x]*thrid*\n[x] fourth\n[x] fifth\n    `);\n      assert.equal($elem.find(\".chcklst-box\").length, 5);\n      $elem.find(\".chcklst-box\")[3].click();\n      const output = await updated;\n      assert.ok(output.includes(\"[ ] fourth\"));\n    });\n    (0, _qunit.test)(\"rendering in bullet lists\", async function (assert) {\n      const [$elem] = await prepare(`\n- [ ] LI 1\n- LI 2 [ ] with checkbox in middle\n- [ ] LI 3\n\n1. [ ] Ordered LI with checkbox\n    `);\n      const elem = $elem[0];\n      const listItems = [...elem.querySelector(\"ul\").children];\n      assert.equal(listItems.length, 3);\n      assert.true(listItems[0].classList.contains(\"has-checkbox\"), \"LI 1 has `.has-checkbox` class\");\n      assert.true(listItems[0].querySelector(\".chcklst-box\").classList.contains(\"list-item-checkbox\"), \"LI 1 checkbox has `.list-item-checkbox`\");\n      assert.false(listItems[1].classList.contains(\"has-checkbox\"), \"LI 2 does not have `.has-checkbox` class\");\n      assert.false(listItems[1].querySelector(\".chcklst-box\").classList.contains(\"list-item-checkbox\"), \"LI 2 checkbox does not have `.list-item-checkbox`\");\n      assert.true(listItems[2].classList.contains(\"has-checkbox\"), \"LI 3 has `.has-checkbox` class\");\n      assert.true(listItems[2].querySelector(\".chcklst-box\").classList.contains(\"list-item-checkbox\"), \"LI 3 checkbox has `.list-item-checkbox`\");\n      const orderedListItems = [...elem.querySelector(\"ol\").children];\n      assert.false(orderedListItems[0].classList.contains(\"has-checkbox\"), \"OL does not have `.has-checkbox` class\");\n      assert.false(orderedListItems[0].querySelector(\".chcklst-box\").classList.contains(\"list-item-checkbox\"), \"OL checkbox does not have `.list-item-checkbox`\");\n    });\n  });\n});"],"names":[],"mappingsfile":"checklist_tests.js"}