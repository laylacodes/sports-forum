{"version":3,"sources":["discourse/plugins/spoiler-alert/acceptance/spoiler-button-test.js","discourse/plugins/spoiler-alert/unit/lib/to-markdown-test.js"],"sourcesContent":["define(\"discourse/plugins/spoiler-alert/acceptance/spoiler-button-test\", [\"@ember/test-helpers\", \"qunit\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/tests/helpers/select-kit-helper\", \"discourse-i18n\"], function (_testHelpers, _qunit, _qunitHelpers, _selectKitHelper, _discourseI18n) {\n  \"use strict\";\n\n  (0, _qunitHelpers.acceptance)(\"Spoiler Button\", function (needs) {\n    needs.user();\n    needs.settings({\n      spoiler_enabled: true\n    });\n    (0, _qunit.test)(\"spoiler button\", async assert => {\n      const popUpMenu = (0, _selectKitHelper.default)(\".toolbar-popup-menu-options\");\n      await (0, _testHelpers.visit)(\"/\");\n      assert.ok((0, _qunitHelpers.exists)(\"#create-topic\"), \"the create button is visible\");\n      await (0, _testHelpers.click)(\"#create-topic\");\n      const categoryChooser = (0, _selectKitHelper.default)(\".category-chooser\");\n      await categoryChooser.expand();\n      await categoryChooser.selectRowByValue(2);\n      await popUpMenu.expand();\n      await popUpMenu.selectRowByName(_discourseI18n.default.t(\"spoiler.title\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\".d-editor-input\").value, `[spoiler]${_discourseI18n.default.t(\"composer.spoiler_text\")}[/spoiler]`, \"it should contain the right output\");\n      let textarea = (0, _qunitHelpers.query)(\".d-editor-input\");\n      assert.strictEqual(textarea.selectionStart, 9, \"it should start highlighting at the right position\");\n      assert.strictEqual(textarea.selectionEnd, _discourseI18n.default.t(\"composer.spoiler_text\").length + 9, \"it should end highlighting at the right position\");\n      await (0, _testHelpers.fillIn)(\".d-editor-input\", \"This is hidden\");\n      textarea.selectionStart = 0;\n      textarea.selectionEnd = textarea.value.length;\n      await popUpMenu.expand();\n      await popUpMenu.selectRowByName(_discourseI18n.default.t(\"spoiler.title\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\".d-editor-input\").value, `[spoiler]This is hidden[/spoiler]`, \"it should contain the right output\");\n      assert.strictEqual(textarea.selectionStart, 9, \"it should start highlighting at the right position\");\n      assert.strictEqual(textarea.selectionEnd, 23, \"it should end highlighting at the right position\");\n      await (0, _testHelpers.fillIn)(\".d-editor-input\", \"Before this is hidden After\");\n      textarea.selectionStart = 7;\n      textarea.selectionEnd = 21;\n      await popUpMenu.expand();\n      await popUpMenu.selectRowByName(_discourseI18n.default.t(\"spoiler.title\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\".d-editor-input\").value, `Before [spoiler]this is hidden[/spoiler] After`, \"it should contain the right output\");\n      assert.strictEqual(textarea.selectionStart, 16, \"it should start highlighting at the right position\");\n      assert.strictEqual(textarea.selectionEnd, 30, \"it should end highlighting at the right position\");\n      await (0, _testHelpers.fillIn)(\".d-editor-input\", \"Before\\nthis is hidden\\nAfter\");\n      textarea.selectionStart = 7;\n      textarea.selectionEnd = 21;\n      await popUpMenu.expand();\n      await popUpMenu.selectRowByName(_discourseI18n.default.t(\"spoiler.title\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\".d-editor-input\").value, `Before\\n[spoiler]this is hidden[/spoiler]\\nAfter`, \"it should contain the right output\");\n      assert.strictEqual(textarea.selectionStart, 16, \"it should start highlighting at the right position\");\n      assert.strictEqual(textarea.selectionEnd, 30, \"it should end highlighting at the right position\");\n\n      // enforce block mode when selected text is multiline\n      await (0, _testHelpers.fillIn)(\".d-editor-input\", \"Before\\nthis is\\n\\nhidden\\nAfter\");\n      textarea.selectionStart = 7;\n      textarea.selectionEnd = 22;\n      await popUpMenu.expand();\n      await popUpMenu.selectRowByName(_discourseI18n.default.t(\"spoiler.title\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\".d-editor-input\").value, `Before\\n[spoiler]\\nthis is\\n\\nhidden\\n[/spoiler]\\nAfter`, \"it should contain the right output\");\n      assert.strictEqual(textarea.selectionStart, 17, \"it should start highlighting at the right position\");\n      assert.strictEqual(textarea.selectionEnd, 32, \"it should end highlighting at the right position\");\n    });\n  });\n});","define(\"discourse/plugins/spoiler-alert/unit/lib/to-markdown-test\", [\"qunit\", \"discourse/lib/plugin-api\", \"discourse/lib/to-markdown\", \"discourse/tests/helpers/qunit-helpers\", \"discourse/plugins/spoiler-alert/initializers/spoiler-alert\"], function (_qunit, _pluginApi, _toMarkdown, _qunitHelpers, _spoilerAlert) {\n  \"use strict\";\n\n  (0, _qunitHelpers.discourseModule)(\"Spoiler Alert | Unit | to-markdown\", function (hooks) {\n    hooks.beforeEach(function () {\n      (0, _pluginApi.withPluginApi)(\"0.5\", _spoilerAlert.initializeSpoiler);\n    });\n    (0, _qunit.test)(\"handles spoiler tags\", function (assert) {\n      let html = `<div>Text with a</div><div class=\"spoiled\">spoiled</div><div>word.</div>`;\n      let markdown = `Text with a\\n\\n[spoiler]spoiled[/spoiler]\\n\\nword.`;\n      assert.strictEqual((0, _toMarkdown.default)(html), markdown, \"it should create block spoiler tag\");\n      html = `Inline <span class=\"spoiled\">spoiled</span> word.`;\n      markdown = `Inline [spoiler]spoiled[/spoiler] word.`;\n      assert.strictEqual((0, _toMarkdown.default)(html), markdown, \"it should create inline spoiler tag\");\n    });\n  });\n});"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"spoiler-alert_tests.js"}