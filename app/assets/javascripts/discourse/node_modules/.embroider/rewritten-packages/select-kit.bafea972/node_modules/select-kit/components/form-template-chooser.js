var _dec, _obj;
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
import { computed } from "@ember/object";
import FormTemplate from "discourse/models/form-template";
import MultiSelectComponent from "select-kit/components/multi-select";
export default MultiSelectComponent.extend((_dec = computed("templates"), (_obj = {
  pluginApiIdentifiers: ["form-template-chooser"],
  classNames: ["form-template-chooser"],
  selectKitOptions: {
    none: "form_template_chooser.select_template"
  },
  init() {
    this._super(...arguments);
    this.triggerSearch();
  },
  didUpdateAttrs() {
    this._super(...arguments);
    this.set("templatesLoaded", false);
    this.triggerSearch();
  },
  get content() {
    return this.templates;
  },
  search(filter) {
    if (this.get("templatesLoaded")) {
      return this._super(filter);
    } else {
      return this._fetchTemplates();
    }
  },
  async _fetchTemplates() {
    if (this.get("loadingTemplates")) {
      return;
    }
    this.set("templatesLoaded", false);
    this.set("loadingTemplates", true);
    const result = await FormTemplate.findAll();
    let sortedTemplates = this._sortTemplatesByName(result);
    if (this.filteredIds) {
      sortedTemplates = sortedTemplates.filter(t => this.filteredIds.includes(t.id));
    }
    if (sortedTemplates.length === 0) {
      this.set("selectKit.options.disabled", true);
    }
    this.setProperties({
      templates: sortedTemplates,
      loadingTemplates: false,
      templatesLoaded: true
    });
    return this.templates;
  },
  _sortTemplatesByName(templates) {
    return templates.sort((a, b) => a.name.localeCompare(b.name));
  }
}, (_applyDecoratedDescriptor(_obj, "content", [_dec], Object.getOwnPropertyDescriptor(_obj, "content"), _obj)), _obj)));