var _class, _descriptor;
function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
import { setOwner } from "@ember/application";
import { action } from "@ember/object";
import { guidFor } from "@ember/object/internals";
import { inject as service } from "@ember/service";
import { MENU } from "float-kit/lib/constants";
import FloatKitInstance from "float-kit/lib/float-kit-instance";
let DMenuInstance = (_class = class DMenuInstance extends FloatKitInstance {
  constructor(owner, trigger, options = {}) {
    super(...arguments);
    _initializerDefineProperty(this, "menu", _descriptor, this);
    setOwner(this, owner);
    this.options = {
      ...MENU.options,
      ...options
    };
    this.id = trigger.id || guidFor(trigger);
    this.trigger = trigger;
    this.setupListeners();
  }
  onMouseMove(event) {
    if (this.trigger.contains(event.target) && this.expanded) {
      return;
    }
    this.onTrigger(event);
  }
  onClick(event) {
    if (this.expanded && this.untriggers.includes("click")) {
      this.onUntrigger(event);
      return;
    }
    this.onTrigger(event);
  }
  onMouseLeave(event) {
    if (this.untriggers.includes("hover")) {
      this.onUntrigger(event);
    }
  }
  async onTrigger() {
    this.options.beforeTrigger?.(this);
    await this.show();
  }
  async onUntrigger() {
    await this.close();
  }
  async destroy() {
    await this.close();
    this.tearDownListeners();
  }
}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "menu", [service], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _applyDecoratedDescriptor(_class.prototype, "onMouseMove", [action], Object.getOwnPropertyDescriptor(_class.prototype, "onMouseMove"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onClick", [action], Object.getOwnPropertyDescriptor(_class.prototype, "onClick"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMouseLeave", [action], Object.getOwnPropertyDescriptor(_class.prototype, "onMouseLeave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onTrigger", [action], Object.getOwnPropertyDescriptor(_class.prototype, "onTrigger"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onUntrigger", [action], Object.getOwnPropertyDescriptor(_class.prototype, "onUntrigger"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "destroy", [action], Object.getOwnPropertyDescriptor(_class.prototype, "destroy"), _class.prototype)), _class);
export { DMenuInstance as default };