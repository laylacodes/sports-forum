import { template } from "@ember/template-compiler";
import Component from "@glimmer/component";
import { action } from "@ember/object";
import { inject as service } from "@ember/service";
import RouteTemplate from "ember-route-template";
import WizardCanvas from "discourse/static/wizard/components/wizard-canvas";
import WizardStep from "discourse/static/wizard/components/wizard-step";
import getUrl from "discourse-common/lib/get-url";
export default RouteTemplate(class extends Component {
    @service
    router;
    static{
        template(`
      {{#if this.showCanvas}}
        <WizardCanvas />
      {{/if}}

      <WizardStep
        @step={{@model.step}}
        @wizard={{@model.wizard}}
        @goNext={{this.goNext}}
        @goBack={{this.goBack}}
        @goHome={{this.goHome}}
      />
    `, {
            component: this,
            eval () {
                return eval(arguments[0]);
            }
        });
    }
    get step() {
        return this.args.model.step;
    }
    get showCanvas() {
        return this.step.id === "ready";
    }
    @action
    goNext(response1) {
        const next1 = this.step.next;
        if (response1?.refresh_required) {
            document.location = getUrl(`/wizard/steps/${next1}`);
        } else if (response1?.success && next1) {
            this.router.transitionTo("wizard.step", next1);
        } else if (response1?.success) {
            this.router.transitionTo("discovery.latest");
        }
    }
    @action
    goBack() {
        this.router.transitionTo("wizard.step", this.step.previous);
    }
    @action
    goHome() {
        this.router.transitionTo("discovery.latest");
    }
});
