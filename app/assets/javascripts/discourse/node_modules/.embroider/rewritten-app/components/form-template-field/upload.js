import { template } from "@ember/template-compiler";
import { tracked } from "@glimmer/tracking";
import Component from "@ember/component";
import { computed } from "@ember/object";
import { dasherize } from "@ember/string";
import { htmlSafe } from "@ember/template";
import PickFilesButton from "discourse/components/pick-files-button";
import { isAudio, isImage, isVideo } from "discourse/lib/uploads";
import UppyUploadMixin from "discourse/mixins/uppy-upload";
import icon from "discourse-common/helpers/d-icon";
export default class FormTemplateFieldUpload extends Component.extend(UppyUploadMixin) {
    @tracked
    uploadValue;
    @tracked
    uploadedFiles = [];
    @tracked
    disabled = this.uploadingOrProcessing;
    @tracked
    fileUploadElementId = `${dasherize(this.id)}-uploader`;
    @tracked
    fileInputSelector = `#${this.fileUploadElementId}`;
    type = "composer";
    @computed("uploadingOrProcessing")
    get uploadStatusLabel() {
        return this.uploadingOrProcessing ? "form_templates.upload_field.uploading" : "form_templates.upload_field.upload";
    }
    /**
   * The validation from PickFilesButton._filesPicked, where acceptedFormatsOverride
   * is validated and displays a message, happens after the upload is complete.
   *
   * Overriding this method allows us to validate the file before the upload
   *
   * @param file
   * @returns {boolean}
   */ isUploadedFileAllowed(file1) {
        // same logic from PickFilesButton._hasAcceptedExtensionOrType
        const fileTypes1 = this.attributes.file_types;
        const extension1 = file1.name.split(".").pop();
        return (!fileTypes1 || fileTypes1.includes(`.${extension1}`) || fileTypes1.includes(file1.type));
    }
    uploadDone(upload1) {
        // If re-uploading, clear the existing file if multiple aren't allowed
        if (!this.attributes.allow_multiple && this.uploadValue) {
            this.uploadedFiles = [];
            this.uploadValue = "";
        }
        this.uploadedFiles.pushObject(upload1);
        const uploadMarkdown1 = this.buildMarkdown(upload1);
        if (this.uploadValue && this.allowMultipleFiles) {
            // multiple file upload
            this.uploadValue = `${this.uploadValue}\n${uploadMarkdown1}`;
        } else {
            // single file upload
            this.uploadValue = uploadMarkdown1;
        }
    }
    buildMarkdown(upload1) {
        if (isImage(upload1.url)) {
            return `![${upload1.file_name}|${upload1.width}x${upload1.height}](${upload1.short_url})`;
        }
        if (isAudio(upload1.url)) {
            return `![${upload1.file_name}|audio](${upload1.short_url})`;
        }
        if (isVideo(upload1.url)) {
            return `![${upload1.file_name}|video](${upload1.short_url})`;
        }
        return `[${upload1.file_name}|attachment](${upload1.short_url}) (${upload1.human_filesize})`;
    }
    static{
        template(`
    <div class="control-group form-template-field" data-field-type="upload">
      {{#if @attributes.label}}
        <label class="form-template-field__label">
          {{@attributes.label}}
          {{#if @validations.required}}
            {{icon "asterisk" class="form-template-field__required-indicator"}}
          {{/if}}
        </label>
      {{/if}}

      {{#if @attributes.description}}
        <span class="form-template-field__description">
          {{htmlSafe @attributes.description}}
        </span>
      {{/if}}

      <input type="hidden" name={{@id}} value={{this.uploadValue}} />

      <PickFilesButton
        @fileInputClass="form-template-field__upload"
        @fileInputId={{this.fileUploadElementId}}
        @allowMultiple={{@attributes.allow_multiple}}
        @showButton={{true}}
        @onFilesPicked={{true}}
        @icon="upload"
        @label={{this.uploadStatusLabel}}
        @fileInputDisabled={{this.disabled}}
        @acceptedFormatsOverride={{@attributes.file_types}}
        @acceptedFileTypesString={{@attributes.file_types}}
      />

      {{#if this.uploadedFiles}}
        <ul class="form-template-field__uploaded-files">
          {{#each this.uploadedFiles as |file|}}
            <li>
              {{icon "file"}}
              <a
                href={{file.url}}
                target="_blank"
                rel="noopener noreferrer"
              >{{file.file_name}}</a>
              <span>{{file.human_filesize}}</span>
            </li>
          {{/each}}
        </ul>
      {{/if}}
    </div>
  `, {
            component: this,
            eval () {
                return eval(arguments[0]);
            }
        });
    }
}
