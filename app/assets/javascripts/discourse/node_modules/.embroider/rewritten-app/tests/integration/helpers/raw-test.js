import { template } from "@ember/template-compiler";
import Component from "@glimmer/component";
import { tracked } from "@glimmer/tracking";
import { getOwner } from "@ember/application";
import { render, settled } from "@ember/test-helpers";
import { module, test } from "qunit";
import RenderGlimmerContainer from "discourse/components/render-glimmer-container";
import raw from "discourse/helpers/raw";
import rawRenderGlimmer from "discourse/lib/raw-render-glimmer";
import { setupRenderingTest } from "discourse/tests/helpers/component-test";
import { addRawTemplate, removeRawTemplate } from "discourse-common/lib/raw-templates";
// We don't have any way to actually compile raw hbs inside tests, so this is only testing
// the helper itself, not the actual rendering of templates.
module("Integration | Helper | raw", function(hooks) {
    setupRenderingTest(hooks);
    hooks.afterEach(()=>{
        removeRawTemplate("raw-test");
    });
    test("can render a template", async function(assert) {
        addRawTemplate("raw-test", (params1)=>`raw test ${params1.someArg}`);
        await render(template(`
      <span>{{raw "raw-test" someArg="foo"}}</span>
    `, {
            eval () {
                return eval(arguments[0]);
            }
        }));
        assert.dom(`span`).hasText("raw test foo");
    });
    test("can render glimmer inside", async function(assert) {
        let willDestroyCalled = false;
        let MyComponent = class MyComponent extends Component {
            static{
                template(`
        Hello from glimmer {{@data.someArg}}
      `, {
                    component: this,
                    eval () {
                        return eval(arguments[0]);
                    }
                });
            }
            willDestroy() {
                super.willDestroy(...arguments);
                willDestroyCalled = true;
            }
        };
        addRawTemplate("raw-test", (params1)=>rawRenderGlimmer(this, "div", MyComponent, {
                someArg: params1.someArg
            }));
        let TestState = class TestState {
            @tracked
            showRawTemplate = true;
        };
        const testState = new TestState();
        const renderGlimmerService = getOwner(this).lookup("service:render-glimmer");
        await render(template(`
      {{! RenderGlimmerContainer is normally rendered by application.hbs
          but this is not an acceptance test so we gotta include it manually }}
      <RenderGlimmerContainer />
      <span>
        {{#if testState.showRawTemplate}}
          {{raw "raw-test" someArg="foo"}}
        {{/if}}
      </span>
    `, {
            eval () {
                return eval(arguments[0]);
            }
        }));
        assert.dom(`span`).hasText("Hello from glimmer foo");
        assert.strictEqual(renderGlimmerService._registrations.size, 1, "renderGlimmer service has one registration");
        testState.showRawTemplate = false;
        await settled();
        assert.dom(`span`).hasText("");
        assert.strictEqual(renderGlimmerService._registrations.size, 0, "renderGlimmer service has no registrations");
        assert.true(willDestroyCalled, "component was cleaned up correctly");
    });
});
