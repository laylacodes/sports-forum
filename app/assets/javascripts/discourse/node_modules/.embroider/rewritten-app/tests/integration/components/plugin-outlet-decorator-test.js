import { template } from "@ember/template-compiler";
import { hash } from "@ember/helper";
import { render } from "@ember/test-helpers";
import { hbs } from "ember-cli-htmlbars";
import { module, test } from "qunit";
import PluginOutlet from "discourse/components/plugin-outlet";
import { withPluginApi } from "discourse/lib/plugin-api";
import { setupRenderingTest } from "discourse/tests/helpers/component-test";
import { query } from "discourse/tests/helpers/qunit-helpers";
import { withSilencedDeprecations } from "discourse-common/lib/deprecated";
import { registerTemporaryModule } from "../../helpers/temporary-module-helper";
const PREFIX = "discourse/plugins/some-plugin/templates/connectors";
module("Plugin Outlet - Decorator", function(hooks) {
    setupRenderingTest(hooks);
    hooks.beforeEach(()=>{
        registerTemporaryModule(`${PREFIX}/my-outlet-name/foo`, hbs`FOO`);
        registerTemporaryModule(`${PREFIX}/my-outlet-name/bar`, hbs`BAR`);
        withPluginApi("0.8.38", (api1)=>{
            withSilencedDeprecations("discourse.decorate-plugin-outlet", ()=>{
                api1.decoratePluginOutlet("my-outlet-name", (elem1, args1)=>{
                    if (elem1.classList.contains("foo")) {
                        elem1.style.backgroundColor = "yellow";
                        elem1.classList.toggle("has-value", !!args1.value);
                    }
                }, {
                    id: "yellow-decorator"
                });
            });
        });
    });
    test("Calls the plugin callback with the rendered outlet", async function(assert) {
        await render(template(`
      <PluginOutlet @connectorTagName="div" @name="my-outlet-name" />
    `, {
            eval () {
                return eval(arguments[0]);
            }
        }));
        const fooConnector = query(".my-outlet-name-outlet.foo");
        const barConnector = query(".my-outlet-name-outlet.bar");
        assert.dom(fooConnector).exists();
        assert.strictEqual(fooConnector.style.backgroundColor, "yellow");
        assert.strictEqual(barConnector.style.backgroundColor, "");
        await render(template(`
      <PluginOutlet
        @connectorTagName="div"
        @name="my-outlet-name"
        @outletArgs={{hash value=true}}
      />
    `, {
            eval () {
                return eval(arguments[0]);
            }
        }));
        assert.dom(".my-outlet-name-outlet.foo").hasClass("has-value");
        await render(template(`
      <PluginOutlet @connectorTagName="div" @name="my-outlet-name" />
    `, {
            eval () {
                return eval(arguments[0]);
            }
        }));
        assert.dom(".my-outlet-name-outlet.foo").doesNotHaveClass("has-value");
    });
});
