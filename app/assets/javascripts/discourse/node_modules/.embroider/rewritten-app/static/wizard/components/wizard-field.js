import { template } from "@ember/template-compiler";
import Component from "@glimmer/component";
import { assert } from "@ember/debug";
import { dasherize } from "@ember/string";
import { htmlSafe } from "@ember/template";
import fields from "./fields";
export default class WizardFieldComponent extends Component {
    get field() {
        return this.args.field;
    }
    get classes() {
        let classes1 = [
            "wizard-container__field"
        ];
        let { type: type1, id: id1, invalid: invalid1, disabled: disabled1 } = this.field;
        classes1.push(`${dasherize(type1)}-field`);
        classes1.push(`${dasherize(type1)}-${dasherize(id1)}`);
        if (invalid1) {
            classes1.push("invalid");
        }
        if (disabled1) {
            classes1.push("disabled");
        }
        return classes1.join(" ");
    }
    get fieldClass() {
        return `field-${dasherize(this.field.id)} wizard-focusable`;
    }
    get component() {
        let { type: type1 } = this.field;
        assert(`"${type1}" is not a valid wizard field type`, type1 in fields);
        return fields[type1];
    }
    static{
        template(`
    <div class={{this.classes}}>
      {{#if @field.label}}
        <label for={{@field.id}}>
          <span class="wizard-container__label">
            {{@field.label}}
          </span>

          {{#if @field.required}}
            <span class="wizard-container__label required">*</span>
          {{/if}}

          {{#if @field.description}}
            <div class="wizard-container__description">
              {{htmlSafe @field.description}}
            </div>
          {{/if}}
        </label>
      {{/if}}

      <div class="wizard-container__input">
        <this.component
          @wizard={{@wizard}}
          @step={{@step}}
          @field={{@field}}
          @fieldClass={{this.fieldClass}}
        />
      </div>

      {{#if @field.errorDescription}}
        <div class="wizard-container__description error">
          {{htmlSafe this.field.errorDescription}}
        </div>
      {{/if}}

      {{#if @field.extraDescription}}
        <div class="wizard-container__description extra">
          {{htmlSafe this.field.extraDescription}}
        </div>
      {{/if}}
    </div>
  `, {
            component: this,
            eval () {
                return eval(arguments[0]);
            }
        });
    }
}
