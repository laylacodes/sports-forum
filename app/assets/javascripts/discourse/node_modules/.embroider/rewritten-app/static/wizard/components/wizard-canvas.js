import { template } from "@ember/template-compiler";
import Component from "@glimmer/component";
import didInsert from "@ember/render-modifiers/modifiers/did-insert";
import willDestroy from "@ember/render-modifiers/modifiers/will-destroy";
import { bind } from "discourse-common/utils/decorators";
const MAX_PARTICLES = 150;
const SIZE = 144;
const COLORS = [
    "--tertiary",
    "--quaternary",
    "--tertiary-medium",
    "--quaternary-low"
];
let Particle = class Particle {
    constructor(width1, height1){
        this.reset(width1, height1);
    }
    reset(width1, height1) {
        this.y = Math.random() * (height1 + SIZE) - SIZE;
        this.origX = Math.random() * (width1 + SIZE);
        this.speed = 0.5 + Math.random();
        this.ang = Math.random() * 2 * Math.PI;
        this.scale = Math.random() * 0.4 + 0.2;
        this.radius = Math.random() * 25 + 25;
        const colorVar1 = COLORS[Math.floor(Math.random() * COLORS.length)];
        this.color = getComputedStyle(document.body).getPropertyValue(colorVar1);
        this.flipped = Math.random() > 0.5 ? 1 : -1;
    }
    move(width1, height1) {
        this.y += this.speed;
        if (this.y > height1 + SIZE) {
            this.reset(width1, height1);
            // start at the top
            this.y = -SIZE;
        }
        this.ang += this.speed / 30.0;
        if (this.ang > 2 * Math.PI) {
            this.ang = 0;
        }
        this.x = this.origX + this.radius * Math.sin(this.ang);
    }
};
export default class WizardCanvasComponent extends Component {
    canvas = null;
    particles = null;
    get ready() {
        return this.canvas !== null;
    }
    get ctx() {
        return this.canvas.getContext("2d");
    }
    @bind
    setup(canvas1) {
        this.canvas = canvas1;
        this.resized();
        let { width: width1, height: height1 } = canvas1;
        this.particles = [];
        for(let i1 = 0; i1 < MAX_PARTICLES; i1++){
            this.particles.push(new Particle(width1, height1));
        }
        this.paint(width1, height1);
        window.addEventListener("resize", this.resized);
    }
    @bind
    teardown() {
        this.canvas = null;
        window.removeEventListener("resize", this.resized);
    }
    @bind
    resized() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
    }
    @bind
    paint() {
        if (!this.ready) {
            return;
        }
        let { ctx: ctx1 } = this;
        let { width: width1, height: height1 } = this.canvas;
        ctx1.clearRect(0, 0, width1, height1);
        for (let particle1 of this.particles){
            particle1.move(width1, height1);
            this.drawParticle(ctx1, particle1);
        }
        window.requestAnimationFrame(this.paint);
    }
    drawParticle(c1, p1) {
        c1.save();
        c1.translate(p1.x - SIZE, p1.y - SIZE);
        c1.scale(p1.scale * p1.flipped, p1.scale);
        c1.fillStyle = p1.color;
        c1.strokeStyle = p1.color;
        c1.globalAlpha = "1.0";
        c1.lineWidth = "1";
        c1.lineCap = "butt";
        c1.lineJoin = "round";
        c1.mitterLimit = "1";
        c1.beginPath();
        c1.moveTo(97.9, 194.9);
        c1.lineTo(103.5, 162.9);
        c1.bezierCurveTo(88.7, 152, 84.2, 139.7, 90.2, 126.3);
        c1.bezierCurveTo(99.5, 105.6, 124.6, 89.6, 159.7, 100.4);
        c1.lineTo(159.7, 100.4);
        c1.bezierCurveTo(175.9, 105.4, 186.4, 111.2, 192.6, 118.5);
        c1.bezierCurveTo(200, 127.2, 201.6, 138.4, 197.5, 152.7);
        c1.bezierCurveTo(194, 165, 187.4, 173.6, 177.9, 178.3);
        c1.bezierCurveTo(165.6, 184.4, 148.4, 183.7, 129.4, 176.3);
        c1.bezierCurveTo(127.7, 175.6, 126, 174.9, 124.4, 174.2);
        c1.lineTo(97.9, 194.9);
        c1.closePath();
        c1.moveTo(138, 99.3);
        c1.bezierCurveTo(115.4, 99.3, 99.3, 111.9, 92.4, 127.3);
        c1.bezierCurveTo(86.8, 139.7, 91.2, 151.2, 105.5, 161.5);
        c1.lineTo(106.1, 161.9);
        c1.lineTo(101.2, 189.4);
        c1.lineTo(124, 171.7);
        c1.lineTo(124.6, 172);
        c1.bezierCurveTo(126.4, 172.8, 128.3, 173.6, 130.2, 174.3);
        c1.bezierCurveTo(148.6, 181.4, 165.1, 182.2, 176.8, 176.4);
        c1.bezierCurveTo(185.7, 172, 191.9, 163.9, 195.2, 152.2);
        c1.bezierCurveTo(202.4, 127.2, 191.9, 112.8, 159, 102.7);
        c1.lineTo(159, 102.7);
        c1.bezierCurveTo(151.6, 100.3, 144.5, 99.3, 138, 99.3);
        c1.closePath();
        c1.fill();
        c1.stroke();
        c1.beginPath();
        c1.moveTo(115.7, 136.2);
        c1.bezierCurveTo(115.7, 137.9, 115, 139.3, 113.3, 139.3);
        c1.bezierCurveTo(111.6, 139.3, 110.2, 137.9, 110.2, 136.2);
        c1.bezierCurveTo(110.2, 134.5, 111.6, 133.1, 113.3, 133.1);
        c1.bezierCurveTo(115, 133, 115.7, 134.4, 115.7, 136.2);
        c1.closePath();
        c1.fill();
        c1.stroke();
        c1.beginPath();
        c1.moveTo(145.8, 141.6);
        c1.bezierCurveTo(145.8, 143.3, 144.4, 144.1, 142.7, 144.1);
        c1.bezierCurveTo(141, 144.1, 139.6, 143.4, 139.6, 141.6);
        c1.bezierCurveTo(139.6, 141.6, 141, 138.5, 142.7, 138.5);
        c1.bezierCurveTo(144.4, 138.5, 145.8, 139.9, 145.8, 141.6);
        c1.closePath();
        c1.fill();
        c1.stroke();
        c1.beginPath();
        c1.moveTo(171.6, 146.8);
        c1.bezierCurveTo(171.6, 148.5, 171, 149.9, 169.2, 149.9);
        c1.bezierCurveTo(167.5, 149.9, 166.1, 148.5, 166.1, 146.8);
        c1.bezierCurveTo(166.1, 145.1, 167.5, 143.7, 169.2, 143.7);
        c1.bezierCurveTo(171, 143.6, 171.6, 145, 171.6, 146.8);
        c1.closePath();
        c1.fill();
        c1.stroke();
        c1.restore();
    }
    static{
        template(`
    <canvas
      class="wizard-canvas"
      {{didInsert this.setup}}
      {{willDestroy this.teardown}}
    />
  `, {
            component: this,
            eval () {
                return eval(arguments[0]);
            }
        });
    }
}
