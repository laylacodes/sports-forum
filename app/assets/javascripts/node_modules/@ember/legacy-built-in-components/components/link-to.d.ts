import EmberComponent from '@ember/component';
declare const LinkComponent: Readonly<typeof EmberComponent> & (new (properties?: object | undefined) => {
    tagName: string;
    /**
      @property route
      @public
    */
    route: Readonly<{
        toString(): "UNDEFINED";
    }>;
    /**
      @property model
      @public
    */
    model: Readonly<{
        toString(): "UNDEFINED";
    }>;
    /**
      @property models
      @public
    */
    models: Readonly<{
        toString(): "UNDEFINED";
    }>;
    /**
      @property query
      @public
    */
    query: Readonly<{
        toString(): "UNDEFINED";
    }>;
    /**
      Used to determine when this `LinkComponent` is active.
  
      @property current-when
      @public
    */
    'current-when': null;
    /**
      @property disabledWhen
      @public
    */
    disabledWhen: undefined;
    /**
      Sets the `title` attribute of the `LinkComponent`'s HTML element.
  
      @property title
      @default null
      @public
    **/
    title: null;
    /**
      Sets the `rel` attribute of the `LinkComponent`'s HTML element.
  
      @property rel
      @default null
      @public
    **/
    rel: null;
    /**
      Sets the `tabindex` attribute of the `LinkComponent`'s HTML element.
  
      @property tabindex
      @default null
      @public
    **/
    tabindex: null;
    /**
      Sets the `target` attribute of the `LinkComponent`'s HTML element.
  
      @since 1.8.0
      @property target
      @default null
      @public
    **/
    target: null;
    /**
      The CSS class to apply to `LinkComponent`'s element when its `active`
      property is `true`.
  
      @property activeClass
      @type String
      @default active
      @public
    **/
    activeClass: string;
    /**
      The CSS class to apply to `LinkComponent`'s element when its `loading`
      property is `true`.
  
      @property loadingClass
      @type String
      @default loading
      @public
    **/
    loadingClass: string;
    /**
      The CSS class to apply to a `LinkComponent`'s element when its `disabled`
      property is `true`.
  
      @property disabledClass
      @type String
      @default disabled
      @public
    **/
    disabledClass: string;
    /**
      Determines whether the `LinkComponent` will trigger routing via
      the `replaceWith` routing strategy.
  
      @property replace
      @type Boolean
      @default false
      @public
    **/
    replace: boolean;
    /**
      Determines whether the `LinkComponent` will prevent the default
      browser action by calling preventDefault() to avoid reloading
      the browser page.
  
      If you need to trigger a full browser reload pass `@preventDefault={{false}}`:
  
      ```handlebars
      <LinkTo @route='photoGallery' @model={{this.aPhotoId}} @preventDefault={{false}}>
        {{this.aPhotoId.title}}
      </LinkTo>
      ```
  
      @property preventDefault
      @type Boolean
      @default true
      @private
    **/
    preventDefault: boolean;
    /**
      @property linkTitle
      @private
    */
    linkTitle: undefined;
    /**
      By default this component will forward `href`, `title`, `rel`, `tabindex`, and `target`
      arguments to attributes on the component's element. When invoked with `{{link-to}}`, you can
      only customize these attributes. When invoked with `<LinkTo>`, you can just use HTML
      attributes directly.
  
      @property attributeBindings
      @type Array | String
      @default ['title', 'rel', 'tabindex', 'target']
      @public
    */
    attributeBindings: string[];
    /**
      By default this component will set classes on its element when any of the following arguments
      are truthy:
  
      * active
      * loading
      * disabled
  
      When these arguments are truthy, a class with the same name will be set on the element. When
      falsy, the associated class will not be on the element.
  
      @property classNameBindings
      @type Array
      @default ['active', 'loading', 'disabled', 'ember-transitioning-in', 'ember-transitioning-out']
      @public
    */
    classNameBindings: string[];
    /**
      By default this component responds to the `click` event. When the component element is an
      `<a>` element, activating the link in another way, such as using the keyboard, triggers the
      click event.
  
      @property eventName
      @type String
      @default click
      @private
    */
    eventName: string;
    /**
      Triggers the `LinkComponent`'s routing behavior. If
      `eventName` is changed to a value other than `click`
      the routing behavior will trigger on that custom event
      instead.
  
      @event click
      @private
    */
    /**
      An overridable method called when `LinkComponent` objects are instantiated.
  
      Example:
  
      ```app/components/my-link.js
      import LinkComponent from '@ember/routing/link-component';
  
      export default LinkComponent.extend({
        init() {
          this._super(...arguments);
          console.log('Event is ' + this.get('eventName'));
        }
      });
      ```
  
      NOTE: If you do override `init` for a framework class like `Component`,
      be sure to call `this._super(...arguments)` in your
      `init` declaration! If you don't, Ember may not have an opportunity to
      do important setup work, and you'll see strange behavior in your
      application.
  
      @method init
      @private
    */
    init(): void;
    _routing: any;
    _currentRoute: import("@ember/object/computed").default<unknown, unknown>;
    _currentRouterState: import("@ember/object/computed").default<unknown, unknown>;
    _targetRouterState: import("@ember/object/computed").default<unknown, unknown>;
    /**
     * Method to assert that LinkTo is not used inside of a routeless engine. This method is
     * overridden in ember-engines link-to-external component to just be a noop, since the
     * link-to-external component extends the link-to component.
     *
     * @method assertLinkToOrigin
     * @private
     */
    assertLinkToOrigin(): void;
    _isEngine: import("@ember/object/computed").default<boolean, boolean>;
    _engineMountPoint: any;
    _route: import("@ember/object/computed").default<any, any>;
    _models: import("@ember/object/computed").default<any[], any[]>;
    _query: import("@ember/object/computed").default<any, any>;
    /**
      Accessed as a classname binding to apply the component's `disabledClass`
      CSS `class` to the element when the link is disabled.
  
      When `true`, interactions with the element will not trigger route changes.
      @property disabled
      @public
    */
    disabled: import("@ember/object/computed").default<boolean, any>;
    /**
      Accessed as a classname binding to apply the component's `activeClass`
      CSS `class` to the element when the link is active.
  
      This component is considered active when its `currentWhen` property is `true`
      or the application's current route is the route this component would trigger
      transitions into.
  
      The `currentWhen` property can match against multiple routes by separating
      route names using the ` ` (space) character.
  
      @property active
      @private
    */
    active: import("@ember/object/computed").default<any, any>;
    _active: import("@ember/object/computed").default<any, any>;
    willBeActive: import("@ember/object/computed").default<any, any>;
    _isActive(routerState: any): boolean;
    transitioningIn: import("@ember/object/computed").default<false | "ember-transitioning-in", false | "ember-transitioning-in">;
    transitioningOut: import("@ember/object/computed").default<false | "ember-transitioning-out", false | "ember-transitioning-out">;
    _namespaceRoute(route: string): string;
    /**
      Event handler that invokes the link, activating the associated route.
  
      @method _invoke
      @param {Event} event
      @private
    */
    _invoke(this: any, event: MouseEvent): boolean;
    _generateTransition(payload: any, qualifiedRouteName: string, models: any[], queryParams: any[], shouldReplace: boolean): void;
    /**
      Sets the element's `href` attribute to the url for
      the `LinkComponent`'s targeted route.
  
      If the `LinkComponent`'s `tagName` is changed to a value other
      than `a`, this property will be ignored.
  
      @property href
      @private
    */
    href: import("@ember/object/computed").default<any, any>;
    /**
      The loading state. Returns the loadingClass is true.
  
      @property activeClass
      @type {string|undefined}
      @default active
      @public
    **/
    loading: string;
    _modelsAreLoaded: import("@ember/object/computed").default<boolean, boolean>;
    /**
      The default href value to use while a link-to is loading.
      Only applies when tagName is 'a'
  
      @property loadingHref
      @type String
      @default #
      @private
    */
    loadingHref: string;
    didReceiveAttrs(): void;
} & EmberComponent) & (new (...args: any[]) => {
    tagName: string;
    /**
      @property route
      @public
    */
    route: Readonly<{
        toString(): "UNDEFINED";
    }>;
    /**
      @property model
      @public
    */
    model: Readonly<{
        toString(): "UNDEFINED";
    }>;
    /**
      @property models
      @public
    */
    models: Readonly<{
        toString(): "UNDEFINED";
    }>;
    /**
      @property query
      @public
    */
    query: Readonly<{
        toString(): "UNDEFINED";
    }>;
    /**
      Used to determine when this `LinkComponent` is active.
  
      @property current-when
      @public
    */
    'current-when': null;
    /**
      @property disabledWhen
      @public
    */
    disabledWhen: undefined;
    /**
      Sets the `title` attribute of the `LinkComponent`'s HTML element.
  
      @property title
      @default null
      @public
    **/
    title: null;
    /**
      Sets the `rel` attribute of the `LinkComponent`'s HTML element.
  
      @property rel
      @default null
      @public
    **/
    rel: null;
    /**
      Sets the `tabindex` attribute of the `LinkComponent`'s HTML element.
  
      @property tabindex
      @default null
      @public
    **/
    tabindex: null;
    /**
      Sets the `target` attribute of the `LinkComponent`'s HTML element.
  
      @since 1.8.0
      @property target
      @default null
      @public
    **/
    target: null;
    /**
      The CSS class to apply to `LinkComponent`'s element when its `active`
      property is `true`.
  
      @property activeClass
      @type String
      @default active
      @public
    **/
    activeClass: string;
    /**
      The CSS class to apply to `LinkComponent`'s element when its `loading`
      property is `true`.
  
      @property loadingClass
      @type String
      @default loading
      @public
    **/
    loadingClass: string;
    /**
      The CSS class to apply to a `LinkComponent`'s element when its `disabled`
      property is `true`.
  
      @property disabledClass
      @type String
      @default disabled
      @public
    **/
    disabledClass: string;
    /**
      Determines whether the `LinkComponent` will trigger routing via
      the `replaceWith` routing strategy.
  
      @property replace
      @type Boolean
      @default false
      @public
    **/
    replace: boolean;
    /**
      Determines whether the `LinkComponent` will prevent the default
      browser action by calling preventDefault() to avoid reloading
      the browser page.
  
      If you need to trigger a full browser reload pass `@preventDefault={{false}}`:
  
      ```handlebars
      <LinkTo @route='photoGallery' @model={{this.aPhotoId}} @preventDefault={{false}}>
        {{this.aPhotoId.title}}
      </LinkTo>
      ```
  
      @property preventDefault
      @type Boolean
      @default true
      @private
    **/
    preventDefault: boolean;
    /**
      @property linkTitle
      @private
    */
    linkTitle: undefined;
    /**
      By default this component will forward `href`, `title`, `rel`, `tabindex`, and `target`
      arguments to attributes on the component's element. When invoked with `{{link-to}}`, you can
      only customize these attributes. When invoked with `<LinkTo>`, you can just use HTML
      attributes directly.
  
      @property attributeBindings
      @type Array | String
      @default ['title', 'rel', 'tabindex', 'target']
      @public
    */
    attributeBindings: string[];
    /**
      By default this component will set classes on its element when any of the following arguments
      are truthy:
  
      * active
      * loading
      * disabled
  
      When these arguments are truthy, a class with the same name will be set on the element. When
      falsy, the associated class will not be on the element.
  
      @property classNameBindings
      @type Array
      @default ['active', 'loading', 'disabled', 'ember-transitioning-in', 'ember-transitioning-out']
      @public
    */
    classNameBindings: string[];
    /**
      By default this component responds to the `click` event. When the component element is an
      `<a>` element, activating the link in another way, such as using the keyboard, triggers the
      click event.
  
      @property eventName
      @type String
      @default click
      @private
    */
    eventName: string;
    /**
      Triggers the `LinkComponent`'s routing behavior. If
      `eventName` is changed to a value other than `click`
      the routing behavior will trigger on that custom event
      instead.
  
      @event click
      @private
    */
    /**
      An overridable method called when `LinkComponent` objects are instantiated.
  
      Example:
  
      ```app/components/my-link.js
      import LinkComponent from '@ember/routing/link-component';
  
      export default LinkComponent.extend({
        init() {
          this._super(...arguments);
          console.log('Event is ' + this.get('eventName'));
        }
      });
      ```
  
      NOTE: If you do override `init` for a framework class like `Component`,
      be sure to call `this._super(...arguments)` in your
      `init` declaration! If you don't, Ember may not have an opportunity to
      do important setup work, and you'll see strange behavior in your
      application.
  
      @method init
      @private
    */
    init(): void;
    _routing: any;
    _currentRoute: import("@ember/object/computed").default<unknown, unknown>;
    _currentRouterState: import("@ember/object/computed").default<unknown, unknown>;
    _targetRouterState: import("@ember/object/computed").default<unknown, unknown>;
    /**
     * Method to assert that LinkTo is not used inside of a routeless engine. This method is
     * overridden in ember-engines link-to-external component to just be a noop, since the
     * link-to-external component extends the link-to component.
     *
     * @method assertLinkToOrigin
     * @private
     */
    assertLinkToOrigin(): void;
    _isEngine: import("@ember/object/computed").default<boolean, boolean>;
    _engineMountPoint: any;
    _route: import("@ember/object/computed").default<any, any>;
    _models: import("@ember/object/computed").default<any[], any[]>;
    _query: import("@ember/object/computed").default<any, any>;
    /**
      Accessed as a classname binding to apply the component's `disabledClass`
      CSS `class` to the element when the link is disabled.
  
      When `true`, interactions with the element will not trigger route changes.
      @property disabled
      @public
    */
    disabled: import("@ember/object/computed").default<boolean, any>;
    /**
      Accessed as a classname binding to apply the component's `activeClass`
      CSS `class` to the element when the link is active.
  
      This component is considered active when its `currentWhen` property is `true`
      or the application's current route is the route this component would trigger
      transitions into.
  
      The `currentWhen` property can match against multiple routes by separating
      route names using the ` ` (space) character.
  
      @property active
      @private
    */
    active: import("@ember/object/computed").default<any, any>;
    _active: import("@ember/object/computed").default<any, any>;
    willBeActive: import("@ember/object/computed").default<any, any>;
    _isActive(routerState: any): boolean;
    transitioningIn: import("@ember/object/computed").default<false | "ember-transitioning-in", false | "ember-transitioning-in">;
    transitioningOut: import("@ember/object/computed").default<false | "ember-transitioning-out", false | "ember-transitioning-out">;
    _namespaceRoute(route: string): string;
    /**
      Event handler that invokes the link, activating the associated route.
  
      @method _invoke
      @param {Event} event
      @private
    */
    _invoke(this: any, event: MouseEvent): boolean;
    _generateTransition(payload: any, qualifiedRouteName: string, models: any[], queryParams: any[], shouldReplace: boolean): void;
    /**
      Sets the element's `href` attribute to the url for
      the `LinkComponent`'s targeted route.
  
      If the `LinkComponent`'s `tagName` is changed to a value other
      than `a`, this property will be ignored.
  
      @property href
      @private
    */
    href: import("@ember/object/computed").default<any, any>;
    /**
      The loading state. Returns the loadingClass is true.
  
      @property activeClass
      @type {string|undefined}
      @default active
      @public
    **/
    loading: string;
    _modelsAreLoaded: import("@ember/object/computed").default<boolean, boolean>;
    /**
      The default href value to use while a link-to is loading.
      Only applies when tagName is 'a'
  
      @property loadingHref
      @type String
      @default #
      @private
    */
    loadingHref: string;
    didReceiveAttrs(): void;
} & EmberComponent);
export default LinkComponent;
