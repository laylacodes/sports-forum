"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertNewline = exports.PreparedEmberHTML = void 0;
const jsdom_1 = require("jsdom");
const fs_1 = require("fs");
const html_placeholder_1 = require("./html-placeholder");
class Placeholder {
    static replacing(node) {
        let placeholder = this.immediatelyAfter(node);
        node.parentElement.removeChild(node);
        return placeholder;
    }
    static immediatelyAfter(node) {
        let document = node.ownerDocument;
        let parent = node.parentElement;
        if (!document || !parent) {
            throw new Error('Cannot make Placeholder out of detached node');
        }
        let nextSibling = node.nextSibling;
        let start = document.createTextNode('');
        let end = document.createTextNode('');
        parent.insertBefore(start, nextSibling);
        parent.insertBefore(end, nextSibling);
        return new Placeholder(start, end, node);
    }
    constructor(start, end, reference) {
        this.start = start;
        this.end = end;
        this.reference = reference;
        if (start.parentElement && start.parentElement === end.parentElement) {
            this.parent = start.parentElement;
        }
        else {
            throw new Error('Cannot make Placeholder out of detached node');
        }
    }
    clear() {
        let { start, end, parent } = this;
        while (start.nextSibling && start.nextSibling !== end) {
            parent.removeChild(start.nextSibling);
        }
    }
    insert(node) {
        this.parent.insertBefore(node, this.end);
    }
}
class PreparedEmberHTML {
    constructor(asset) {
        this.asset = asset;
        this.dom = new jsdom_1.JSDOM((0, fs_1.readFileSync)(asset.sourcePath, 'utf8'));
        let html = asset.prepare(this.dom);
        this.javascript = Placeholder.replacing(html.javascript);
        this.styles = Placeholder.replacing(html.styles);
        this.implicitScripts = Placeholder.replacing(html.implicitScripts);
        this.implicitStyles = Placeholder.replacing(html.implicitStyles);
        this.testJavascript = html.testJavascript
            ? Placeholder.replacing(html.testJavascript)
            : Placeholder.immediatelyAfter(this.javascript.end);
        this.implicitTestScripts = html.implicitTestScripts
            ? Placeholder.replacing(html.implicitTestScripts)
            : Placeholder.immediatelyAfter(this.implicitScripts.end);
        this.implicitTestStyles = html.implicitTestStyles
            ? Placeholder.replacing(html.implicitTestStyles)
            : Placeholder.immediatelyAfter(this.implicitStyles.end);
    }
    placeholders() {
        return [
            this.javascript,
            this.styles,
            this.implicitScripts,
            this.implicitStyles,
            this.implicitTestScripts,
            this.implicitTestStyles,
            this.testJavascript,
        ];
    }
    clear() {
        for (let range of this.placeholders()) {
            range.clear();
        }
    }
    // this takes the src relative to the application root, we adjust it so it's
    // root-relative via the configured rootURL
    insertScriptTag(placeholder, relativeSrc, { type, tag = 'script' } = {}) {
        let document = this.dom.window.document;
        let from = placeholder.reference.nodeType === 1 ? placeholder.reference : undefined;
        let src = this.asset.rootURL + relativeSrc;
        let attributes = type ? { src, type } : { src };
        let newTag = (0, html_placeholder_1.makeTag)(document, { from, tag, attributes });
        placeholder.insert(this.dom.window.document.createTextNode('\n'));
        placeholder.insert(newTag);
    }
    // this takes the href relative to the application root, we adjust it so it's
    // root-relative via the configured rootURL
    insertStyleLink(placeholder, relativeHref) {
        let document = this.dom.window.document;
        let from = placeholder.reference.nodeType === 1 ? placeholder.reference : undefined;
        let href = this.asset.rootURL + relativeHref;
        let newTag = (0, html_placeholder_1.makeTag)(document, { from, tag: 'link', attributes: { href } });
        (0, html_placeholder_1.normalizeStyleLink)(newTag);
        placeholder.insert(this.dom.window.document.createTextNode('\n'));
        placeholder.insert(newTag);
    }
}
exports.PreparedEmberHTML = PreparedEmberHTML;
function insertNewline(at) {
    at.parentElement.insertBefore(at.ownerDocument.createTextNode('\n'), at);
}
exports.insertNewline = insertNewline;
//# sourceMappingURL=ember-html.js.map