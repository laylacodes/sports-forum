{"version":3,"file":"html-placeholder.js","sourceRoot":"","sources":["html-placeholder.ts"],"names":[],"mappings":"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","sourcesContent":["export function makeTag(\n  document: Document,\n  options: { from: HTMLElement; tag?: string; attributes?: { [name: string]: string | null } }\n): HTMLElement;\nexport function makeTag(\n  document: Document,\n  options: { from?: HTMLElement; tag: string; attributes?: { [name: string]: string | null } }\n): HTMLElement;\nexport function makeTag(\n  document: Document,\n  { from, tag, attributes }: { from?: HTMLElement; tag?: string; attributes?: { [name: string]: string | null } } = {}\n): HTMLElement {\n  if (!tag && from) {\n    tag = from.tagName;\n  }\n\n  if (!tag) {\n    throw new Error('Must supply one of `options.from` or `options.tag`');\n  }\n\n  let cloned = document.createElement(tag);\n  let overrides = new Map(Object.entries(attributes ?? {}));\n\n  if (from) {\n    for (let { name, value: originalValue } of from.attributes) {\n      let value = overrides.has(name) ? overrides.get(name)! : originalValue;\n      overrides.delete(name);\n\n      if (value === null) {\n        continue;\n      } else {\n        cloned.setAttribute(name, value);\n      }\n    }\n  }\n\n  for (let [name, value] of overrides) {\n    if (value !== null) {\n      cloned.setAttribute(name, value);\n    }\n  }\n\n  return cloned;\n}\n\nexport function normalizeScriptTag(tag: HTMLElement): void {\n  if (tag.getAttribute('type') === 'module') {\n    // we always convert modules to scripts, dropping\n    tag.removeAttribute('type');\n  }\n}\n\nexport function normalizeStyleLink(tag: HTMLElement): void {\n  let rel = tag.getAttribute('rel');\n\n  if (rel === null) {\n    tag.setAttribute('rel', 'stylesheet');\n  } else if (!rel.includes('stylesheet')) {\n    tag.setAttribute('rel', `${rel} stylesheet`);\n  }\n}\n\nexport default class Placeholder {\n  end: InDOMNode;\n  start: StartNode;\n\n  // remove the target Element from the DOM, and track where it was so we can\n  // update that location later.\n  constructor(private target: HTMLElement) {\n    if (!target.ownerDocument || !target.parentElement) {\n      throw new Error('can only construct a placeholder for an element that is in DOM');\n    }\n    let start = target.ownerDocument.createTextNode('');\n    target.parentElement.insertBefore(start, target);\n    let endNode = target.ownerDocument.createTextNode('');\n    target.replaceWith(endNode);\n\n    // Type cast is justified because start always has a nextSibling (it's\n    // \"end\") and because we know we already inserted the node.\n    this.start = start as StartNode;\n\n    // Type cast is justified because we know we already inserted the node.\n    this.end = endNode as InDOMNode;\n  }\n\n  reset() {\n    this.clear();\n    this.insert(this.target);\n  }\n\n  clear() {\n    while (this.start.nextSibling !== this.end) {\n      this.start.parentElement.removeChild(this.start.nextSibling);\n    }\n  }\n\n  insert(node: Node): void {\n    this.end.parentElement.insertBefore(node, this.end);\n  }\n\n  appendToHead(node: Node): void {\n    this.end.ownerDocument.head.appendChild(node);\n  }\n\n  isScript(): boolean {\n    return this.target.tagName === 'SCRIPT';\n  }\n\n  insertURL(url: string) {\n    if (url.endsWith('.js')) {\n      return this.insertScriptTag(url);\n    }\n    if (url.endsWith('.css')) {\n      return this.insertStyleLink(url);\n    }\n    throw new Error(`don't know how to insertURL ${url}`);\n  }\n\n  insertScriptTag(src: string) {\n    let newTag = makeTag(this.end.ownerDocument, { from: this.target, attributes: { src } });\n    normalizeScriptTag(newTag);\n\n    this.insert(newTag);\n    this.insertNewline();\n    return newTag;\n  }\n\n  insertStyleLink(href: string) {\n    let newTag: HTMLElement;\n\n    if (this.isScript()) {\n      // Add dynamic styles from scripts to the bottom of the head, and not to where the script was,\n      // to prevent FOUC when pre-rendering (FastBoot)\n      newTag = makeTag(this.end.ownerDocument, {\n        from: this.target,\n        tag: 'link',\n        attributes: { href, type: null, src: null },\n      });\n      normalizeStyleLink(newTag);\n      this.appendToHead(newTag);\n    } else {\n      // Keep the new style in the same place as the original one\n      newTag = makeTag(this.end.ownerDocument, { from: this.target, attributes: { href } });\n      normalizeStyleLink(newTag);\n      this.insert(newTag);\n    }\n    this.insertNewline(newTag as InDOMNode);\n  }\n\n  insertNewline(node: InDOMNode = this.end): void {\n    node.parentElement.insertBefore(node.ownerDocument.createTextNode('\\n'), node);\n  }\n}\n\n// an html node that's definitely inserted into the DOM\ninterface InDOMNode extends Node {\n  parentElement: HTMLElement;\n  ownerDocument: Document;\n}\n\n// an html node that definitely has a next sibling.\ninterface StartNode extends InDOMNode {\n  nextSibling: InDOMNode & ChildNode;\n}\n"]}