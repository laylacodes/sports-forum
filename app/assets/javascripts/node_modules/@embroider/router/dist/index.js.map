{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable ember/no-private-routing-service */\n/*\n  This code is adapted from ember-engines/addon/-private/router-ext.js.\n*/\nimport EmberRouter from '@ember/routing/router';\nimport { buildWaiter } from '@ember/test-waiters';\nimport { macroCondition, getGlobalConfig } from '@embroider/macros';\n\ninterface GlobalConfig {\n  '@embroider/core'?: { active: boolean };\n}\n\ntype EngineInfoByRoute = Record<string, { name: string }>;\n\nlet Router: typeof EmberRouter;\n\nif (macroCondition(getGlobalConfig<GlobalConfig>()['@embroider/core']?.active ?? false)) {\n  const waiter = buildWaiter('@embroider/router:lazy-route-waiter');\n\n  function embroiderBundles(): {\n    _embroiderEngineBundles_?: { names: string[]; loaded?: true; load: () => Promise<void> }[];\n    _embroiderRouteBundles_?: { names: string[]; loaded?: true; load: () => Promise<void> }[];\n  } {\n    return window as ReturnType<typeof embroiderBundles>;\n  }\n\n  class EmbroiderRouter extends EmberRouter {\n    private lazyBundle(routeName: string) {\n      let engineInfoByRoute = (this as unknown as { _engineInfoByRoute: EngineInfoByRoute })._engineInfoByRoute;\n\n      // Here we map engine names to route names. We need to do this because\n      // engines can be specified with \"as\" such as:\n      //\n      // this.mount('lazy-engine', { path: '/use-lazy-engine', as: 'use-lazy-engine' });\n      //\n      // This presents a problem at build time since we cant get this \"mount point\" name. This is because the\n      // router is dynamic and the string could be defined as anything. Luckly, this._engineInfoByRoute contains\n      // mappings from routeName to the engines \"original name\" (which we know at build time).\n      let bundles = embroiderBundles();\n      let engine = engineInfoByRoute[routeName];\n      if (engine && bundles._embroiderEngineBundles_) {\n        let engineName = engine.name;\n        return bundles._embroiderEngineBundles_.find(bundle => bundle.names.indexOf(engineName) !== -1);\n      }\n\n      if (bundles._embroiderRouteBundles_) {\n        return bundles._embroiderRouteBundles_.find(bundle => bundle.names.indexOf(routeName) !== -1);\n      }\n\n      return false;\n    }\n\n    // This is necessary in order to prevent the premature loading of lazy routes\n    // when we are merely trying to render a link-to that points at them.\n    // Unfortunately the stock query parameter behavior pulls on routes just to\n    // check what their previous QP values were.\n    _getQPMeta(handlerInfo: { name: string }, ...rest: unknown[]) {\n      let bundle = this.lazyBundle(handlerInfo.name);\n      if (bundle && !bundle.loaded) {\n        return undefined;\n      }\n      // @ts-expect-error extending private method\n      return super._getQPMeta(handlerInfo, ...rest);\n    }\n\n    // This is the framework method that we're overriding to provide our own\n    // handlerResolver.\n    setupRouter(...args: unknown[]) {\n      // @ts-expect-error extending private method\n      let isSetup = super.setupRouter(...args);\n      let microLib = (this as unknown as { _routerMicrolib: { getRoute: (name: string) => unknown } })._routerMicrolib;\n      microLib.getRoute = this._handlerResolver(microLib.getRoute.bind(microLib));\n      return isSetup;\n    }\n\n    private _handlerResolver(original: (name: string) => unknown) {\n      return (name: string) => {\n        const bundle = this.lazyBundle(name);\n        if (!bundle || bundle.loaded) {\n          return original(name);\n        }\n\n        let token = waiter.beginAsync();\n\n        return bundle.load().then(\n          () => {\n            waiter.endAsync(token);\n            bundle.loaded = true;\n            return original(name);\n          },\n          err => {\n            waiter.endAsync(token);\n            throw err;\n          }\n        );\n      };\n    }\n  }\n\n  Router = EmbroiderRouter;\n} else {\n  Router = EmberRouter;\n}\n\nexport default Router;\n"],"names":["Router","macroCondition","getGlobalConfig","active","waiter","buildWaiter","embroiderBundles","window","EmbroiderRouter","EmberRouter","lazyBundle","routeName","engineInfoByRoute","_engineInfoByRoute","bundles","engine","_embroiderEngineBundles_","engineName","name","find","bundle","names","indexOf","_embroiderRouteBundles_","_getQPMeta","handlerInfo","rest","loaded","undefined","setupRouter","args","isSetup","microLib","_routerMicrolib","getRoute","_handlerResolver","bind","original","token","beginAsync","load","then","endAsync","err"],"mappings":"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"}