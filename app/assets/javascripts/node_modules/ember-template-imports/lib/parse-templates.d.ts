export type TemplateMatch = TemplateTagMatch;
export interface TemplateTagMatch {
    type: 'template-tag';
    tagName: string;
    start: RegExpMatchArray;
    end: RegExpMatchArray;
    contents: string;
}
/**
 * The input options to instruct parseTemplates on how to parse the input.
 *
 * @param templateTag
 */
export interface ParseTemplatesOptions {
    /** Tag to use, if parsing template tags is enabled. */
    templateTag?: string;
}
export declare const DEFAULT_PARSE_TEMPLATES_OPTIONS: {
    templateTag: string;
};
/**
 * Parses a template to find all possible valid matches for an embedded template.
 * Template tags are the only supported syntax
 *
 *   <template></template>
 *
 * The parser excludes any values found within strings recursively, and also
 * excludes any string literals with dynamic segments (e.g `${}`) since these
 * cannot be valid templates.
 *
 * @param template The template to parse
 * @param relativePath Relative file path for the template (for errors)
 * @param options optional configuration options for how to parse templates
 * @returns
 */
export declare function parseTemplates(template: string, relativePath: string, options?: ParseTemplatesOptions): TemplateMatch[];
