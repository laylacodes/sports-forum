function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable})),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key])}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}return target}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}/**
 * @typedef {import('./types').Internals} Internals
 */import Transaction,{defaultTasks,tasks}from"../transaction.js";import createNode from"../node/create.js";import syncTree from"../tree/sync.js";import decodeEntities from"./decode-entities.js";import escape from"./escape.js";import makeMeasure from"./make-measure.js";import*as memory from"./memory.js";import Pool from"./pool.js";import internalProcess from"./process.js";import{globalConfig}from"./config.js";import{EMPTY,PATCH_TYPE,NODE_TYPE,StateCache,NodeCache,MiddlewareCache,CreateTreeHookCache,CreateNodeHookCache,SyncTreeHookCache,ReleaseHookCache,ParseHookCache}from"./types.js";const caches={StateCache,NodeCache,MiddlewareCache,CreateTreeHookCache,CreateNodeHookCache,SyncTreeHookCache,ReleaseHookCache,ParseHookCache};export default/** @type {Internals} */_objectSpread({// Utils.
decodeEntities,escape,makeMeasure,memory,Pool,process:internalProcess,globalConfig,// Set parse to an empty function by default to avoid bundling the parser
// here.
parse:EMPTY.FUN,// Enum.
PATCH_TYPE,NODE_TYPE,// Core.
createNode,syncTree,// Tasks.
Transaction,defaultTasks,tasks},caches);