export type NODE_TYPE = number;
export namespace NODE_TYPE {
    const ELEMENT: number;
    const ATTR: number;
    const TEXT: number;
    const COMMENT: number;
    const FRAGMENT: number;
}
export type EMPTY = any;
export namespace EMPTY {
    const STR: string;
    const NUM: number;
    const OBJ: any;
    const ARR: never[];
    const MAP: Map<any, any>;
    const SET: Set<any>;
    const DOM: HTMLElement;
    function FUN(): void;
}
export type PATCH_TYPE = number;
export namespace PATCH_TYPE {
    const SET_ATTRIBUTE: number;
    const REMOVE_ATTRIBUTE: number;
    const NODE_VALUE: number;
    const INSERT_BEFORE: number;
    const REPLACE_CHILD: number;
    const REMOVE_CHILD: number;
}
/**
 * Associates active transaction mount with state.
 */
export type StateCache = Map<Mount, TransactionState>;
/**
 * Associates active transaction mount with state.
 *
 * @typedef {Map<Mount, TransactionState>} StateCache
 */
export const StateCache: Map<any, any>;
/**
 * Associates a VTree with a distinctive DOM Node.
 */
export type NodeCache = Map<VTree, ValidNode>;
/**
 * Associates a VTree with a distinctive DOM Node.
 *
 * @typedef {Map<VTree, ValidNode>} NodeCache
 */
export const NodeCache: Map<any, any>;
/**
 * Stores middleware functions/objects which hook into the render flow.
 */
export type MiddlewareCache = Set<Function>;
/**
 * Stores middleware functions/objects which hook into the render flow.
 *
 * @typedef {Set<Function>} MiddlewareCache
 */
export const MiddlewareCache: Set<any>;
export type CreateTreeHookCache = Set<Function>;
/**
 * @typedef {Set<Function>} CreateTreeHookCache
 */
export const CreateTreeHookCache: Set<any>;
export type CreateNodeHookCache = Set<CreateNodeHookCallback>;
/**
 * @typedef {(vTree: VTree) => ValidNode | void} CreateNodeHookCallback
 * @typedef {Set<CreateNodeHookCallback>} CreateNodeHookCache
 */
export const CreateNodeHookCache: Set<any>;
export type SyncTreeHookCache = Set<Function>;
/**
 * @typedef {Set<Function>} SyncTreeHookCache
 */
export const SyncTreeHookCache: Set<any>;
export type ReleaseHookCache = Set<Function>;
/**
 * @typedef {Set<Function>} ReleaseHookCache
 */
export const ReleaseHookCache: Set<any>;
export type ParseHookCache = Set<Function>;
/**
 * @typedef {Set<Function>} ParseHookCache
 */
export const ParseHookCache: Set<any>;
export type VTreeAttributes = {
    [key: string]: any;
};
/**
 * @typedef {{ [key: string]: any }} VTreeAttributes
 *
 */
export const VTreeAttributes: any;
export type CreateNodeHookCallback = (vTree: VTree) => ValidNode | void;
export type VTree = {
    /**
     * - unaltered extracted nodeName
     */
    rawNodeName: any;
    /**
     * - lowercased, string, nodeName
     */
    nodeName: string;
    /**
     * - defines the text value associated
     */
    nodeValue: string;
    /**
     * - the type of Node this is representing
     */
    nodeType: number;
    /**
     * - A unique identifier for the children
     */
    key: string;
    /**
     * - Any nested elements
     */
    childNodes: VTree[];
    /**
     * - Any key/val attributes for the Node
     */
    attributes: VTreeAttributes;
};
export type VTreeLike = {
    /**
     * - unaltered extracted nodeName
     */
    rawNodeName?: any | undefined;
    /**
     * - lowercased, string, nodeName, only required value
     */
    nodeName?: string | undefined;
    /**
     * - lowercased, string, elementName
     */
    elementName?: string | undefined;
    /**
     * - defines the text value associated
     */
    nodeValue?: string | undefined;
    /**
     * - the type of Node this is representing
     */
    nodeType?: number | undefined;
    /**
     * - A unique identifier for the children
     */
    key?: string | undefined;
    /**
     * - Any nested elements
     */
    childNodes?: VTreeLike[] | undefined;
    /**
     * - Any nested elements
     */
    children?: VTreeLike[] | undefined;
    /**
     * - Any key/val attributes for the Node
     */
    attributes?: any | undefined;
};
export type ValidInput = HTMLElement | ChildNode | Element | Text | Comment | DocumentFragment | Function | string | string[] | VTree | VTree[] | VTreeLike | VTreeLike[];
export type ValidNode = Element | HTMLElement | Text | DocumentFragment | ChildNode;
export type Mount = ValidNode | VTree | VTree[] | VTreeLike | VTreeLike[];
export type Middleware = {
    displayName?: string | undefined;
    subscribe?: Function | undefined;
    unsubscribe?: Function | undefined;
    createTreeHook?: Function | undefined;
    createNodeHook?: CreateNodeHookCallback | undefined;
    syncTreeHook?: Function | undefined;
    releaseHook?: Function | undefined;
    parseHook?: Function | undefined;
};
export type ParserConfig = {
    /**
     * - Set of raw element tagNames, empty is all
     */
    rawElements?: string[] | undefined;
    /**
     * - Set of self closing element tagNames, empty is all
     */
    selfClosingElements?: string[] | undefined;
};
export type TransactionConfig = {
    /**
     * - to diff children or root
     */
    inner?: boolean | undefined;
    /**
     * - to execute scripts or not
     */
    executeScripts?: boolean | undefined;
    /**
     * - to override tasks
     */
    tasks?: Function[] | undefined;
    /**
     * - override parser options
     */
    parser?: ParserConfig | undefined;
    /**
     * - to disable mutation observer (enabled by default if available)
     */
    disableMutationObserver?: boolean | undefined;
};
export type GlobalConfig = {
    /**
     * - To set the runtime execution mode
     */
    NODE_ENV?: string | undefined;
    /**
     * - to collect performance metrics, defaults to false
     */
    collectMetrics?: boolean | undefined;
};
export type Config = TransactionConfig & GlobalConfig & {
    [key: string]: unknown;
};
export type Supplemental = {
    tags: {
        [key: string]: any;
    };
    attributes: {
        [key: string]: any;
    };
    children: {
        [key: string]: any;
    };
};
export type TransactionState = {
    measure: Function;
    svgElements: Set<VTree>;
    scriptsToExecute: Map<VTree, string | undefined>;
    oldTree?: VTree | undefined;
    isRendering?: boolean | undefined;
    isDirty?: boolean | undefined;
    mutationObserver?: MutationObserver | undefined;
    ownerDocument?: Document | undefined;
};
export type Internals = {
    VERSION?: string | undefined;
    globalConfig?: GlobalConfig | undefined;
    decodeEntities: Function;
    escape: Function;
    makeMeasure: Function;
    memory: any;
    Pool: any;
    process: any;
    PATCH_TYPE: {
        [key: string]: any;
    };
    parse: Function;
    createNode: Function;
    syncTree: Function;
    Transaction: unknown;
    defaultTasks: Function[];
    tasks: {
        [key: string]: any;
    };
    StateCache: StateCache;
    NodeCache: NodeCache;
    MiddlewareCache: MiddlewareCache;
    CreateTreeHookCache: CreateTreeHookCache;
    CreateNodeHookCache: CreateNodeHookCache;
    SyncTreeHookCache: SyncTreeHookCache;
    ReleaseHookCache: ReleaseHookCache;
    ParseHookCache: ParseHookCache;
};
