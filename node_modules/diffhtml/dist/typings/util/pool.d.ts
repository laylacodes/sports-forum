export default Pool;
export type VTree = import('./types').VTree;
declare namespace Pool {
    export { size };
    export { memory };
    /**
     * As the Pool size is configurable, this method can be used to fill up the
     * pool after making it larger.
     */
    export function fill(): void;
    /**
     * As the Pool size is configurable, this method can be used to fill up the
     * pool after making it larger.
     */
    export function fill(): void;
    /**
     *
     * Moves a VTree from the "free" state to the "allocated" state. If the pool
     * is empty, it creates a new object.
     *
     * @return {VTree}
     */
    export function get(): import("./types").VTree;
    /**
     *
     * Moves a VTree from the "free" state to the "allocated" state. If the pool
     * is empty, it creates a new object.
     *
     * @return {VTree}
     */
    export function get(): import("./types").VTree;
    /**
     * Moves a VTree from "allocated" state to "protected" state. This means that
     * the VTrees will persist between transactions.
     *
     * @param {VTree} vTree - Virtual Tree to protect
     */
    export function protect(vTree: import("./types").VTree): void;
    /**
     * Moves a VTree from "allocated" state to "protected" state. This means that
     * the VTrees will persist between transactions.
     *
     * @param {VTree} vTree - Virtual Tree to protect
     */
    export function protect(vTree: import("./types").VTree): void;
    /**
     * Moves a VTree from "protected" state to "allocated" state. They will be
     * brought back into "free" circulation during a GC.
     *
     * @param {VTree} vTree - Virtual Tree to unprotect and deallocate
     */
    export function unprotect(vTree: import("./types").VTree): void;
    /**
     * Moves a VTree from "protected" state to "allocated" state. They will be
     * brought back into "free" circulation during a GC.
     *
     * @param {VTree} vTree - Virtual Tree to unprotect and deallocate
     */
    export function unprotect(vTree: import("./types").VTree): void;
}
declare const size: number;
declare namespace memory {
    export { free };
    export { allocate as allocated };
    export { protect as protected };
}
declare const free: Set<any>;
declare const allocate: Set<any>;
declare const protect: Set<any>;
